// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (asm) { Runtime.setDynamicTop(DYNAMICTOP); }; if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; if (asm) { Runtime.setDynamicTop(DYNAMICTOP); } return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


function getSafeHeapType(bytes, isFloat) {
  switch (bytes) {
    case 1: return 'i8';
    case 2: return 'i16';
    case 4: return isFloat ? 'float' : 'i32';
    case 8: return 'double';
    default: assert(0);
  }
}


function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest);
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP);
  assert(DYNAMICTOP <= TOTAL_MEMORY);
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
  SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest);
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP);
  assert(DYNAMICTOP <= TOTAL_MEMORY);
  var type = getSafeHeapType(bytes, isFloat);
  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1);
  return ret;
}
function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
  return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
  var ret = value & mask;
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.');
  }
  return ret;
}

function segfault() {
  abort('segmentation fault');
}
function alignfault() {
  abort('alignment fault');
}
function ftfault() {
  abort('Function table mask error');
}

//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i8': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i16': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 2); break;
      case 'i32': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 4); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],SAFE_HEAP_STORE(((ptr)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((ptr)+(4))|0), ((tempI64[1])|0), 4)); break;
      case 'float': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 4); break;
      case 'double': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 8); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i8': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i16': return ((SAFE_HEAP_LOAD(((ptr)|0), 2, 0))|0);
      case 'i32': return ((SAFE_HEAP_LOAD(((ptr)|0), 4, 0))|0);
      case 'i64': return ((SAFE_HEAP_LOAD(((ptr)|0), 8, 0))|0);
      case 'float': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 4, 0)));
      case 'double': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 8, 0)));
      default: abort('invalid type for setValue: ' + type);
    }
  }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = ((SAFE_HEAP_LOAD((((ptr)+(i))|0), 1, 1))|0);
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = ((SAFE_HEAP_LOAD(((ptr++)|0), 1, 0))|0);
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = ((SAFE_HEAP_LOAD((((ptr)+(i*2))|0), 2, 0))|0);
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 2);
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 2);
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = ((SAFE_HEAP_LOAD((((ptr)+(i*4))|0), 4, 0))|0);
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 4);
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 4);
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    SAFE_HEAP_STORE((((buffer)+(i))|0), ((chr)|0), 1);
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    SAFE_HEAP_STORE(((buffer++)|0), ((array[i])|0), 1);
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    SAFE_HEAP_STORE(((buffer++)|0), ((str.charCodeAt(i))|0), 1);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) SAFE_HEAP_STORE(((buffer)|0), ((0)|0), 1);
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0, $1, $2) { drawCircle($0, $1, Pointer_stringify($2)) }];

function _emscripten_asm_const_3(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 15856;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_js_main_cpp() } }, { func: function() { __GLOBAL__sub_I_unity_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([20,6,0,0,114,10,0,0,20,6,0,0,174,10,0,0,60,6,0,0,158,10,0,0,16,0,0,0,0,0,0,0,60,6,0,0,172,13,0,0,8,0,0,0,0,0,0,0,60,6,0,0,186,13,0,0,8,0,0,0,0,0,0,0,60,6,0,0,202,13,0,0,8,0,0,0,0,0,0,0,20,6,0,0,219,13,0,0,60,6,0,0,237,13,0,0,208,0,0,0,0,0,0,0,60,6,0,0,7,14,0,0,208,0,0,0,0,0,0,0,60,6,0,0,34,14,0,0,208,0,0,0,0,0,0,0,60,6,0,0,52,14,0,0,208,0,0,0,0,0,0,0,60,6,0,0,80,14,0,0,208,0,0,0,0,0,0,0,60,6,0,0,99,14,0,0,208,0,0,0,0,0,0,0,60,6,0,0,124,14,0,0,208,0,0,0,0,0,0,0,20,6,0,0,90,29,0,0,20,6,0,0,101,29,0,0,20,6,0,0,25,35,0,0,20,6,0,0,56,35,0,0,20,6,0,0,87,35,0,0,20,6,0,0,118,35,0,0,20,6,0,0,149,35,0,0,20,6,0,0,180,35,0,0,20,6,0,0,211,35,0,0,20,6,0,0,242,35,0,0,20,6,0,0,17,36,0,0,20,6,0,0,48,36,0,0,20,6,0,0,79,36,0,0,20,6,0,0,110,36,0,0,20,6,0,0,141,36,0,0,100,6,0,0,160,36,0,0,0,0,0,0,1,0,0,0,96,1,0,0,0,0,0,0,20,6,0,0,223,36,0,0,100,6,0,0,5,37,0,0,0,0,0,0,1,0,0,0,96,1,0,0,0,0,0,0,100,6,0,0,68,37,0,0,0,0,0,0,1,0,0,0,96,1,0,0,0,0,0,0,60,6,0,0,132,37,0,0,168,1,0,0,0,0,0,0,20,6,0,0,145,37,0,0,60,6,0,0,158,37,0,0,168,1,0,0,0,0,0,0,60,6,0,0,174,37,0,0,176,1,0,0,0,0,0,0,20,6,0,0,191,37,0,0,60,6,0,0,204,37,0,0,208,1,0,0,0,0,0,0,60,6,0,0,237,37,0,0,216,1,0,0,0,0,0,0,60,6,0,0,51,38,0,0,216,1,0,0,0,0,0,0,60,6,0,0,15,38,0,0,248,1,0,0,0,0,0,0,60,6,0,0,85,38,0,0,216,1,0,0,0,0,0,0,248,5,0,0,125,38,0,0,248,5,0,0,127,38,0,0,248,5,0,0,129,38,0,0,248,5,0,0,131,38,0,0,248,5,0,0,133,38,0,0,248,5,0,0,135,38,0,0,248,5,0,0,137,38,0,0,248,5,0,0,139,38,0,0,248,5,0,0,141,38,0,0,248,5,0,0,167,44,0,0,248,5,0,0,143,38,0,0,248,5,0,0,145,38,0,0,248,5,0,0,147,38,0,0,60,6,0,0,149,38,0,0,232,1,0,0,0,0,0,0,60,6,0,0,186,38,0,0,232,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,136,136,60,6,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,24,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,16,0,0,0,7,0,0,0,8,0,0,0,3,0,0,0,96,2,0,0,40,2,0,0,40,2,0,0,128,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,160,3,0,0,148,5,0,0,0,0,0,0,96,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,112,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,128,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,192,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,144,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,160,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,40,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,56,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,72,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,208,0,0,0,3,0,0,0,57,0,0,0,58,0,0,0,0,0,0,0,216,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,0,0,0,0,152,1,0,0,66,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,176,1,0,0,69,0,0,0,70,0,0,0,71,0,0,0,0,0,0,0,192,1,0,0,69,0,0,0,72,0,0,0,71,0,0,0,0,0,0,0,24,2,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,232,1,0,0,73,0,0,0,78,0,0,0,75,0,0,0,76,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,0,0,0,0,144,2,0,0,73,0,0,0,83,0,0,0,75,0,0,0,76,0,0,0,79,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,160,2,0,0,73,0,0,0,87,0,0,0,75,0,0,0,76,0,0,0,79,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,98,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,7,0,0,172,7,0,0,172,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,94,0,0,0,223,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,94,0,0,0,215,55,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,102,102,48,48,48,48,0,35,48,48,97,97,48,48,0,35,48,48,48,48,102,102,0,100,114,97,119,67,105,114,99,108,101,40,36,48,44,32,36,49,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,50,41,41,0,0,105,110,105,116,83,116,97,114,116,0,99,112,112,95,112,114,111,103,114,101,115,115,0,109,111,117,115,101,95,104,111,118,101,114,0,55,98,50,83,104,97,112,101,0,99,104,97,114,95,116,114,97,105,116,115,58,58,99,111,112,121,32,111,118,101,114,108,97,112,112,101,100,32,114,97,110,103,101,0,49,51,77,111,117,115,101,67,97,108,108,98,97,99,107,0,49,53,98,50,81,117,101,114,121,67,97,108,108,98,97,99,107,0,70,79,85,78,68,32,37,112,32,32,37,115,10,0,98,97,115,105,99,95,115,116,114,105,110,103,40,99,111,110,115,116,32,99,104,97,114,42,41,32,100,101,116,101,99,116,101,100,32,110,117,108,108,112,116,114,0,118,101,99,116,111,114,0,118,101,99,116,111,114,91,93,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,105,105,0,118,105,0,118,105,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,49,49,98,50,69,100,103,101,83,104,97,112,101,0,49,51,98,50,67,105,114,99,108,101,83,104,97,112,101,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,50,51,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,48,32,60,32,115,105,122,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,65,108,108,111,99,97,116,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,71,101,116,67,104,105,108,100,69,100,103,101,0,82,97,121,67,97,115,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,83,101,116,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0,109,95,99,111,117,110,116,32,62,61,32,51,0,67,111,109,112,117,116,101,77,97,115,115,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,77,111,118,101,80,114,111,120,121,0,100,101,110,32,62,32,48,46,48,102,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,98,50,68,105,115,116,97,110,99,101,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,65,108,108,111,99,97,116,101,78,111,100,101,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,70,114,101,101,78,111,100,101,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,0,73,110,115,101,114,116,76,101,97,102,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,105,65,32,33,61,32,40,45,49,41,0,66,97,108,97,110,99,101,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,98,50,84,105,109,101,79,102,73,109,112,97,99,116,0,73,110,105,116,105,97,108,105,122,101,0,106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,0,70,114,101,101,0,40,105,110,116,56,42,41,112,32,43,32,98,108,111,99,107,83,105,122,101,32,60,61,32,40,105,110,116,56,42,41,99,104,117,110,107,45,62,98,108,111,99,107,115,32,124,124,32,40,105,110,116,56,42,41,99,104,117,110,107,45,62,98,108,111,99,107,115,32,43,32,98,50,95,99,104,117,110,107,83,105,122,101,32,60,61,32,40,105,110,116,56,42,41,112,0,102,111,117,110,100,0,109,95,105,110,100,101,120,32,61,61,32,48,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,120,83,116,97,99,107,69,110,116,114,105,101,115,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,98,50,66,111,100,121,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,109,95,73,32,62,32,48,46,48,102,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32,48,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,68,101,115,116,114,111,121,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,67,114,101,97,116,101,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,83,111,108,118,101,84,79,73,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,67,114,101,97,116,101,66,111,100,121,0,98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0,83,111,108,118,101,0,115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,65,100,100,84,121,112,101,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,57,98,50,67,111,110,116,97,99,116,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,92,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,104,0,71,101,116,70,97,116,65,65,66,66,0,71,101,116,85,115,101,114,68,97,116,97,0,109,95,99,111,117,110,116,32,62,32,48,0,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,92,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,80,111,112,0,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,92,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,65,100,118,97,110,99,101,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,92,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,65,100,100,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,112,99,45,62,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,37,115,10,0,67,111,109,112,97,114,97,116,111,114,32,100,111,101,115,32,110,111,116,32,105,110,100,117,99,101,32,97,32,115,116,114,105,99,116,32,119,101,97,107,32,111,114,100,101,114,105,110,103,0,69,118,97,108,117,97,116,101,0,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,0,48,32,60,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,32,51,0,71,101,116,77,101,116,114,105,99,0,71,101,116,87,105,116,110,101,115,115,80,111,105,110,116,115,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,92,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,71,101,116,86,101,114,116,101,120,0,71,101,116,83,101,97,114,99,104,68,105,114,101,99,116,105,111,110,0,71,101,116,67,108,111,115,101,115,116,80,111,105,110,116,0,99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0,82,101,97,100,67,97,99,104,101,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,99,111,117,110,116,0,46,47,46,46,47,66,111,120,50,68,45,109,97,115,116,101,114,47,66,111,120,50,68,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,98,50,70,105,110,100,73,110,99,105,100,101,110,116,69,100,103,101,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,32,40,0,41,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([102,111,114,32,98,108,111,99,107,32,105,110,32,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,32,91,0,32,91,93,0,93,0,32,99,111,109,112,108,101,120,0,40,0,44,32,0,32,38,0,32,38,38,0,32,0,32,105,109,97,103,105,110,97,114,121,0,58,58,42,0,38,38,0,111,98,106,99,95,111,98,106,101,99,116,60,0,42,0,105,100,0,38,0,111,98,106,99,112,114,111,116,111,0,60,0,62,0,32,118,101,99,116,111,114,91,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,0,58,58,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,115,116,100,58,58,0,126,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,32,62,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,116,114,117,101,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,37,97,102,0,37,97,0,37,76,97,76,0,38,61,0,61,0,97,108,105,103,110,111,102,32,40,0,99,111,110,115,116,95,99,97,115,116,60,0,62,40,0,44,0,41,40,0,100,101,108,101,116,101,91,93,32,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,100,101,108,101,116,101,32,0,46,42,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,91,93,32,0,41,32,0,33,61,0,33,0,110,111,101,120,99,101,112,116,32,40,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,45,62,0,41,32,63,32,40,0,41,32,58,32,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,37,0,37,61,0,62,62,0,62,62,61,0,115,116,97,116,105,99,95,99,97,115,116,60,0,115,105,122,101,111,102,32,40,0,115,105,122,101,111,102,46,46,46,40,0,116,121,112,101,105,100,40,0,116,104,114,111,119,0,116,104,114,111,119,32,0,102,112,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,67,58,92,108,105,98,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,118,111,105,100,0,98,111,111,108,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15319);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  var _cosf=Math_cos;

   
  Module["_i64Subtract"] = _i64Subtract;

  var _floorf=Math_floor;

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      SAFE_HEAP_STORE(((___cxa_find_matching_catch.buffer)|0), ((thrown)|0), 4);
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = ((SAFE_HEAP_LOAD(((thrown)|0), 4, 0))|0); // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = ((SAFE_HEAP_LOAD(((thrown)|0), 4, 0))|0); // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  function _free() {
  }
  Module["_free"] = _free;
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  var _sinf=Math_sin;

  var _sqrtf=Math_sqrt;

  function ___unlock() {}

  var _emscripten_asm_const_int=true;

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      SAFE_HEAP_STORE(((key)|0), ((PTHREAD_SPECIFIC_NEXT_KEY)|0), 4);
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function ___lock() {}

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) SAFE_HEAP_STORE(((Module['___errno_location']())|0), ((value)|0), 4);
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        SAFE_HEAP_STORE(((buf)|0), ((stat.dev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(4))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(8))|0), ((stat.ino)|0), 4);
        SAFE_HEAP_STORE((((buf)+(12))|0), ((stat.mode)|0), 4);
        SAFE_HEAP_STORE((((buf)+(16))|0), ((stat.nlink)|0), 4);
        SAFE_HEAP_STORE((((buf)+(20))|0), ((stat.uid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(24))|0), ((stat.gid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(28))|0), ((stat.rdev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(32))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(36))|0), ((stat.size)|0), 4);
        SAFE_HEAP_STORE((((buf)+(40))|0), ((4096)|0), 4);
        SAFE_HEAP_STORE((((buf)+(44))|0), ((stat.blocks)|0), 4);
        SAFE_HEAP_STORE((((buf)+(48))|0), (((stat.atime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(52))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(56))|0), (((stat.mtime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(60))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(64))|0), (((stat.ctime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(68))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(72))|0), ((stat.ino)|0), 4);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = ((SAFE_HEAP_LOAD((((SYSCALLS.varargs)-(4))|0), 4, 0))|0);
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          SAFE_HEAP_STORE(((argp)|0), ((0)|0), 4);
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  var _emscripten_resume=true;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_i64Add"] = _i64Add;

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        SAFE_HEAP_STORE(((ptr)|0), ((ret)|0), 4);
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      SAFE_HEAP_STORE(((result)|0), ((stream.position)|0), 4);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);
embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
init_emval();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddid(x) { Module["printErr"]("Invalid function pointer called with signature 'viddid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidi(x) { Module["printErr"]("Invalid function pointer called with signature 'vidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ddd(x) { Module["printErr"]("Invalid function pointer called with signature 'ddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddid(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viddid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidi(index,a1,a2,a3) {
  try {
    Module["dynCall_vidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ddd(index,a1,a2) {
  try {
    return Module["dynCall_ddd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "segfault": segfault, "alignfault": alignfault, "ftfault": ftfault, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viddid": nullFunc_viddid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_vidi": nullFunc_vidi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_vdd": nullFunc_vdd, "nullFunc_di": nullFunc_di, "nullFunc_dd": nullFunc_dd, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_ddd": nullFunc_ddd, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddid": invoke_viddid, "invoke_iiiiii": invoke_iiiiii, "invoke_vidi": invoke_vidi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_vdd": invoke_vdd, "invoke_di": invoke_di, "invoke_dd": invoke_dd, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_ddd": invoke_ddd, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "_cosf": _cosf, "_sqrtf": _sqrtf, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "_pthread_key_create": _pthread_key_create, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___gxx_personality_v0": ___gxx_personality_v0, "integerReadValueFromPointer": integerReadValueFromPointer, "extendError": extendError, "__embind_register_void": __embind_register_void, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "__embind_register_emval": __embind_register_emval, "throwBindingError": throwBindingError, "___setErrNo": ___setErrNo, "__emval_register": __emval_register, "_sbrk": _sbrk, "__embind_register_std_wstring": __embind_register_std_wstring, "_sinf": _sinf, "___cxa_end_catch": ___cxa_end_catch, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "_embind_repr": _embind_repr, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "_emscripten_memcpy_big": _emscripten_memcpy_big, "embind_init_charCodes": embind_init_charCodes, "readLatin1String": readLatin1String, "throwUnboundTypeError": throwUnboundTypeError, "_pthread_self": _pthread_self, "craftInvokerFunction": craftInvokerFunction, "__embind_register_integer": __embind_register_integer, "_pthread_once": _pthread_once, "__emval_decref": __emval_decref, "runDestructors": runDestructors, "_floorf": _floorf, "makeLegalFunctionName": makeLegalFunctionName, "___syscall54": ___syscall54, "___unlock": ___unlock, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_set_main_loop": _emscripten_set_main_loop, "getTypeName": getTypeName, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "registerType": registerType, "___cxa_throw": ___cxa_throw, "_emscripten_asm_const_3": _emscripten_asm_const_3, "___lock": ___lock, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "ensureOverloadTable": ensureOverloadTable, "count_emval_handles": count_emval_handles, "_time": _time, "requireFunction": requireFunction, "__embind_register_float": __embind_register_float, "new_": new_, "_atexit": _atexit, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___cxa_pure_virtual": ___cxa_pure_virtual, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "DYNAMICTOP": DYNAMICTOP, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var DYNAMICTOP=env.DYNAMICTOP|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var segfault=env.segfault;
  var alignfault=env.alignfault;
  var ftfault=env.ftfault;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viddid=env.nullFunc_viddid;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_vidi=env.nullFunc_vidi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_ddd=env.nullFunc_ddd;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddid=env.invoke_viddid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_vdd=env.invoke_vdd;
  var invoke_di=env.invoke_di;
  var invoke_dd=env.invoke_dd;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_ddd=env.invoke_ddd;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var _cosf=env._cosf;
  var _sqrtf=env._sqrtf;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var _pthread_key_create=env._pthread_key_create;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_emval=env.__embind_register_emval;
  var throwBindingError=env.throwBindingError;
  var ___setErrNo=env.___setErrNo;
  var __emval_register=env.__emval_register;
  var _sbrk=env._sbrk;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _sinf=env._sinf;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var _embind_repr=env._embind_repr;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var embind_init_charCodes=env.embind_init_charCodes;
  var readLatin1String=env.readLatin1String;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var _pthread_self=env._pthread_self;
  var craftInvokerFunction=env.craftInvokerFunction;
  var __embind_register_integer=env.__embind_register_integer;
  var _pthread_once=env._pthread_once;
  var __emval_decref=env.__emval_decref;
  var runDestructors=env.runDestructors;
  var _floorf=env._floorf;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var getTypeName=env.getTypeName;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var _emscripten_asm_const_3=env._emscripten_asm_const_3;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ensureOverloadTable=env.ensureOverloadTable;
  var count_emval_handles=env.count_emval_handles;
  var _time=env._time;
  var requireFunction=env.requireFunction;
  var __embind_register_float=env.__embind_register_float;
  var new_=env.new_;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i299 = 0, $$0$i$i$i$i348 = 0, $$0$i254 = 0, $$0$i309 = 0, $$0$i316 = 0, $$01$i = 0, $$01$i308 = 0, $$01$i315 = 0, $$019$i = 0, $$02$i = 0, $$02$i310 = 0, $$02$i317 = 0, $$03$i = 0, $$03$i174 = 0, $$03$i189 = 0, $$03$i200 = 0;
 var $$03$i211 = 0, $$03$i265 = 0, $$03$i297 = 0, $$03$i456 = 0, $$03$i486 = 0, $$06$i = 0, $$06$i248 = 0, $$06$i345 = 0, $$06$i426 = 0, $$07$i = 0, $$1 = 0, $$1$i = 0, $$1$i173 = 0, $$1$i188 = 0, $$1$i199 = 0, $$1$i210 = 0, $$1$i220 = 0, $$1$i241 = 0, $$1$i264 = 0, $$1$i338 = 0;
 var $$1$i363 = 0, $$1$i419 = 0, $$1$i455 = 0, $$1$i485 = 0, $$10 = 0, $$1019 = 0, $$110 = 0, $$12 = 0, $$12$i = 0, $$12$i172 = 0, $$12$i187 = 0, $$12$i198 = 0, $$12$i209 = 0, $$12$i219 = 0, $$12$i240 = 0, $$12$i263 = 0, $$12$i337 = 0, $$12$i418 = 0, $$12$i454 = 0, $$12$i484 = 0;
 var $$1221 = 0, $$13$i = 0, $$14 = 0, $$14$i = 0, $$1423 = 0, $$16 = 0, $$1625 = 0, $$17 = 0, $$1726 = 0, $$18 = 0, $$18$i = 0, $$1827 = 0, $$19 = 0, $$1928 = 0, $$2 = 0, $$2$i = 0, $$2$i243 = 0, $$2$i302 = 0, $$2$i340 = 0, $$2$i364 = 0;
 var $$2$i398 = 0, $$2$i421 = 0, $$20 = 0, $$2029 = 0, $$21 = 0, $$211 = 0, $$2130 = 0, $$22 = 0, $$221$i = 0, $$2231 = 0, $$23 = 0, $$23$i = 0, $$23$i242 = 0, $$23$i339 = 0, $$23$i420 = 0, $$2332 = 0, $$24$i = 0, $$25$i = 0, $$29$i = 0, $$3$i = 0;
 var $$3$i245 = 0, $$3$i342 = 0, $$3$i365 = 0, $$3$i423 = 0, $$310$i = 0, $$311$i = 0, $$34$i = 0, $$34$i244 = 0, $$34$i341 = 0, $$34$i422 = 0, $$35$i = 0, $$36$i = 0, $$4 = 0, $$4$i = 0, $$4$i247 = 0, $$4$i304 = 0, $$4$i344 = 0, $$4$i366 = 0, $$4$i425 = 0, $$411$i = 0;
 var $$413 = 0, $$45$i = 0, $$45$i246 = 0, $$45$i343 = 0, $$45$i424 = 0, $$46$i = 0, $$5 = 0, $$514 = 0, $$7 = 0, $$716 = 0, $$8 = 0, $$817 = 0, $$9 = 0, $$9$i = 0, $$918 = 0, $$first = 0, $$first$i = 0, $$ph518 = 0, $$ph520524 = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i372 = 0, $$pre$i$i$i$i436 = 0, $$pre$i$i$i$i466 = 0, $$pre$i$i$i87 = 0, $$pre$i$i212 = 0, $$pre$i$i222 = 0, $$pre$i$i250 = 0, $$pre$i$i289 = 0, $$pre$i$i305 = 0, $$pre$i$i312 = 0, $$pre$i$i319 = 0, $$pre$i$i352 = 0, $$pre$i$i393 = 0, $$pre$i$i400 = 0, $$pre$i116 = 0;
 var $$pre$i133 = 0, $$pre$i135 = 0, $$pre$i157 = 0, $$pre$i159 = 0, $$pre$i161 = 0, $$pre$i24$i = 0, $$pre$i48$i = 0, $$pre$phi511Z2D = 0, $$pre$phiZ2D = 0, $$pre507 = 0, $$pre509 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0;
 var $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
 var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
 var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
 var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
 var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
 var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
 var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
 var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
 var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
 var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
 var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
 var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
 var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0;
 var $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0;
 var $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i266 = 0, $__v$i$i$i346 = 0, $expr$i = 0, $expr$i221 = 0, $expr$i311 = 0, $expr$i318 = 0, $expr$i399 = 0, $expr_list$i = 0, $first$ = 0;
 var $first$$i = 0, $first$33 = 0, $first$34 = 0, $first$35 = 0, $first$36 = 0, $first$37 = 0, $first$38 = 0, $first$39 = 0, $first$40 = 0, $first$41 = 0, $first$42 = 0, $first$43 = 0, $first$44 = 0, $first$45 = 0, $first$46 = 0, $first$47 = 0, $first$48 = 0, $first$49 = 0, $first$50 = 0, $first$51 = 0;
 var $first$52 = 0, $first$53 = 0, $first$54 = 0, $first$55 = 0, $first$56 = 0, $first$57 = 0, $first$58 = 0, $first$59 = 0, $first$60 = 0, $first$61 = 0, $first$62 = 0, $first$63 = 0, $first$64 = 0, $first$65 = 0, $first$66 = 0, $first$67 = 0, $first$68 = 0, $first$69 = 0, $first$70 = 0, $first$71 = 0;
 var $has_expr_list$0$off0$i = 0, $has_expr_list$0$off0$i$lcssa = 0, $has_init$0$off0$i513 = 0, $init_list$i = 0, $k$0$i = 0, $k$0$i621 = 0, $k$0$i622 = 0, $k1$0$i618 = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index2 = 0, $name$i = 0, $op1 = 0, $op18 = 0, $op2 = 0, $op27 = 0, $op3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0;
 var $or$cond$i$i$i$i$i$i278 = 0, $or$cond$i$i$i$i$i$i379 = 0, $or$cond$i$i$i$i$i$i443 = 0, $or$cond$i$i$i$i$i$i473 = 0, $or$cond$i$i$i$i$i37$i = 0, $or$cond$i$i$i$i$i94 = 0, $or$cond$i347 = 0, $or$cond$i392 = 0, $or$cond13$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond5$i = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i273 = 0, $phitmp$i$i$i$i$i$i$i374 = 0, $phitmp$i$i$i$i$i$i$i438 = 0, $phitmp$i$i$i$i$i$i$i468 = 0;
 var $phitmp$i$i$i$i$i$i32$i = 0, $phitmp$i$i$i$i$i$i89 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i276 = 0, $phitmp$i2$i$i$i$i$i$i377 = 0, $phitmp$i2$i$i$i$i$i$i441 = 0, $phitmp$i2$i$i$i$i$i$i471 = 0, $phitmp$i2$i$i$i$i$i35$i = 0, $phitmp$i2$i$i$i$i$i92 = 0, $r$i = 0, $t$0 = 0, $t$0$i = 0, $t$0$i267 = 0, $t$0$i349567 = 0, $t$0$i390$lcssa = 0, $t$0$i390556 = 0, $t$1$i = 0, $t$1$i$lcssa = 0, $t$1$i350 = 0;
 var $t$2$i = 0, $t$2$i351 = 0, $t$3$i512 = 0, $tmp$i = 0, $tmp$i249 = 0, $tmp$i367 = 0, $tmp2$i = 0, $type$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 2240 | 0;
 $1 = sp + 2228 | 0;
 $2 = sp + 2216 | 0;
 $3 = sp + 2204 | 0;
 $4 = sp + 2192 | 0;
 $5 = sp + 2180 | 0;
 $expr$i399 = sp + 2168 | 0;
 $6 = sp + 2144 | 0;
 $7 = sp + 2128 | 0;
 $8 = sp + 2116 | 0;
 $9 = sp + 2104 | 0;
 $10 = sp + 2092 | 0;
 $11 = sp + 2080 | 0;
 $12 = sp + 2068 | 0;
 $tmp$i367 = sp + 2056 | 0;
 $__v$i$i$i346 = sp + 2036 | 0;
 $tmp2$i = sp + 2024 | 0;
 $13 = sp + 2e3 | 0;
 $14 = sp + 1988 | 0;
 $15 = sp + 1976 | 0;
 $16 = sp + 1964 | 0;
 $17 = sp + 1952 | 0;
 $18 = sp + 1940 | 0;
 $expr$i318 = sp + 1928 | 0;
 $19 = sp + 1904 | 0;
 $20 = sp + 1892 | 0;
 $21 = sp + 1880 | 0;
 $22 = sp + 1868 | 0;
 $23 = sp + 1856 | 0;
 $24 = sp + 1844 | 0;
 $expr$i311 = sp + 1832 | 0;
 $25 = sp + 1820 | 0;
 $name$i = sp + 1808 | 0;
 $26 = sp + 1796 | 0;
 $__v$i$i$i266 = sp + 1776 | 0;
 $init_list$i = sp + 1764 | 0;
 $27 = sp + 1752 | 0;
 $type$i = sp + 1740 | 0;
 $expr_list$i = sp + 1728 | 0;
 $28 = sp + 1716 | 0;
 $r$i = sp + 1704 | 0;
 $29 = sp + 1692 | 0;
 $30 = sp + 1680 | 0;
 $31 = sp + 1668 | 0;
 $32 = sp + 1656 | 0;
 $33 = sp + 1632 | 0;
 $34 = sp + 1620 | 0;
 $35 = sp + 1608 | 0;
 $36 = sp + 1596 | 0;
 $37 = sp + 1584 | 0;
 $tmp$i249 = sp + 1572 | 0;
 $expr$i221 = sp + 1560 | 0;
 $38 = sp + 1536 | 0;
 $39 = sp + 1524 | 0;
 $40 = sp + 1512 | 0;
 $41 = sp + 1500 | 0;
 $42 = sp + 1488 | 0;
 $43 = sp + 1476 | 0;
 $expr$i = sp + 1464 | 0;
 $44 = sp + 1440 | 0;
 $45 = sp + 1424 | 0;
 $46 = sp + 1412 | 0;
 $47 = sp + 1400 | 0;
 $48 = sp + 1388 | 0;
 $49 = sp + 1376 | 0;
 $50 = sp + 1352 | 0;
 $51 = sp + 1336 | 0;
 $52 = sp + 1324 | 0;
 $53 = sp + 1312 | 0;
 $54 = sp + 1288 | 0;
 $55 = sp + 1272 | 0;
 $56 = sp + 1260 | 0;
 $57 = sp + 1248 | 0;
 $58 = sp + 1224 | 0;
 $59 = sp + 1208 | 0;
 $60 = sp + 1196 | 0;
 $61 = sp + 1184 | 0;
 $62 = sp + 1160 | 0;
 $63 = sp + 1144 | 0;
 $64 = sp + 1132 | 0;
 $__v$i$i = sp + 1112 | 0;
 $65 = sp + 1088 | 0;
 $66 = sp + 1076 | 0;
 $67 = sp + 1064 | 0;
 $68 = sp + 1052 | 0;
 $__v$i$i$i = sp + 1032 | 0;
 $tmp$i = sp + 1020 | 0;
 $69 = sp + 1008 | 0;
 $70 = sp + 996 | 0;
 $71 = sp + 984 | 0;
 $72 = sp + 960 | 0;
 $73 = sp + 948 | 0;
 $74 = sp + 936 | 0;
 $75 = sp + 924 | 0;
 $76 = sp + 912 | 0;
 $77 = sp + 900 | 0;
 $78 = sp + 888 | 0;
 $79 = sp + 876 | 0;
 $80 = sp + 864 | 0;
 $81 = sp + 852 | 0;
 $82 = sp + 840 | 0;
 $83 = sp + 828 | 0;
 $84 = sp + 816 | 0;
 $85 = sp + 804 | 0;
 $86 = sp + 792 | 0;
 $87 = sp + 780 | 0;
 $88 = sp + 768 | 0;
 $89 = sp + 756 | 0;
 $90 = sp + 744 | 0;
 $91 = sp + 732 | 0;
 $92 = sp + 720 | 0;
 $93 = sp + 708 | 0;
 $94 = sp + 696 | 0;
 $95 = sp + 684 | 0;
 $96 = sp + 672 | 0;
 $op2 = sp + 660 | 0;
 $op1 = sp + 648 | 0;
 $97 = sp + 624 | 0;
 $98 = sp + 608 | 0;
 $99 = sp + 596 | 0;
 $100 = sp + 584 | 0;
 $101 = sp + 572 | 0;
 $102 = sp + 560 | 0;
 $103 = sp + 548 | 0;
 $104 = sp + 536 | 0;
 $105 = sp + 524 | 0;
 $106 = sp + 512 | 0;
 $107 = sp + 500 | 0;
 $108 = sp + 488 | 0;
 $109 = sp + 476 | 0;
 $110 = sp + 464 | 0;
 $111 = sp + 440 | 0;
 $112 = sp + 424 | 0;
 $113 = sp + 412 | 0;
 $114 = sp + 400 | 0;
 $115 = sp + 388 | 0;
 $116 = sp + 376 | 0;
 $117 = sp + 364 | 0;
 $118 = sp + 352 | 0;
 $119 = sp + 340 | 0;
 $120 = sp + 328 | 0;
 $121 = sp + 316 | 0;
 $122 = sp + 304 | 0;
 $123 = sp + 292 | 0;
 $124 = sp + 280 | 0;
 $125 = sp + 256 | 0;
 $126 = sp + 240 | 0;
 $127 = sp + 228 | 0;
 $128 = sp + 216 | 0;
 $129 = sp + 204 | 0;
 $op3 = sp + 192 | 0;
 $op27 = sp + 180 | 0;
 $op18 = sp + 168 | 0;
 $130 = sp + 144 | 0;
 $131 = sp + 132 | 0;
 $132 = sp + 120 | 0;
 $133 = sp + 108 | 0;
 $134 = sp + 96 | 0;
 $135 = sp + 84 | 0;
 $136 = sp + 72 | 0;
 $137 = sp + 60 | 0;
 $138 = sp + 48 | 0;
 $139 = sp + 36 | 0;
 $140 = sp + 24 | 0;
 $141 = sp;
 $142 = $last;
 $143 = $first;
 $144 = $142 - $143 | 0;
 $145 = ($144 | 0) > 1;
 L1 : do {
  if ($145) {
   $146 = ($144 | 0) > 3;
   if ($146) {
    $147 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
    $148 = $147 << 24 >> 24 == 103;
    if ($148) {
     $149 = $first + 1 | 0;
     $150 = SAFE_HEAP_LOAD($149 >> 0 | 0, 1, 0) | 0 | 0;
     $151 = $150 << 24 >> 24 == 115;
     $152 = $first + 2 | 0;
     $$first = $151 ? $152 : $first;
     $parsed_gs$0$off0 = $151;
     $t$0 = $$first;
    } else {
     $parsed_gs$0$off0 = 0;
     $t$0 = $first;
    }
   } else {
    $parsed_gs$0$off0 = 0;
    $t$0 = $first;
   }
   $153 = SAFE_HEAP_LOAD($t$0 >> 0 | 0, 1, 0) | 0 | 0;
   $154 = $153 << 24 >> 24;
   L7 : do {
    switch ($154 | 0) {
    case 76:
     {
      $155 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $$0 = $155;
      break L1;
      break;
     }
    case 84:
     {
      $156 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $$0 = $156;
      break L1;
      break;
     }
    case 102:
     {
      $157 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $$0 = $157;
      break L1;
      break;
     }
    case 97:
     {
      $158 = $t$0 + 1 | 0;
      $159 = SAFE_HEAP_LOAD($158 >> 0 | 0, 1, 0) | 0 | 0;
      $160 = $159 << 24 >> 24;
      switch ($160 | 0) {
      case 97:
       {
        $161 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($74, 10336, 2);
        __THREW__ = 0;
        $162 = invoke_iiiii(244, $161 | 0, $last | 0, $74 | 0, $db | 0) | 0;
        $163 = __THREW__;
        __THREW__ = 0;
        $164 = $163 & 1;
        if ($164) {
         $166 = ___cxa_find_matching_catch() | 0;
         $167 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
         $$23 = $166;
         $$2332 = $167;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
         $165 = ($162 | 0) == ($161 | 0);
         $first$ = $165 ? $first : $162;
         $$0 = $first$;
         break L1;
        }
        break;
       }
      case 100:
       {
        $168 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($75, 10357, 1);
        __THREW__ = 0;
        $169 = invoke_iiiii(245, $168 | 0, $last | 0, $75 | 0, $db | 0) | 0;
        $170 = __THREW__;
        __THREW__ = 0;
        $171 = $170 & 1;
        if ($171) {
         $173 = ___cxa_find_matching_catch() | 0;
         $174 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
         $$23 = $173;
         $$2332 = $174;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
         $172 = ($169 | 0) == ($168 | 0);
         $first$33 = $172 ? $first : $169;
         $$0 = $first$33;
         break L1;
        }
        break;
       }
      case 110:
       {
        $175 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($76, 10357, 1);
        __THREW__ = 0;
        $176 = invoke_iiiii(244, $175 | 0, $last | 0, $76 | 0, $db | 0) | 0;
        $177 = __THREW__;
        __THREW__ = 0;
        $178 = $177 & 1;
        if ($178) {
         $180 = ___cxa_find_matching_catch() | 0;
         $181 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
         $$23 = $180;
         $$2332 = $181;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
         $179 = ($176 | 0) == ($175 | 0);
         $first$34 = $179 ? $first : $176;
         $$0 = $first$34;
         break L1;
        }
        break;
       }
      case 78:
       {
        $182 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($77, 11482, 2);
        __THREW__ = 0;
        $183 = invoke_iiiii(244, $182 | 0, $last | 0, $77 | 0, $db | 0) | 0;
        $184 = __THREW__;
        __THREW__ = 0;
        $185 = $184 & 1;
        if ($185) {
         $187 = ___cxa_find_matching_catch() | 0;
         $188 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
         $$23 = $187;
         $$2332 = $188;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
         $186 = ($183 | 0) == ($182 | 0);
         $first$35 = $186 ? $first : $183;
         $$0 = $first$35;
         break L1;
        }
        break;
       }
      case 83:
       {
        $189 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($78, 11485, 1);
        __THREW__ = 0;
        $190 = invoke_iiiii(244, $189 | 0, $last | 0, $78 | 0, $db | 0) | 0;
        $191 = __THREW__;
        __THREW__ = 0;
        $192 = $191 & 1;
        if ($192) {
         $194 = ___cxa_find_matching_catch() | 0;
         $195 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
         $$23 = $194;
         $$2332 = $195;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
         $193 = ($190 | 0) == ($189 | 0);
         $first$36 = $193 ? $first : $190;
         $$0 = $first$36;
         break L1;
        }
        break;
       }
      case 116:
       {
        $196 = ($144 | 0) > 2;
        L34 : do {
         if ($196) {
          $197 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $198 = $197 << 24 >> 24 == 97;
          if ($198) {
           $199 = $first + 1 | 0;
           $200 = SAFE_HEAP_LOAD($199 >> 0 | 0, 1, 0) | 0 | 0;
           $201 = $200 << 24 >> 24 == 116;
           if ($201) {
            $202 = $first + 2 | 0;
            $203 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($202, $last, $db) | 0;
            $204 = ($203 | 0) == ($202 | 0);
            if ($204) {
             $$03$i486 = $first;
            } else {
             $205 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $206 = $db + 4 | 0;
             $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
             $208 = ($205 | 0) == ($207 | 0);
             if ($208) {
              $$03$i486 = $first;
             } else {
              $209 = $207 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2, $209);
              __THREW__ = 0;
              $210 = invoke_iiii(227, $2 | 0, 0, 11487 | 0) | 0;
              $211 = __THREW__;
              __THREW__ = 0;
              $212 = $211 & 1;
              do {
               if ($212) {
                $266 = ___cxa_find_matching_catch() | 0;
                $267 = tempRet0;
                $$1$i485 = $267;
                $$12$i484 = $266;
               } else {
                {}
                SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($210 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($210 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($210 | 0, 0 | 0, 4);
                $213 = $210 + 4 | 0;
                SAFE_HEAP_STORE($213 | 0, 0 | 0, 4);
                $214 = $210 + 8 | 0;
                SAFE_HEAP_STORE($214 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $215 = invoke_iii(228, $1 | 0, 10212 | 0) | 0;
                $216 = __THREW__;
                __THREW__ = 0;
                $217 = $216 & 1;
                if ($217) {
                 $268 = ___cxa_find_matching_catch() | 0;
                 $269 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
                 $$1$i485 = $269;
                 $$12$i484 = $268;
                 break;
                }
                {}
                SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($215 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($215 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($215 | 0, 0 | 0, 4);
                $218 = $215 + 4 | 0;
                SAFE_HEAP_STORE($218 | 0, 0 | 0, 4);
                $219 = $215 + 8 | 0;
                SAFE_HEAP_STORE($219 | 0, 0 | 0, 4);
                $220 = SAFE_HEAP_LOAD($209 >> 0 | 0, 1, 0) | 0 | 0;
                $221 = $220 & 1;
                $222 = $221 << 24 >> 24 == 0;
                do {
                 if ($222) {
                  $223 = $209 + 1 | 0;
                  SAFE_HEAP_STORE($223 >> 0 | 0, 0 | 0, 1);
                  SAFE_HEAP_STORE($209 >> 0 | 0, 0 | 0, 1);
                 } else {
                  $224 = $207 + -16 | 0;
                  $225 = SAFE_HEAP_LOAD($224 | 0, 4, 0) | 0 | 0;
                  SAFE_HEAP_STORE($225 >> 0 | 0, 0 | 0, 1);
                  $226 = $207 + -20 | 0;
                  SAFE_HEAP_STORE($226 | 0, 0 | 0, 4);
                  $$pre$i$i$i$i466 = SAFE_HEAP_LOAD($209 >> 0 | 0, 1, 0) | 0 | 0;
                  $227 = $$pre$i$i$i$i466 & 1;
                  $228 = $227 << 24 >> 24 == 0;
                  if ($228) {
                   $233 = $$pre$i$i$i$i466;
                   $242 = 10;
                  } else {
                   $229 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
                   $230 = $229 & -2;
                   $phitmp$i$i$i$i$i$i$i468 = $230 + -1 | 0;
                   $231 = $229 & 255;
                   $233 = $231;
                   $242 = $phitmp$i$i$i$i$i$i$i468;
                  }
                  $232 = $233 & 1;
                  $234 = $232 << 24 >> 24 == 0;
                  if ($234) {
                   $235 = $233 & 255;
                   $236 = $235 >>> 1;
                   $237 = ($233 & 255) < 22;
                   if ($237) {
                    $2312 = 1;
                    $240 = 10;
                    $261 = $236;
                   } else {
                    $238 = $236 + 16 | 0;
                    $239 = $238 & 240;
                    $phitmp$i2$i$i$i$i$i$i471 = $239 + -1 | 0;
                    $2312 = 1;
                    $240 = $phitmp$i2$i$i$i$i$i$i471;
                    $261 = $236;
                   }
                  } else {
                   $2312 = 0;
                   $240 = 10;
                   $261 = 0;
                  }
                  $241 = ($240 | 0) == ($242 | 0);
                  if (!$241) {
                   $243 = ($240 | 0) == 10;
                   if ($243) {
                    $248 = $209 + 1 | 0;
                    $249 = SAFE_HEAP_LOAD($224 | 0, 4, 0) | 0 | 0;
                    if ($2312) {
                     $250 = $233 & 255;
                     $251 = $250 >>> 1;
                     $252 = $251 + 1 | 0;
                     _memcpy($248 | 0, $249 | 0, $252 | 0) | 0;
                     _free($249);
                    } else {
                     $257 = SAFE_HEAP_LOAD($249 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($248 >> 0 | 0, $257 | 0, 1);
                     _free($249);
                    }
                    $262 = $261 << 1;
                    $263 = $262 & 255;
                    SAFE_HEAP_STORE($209 >> 0 | 0, $263 | 0, 1);
                    break;
                   }
                   $244 = $240 >>> 0 <= $242 >>> 0;
                   $245 = $240 + 1 | 0;
                   $246 = _malloc($245) | 0;
                   $247 = ($246 | 0) == (0 | 0);
                   $or$cond$i$i$i$i$i$i473 = $244 & $247;
                   if ($or$cond$i$i$i$i$i$i473) {
                    break;
                   }
                   if ($2312) {
                    $253 = $209 + 1 | 0;
                    $254 = $233 & 255;
                    $255 = $254 >>> 1;
                    $256 = $255 + 1 | 0;
                    _memcpy($246 | 0, $253 | 0, $256 | 0) | 0;
                   } else {
                    $258 = SAFE_HEAP_LOAD($224 | 0, 4, 0) | 0 | 0;
                    $259 = SAFE_HEAP_LOAD($258 >> 0 | 0, 1, 0) | 0 | 0;
                    SAFE_HEAP_STORE($246 >> 0 | 0, $259 | 0, 1);
                    _free($258);
                   }
                   $260 = $245 | 1;
                   SAFE_HEAP_STORE($209 | 0, $260 | 0, 4);
                   SAFE_HEAP_STORE($226 | 0, $261 | 0, 4);
                   SAFE_HEAP_STORE($224 | 0, $246 | 0, 4);
                  }
                 }
                } while (0);
                {}
                SAFE_HEAP_STORE($209 | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($209 + 4 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($209 + 8 | 0, SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
                $264 = $0 + 4 | 0;
                SAFE_HEAP_STORE($264 | 0, 0 | 0, 4);
                $265 = $0 + 8 | 0;
                SAFE_HEAP_STORE($265 | 0, 0 | 0, 4);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
                $$03$i486 = $203;
                break L34;
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              ___resumeException($$12$i484 | 0);
             }
            }
           } else {
            $$03$i486 = $first;
           }
          } else {
           $$03$i486 = $first;
          }
         } else {
          $$03$i486 = $first;
         }
        } while (0);
        $$0 = $$03$i486;
        break L1;
        break;
       }
      case 122:
       {
        $270 = ($144 | 0) > 2;
        L73 : do {
         if ($270) {
          $271 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $272 = $271 << 24 >> 24 == 97;
          if ($272) {
           $273 = $first + 1 | 0;
           $274 = SAFE_HEAP_LOAD($273 >> 0 | 0, 1, 0) | 0 | 0;
           $275 = $274 << 24 >> 24 == 122;
           if ($275) {
            $276 = $first + 2 | 0;
            $277 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($276, $last, $db) | 0;
            $278 = ($277 | 0) == ($276 | 0);
            if ($278) {
             $$03$i456 = $first;
            } else {
             $279 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $280 = $db + 4 | 0;
             $281 = SAFE_HEAP_LOAD($280 | 0, 4, 0) | 0 | 0;
             $282 = ($279 | 0) == ($281 | 0);
             if ($282) {
              $$03$i456 = $first;
             } else {
              $283 = $281 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5, $283);
              __THREW__ = 0;
              $284 = invoke_iiii(227, $5 | 0, 0, 11487 | 0) | 0;
              $285 = __THREW__;
              __THREW__ = 0;
              $286 = $285 & 1;
              do {
               if ($286) {
                $340 = ___cxa_find_matching_catch() | 0;
                $341 = tempRet0;
                $$1$i455 = $341;
                $$12$i454 = $340;
               } else {
                {}
                SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($284 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($284 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($284 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($284 | 0, 0 | 0, 4);
                $287 = $284 + 4 | 0;
                SAFE_HEAP_STORE($287 | 0, 0 | 0, 4);
                $288 = $284 + 8 | 0;
                SAFE_HEAP_STORE($288 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $289 = invoke_iii(228, $4 | 0, 10212 | 0) | 0;
                $290 = __THREW__;
                __THREW__ = 0;
                $291 = $290 & 1;
                if ($291) {
                 $342 = ___cxa_find_matching_catch() | 0;
                 $343 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                 $$1$i455 = $343;
                 $$12$i454 = $342;
                 break;
                }
                {}
                SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($289 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($289 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($289 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($289 | 0, 0 | 0, 4);
                $292 = $289 + 4 | 0;
                SAFE_HEAP_STORE($292 | 0, 0 | 0, 4);
                $293 = $289 + 8 | 0;
                SAFE_HEAP_STORE($293 | 0, 0 | 0, 4);
                $294 = SAFE_HEAP_LOAD($283 >> 0 | 0, 1, 0) | 0 | 0;
                $295 = $294 & 1;
                $296 = $295 << 24 >> 24 == 0;
                do {
                 if ($296) {
                  $297 = $283 + 1 | 0;
                  SAFE_HEAP_STORE($297 >> 0 | 0, 0 | 0, 1);
                  SAFE_HEAP_STORE($283 >> 0 | 0, 0 | 0, 1);
                 } else {
                  $298 = $281 + -16 | 0;
                  $299 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
                  SAFE_HEAP_STORE($299 >> 0 | 0, 0 | 0, 1);
                  $300 = $281 + -20 | 0;
                  SAFE_HEAP_STORE($300 | 0, 0 | 0, 4);
                  $$pre$i$i$i$i436 = SAFE_HEAP_LOAD($283 >> 0 | 0, 1, 0) | 0 | 0;
                  $301 = $$pre$i$i$i$i436 & 1;
                  $302 = $301 << 24 >> 24 == 0;
                  if ($302) {
                   $307 = $$pre$i$i$i$i436;
                   $316 = 10;
                  } else {
                   $303 = SAFE_HEAP_LOAD($283 | 0, 4, 0) | 0 | 0;
                   $304 = $303 & -2;
                   $phitmp$i$i$i$i$i$i$i438 = $304 + -1 | 0;
                   $305 = $303 & 255;
                   $307 = $305;
                   $316 = $phitmp$i$i$i$i$i$i$i438;
                  }
                  $306 = $307 & 1;
                  $308 = $306 << 24 >> 24 == 0;
                  if ($308) {
                   $309 = $307 & 255;
                   $310 = $309 >>> 1;
                   $311 = ($307 & 255) < 22;
                   if ($311) {
                    $2313 = 1;
                    $314 = 10;
                    $335 = $310;
                   } else {
                    $312 = $310 + 16 | 0;
                    $313 = $312 & 240;
                    $phitmp$i2$i$i$i$i$i$i441 = $313 + -1 | 0;
                    $2313 = 1;
                    $314 = $phitmp$i2$i$i$i$i$i$i441;
                    $335 = $310;
                   }
                  } else {
                   $2313 = 0;
                   $314 = 10;
                   $335 = 0;
                  }
                  $315 = ($314 | 0) == ($316 | 0);
                  if (!$315) {
                   $317 = ($314 | 0) == 10;
                   if ($317) {
                    $322 = $283 + 1 | 0;
                    $323 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
                    if ($2313) {
                     $324 = $307 & 255;
                     $325 = $324 >>> 1;
                     $326 = $325 + 1 | 0;
                     _memcpy($322 | 0, $323 | 0, $326 | 0) | 0;
                     _free($323);
                    } else {
                     $331 = SAFE_HEAP_LOAD($323 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($322 >> 0 | 0, $331 | 0, 1);
                     _free($323);
                    }
                    $336 = $335 << 1;
                    $337 = $336 & 255;
                    SAFE_HEAP_STORE($283 >> 0 | 0, $337 | 0, 1);
                    break;
                   }
                   $318 = $314 >>> 0 <= $316 >>> 0;
                   $319 = $314 + 1 | 0;
                   $320 = _malloc($319) | 0;
                   $321 = ($320 | 0) == (0 | 0);
                   $or$cond$i$i$i$i$i$i443 = $318 & $321;
                   if ($or$cond$i$i$i$i$i$i443) {
                    break;
                   }
                   if ($2313) {
                    $327 = $283 + 1 | 0;
                    $328 = $307 & 255;
                    $329 = $328 >>> 1;
                    $330 = $329 + 1 | 0;
                    _memcpy($320 | 0, $327 | 0, $330 | 0) | 0;
                   } else {
                    $332 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
                    $333 = SAFE_HEAP_LOAD($332 >> 0 | 0, 1, 0) | 0 | 0;
                    SAFE_HEAP_STORE($320 >> 0 | 0, $333 | 0, 1);
                    _free($332);
                   }
                   $334 = $319 | 1;
                   SAFE_HEAP_STORE($283 | 0, $334 | 0, 4);
                   SAFE_HEAP_STORE($300 | 0, $335 | 0, 4);
                   SAFE_HEAP_STORE($298 | 0, $320 | 0, 4);
                  }
                 }
                } while (0);
                {}
                SAFE_HEAP_STORE($283 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($283 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($283 + 8 | 0, SAFE_HEAP_LOAD($3 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
                $338 = $3 + 4 | 0;
                SAFE_HEAP_STORE($338 | 0, 0 | 0, 4);
                $339 = $3 + 8 | 0;
                SAFE_HEAP_STORE($339 | 0, 0 | 0, 4);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
                $$03$i456 = $277;
                break L73;
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
              ___resumeException($$12$i454 | 0);
             }
            }
           } else {
            $$03$i456 = $first;
           }
          } else {
           $$03$i456 = $first;
          }
         } else {
          $$03$i456 = $first;
         }
        } while (0);
        $$0 = $$03$i456;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 99:
     {
      $344 = $t$0 + 1 | 0;
      $345 = SAFE_HEAP_LOAD($344 >> 0 | 0, 1, 0) | 0 | 0;
      $346 = $345 << 24 >> 24;
      switch ($346 | 0) {
      case 99:
       {
        $347 = ($144 | 0) > 2;
        L114 : do {
         if ($347) {
          $348 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $349 = $348 << 24 >> 24 == 99;
          if ($349) {
           $350 = $first + 1 | 0;
           $351 = SAFE_HEAP_LOAD($350 >> 0 | 0, 1, 0) | 0 | 0;
           $352 = $351 << 24 >> 24 == 99;
           if ($352) {
            $353 = $first + 2 | 0;
            $354 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($353, $last, $db) | 0;
            $355 = ($354 | 0) == ($353 | 0);
            if ($355) {
             $$06$i426 = $first;
            } else {
             $356 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($354, $last, $db) | 0;
             $357 = ($356 | 0) == ($354 | 0);
             if ($357) {
              $$06$i426 = $first;
             } else {
              $358 = $db + 4 | 0;
              $359 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
              $360 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $361 = $359;
              $362 = $360;
              $363 = $361 - $362 | 0;
              $364 = ($363 | 0) / 24 & -1;
              $365 = $364 >>> 0 < 2;
              if ($365) {
               $$06$i426 = $first;
              } else {
               $366 = $359 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i399, $366);
               $367 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
               $368 = $367 + -24 | 0;
               $370 = $367;
               while (1) {
                $369 = $370 + -24 | 0;
                SAFE_HEAP_STORE($358 | 0, $369 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($369);
                $$pre$i$i400 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
                $371 = ($$pre$i$i400 | 0) == ($368 | 0);
                if ($371) {
                 break;
                } else {
                 $370 = $$pre$i$i400;
                }
               }
               $372 = $367 + -48 | 0;
               __THREW__ = 0;
               invoke_vii(232, $11 | 0, $372 | 0);
               $373 = __THREW__;
               __THREW__ = 0;
               $374 = $373 & 1;
               if ($374) {
                $407 = ___cxa_find_matching_catch() | 0;
                $408 = tempRet0;
                $$4$i425 = $408;
                $$45$i424 = $407;
               } else {
                __THREW__ = 0;
                $375 = invoke_iiii(227, $11 | 0, 0, 11497 | 0) | 0;
                $376 = __THREW__;
                __THREW__ = 0;
                $377 = $376 & 1;
                if ($377) {
                 $409 = ___cxa_find_matching_catch() | 0;
                 $410 = tempRet0;
                 $$3$i423 = $410;
                 $$34$i422 = $409;
                } else {
                 {}
                 SAFE_HEAP_STORE($10 | 0, SAFE_HEAP_LOAD($375 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($10 + 4 | 0, SAFE_HEAP_LOAD($375 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($10 + 8 | 0, SAFE_HEAP_LOAD($375 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($375 | 0, 0 | 0, 4);
                 $378 = $375 + 4 | 0;
                 SAFE_HEAP_STORE($378 | 0, 0 | 0, 4);
                 $379 = $375 + 8 | 0;
                 SAFE_HEAP_STORE($379 | 0, 0 | 0, 4);
                 __THREW__ = 0;
                 $380 = invoke_iii(228, $10 | 0, 11509 | 0) | 0;
                 $381 = __THREW__;
                 __THREW__ = 0;
                 $382 = $381 & 1;
                 if ($382) {
                  $411 = ___cxa_find_matching_catch() | 0;
                  $412 = tempRet0;
                  $$2$i421 = $412;
                  $$23$i420 = $411;
                 } else {
                  {}
                  SAFE_HEAP_STORE($9 | 0, SAFE_HEAP_LOAD($380 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($9 + 4 | 0, SAFE_HEAP_LOAD($380 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($9 + 8 | 0, SAFE_HEAP_LOAD($380 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($380 | 0, 0 | 0, 4);
                  $383 = $380 + 4 | 0;
                  SAFE_HEAP_STORE($383 | 0, 0 | 0, 4);
                  $384 = $380 + 8 | 0;
                  SAFE_HEAP_STORE($384 | 0, 0 | 0, 4);
                  $385 = SAFE_HEAP_LOAD($expr$i399 >> 0 | 0, 1, 0) | 0 | 0;
                  $386 = $385 & 1;
                  $387 = $386 << 24 >> 24 == 0;
                  $388 = $expr$i399 + 8 | 0;
                  $389 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
                  $390 = $expr$i399 + 1 | 0;
                  $391 = $387 ? $390 : $389;
                  $392 = $expr$i399 + 4 | 0;
                  $393 = SAFE_HEAP_LOAD($392 | 0, 4, 0) | 0 | 0;
                  $394 = $385 & 255;
                  $395 = $394 >>> 1;
                  $396 = $387 ? $395 : $393;
                  __THREW__ = 0;
                  $397 = invoke_iiii(222, $9 | 0, $391 | 0, $396 | 0) | 0;
                  $398 = __THREW__;
                  __THREW__ = 0;
                  $399 = $398 & 1;
                  do {
                   if ($399) {
                    $413 = ___cxa_find_matching_catch() | 0;
                    $414 = tempRet0;
                    $$1$i419 = $414;
                    $$12$i418 = $413;
                   } else {
                    {}
                    SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($397 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($397 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($397 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($397 | 0, 0 | 0, 4);
                    $400 = $397 + 4 | 0;
                    SAFE_HEAP_STORE($400 | 0, 0 | 0, 4);
                    $401 = $397 + 8 | 0;
                    SAFE_HEAP_STORE($401 | 0, 0 | 0, 4);
                    __THREW__ = 0;
                    $402 = invoke_iii(228, $8 | 0, 10212 | 0) | 0;
                    $403 = __THREW__;
                    __THREW__ = 0;
                    $404 = $403 & 1;
                    if ($404) {
                     $415 = ___cxa_find_matching_catch() | 0;
                     $416 = tempRet0;
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                     $$1$i419 = $416;
                     $$12$i418 = $415;
                     break;
                    } else {
                     {}
                     SAFE_HEAP_STORE($7 | 0, SAFE_HEAP_LOAD($402 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($7 + 4 | 0, SAFE_HEAP_LOAD($402 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($7 + 8 | 0, SAFE_HEAP_LOAD($402 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($402 | 0, 0 | 0, 4);
                     $405 = $402 + 4 | 0;
                     SAFE_HEAP_STORE($405 | 0, 0 | 0, 4);
                     $406 = $402 + 8 | 0;
                     SAFE_HEAP_STORE($406 | 0, 0 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6, $7);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($372, $6);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i399);
                     $$06$i426 = $356;
                     break L114;
                    }
                   }
                  } while (0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                  $$2$i421 = $$1$i419;
                  $$23$i420 = $$12$i418;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                 $$3$i423 = $$2$i421;
                 $$34$i422 = $$23$i420;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
                $$4$i425 = $$3$i423;
                $$45$i424 = $$34$i422;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i399);
               ___resumeException($$45$i424 | 0);
              }
             }
            }
           } else {
            $$06$i426 = $first;
           }
          } else {
           $$06$i426 = $first;
          }
         } else {
          $$06$i426 = $first;
         }
        } while (0);
        $$0 = $$06$i426;
        break L1;
        break;
       }
      case 108:
       {
        L145 : do {
         if ($146) {
          $417 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $418 = $417 << 24 >> 24 == 99;
          if ($418) {
           $419 = $first + 1 | 0;
           $420 = SAFE_HEAP_LOAD($419 >> 0 | 0, 1, 0) | 0 | 0;
           $421 = $420 << 24 >> 24 == 108;
           if ($421) {
            $422 = $first + 2 | 0;
            $423 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($422, $last, $db) | 0;
            $424 = ($423 | 0) == ($422 | 0);
            $425 = ($423 | 0) == ($last | 0);
            $or$cond5$i = $424 | $425;
            if ($or$cond5$i) {
             $$2$i398 = $first;
            } else {
             $426 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $427 = $db + 4 | 0;
             $428 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
             $429 = ($426 | 0) == ($428 | 0);
             if ($429) {
              $$2$i398 = $first;
             } else {
              $430 = $428 + -24 | 0;
              $431 = $428 + -12 | 0;
              $432 = SAFE_HEAP_LOAD($431 >> 0 | 0, 1, 0) | 0 | 0;
              $433 = $432 & 1;
              $434 = $433 << 24 >> 24 == 0;
              $435 = $428 + -4 | 0;
              $436 = SAFE_HEAP_LOAD($435 | 0, 4, 0) | 0 | 0;
              $437 = $431 + 1 | 0;
              $438 = $434 ? $437 : $436;
              $439 = $428 + -8 | 0;
              $440 = SAFE_HEAP_LOAD($439 | 0, 4, 0) | 0 | 0;
              $441 = $432 & 255;
              $442 = $441 >>> 1;
              $443 = $434 ? $442 : $440;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($430, $438, $443) | 0;
              $444 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
              $445 = $12 + 4 | 0;
              SAFE_HEAP_STORE($445 | 0, 0 | 0, 4);
              $446 = $12 + 8 | 0;
              SAFE_HEAP_STORE($446 | 0, 0 | 0, 4);
              $447 = $444 + -12 | 0;
              $448 = SAFE_HEAP_LOAD($447 >> 0 | 0, 1, 0) | 0 | 0;
              $449 = $448 & 1;
              $450 = $449 << 24 >> 24 == 0;
              do {
               if ($450) {
                $451 = $447 + 1 | 0;
                SAFE_HEAP_STORE($451 >> 0 | 0, 0 | 0, 1);
                SAFE_HEAP_STORE($447 >> 0 | 0, 0 | 0, 1);
               } else {
                $452 = $444 + -4 | 0;
                $453 = SAFE_HEAP_LOAD($452 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($453 >> 0 | 0, 0 | 0, 1);
                $454 = $444 + -8 | 0;
                SAFE_HEAP_STORE($454 | 0, 0 | 0, 4);
                $$pre$i$i$i$i372 = SAFE_HEAP_LOAD($447 >> 0 | 0, 1, 0) | 0 | 0;
                $455 = $$pre$i$i$i$i372 & 1;
                $456 = $455 << 24 >> 24 == 0;
                if ($456) {
                 $461 = $$pre$i$i$i$i372;
                 $470 = 10;
                } else {
                 $457 = SAFE_HEAP_LOAD($447 | 0, 4, 0) | 0 | 0;
                 $458 = $457 & -2;
                 $phitmp$i$i$i$i$i$i$i374 = $458 + -1 | 0;
                 $459 = $457 & 255;
                 $461 = $459;
                 $470 = $phitmp$i$i$i$i$i$i$i374;
                }
                $460 = $461 & 1;
                $462 = $460 << 24 >> 24 == 0;
                if ($462) {
                 $463 = $461 & 255;
                 $464 = $463 >>> 1;
                 $465 = ($461 & 255) < 22;
                 if ($465) {
                  $2314 = 1;
                  $468 = 10;
                  $489 = $464;
                 } else {
                  $466 = $464 + 16 | 0;
                  $467 = $466 & 240;
                  $phitmp$i2$i$i$i$i$i$i377 = $467 + -1 | 0;
                  $2314 = 1;
                  $468 = $phitmp$i2$i$i$i$i$i$i377;
                  $489 = $464;
                 }
                } else {
                 $2314 = 0;
                 $468 = 10;
                 $489 = 0;
                }
                $469 = ($468 | 0) == ($470 | 0);
                if (!$469) {
                 $471 = ($468 | 0) == 10;
                 if ($471) {
                  $476 = $447 + 1 | 0;
                  $477 = SAFE_HEAP_LOAD($452 | 0, 4, 0) | 0 | 0;
                  if ($2314) {
                   $478 = $461 & 255;
                   $479 = $478 >>> 1;
                   $480 = $479 + 1 | 0;
                   _memcpy($476 | 0, $477 | 0, $480 | 0) | 0;
                   _free($477);
                  } else {
                   $485 = SAFE_HEAP_LOAD($477 >> 0 | 0, 1, 0) | 0 | 0;
                   SAFE_HEAP_STORE($476 >> 0 | 0, $485 | 0, 1);
                   _free($477);
                  }
                  $490 = $489 << 1;
                  $491 = $490 & 255;
                  SAFE_HEAP_STORE($447 >> 0 | 0, $491 | 0, 1);
                  break;
                 }
                 $472 = $468 >>> 0 <= $470 >>> 0;
                 $473 = $468 + 1 | 0;
                 $474 = _malloc($473) | 0;
                 $475 = ($474 | 0) == (0 | 0);
                 $or$cond$i$i$i$i$i$i379 = $472 & $475;
                 if (!$or$cond$i$i$i$i$i$i379) {
                  if ($2314) {
                   $481 = $447 + 1 | 0;
                   $482 = $461 & 255;
                   $483 = $482 >>> 1;
                   $484 = $483 + 1 | 0;
                   _memcpy($474 | 0, $481 | 0, $484 | 0) | 0;
                  } else {
                   $486 = SAFE_HEAP_LOAD($452 | 0, 4, 0) | 0 | 0;
                   $487 = SAFE_HEAP_LOAD($486 >> 0 | 0, 1, 0) | 0 | 0;
                   SAFE_HEAP_STORE($474 >> 0 | 0, $487 | 0, 1);
                   _free($486);
                  }
                  $488 = $473 | 1;
                  SAFE_HEAP_STORE($447 | 0, $488 | 0, 4);
                  SAFE_HEAP_STORE($454 | 0, $489 | 0, 4);
                  SAFE_HEAP_STORE($452 | 0, $474 | 0, 4);
                 }
                }
               }
              } while (0);
              {}
              SAFE_HEAP_STORE($447 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($447 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($447 + 8 | 0, SAFE_HEAP_LOAD($12 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
              $492 = $12 + 4 | 0;
              SAFE_HEAP_STORE($492 | 0, 0 | 0, 4);
              $493 = $12 + 8 | 0;
              SAFE_HEAP_STORE($493 | 0, 0 | 0, 4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
              $494 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
              $495 = $494 + -24 | 0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($495, 10307) | 0;
              $496 = $tmp$i367 + 4 | 0;
              $497 = $tmp$i367 + 8 | 0;
              $498 = $tmp$i367 + 1 | 0;
              $499 = SAFE_HEAP_LOAD($423 >> 0 | 0, 1, 0) | 0 | 0;
              $500 = $499 << 24 >> 24 == 69;
              L175 : do {
               if ($500) {
                $t$0$i390$lcssa = $423;
               } else {
                $t$0$i390556 = $423;
                while (1) {
                 $501 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i390556, $last, $db) | 0;
                 $502 = ($501 | 0) == ($t$0$i390556 | 0);
                 $503 = ($501 | 0) == ($last | 0);
                 $or$cond$i392 = $502 | $503;
                 if ($or$cond$i392) {
                  $$2$i398 = $first;
                  break L145;
                 }
                 $504 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                 $505 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
                 $506 = ($504 | 0) == ($505 | 0);
                 if ($506) {
                  $$2$i398 = $first;
                  break L145;
                 }
                 $507 = $505 + -24 | 0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i367, $507);
                 $508 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
                 $509 = $508 + -24 | 0;
                 $511 = $508;
                 while (1) {
                  $510 = $511 + -24 | 0;
                  SAFE_HEAP_STORE($427 | 0, $510 | 0, 4);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($510);
                  $$pre$i$i393 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
                  $512 = ($$pre$i$i393 | 0) == ($509 | 0);
                  if ($512) {
                   break;
                  } else {
                   $511 = $$pre$i$i393;
                  }
                 }
                 $513 = SAFE_HEAP_LOAD($tmp$i367 >> 0 | 0, 1, 0) | 0 | 0;
                 $514 = $513 & 1;
                 $515 = $514 << 24 >> 24 == 0;
                 $516 = SAFE_HEAP_LOAD($496 | 0, 4, 0) | 0 | 0;
                 $517 = $513 & 255;
                 $518 = $517 >>> 1;
                 $519 = $515 ? $518 : $516;
                 $520 = ($519 | 0) == 0;
                 if (!$520) {
                  $521 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $522 = ($521 | 0) == ($509 | 0);
                  if ($522) {
                   label = 143;
                   break;
                  }
                  $525 = $508 + -48 | 0;
                  $526 = SAFE_HEAP_LOAD($497 | 0, 4, 0) | 0 | 0;
                  $527 = $515 ? $498 : $526;
                  __THREW__ = 0;
                  invoke_iiii(222, $525 | 0, $527 | 0, $519 | 0) | 0;
                  $528 = __THREW__;
                  __THREW__ = 0;
                  $529 = $528 & 1;
                  if ($529) {
                   label = 140;
                   break;
                  }
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i367);
                 $530 = SAFE_HEAP_LOAD($501 >> 0 | 0, 1, 0) | 0 | 0;
                 $531 = $530 << 24 >> 24 == 69;
                 if ($531) {
                  $t$0$i390$lcssa = $501;
                  break L175;
                 } else {
                  $t$0$i390556 = $501;
                 }
                }
                if ((label | 0) == 140) {
                 $523 = ___cxa_find_matching_catch() | 0;
                 $524 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i367);
                 ___resumeException($523 | 0);
                } else if ((label | 0) == 143) {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i367);
                 $$2$i398 = $first;
                 break L145;
                }
               }
              } while (0);
              $532 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $533 = SAFE_HEAP_LOAD($427 | 0, 4, 0) | 0 | 0;
              $534 = ($532 | 0) == ($533 | 0);
              if ($534) {
               $$2$i398 = $first;
              } else {
               $535 = $t$0$i390$lcssa + 1 | 0;
               $536 = $533 + -24 | 0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($536, 10212) | 0;
               $$2$i398 = $535;
              }
             }
            }
           } else {
            $$2$i398 = $first;
           }
          } else {
           $$2$i398 = $first;
          }
         } else {
          $$2$i398 = $first;
         }
        } while (0);
        $$0 = $$2$i398;
        break L1;
        break;
       }
      case 109:
       {
        $537 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($79, 11512, 1);
        __THREW__ = 0;
        $538 = invoke_iiiii(244, $537 | 0, $last | 0, $79 | 0, $db | 0) | 0;
        $539 = __THREW__;
        __THREW__ = 0;
        $540 = $539 & 1;
        if ($540) {
         $542 = ___cxa_find_matching_catch() | 0;
         $543 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
         $$23 = $542;
         $$2332 = $543;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
         $541 = ($538 | 0) == ($537 | 0);
         $first$37 = $541 ? $first : $538;
         $$0 = $first$37;
         break L1;
        }
        break;
       }
      case 111:
       {
        $544 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($80, 10521, 1);
        __THREW__ = 0;
        $545 = invoke_iiiii(245, $544 | 0, $last | 0, $80 | 0, $db | 0) | 0;
        $546 = __THREW__;
        __THREW__ = 0;
        $547 = $546 & 1;
        if ($547) {
         $549 = ___cxa_find_matching_catch() | 0;
         $550 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($80);
         $$23 = $549;
         $$2332 = $550;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($80);
         $548 = ($545 | 0) == ($544 | 0);
         $first$38 = $548 ? $first : $545;
         $$0 = $first$38;
         break L1;
        }
        break;
       }
      case 118:
       {
        $551 = ($144 | 0) > 2;
        L202 : do {
         if ($551) {
          $552 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $553 = $552 << 24 >> 24 == 99;
          if ($553) {
           $554 = $first + 1 | 0;
           $555 = SAFE_HEAP_LOAD($554 >> 0 | 0, 1, 0) | 0 | 0;
           $556 = $555 << 24 >> 24 == 118;
           if ($556) {
            $557 = $db + 63 | 0;
            $558 = SAFE_HEAP_LOAD($557 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($557 >> 0 | 0, 0 | 0, 1);
            $559 = $first + 2 | 0;
            $560 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($559, $last, $db) | 0;
            SAFE_HEAP_STORE($557 >> 0 | 0, $558 | 0, 1);
            $561 = ($560 | 0) == ($559 | 0);
            $562 = ($560 | 0) == ($last | 0);
            $or$cond$i347 = $561 | $562;
            if ($or$cond$i347) {
             $$311$i = $first;
            } else {
             $563 = SAFE_HEAP_LOAD($560 >> 0 | 0, 1, 0) | 0 | 0;
             $564 = $563 << 24 >> 24 == 95;
             if ($564) {
              $567 = $560 + 1 | 0;
              $568 = ($567 | 0) == ($last | 0);
              if ($568) {
               $$311$i = $first;
               break;
              }
              $569 = SAFE_HEAP_LOAD($567 >> 0 | 0, 1, 0) | 0 | 0;
              $570 = $569 << 24 >> 24 == 69;
              do {
               if ($570) {
                $571 = $db + 4 | 0;
                $572 = SAFE_HEAP_LOAD($571 | 0, 4, 0) | 0 | 0;
                $573 = $db + 8 | 0;
                $574 = SAFE_HEAP_LOAD($573 | 0, 4, 0) | 0 | 0;
                $575 = $572 >>> 0 < $574 >>> 0;
                if ($575) {
                 {}
                 SAFE_HEAP_STORE($572 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 + 4 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 + 8 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 + 12 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 + 16 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 + 20 | 0, 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($572 | 0, 0 | 0, 4);
                 $576 = $572 + 4 | 0;
                 SAFE_HEAP_STORE($576 | 0, 0 | 0, 4);
                 $577 = $572 + 8 | 0;
                 SAFE_HEAP_STORE($577 | 0, 0 | 0, 4);
                 $578 = $572 + 12 | 0;
                 SAFE_HEAP_STORE($578 | 0, 0 | 0, 4);
                 $579 = $578 + 4 | 0;
                 SAFE_HEAP_STORE($579 | 0, 0 | 0, 4);
                 $580 = $578 + 8 | 0;
                 SAFE_HEAP_STORE($580 | 0, 0 | 0, 4);
                 $581 = SAFE_HEAP_LOAD($571 | 0, 4, 0) | 0 | 0;
                 $582 = $581 + 24 | 0;
                 SAFE_HEAP_STORE($571 | 0, $582 | 0, 4);
                 $t$1$i350 = $567;
                 break;
                }
                $583 = $db + 12 | 0;
                $584 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                $585 = $572;
                $586 = $584;
                $587 = $585 - $586 | 0;
                $588 = ($587 | 0) / 24 & -1;
                $589 = $588 + 1 | 0;
                $590 = ($587 | 0) < -24;
                if ($590) {
                 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
                }
                $591 = $574;
                $592 = $591 - $586 | 0;
                $593 = ($592 | 0) / 24 & -1;
                $594 = $593 >>> 0 < 1073741823;
                if ($594) {
                 $595 = $593 << 1;
                 $596 = $595 >>> 0 < $589 >>> 0;
                 $597 = $596 ? $589 : $595;
                 $$0$i$i$i$i348 = $597;
                } else {
                 $$0$i$i$i$i348 = 2147483647;
                }
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i346, $$0$i$i$i$i348, $588, $583);
                $598 = $__v$i$i$i346 + 8 | 0;
                $599 = SAFE_HEAP_LOAD($598 | 0, 4, 0) | 0 | 0;
                {}
                SAFE_HEAP_STORE($599 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 + 4 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 + 8 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 + 12 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 + 16 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 + 20 | 0, 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($599 | 0, 0 | 0, 4);
                $600 = $599 + 4 | 0;
                SAFE_HEAP_STORE($600 | 0, 0 | 0, 4);
                $601 = $599 + 8 | 0;
                SAFE_HEAP_STORE($601 | 0, 0 | 0, 4);
                $602 = $599 + 12 | 0;
                SAFE_HEAP_STORE($602 | 0, 0 | 0, 4);
                $603 = $602 + 4 | 0;
                SAFE_HEAP_STORE($603 | 0, 0 | 0, 4);
                $604 = $602 + 8 | 0;
                SAFE_HEAP_STORE($604 | 0, 0 | 0, 4);
                $605 = $599 + 24 | 0;
                SAFE_HEAP_STORE($598 | 0, $605 | 0, 4);
                __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i346);
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i346);
                $t$1$i350 = $567;
               } else {
                $t$0$i349567 = $567;
                while (1) {
                 $606 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i349567, $last, $db) | 0;
                 $607 = ($606 | 0) == ($t$0$i349567 | 0);
                 $608 = ($606 | 0) == ($last | 0);
                 $or$cond13$i = $607 | $608;
                 if ($or$cond13$i) {
                  $$311$i = $first;
                  break L202;
                 }
                 $$pre509 = SAFE_HEAP_LOAD($606 >> 0 | 0, 1, 0) | 0 | 0;
                 $609 = $$pre509 << 24 >> 24 == 69;
                 if ($609) {
                  $t$1$i350 = $606;
                  break;
                 } else {
                  $t$0$i349567 = $606;
                 }
                }
               }
              } while (0);
              $610 = $t$1$i350 + 1 | 0;
              $t$2$i351 = $610;
             } else {
              $565 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($560, $last, $db) | 0;
              $566 = ($565 | 0) == ($560 | 0);
              if ($566) {
               $$311$i = $first;
               break;
              } else {
               $t$2$i351 = $565;
              }
             }
             $611 = $db + 4 | 0;
             $612 = SAFE_HEAP_LOAD($611 | 0, 4, 0) | 0 | 0;
             $613 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $614 = $612;
             $615 = $613;
             $616 = $614 - $615 | 0;
             $617 = ($616 | 0) / 24 & -1;
             $618 = $617 >>> 0 < 2;
             if ($618) {
              $$311$i = $first;
             } else {
              $619 = $612 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp2$i, $619);
              $620 = SAFE_HEAP_LOAD($611 | 0, 4, 0) | 0 | 0;
              $621 = $620 + -24 | 0;
              $623 = $620;
              while (1) {
               $622 = $623 + -24 | 0;
               SAFE_HEAP_STORE($611 | 0, $622 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($622);
               $$pre$i$i352 = SAFE_HEAP_LOAD($611 | 0, 4, 0) | 0 | 0;
               $624 = ($$pre$i$i352 | 0) == ($621 | 0);
               if ($624) {
                break;
               } else {
                $623 = $$pre$i$i352;
               }
              }
              $625 = $620 + -48 | 0;
              __THREW__ = 0;
              invoke_vii(232, $18 | 0, $625 | 0);
              $626 = __THREW__;
              __THREW__ = 0;
              $627 = $626 & 1;
              if ($627) {
               $660 = ___cxa_find_matching_catch() | 0;
               $661 = tempRet0;
               $$4$i366 = $661;
               $$46$i = $660;
              } else {
               __THREW__ = 0;
               $628 = invoke_iiii(227, $18 | 0, 0, 10307 | 0) | 0;
               $629 = __THREW__;
               __THREW__ = 0;
               $630 = $629 & 1;
               if ($630) {
                $662 = ___cxa_find_matching_catch() | 0;
                $663 = tempRet0;
                $$3$i365 = $663;
                $$35$i = $662;
               } else {
                {}
                SAFE_HEAP_STORE($17 | 0, SAFE_HEAP_LOAD($628 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($17 + 4 | 0, SAFE_HEAP_LOAD($628 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($17 + 8 | 0, SAFE_HEAP_LOAD($628 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($628 | 0, 0 | 0, 4);
                $631 = $628 + 4 | 0;
                SAFE_HEAP_STORE($631 | 0, 0 | 0, 4);
                $632 = $628 + 8 | 0;
                SAFE_HEAP_STORE($632 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $633 = invoke_iii(228, $17 | 0, 11514 | 0) | 0;
                $634 = __THREW__;
                __THREW__ = 0;
                $635 = $634 & 1;
                if ($635) {
                 $664 = ___cxa_find_matching_catch() | 0;
                 $665 = tempRet0;
                 $$2$i364 = $665;
                 $$24$i = $664;
                } else {
                 {}
                 SAFE_HEAP_STORE($16 | 0, SAFE_HEAP_LOAD($633 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($16 + 4 | 0, SAFE_HEAP_LOAD($633 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($16 + 8 | 0, SAFE_HEAP_LOAD($633 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($633 | 0, 0 | 0, 4);
                 $636 = $633 + 4 | 0;
                 SAFE_HEAP_STORE($636 | 0, 0 | 0, 4);
                 $637 = $633 + 8 | 0;
                 SAFE_HEAP_STORE($637 | 0, 0 | 0, 4);
                 $638 = SAFE_HEAP_LOAD($tmp2$i >> 0 | 0, 1, 0) | 0 | 0;
                 $639 = $638 & 1;
                 $640 = $639 << 24 >> 24 == 0;
                 $641 = $tmp2$i + 8 | 0;
                 $642 = SAFE_HEAP_LOAD($641 | 0, 4, 0) | 0 | 0;
                 $643 = $tmp2$i + 1 | 0;
                 $644 = $640 ? $643 : $642;
                 $645 = $tmp2$i + 4 | 0;
                 $646 = SAFE_HEAP_LOAD($645 | 0, 4, 0) | 0 | 0;
                 $647 = $638 & 255;
                 $648 = $647 >>> 1;
                 $649 = $640 ? $648 : $646;
                 __THREW__ = 0;
                 $650 = invoke_iiii(222, $16 | 0, $644 | 0, $649 | 0) | 0;
                 $651 = __THREW__;
                 __THREW__ = 0;
                 $652 = $651 & 1;
                 do {
                  if ($652) {
                   $666 = ___cxa_find_matching_catch() | 0;
                   $667 = tempRet0;
                   $$1$i363 = $667;
                   $$13$i = $666;
                  } else {
                   {}
                   SAFE_HEAP_STORE($15 | 0, SAFE_HEAP_LOAD($650 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($15 + 4 | 0, SAFE_HEAP_LOAD($650 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($15 + 8 | 0, SAFE_HEAP_LOAD($650 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($650 | 0, 0 | 0, 4);
                   $653 = $650 + 4 | 0;
                   SAFE_HEAP_STORE($653 | 0, 0 | 0, 4);
                   $654 = $650 + 8 | 0;
                   SAFE_HEAP_STORE($654 | 0, 0 | 0, 4);
                   __THREW__ = 0;
                   $655 = invoke_iii(228, $15 | 0, 10212 | 0) | 0;
                   $656 = __THREW__;
                   __THREW__ = 0;
                   $657 = $656 & 1;
                   if ($657) {
                    $668 = ___cxa_find_matching_catch() | 0;
                    $669 = tempRet0;
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                    $$1$i363 = $669;
                    $$13$i = $668;
                    break;
                   } else {
                    {}
                    SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($655 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($655 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($14 + 8 | 0, SAFE_HEAP_LOAD($655 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($655 | 0, 0 | 0, 4);
                    $658 = $655 + 4 | 0;
                    SAFE_HEAP_STORE($658 | 0, 0 | 0, 4);
                    $659 = $655 + 8 | 0;
                    SAFE_HEAP_STORE($659 | 0, 0 | 0, 4);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($13, $14);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($625, $13);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp2$i);
                    $$311$i = $t$2$i351;
                    break L202;
                   }
                  }
                 } while (0);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                 $$2$i364 = $$1$i363;
                 $$24$i = $$13$i;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                $$3$i365 = $$2$i364;
                $$35$i = $$24$i;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
               $$4$i366 = $$3$i365;
               $$46$i = $$35$i;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp2$i);
              ___resumeException($$46$i | 0);
             }
            }
           } else {
            $$311$i = $first;
           }
          } else {
           $$311$i = $first;
          }
         } else {
          $$311$i = $first;
         }
        } while (0);
        $$0 = $$311$i;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 100:
     {
      $670 = $t$0 + 1 | 0;
      $671 = SAFE_HEAP_LOAD($670 >> 0 | 0, 1, 0) | 0 | 0;
      $672 = $671 << 24 >> 24;
      switch ($672 | 0) {
      case 97:
       {
        $673 = $t$0 + 2 | 0;
        $674 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($673, $last, $db) | 0;
        $675 = ($674 | 0) == ($673 | 0);
        if ($675) {
         $$0 = $first;
         break L1;
        }
        $676 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $677 = $db + 4 | 0;
        $678 = SAFE_HEAP_LOAD($677 | 0, 4, 0) | 0 | 0;
        $679 = ($676 | 0) == ($678 | 0);
        if ($679) {
         $$0 = $first;
         break L1;
        }
        $680 = $678 + -24 | 0;
        if ($parsed_gs$0$off0) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($83, 10495, 2);
        } else {
         SAFE_HEAP_STORE($83 | 0, 0 | 0, 4);
         $681 = $83 + 4 | 0;
         SAFE_HEAP_STORE($681 | 0, 0 | 0, 4);
         $682 = $83 + 8 | 0;
         SAFE_HEAP_STORE($682 | 0, 0 | 0, 4);
        }
        __THREW__ = 0;
        $683 = invoke_iii(228, $83 | 0, 11517 | 0) | 0;
        $684 = __THREW__;
        __THREW__ = 0;
        $685 = $684 & 1;
        if ($685) {
         $755 = ___cxa_find_matching_catch() | 0;
         $756 = tempRet0;
         $$2 = $755;
         $$211 = $756;
        } else {
         {}
         SAFE_HEAP_STORE($82 | 0, SAFE_HEAP_LOAD($683 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($82 + 4 | 0, SAFE_HEAP_LOAD($683 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($82 + 8 | 0, SAFE_HEAP_LOAD($683 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($683 | 0, 0 | 0, 4);
         $686 = $683 + 4 | 0;
         SAFE_HEAP_STORE($686 | 0, 0 | 0, 4);
         $687 = $683 + 8 | 0;
         SAFE_HEAP_STORE($687 | 0, 0 | 0, 4);
         $688 = SAFE_HEAP_LOAD($677 | 0, 4, 0) | 0 | 0;
         $689 = $688 + -24 | 0;
         __THREW__ = 0;
         invoke_vii(232, $84 | 0, $689 | 0);
         $690 = __THREW__;
         __THREW__ = 0;
         $691 = $690 & 1;
         do {
          if ($691) {
           $757 = ___cxa_find_matching_catch() | 0;
           $758 = tempRet0;
           $$1 = $757;
           $$110 = $758;
          } else {
           $692 = SAFE_HEAP_LOAD($84 >> 0 | 0, 1, 0) | 0 | 0;
           $693 = $692 & 1;
           $694 = $693 << 24 >> 24 == 0;
           $695 = $84 + 8 | 0;
           $696 = SAFE_HEAP_LOAD($695 | 0, 4, 0) | 0 | 0;
           $697 = $84 + 1 | 0;
           $698 = $694 ? $697 : $696;
           $699 = $84 + 4 | 0;
           $700 = SAFE_HEAP_LOAD($699 | 0, 4, 0) | 0 | 0;
           $701 = $692 & 255;
           $702 = $701 >>> 1;
           $703 = $694 ? $702 : $700;
           __THREW__ = 0;
           $704 = invoke_iiii(222, $82 | 0, $698 | 0, $703 | 0) | 0;
           $705 = __THREW__;
           __THREW__ = 0;
           $706 = $705 & 1;
           if ($706) {
            $759 = ___cxa_find_matching_catch() | 0;
            $760 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($84);
            $$1 = $759;
            $$110 = $760;
            break;
           }
           {}
           SAFE_HEAP_STORE($81 | 0, SAFE_HEAP_LOAD($704 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($81 + 4 | 0, SAFE_HEAP_LOAD($704 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($81 + 8 | 0, SAFE_HEAP_LOAD($704 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($704 | 0, 0 | 0, 4);
           $707 = $704 + 4 | 0;
           SAFE_HEAP_STORE($707 | 0, 0 | 0, 4);
           $708 = $704 + 8 | 0;
           SAFE_HEAP_STORE($708 | 0, 0 | 0, 4);
           $709 = SAFE_HEAP_LOAD($680 >> 0 | 0, 1, 0) | 0 | 0;
           $710 = $709 & 1;
           $711 = $710 << 24 >> 24 == 0;
           do {
            if ($711) {
             $712 = $680 + 1 | 0;
             SAFE_HEAP_STORE($712 >> 0 | 0, 0 | 0, 1);
             SAFE_HEAP_STORE($680 >> 0 | 0, 0 | 0, 1);
            } else {
             $713 = $678 + -16 | 0;
             $714 = SAFE_HEAP_LOAD($713 | 0, 4, 0) | 0 | 0;
             SAFE_HEAP_STORE($714 >> 0 | 0, 0 | 0, 1);
             $715 = $678 + -20 | 0;
             SAFE_HEAP_STORE($715 | 0, 0 | 0, 4);
             $$pre$i$i$i = SAFE_HEAP_LOAD($680 >> 0 | 0, 1, 0) | 0 | 0;
             $716 = $$pre$i$i$i & 1;
             $717 = $716 << 24 >> 24 == 0;
             if ($717) {
              $722 = $$pre$i$i$i;
              $731 = 10;
             } else {
              $718 = SAFE_HEAP_LOAD($680 | 0, 4, 0) | 0 | 0;
              $719 = $718 & -2;
              $phitmp$i$i$i$i$i$i = $719 + -1 | 0;
              $720 = $718 & 255;
              $722 = $720;
              $731 = $phitmp$i$i$i$i$i$i;
             }
             $721 = $722 & 1;
             $723 = $721 << 24 >> 24 == 0;
             if ($723) {
              $724 = $722 & 255;
              $725 = $724 >>> 1;
              $726 = ($722 & 255) < 22;
              if ($726) {
               $2315 = 1;
               $729 = 10;
               $750 = $725;
              } else {
               $727 = $725 + 16 | 0;
               $728 = $727 & 240;
               $phitmp$i2$i$i$i$i$i = $728 + -1 | 0;
               $2315 = 1;
               $729 = $phitmp$i2$i$i$i$i$i;
               $750 = $725;
              }
             } else {
              $2315 = 0;
              $729 = 10;
              $750 = 0;
             }
             $730 = ($729 | 0) == ($731 | 0);
             if (!$730) {
              $732 = ($729 | 0) == 10;
              if ($732) {
               $737 = $680 + 1 | 0;
               $738 = SAFE_HEAP_LOAD($713 | 0, 4, 0) | 0 | 0;
               if ($2315) {
                $739 = $722 & 255;
                $740 = $739 >>> 1;
                $741 = $740 + 1 | 0;
                _memcpy($737 | 0, $738 | 0, $741 | 0) | 0;
                _free($738);
               } else {
                $746 = SAFE_HEAP_LOAD($738 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($737 >> 0 | 0, $746 | 0, 1);
                _free($738);
               }
               $751 = $750 << 1;
               $752 = $751 & 255;
               SAFE_HEAP_STORE($680 >> 0 | 0, $752 | 0, 1);
               break;
              }
              $733 = $729 >>> 0 <= $731 >>> 0;
              $734 = $729 + 1 | 0;
              $735 = _malloc($734) | 0;
              $736 = ($735 | 0) == (0 | 0);
              $or$cond$i$i$i$i$i = $733 & $736;
              if (!$or$cond$i$i$i$i$i) {
               if ($2315) {
                $742 = $680 + 1 | 0;
                $743 = $722 & 255;
                $744 = $743 >>> 1;
                $745 = $744 + 1 | 0;
                _memcpy($735 | 0, $742 | 0, $745 | 0) | 0;
               } else {
                $747 = SAFE_HEAP_LOAD($713 | 0, 4, 0) | 0 | 0;
                $748 = SAFE_HEAP_LOAD($747 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($735 >> 0 | 0, $748 | 0, 1);
                _free($747);
               }
               $749 = $734 | 1;
               SAFE_HEAP_STORE($680 | 0, $749 | 0, 4);
               SAFE_HEAP_STORE($715 | 0, $750 | 0, 4);
               SAFE_HEAP_STORE($713 | 0, $735 | 0, 4);
              }
             }
            }
           } while (0);
           {}
           SAFE_HEAP_STORE($680 | 0, SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($680 + 4 | 0, SAFE_HEAP_LOAD($81 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($680 + 8 | 0, SAFE_HEAP_LOAD($81 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($81 | 0, 0 | 0, 4);
           $753 = $81 + 4 | 0;
           SAFE_HEAP_STORE($753 | 0, 0 | 0, 4);
           $754 = $81 + 8 | 0;
           SAFE_HEAP_STORE($754 | 0, 0 | 0, 4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($81);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($84);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($82);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($83);
           $$0 = $674;
           break L1;
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($82);
         $$2 = $$1;
         $$211 = $$110;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($83);
        $$23 = $$2;
        $$2332 = $$211;
        break L7;
        break;
       }
      case 99:
       {
        $761 = ($144 | 0) > 2;
        L296 : do {
         if ($761) {
          $762 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $763 = $762 << 24 >> 24 == 100;
          if ($763) {
           $764 = $first + 1 | 0;
           $765 = SAFE_HEAP_LOAD($764 >> 0 | 0, 1, 0) | 0 | 0;
           $766 = $765 << 24 >> 24 == 99;
           if ($766) {
            $767 = $first + 2 | 0;
            $768 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($767, $last, $db) | 0;
            $769 = ($768 | 0) == ($767 | 0);
            if ($769) {
             $$06$i345 = $first;
            } else {
             $770 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($768, $last, $db) | 0;
             $771 = ($770 | 0) == ($768 | 0);
             if ($771) {
              $$06$i345 = $first;
             } else {
              $772 = $db + 4 | 0;
              $773 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
              $774 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $775 = $773;
              $776 = $774;
              $777 = $775 - $776 | 0;
              $778 = ($777 | 0) / 24 & -1;
              $779 = $778 >>> 0 < 2;
              if ($779) {
               $$06$i345 = $first;
              } else {
               $780 = $773 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i318, $780);
               $781 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
               $782 = $781 + -24 | 0;
               $784 = $781;
               while (1) {
                $783 = $784 + -24 | 0;
                SAFE_HEAP_STORE($772 | 0, $783 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($783);
                $$pre$i$i319 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
                $785 = ($$pre$i$i319 | 0) == ($782 | 0);
                if ($785) {
                 break;
                } else {
                 $784 = $$pre$i$i319;
                }
               }
               $786 = $781 + -48 | 0;
               __THREW__ = 0;
               invoke_vii(232, $24 | 0, $786 | 0);
               $787 = __THREW__;
               __THREW__ = 0;
               $788 = $787 & 1;
               if ($788) {
                $821 = ___cxa_find_matching_catch() | 0;
                $822 = tempRet0;
                $$4$i344 = $822;
                $$45$i343 = $821;
               } else {
                __THREW__ = 0;
                $789 = invoke_iiii(227, $24 | 0, 0, 11527 | 0) | 0;
                $790 = __THREW__;
                __THREW__ = 0;
                $791 = $790 & 1;
                if ($791) {
                 $823 = ___cxa_find_matching_catch() | 0;
                 $824 = tempRet0;
                 $$3$i342 = $824;
                 $$34$i341 = $823;
                } else {
                 {}
                 SAFE_HEAP_STORE($23 | 0, SAFE_HEAP_LOAD($789 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($23 + 4 | 0, SAFE_HEAP_LOAD($789 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($23 + 8 | 0, SAFE_HEAP_LOAD($789 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($789 | 0, 0 | 0, 4);
                 $792 = $789 + 4 | 0;
                 SAFE_HEAP_STORE($792 | 0, 0 | 0, 4);
                 $793 = $789 + 8 | 0;
                 SAFE_HEAP_STORE($793 | 0, 0 | 0, 4);
                 __THREW__ = 0;
                 $794 = invoke_iii(228, $23 | 0, 11509 | 0) | 0;
                 $795 = __THREW__;
                 __THREW__ = 0;
                 $796 = $795 & 1;
                 if ($796) {
                  $825 = ___cxa_find_matching_catch() | 0;
                  $826 = tempRet0;
                  $$2$i340 = $826;
                  $$23$i339 = $825;
                 } else {
                  {}
                  SAFE_HEAP_STORE($22 | 0, SAFE_HEAP_LOAD($794 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($22 + 4 | 0, SAFE_HEAP_LOAD($794 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($22 + 8 | 0, SAFE_HEAP_LOAD($794 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($794 | 0, 0 | 0, 4);
                  $797 = $794 + 4 | 0;
                  SAFE_HEAP_STORE($797 | 0, 0 | 0, 4);
                  $798 = $794 + 8 | 0;
                  SAFE_HEAP_STORE($798 | 0, 0 | 0, 4);
                  $799 = SAFE_HEAP_LOAD($expr$i318 >> 0 | 0, 1, 0) | 0 | 0;
                  $800 = $799 & 1;
                  $801 = $800 << 24 >> 24 == 0;
                  $802 = $expr$i318 + 8 | 0;
                  $803 = SAFE_HEAP_LOAD($802 | 0, 4, 0) | 0 | 0;
                  $804 = $expr$i318 + 1 | 0;
                  $805 = $801 ? $804 : $803;
                  $806 = $expr$i318 + 4 | 0;
                  $807 = SAFE_HEAP_LOAD($806 | 0, 4, 0) | 0 | 0;
                  $808 = $799 & 255;
                  $809 = $808 >>> 1;
                  $810 = $801 ? $809 : $807;
                  __THREW__ = 0;
                  $811 = invoke_iiii(222, $22 | 0, $805 | 0, $810 | 0) | 0;
                  $812 = __THREW__;
                  __THREW__ = 0;
                  $813 = $812 & 1;
                  do {
                   if ($813) {
                    $827 = ___cxa_find_matching_catch() | 0;
                    $828 = tempRet0;
                    $$1$i338 = $828;
                    $$12$i337 = $827;
                   } else {
                    {}
                    SAFE_HEAP_STORE($21 | 0, SAFE_HEAP_LOAD($811 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($21 + 4 | 0, SAFE_HEAP_LOAD($811 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($21 + 8 | 0, SAFE_HEAP_LOAD($811 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($811 | 0, 0 | 0, 4);
                    $814 = $811 + 4 | 0;
                    SAFE_HEAP_STORE($814 | 0, 0 | 0, 4);
                    $815 = $811 + 8 | 0;
                    SAFE_HEAP_STORE($815 | 0, 0 | 0, 4);
                    __THREW__ = 0;
                    $816 = invoke_iii(228, $21 | 0, 10212 | 0) | 0;
                    $817 = __THREW__;
                    __THREW__ = 0;
                    $818 = $817 & 1;
                    if ($818) {
                     $829 = ___cxa_find_matching_catch() | 0;
                     $830 = tempRet0;
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                     $$1$i338 = $830;
                     $$12$i337 = $829;
                     break;
                    } else {
                     {}
                     SAFE_HEAP_STORE($20 | 0, SAFE_HEAP_LOAD($816 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($20 + 4 | 0, SAFE_HEAP_LOAD($816 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($20 + 8 | 0, SAFE_HEAP_LOAD($816 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($816 | 0, 0 | 0, 4);
                     $819 = $816 + 4 | 0;
                     SAFE_HEAP_STORE($819 | 0, 0 | 0, 4);
                     $820 = $816 + 8 | 0;
                     SAFE_HEAP_STORE($820 | 0, 0 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19, $20);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($786, $19);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i318);
                     $$06$i345 = $770;
                     break L296;
                    }
                   }
                  } while (0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                  $$2$i340 = $$1$i338;
                  $$23$i339 = $$12$i337;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
                 $$3$i342 = $$2$i340;
                 $$34$i341 = $$23$i339;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                $$4$i344 = $$3$i342;
                $$45$i343 = $$34$i341;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i318);
               ___resumeException($$45$i343 | 0);
              }
             }
            }
           } else {
            $$06$i345 = $first;
           }
          } else {
           $$06$i345 = $first;
          }
         } else {
          $$06$i345 = $first;
         }
        } while (0);
        $$0 = $$06$i345;
        break L1;
        break;
       }
      case 101:
       {
        $831 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($85, 10352, 1);
        __THREW__ = 0;
        $832 = invoke_iiiii(245, $831 | 0, $last | 0, $85 | 0, $db | 0) | 0;
        $833 = __THREW__;
        __THREW__ = 0;
        $834 = $833 & 1;
        if ($834) {
         $836 = ___cxa_find_matching_catch() | 0;
         $837 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($85);
         $$23 = $836;
         $$2332 = $837;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($85);
         $835 = ($832 | 0) == ($831 | 0);
         $first$39 = $835 ? $first : $832;
         $$0 = $first$39;
         break L1;
        }
        break;
       }
      case 108:
       {
        $838 = $t$0 + 2 | 0;
        $839 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($838, $last, $db) | 0;
        $840 = ($839 | 0) == ($838 | 0);
        if ($840) {
         $$0 = $first;
         break L1;
        }
        $841 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $842 = $db + 4 | 0;
        $843 = SAFE_HEAP_LOAD($842 | 0, 4, 0) | 0 | 0;
        $844 = ($841 | 0) == ($843 | 0);
        if ($844) {
         $$0 = $first;
         break L1;
        }
        $845 = $843 + -24 | 0;
        if ($parsed_gs$0$off0) {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($88, 10495, 2);
        } else {
         SAFE_HEAP_STORE($88 | 0, 0 | 0, 4);
         $846 = $88 + 4 | 0;
         SAFE_HEAP_STORE($846 | 0, 0 | 0, 4);
         $847 = $88 + 8 | 0;
         SAFE_HEAP_STORE($847 | 0, 0 | 0, 4);
        }
        __THREW__ = 0;
        $848 = invoke_iii(228, $88 | 0, 11541 | 0) | 0;
        $849 = __THREW__;
        __THREW__ = 0;
        $850 = $849 & 1;
        if ($850) {
         $920 = ___cxa_find_matching_catch() | 0;
         $921 = tempRet0;
         $$5 = $920;
         $$514 = $921;
        } else {
         {}
         SAFE_HEAP_STORE($87 | 0, SAFE_HEAP_LOAD($848 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($87 + 4 | 0, SAFE_HEAP_LOAD($848 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($87 + 8 | 0, SAFE_HEAP_LOAD($848 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($848 | 0, 0 | 0, 4);
         $851 = $848 + 4 | 0;
         SAFE_HEAP_STORE($851 | 0, 0 | 0, 4);
         $852 = $848 + 8 | 0;
         SAFE_HEAP_STORE($852 | 0, 0 | 0, 4);
         $853 = SAFE_HEAP_LOAD($842 | 0, 4, 0) | 0 | 0;
         $854 = $853 + -24 | 0;
         __THREW__ = 0;
         invoke_vii(232, $89 | 0, $854 | 0);
         $855 = __THREW__;
         __THREW__ = 0;
         $856 = $855 & 1;
         do {
          if ($856) {
           $922 = ___cxa_find_matching_catch() | 0;
           $923 = tempRet0;
           $$4 = $922;
           $$413 = $923;
          } else {
           $857 = SAFE_HEAP_LOAD($89 >> 0 | 0, 1, 0) | 0 | 0;
           $858 = $857 & 1;
           $859 = $858 << 24 >> 24 == 0;
           $860 = $89 + 8 | 0;
           $861 = SAFE_HEAP_LOAD($860 | 0, 4, 0) | 0 | 0;
           $862 = $89 + 1 | 0;
           $863 = $859 ? $862 : $861;
           $864 = $89 + 4 | 0;
           $865 = SAFE_HEAP_LOAD($864 | 0, 4, 0) | 0 | 0;
           $866 = $857 & 255;
           $867 = $866 >>> 1;
           $868 = $859 ? $867 : $865;
           __THREW__ = 0;
           $869 = invoke_iiii(222, $87 | 0, $863 | 0, $868 | 0) | 0;
           $870 = __THREW__;
           __THREW__ = 0;
           $871 = $870 & 1;
           if ($871) {
            $924 = ___cxa_find_matching_catch() | 0;
            $925 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($89);
            $$4 = $924;
            $$413 = $925;
            break;
           }
           {}
           SAFE_HEAP_STORE($86 | 0, SAFE_HEAP_LOAD($869 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($86 + 4 | 0, SAFE_HEAP_LOAD($869 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($86 + 8 | 0, SAFE_HEAP_LOAD($869 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($869 | 0, 0 | 0, 4);
           $872 = $869 + 4 | 0;
           SAFE_HEAP_STORE($872 | 0, 0 | 0, 4);
           $873 = $869 + 8 | 0;
           SAFE_HEAP_STORE($873 | 0, 0 | 0, 4);
           $874 = SAFE_HEAP_LOAD($845 >> 0 | 0, 1, 0) | 0 | 0;
           $875 = $874 & 1;
           $876 = $875 << 24 >> 24 == 0;
           do {
            if ($876) {
             $877 = $845 + 1 | 0;
             SAFE_HEAP_STORE($877 >> 0 | 0, 0 | 0, 1);
             SAFE_HEAP_STORE($845 >> 0 | 0, 0 | 0, 1);
            } else {
             $878 = $843 + -16 | 0;
             $879 = SAFE_HEAP_LOAD($878 | 0, 4, 0) | 0 | 0;
             SAFE_HEAP_STORE($879 >> 0 | 0, 0 | 0, 1);
             $880 = $843 + -20 | 0;
             SAFE_HEAP_STORE($880 | 0, 0 | 0, 4);
             $$pre$i$i$i87 = SAFE_HEAP_LOAD($845 >> 0 | 0, 1, 0) | 0 | 0;
             $881 = $$pre$i$i$i87 & 1;
             $882 = $881 << 24 >> 24 == 0;
             if ($882) {
              $887 = $$pre$i$i$i87;
              $896 = 10;
             } else {
              $883 = SAFE_HEAP_LOAD($845 | 0, 4, 0) | 0 | 0;
              $884 = $883 & -2;
              $phitmp$i$i$i$i$i$i89 = $884 + -1 | 0;
              $885 = $883 & 255;
              $887 = $885;
              $896 = $phitmp$i$i$i$i$i$i89;
             }
             $886 = $887 & 1;
             $888 = $886 << 24 >> 24 == 0;
             if ($888) {
              $889 = $887 & 255;
              $890 = $889 >>> 1;
              $891 = ($887 & 255) < 22;
              if ($891) {
               $2316 = 1;
               $894 = 10;
               $915 = $890;
              } else {
               $892 = $890 + 16 | 0;
               $893 = $892 & 240;
               $phitmp$i2$i$i$i$i$i92 = $893 + -1 | 0;
               $2316 = 1;
               $894 = $phitmp$i2$i$i$i$i$i92;
               $915 = $890;
              }
             } else {
              $2316 = 0;
              $894 = 10;
              $915 = 0;
             }
             $895 = ($894 | 0) == ($896 | 0);
             if (!$895) {
              $897 = ($894 | 0) == 10;
              if ($897) {
               $902 = $845 + 1 | 0;
               $903 = SAFE_HEAP_LOAD($878 | 0, 4, 0) | 0 | 0;
               if ($2316) {
                $904 = $887 & 255;
                $905 = $904 >>> 1;
                $906 = $905 + 1 | 0;
                _memcpy($902 | 0, $903 | 0, $906 | 0) | 0;
                _free($903);
               } else {
                $911 = SAFE_HEAP_LOAD($903 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($902 >> 0 | 0, $911 | 0, 1);
                _free($903);
               }
               $916 = $915 << 1;
               $917 = $916 & 255;
               SAFE_HEAP_STORE($845 >> 0 | 0, $917 | 0, 1);
               break;
              }
              $898 = $894 >>> 0 <= $896 >>> 0;
              $899 = $894 + 1 | 0;
              $900 = _malloc($899) | 0;
              $901 = ($900 | 0) == (0 | 0);
              $or$cond$i$i$i$i$i94 = $898 & $901;
              if (!$or$cond$i$i$i$i$i94) {
               if ($2316) {
                $907 = $845 + 1 | 0;
                $908 = $887 & 255;
                $909 = $908 >>> 1;
                $910 = $909 + 1 | 0;
                _memcpy($900 | 0, $907 | 0, $910 | 0) | 0;
               } else {
                $912 = SAFE_HEAP_LOAD($878 | 0, 4, 0) | 0 | 0;
                $913 = SAFE_HEAP_LOAD($912 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($900 >> 0 | 0, $913 | 0, 1);
                _free($912);
               }
               $914 = $899 | 1;
               SAFE_HEAP_STORE($845 | 0, $914 | 0, 4);
               SAFE_HEAP_STORE($880 | 0, $915 | 0, 4);
               SAFE_HEAP_STORE($878 | 0, $900 | 0, 4);
              }
             }
            }
           } while (0);
           {}
           SAFE_HEAP_STORE($845 | 0, SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($845 + 4 | 0, SAFE_HEAP_LOAD($86 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($845 + 8 | 0, SAFE_HEAP_LOAD($86 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($86 | 0, 0 | 0, 4);
           $918 = $86 + 4 | 0;
           SAFE_HEAP_STORE($918 | 0, 0 | 0, 4);
           $919 = $86 + 8 | 0;
           SAFE_HEAP_STORE($919 | 0, 0 | 0, 4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($86);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($89);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($87);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($88);
           $$0 = $839;
           break L1;
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($87);
         $$5 = $$4;
         $$514 = $$413;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($88);
        $$23 = $$5;
        $$2332 = $$514;
        break L7;
        break;
       }
      case 110:
       {
        $926 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        $$0 = $926;
        break L1;
        break;
       }
      case 115:
       {
        $927 = ($144 | 0) > 2;
        L374 : do {
         if ($927) {
          $928 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $929 = $928 << 24 >> 24 == 100;
          if ($929) {
           $930 = $first + 1 | 0;
           $931 = SAFE_HEAP_LOAD($930 >> 0 | 0, 1, 0) | 0 | 0;
           $932 = $931 << 24 >> 24 == 115;
           if ($932) {
            $933 = $first + 2 | 0;
            $934 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($933, $last, $db) | 0;
            $935 = ($934 | 0) == ($933 | 0);
            if ($935) {
             $$02$i317 = $first;
            } else {
             $936 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($934, $last, $db) | 0;
             $937 = ($936 | 0) == ($934 | 0);
             if ($937) {
              $$02$i317 = $first;
             } else {
              $938 = $db + 4 | 0;
              $939 = SAFE_HEAP_LOAD($938 | 0, 4, 0) | 0 | 0;
              $940 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $941 = $939;
              $942 = $940;
              $943 = $941 - $942 | 0;
              $944 = ($943 | 0) / 24 & -1;
              $945 = $944 >>> 0 < 2;
              if ($945) {
               $$02$i317 = $first;
              } else {
               $946 = $939 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i311, $946);
               $947 = SAFE_HEAP_LOAD($938 | 0, 4, 0) | 0 | 0;
               $948 = $947 + -24 | 0;
               $950 = $947;
               while (1) {
                $949 = $950 + -24 | 0;
                SAFE_HEAP_STORE($938 | 0, $949 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($949);
                $$pre$i$i312 = SAFE_HEAP_LOAD($938 | 0, 4, 0) | 0 | 0;
                $951 = ($$pre$i$i312 | 0) == ($948 | 0);
                if ($951) {
                 break;
                } else {
                 $950 = $$pre$i$i312;
                }
               }
               __THREW__ = 0;
               invoke_viii(243, $25 | 0, 11549 | 0, $expr$i311 | 0);
               $952 = __THREW__;
               __THREW__ = 0;
               $953 = $952 & 1;
               do {
                if ($953) {
                 $969 = ___cxa_find_matching_catch() | 0;
                 $970 = tempRet0;
                 $$0$i316 = $970;
                 $$01$i315 = $969;
                } else {
                 $954 = $947 + -48 | 0;
                 $955 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
                 $956 = $955 & 1;
                 $957 = $956 << 24 >> 24 == 0;
                 $958 = $25 + 8 | 0;
                 $959 = SAFE_HEAP_LOAD($958 | 0, 4, 0) | 0 | 0;
                 $960 = $25 + 1 | 0;
                 $961 = $957 ? $960 : $959;
                 $962 = $25 + 4 | 0;
                 $963 = SAFE_HEAP_LOAD($962 | 0, 4, 0) | 0 | 0;
                 $964 = $955 & 255;
                 $965 = $964 >>> 1;
                 $966 = $957 ? $965 : $963;
                 __THREW__ = 0;
                 invoke_iiii(222, $954 | 0, $961 | 0, $966 | 0) | 0;
                 $967 = __THREW__;
                 __THREW__ = 0;
                 $968 = $967 & 1;
                 if ($968) {
                  $971 = ___cxa_find_matching_catch() | 0;
                  $972 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                  $$0$i316 = $972;
                  $$01$i315 = $971;
                  break;
                 } else {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i311);
                  $$02$i317 = $936;
                  break L374;
                 }
                }
               } while (0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i311);
               ___resumeException($$01$i315 | 0);
              }
             }
            }
           } else {
            $$02$i317 = $first;
           }
          } else {
           $$02$i317 = $first;
          }
         } else {
          $$02$i317 = $first;
         }
        } while (0);
        $$0 = $$02$i317;
        break L1;
        break;
       }
      case 116:
       {
        $973 = ($144 | 0) > 2;
        L393 : do {
         if ($973) {
          $974 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $975 = $974 << 24 >> 24 == 100;
          if ($975) {
           $976 = $first + 1 | 0;
           $977 = SAFE_HEAP_LOAD($976 >> 0 | 0, 1, 0) | 0 | 0;
           $978 = $977 << 24 >> 24 == 116;
           if ($978) {
            $979 = $first + 2 | 0;
            $980 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($979, $last, $db) | 0;
            $981 = ($980 | 0) == ($979 | 0);
            if ($981) {
             $$02$i310 = $first;
            } else {
             $982 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($980, $last, $db) | 0;
             $983 = ($982 | 0) == ($980 | 0);
             if ($983) {
              $$02$i310 = $first;
             } else {
              $984 = $db + 4 | 0;
              $985 = SAFE_HEAP_LOAD($984 | 0, 4, 0) | 0 | 0;
              $986 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $987 = $985;
              $988 = $986;
              $989 = $987 - $988 | 0;
              $990 = ($989 | 0) / 24 & -1;
              $991 = $990 >>> 0 < 2;
              if ($991) {
               $$02$i310 = $first;
              } else {
               $992 = $985 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i, $992);
               $993 = SAFE_HEAP_LOAD($984 | 0, 4, 0) | 0 | 0;
               $994 = $993 + -24 | 0;
               $996 = $993;
               while (1) {
                $995 = $996 + -24 | 0;
                SAFE_HEAP_STORE($984 | 0, $995 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($995);
                $$pre$i$i305 = SAFE_HEAP_LOAD($984 | 0, 4, 0) | 0 | 0;
                $997 = ($$pre$i$i305 | 0) == ($994 | 0);
                if ($997) {
                 break;
                } else {
                 $996 = $$pre$i$i305;
                }
               }
               __THREW__ = 0;
               invoke_viii(243, $26 | 0, 15859 | 0, $name$i | 0);
               $998 = __THREW__;
               __THREW__ = 0;
               $999 = $998 & 1;
               do {
                if ($999) {
                 $1015 = ___cxa_find_matching_catch() | 0;
                 $1016 = tempRet0;
                 $$0$i309 = $1016;
                 $$01$i308 = $1015;
                } else {
                 $1000 = $993 + -48 | 0;
                 $1001 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
                 $1002 = $1001 & 1;
                 $1003 = $1002 << 24 >> 24 == 0;
                 $1004 = $26 + 8 | 0;
                 $1005 = SAFE_HEAP_LOAD($1004 | 0, 4, 0) | 0 | 0;
                 $1006 = $26 + 1 | 0;
                 $1007 = $1003 ? $1006 : $1005;
                 $1008 = $26 + 4 | 0;
                 $1009 = SAFE_HEAP_LOAD($1008 | 0, 4, 0) | 0 | 0;
                 $1010 = $1001 & 255;
                 $1011 = $1010 >>> 1;
                 $1012 = $1003 ? $1011 : $1009;
                 __THREW__ = 0;
                 invoke_iiii(222, $1000 | 0, $1007 | 0, $1012 | 0) | 0;
                 $1013 = __THREW__;
                 __THREW__ = 0;
                 $1014 = $1013 & 1;
                 if ($1014) {
                  $1017 = ___cxa_find_matching_catch() | 0;
                  $1018 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                  $$0$i309 = $1018;
                  $$01$i308 = $1017;
                  break;
                 } else {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
                  $$02$i310 = $982;
                  break L393;
                 }
                }
               } while (0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
               ___resumeException($$01$i308 | 0);
              }
             }
            }
           } else {
            $$02$i310 = $first;
           }
          } else {
           $$02$i310 = $first;
          }
         } else {
          $$02$i310 = $first;
         }
        } while (0);
        $$0 = $$02$i310;
        break L1;
        break;
       }
      case 118:
       {
        $1019 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($90, 11552, 1);
        __THREW__ = 0;
        $1020 = invoke_iiiii(244, $1019 | 0, $last | 0, $90 | 0, $db | 0) | 0;
        $1021 = __THREW__;
        __THREW__ = 0;
        $1022 = $1021 & 1;
        if ($1022) {
         $1024 = ___cxa_find_matching_catch() | 0;
         $1025 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($90);
         $$23 = $1024;
         $$2332 = $1025;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($90);
         $1023 = ($1020 | 0) == ($1019 | 0);
         $first$40 = $1023 ? $first : $1020;
         $$0 = $first$40;
         break L1;
        }
        break;
       }
      case 86:
       {
        $1026 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($91, 11554, 2);
        __THREW__ = 0;
        $1027 = invoke_iiiii(244, $1026 | 0, $last | 0, $91 | 0, $db | 0) | 0;
        $1028 = __THREW__;
        __THREW__ = 0;
        $1029 = $1028 & 1;
        if ($1029) {
         $1031 = ___cxa_find_matching_catch() | 0;
         $1032 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($91);
         $$23 = $1031;
         $$2332 = $1032;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($91);
         $1030 = ($1027 | 0) == ($1026 | 0);
         $first$41 = $1030 ? $first : $1027;
         $$0 = $first$41;
         break L1;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 101:
     {
      $1033 = $t$0 + 1 | 0;
      $1034 = SAFE_HEAP_LOAD($1033 >> 0 | 0, 1, 0) | 0 | 0;
      $1035 = $1034 << 24 >> 24;
      switch ($1035 | 0) {
      case 111:
       {
        $1036 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($92, 11557, 1);
        __THREW__ = 0;
        $1037 = invoke_iiiii(244, $1036 | 0, $last | 0, $92 | 0, $db | 0) | 0;
        $1038 = __THREW__;
        __THREW__ = 0;
        $1039 = $1038 & 1;
        if ($1039) {
         $1041 = ___cxa_find_matching_catch() | 0;
         $1042 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($92);
         $$23 = $1041;
         $$2332 = $1042;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($92);
         $1040 = ($1037 | 0) == ($1036 | 0);
         $first$42 = $1040 ? $first : $1037;
         $$0 = $first$42;
         break L1;
        }
        break;
       }
      case 79:
       {
        $1043 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($93, 11559, 2);
        __THREW__ = 0;
        $1044 = invoke_iiiii(244, $1043 | 0, $last | 0, $93 | 0, $db | 0) | 0;
        $1045 = __THREW__;
        __THREW__ = 0;
        $1046 = $1045 & 1;
        if ($1046) {
         $1048 = ___cxa_find_matching_catch() | 0;
         $1049 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($93);
         $$23 = $1048;
         $$2332 = $1049;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($93);
         $1047 = ($1044 | 0) == ($1043 | 0);
         $first$43 = $1047 ? $first : $1044;
         $$0 = $first$43;
         break L1;
        }
        break;
       }
      case 113:
       {
        $1050 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($94, 11562, 2);
        __THREW__ = 0;
        $1051 = invoke_iiiii(244, $1050 | 0, $last | 0, $94 | 0, $db | 0) | 0;
        $1052 = __THREW__;
        __THREW__ = 0;
        $1053 = $1052 & 1;
        if ($1053) {
         $1055 = ___cxa_find_matching_catch() | 0;
         $1056 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($94);
         $$23 = $1055;
         $$2332 = $1056;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($94);
         $1054 = ($1051 | 0) == ($1050 | 0);
         $first$44 = $1054 ? $first : $1051;
         $$0 = $first$44;
         break L1;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 103:
     {
      $1057 = $t$0 + 1 | 0;
      $1058 = SAFE_HEAP_LOAD($1057 >> 0 | 0, 1, 0) | 0 | 0;
      $1059 = $1058 << 24 >> 24;
      switch ($1059 | 0) {
      case 101:
       {
        $1060 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($95, 11565, 2);
        __THREW__ = 0;
        $1061 = invoke_iiiii(244, $1060 | 0, $last | 0, $95 | 0, $db | 0) | 0;
        $1062 = __THREW__;
        __THREW__ = 0;
        $1063 = $1062 & 1;
        if ($1063) {
         $1065 = ___cxa_find_matching_catch() | 0;
         $1066 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($95);
         $$23 = $1065;
         $$2332 = $1066;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($95);
         $1064 = ($1061 | 0) == ($1060 | 0);
         $first$45 = $1064 ? $first : $1061;
         $$0 = $first$45;
         break L1;
        }
        break;
       }
      case 116:
       {
        $1067 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($96, 10371, 1);
        __THREW__ = 0;
        $1068 = invoke_iiiii(244, $1067 | 0, $last | 0, $96 | 0, $db | 0) | 0;
        $1069 = __THREW__;
        __THREW__ = 0;
        $1070 = $1069 & 1;
        if ($1070) {
         $1072 = ___cxa_find_matching_catch() | 0;
         $1073 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($96);
         $$23 = $1072;
         $$2332 = $1073;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($96);
         $1071 = ($1068 | 0) == ($1067 | 0);
         $first$46 = $1071 ? $first : $1068;
         $$0 = $first$46;
         break L1;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 105:
     {
      $1074 = $t$0 + 1 | 0;
      $1075 = SAFE_HEAP_LOAD($1074 >> 0 | 0, 1, 0) | 0 | 0;
      $1076 = $1075 << 24 >> 24 == 120;
      if (!$1076) {
       $$0 = $first;
       break L1;
      }
      $1077 = $first + 2 | 0;
      $1078 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1077, $last, $db) | 0;
      $1079 = ($1078 | 0) == ($1077 | 0);
      if ($1079) {
       $$0 = $first;
       break L1;
      }
      $1080 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1078, $last, $db) | 0;
      $1081 = ($1080 | 0) == ($1078 | 0);
      $1082 = $db + 4 | 0;
      $1083 = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
      if ($1081) {
       $1140 = $1083 + -24 | 0;
       $1142 = $1083;
       while (1) {
        $1141 = $1142 + -24 | 0;
        SAFE_HEAP_STORE($1082 | 0, $1141 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1141);
        $$pre$i116 = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
        $1143 = ($$pre$i116 | 0) == ($1140 | 0);
        if ($1143) {
         $$0 = $first;
         break L1;
        } else {
         $1142 = $$pre$i116;
        }
       }
      }
      $1084 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $1085 = $1083;
      $1086 = $1084;
      $1087 = $1085 - $1086 | 0;
      $1088 = ($1087 | 0) / 24 & -1;
      $1089 = $1088 >>> 0 < 2;
      if ($1089) {
       $$0 = $first;
       break L1;
      }
      $1090 = $1083 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $1090);
      $1091 = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
      $1092 = $1091 + -24 | 0;
      $1094 = $1091;
      while (1) {
       $1093 = $1094 + -24 | 0;
       SAFE_HEAP_STORE($1082 | 0, $1093 | 0, 4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1093);
       $$pre$i = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
       $1095 = ($$pre$i | 0) == ($1092 | 0);
       if ($1095) {
        break;
       } else {
        $1094 = $$pre$i;
       }
      }
      $1096 = $1091 + -48 | 0;
      __THREW__ = 0;
      invoke_vii(232, $op1 | 0, $1096 | 0);
      $1097 = __THREW__;
      __THREW__ = 0;
      $1098 = $1097 & 1;
      if ($1098) {
       $1130 = ___cxa_find_matching_catch() | 0;
       $1131 = tempRet0;
       $$10 = $1130;
       $$1019 = $1131;
      } else {
       $1099 = SAFE_HEAP_LOAD($1082 | 0, 4, 0) | 0 | 0;
       $1100 = $1099 + -24 | 0;
       __THREW__ = 0;
       invoke_viii(243, $101 | 0, 10307 | 0, $op1 | 0);
       $1101 = __THREW__;
       __THREW__ = 0;
       $1102 = $1101 & 1;
       if ($1102) {
        $1132 = ___cxa_find_matching_catch() | 0;
        $1133 = tempRet0;
        $$9 = $1132;
        $$918 = $1133;
       } else {
        __THREW__ = 0;
        $1103 = invoke_iii(228, $101 | 0, 11568 | 0) | 0;
        $1104 = __THREW__;
        __THREW__ = 0;
        $1105 = $1104 & 1;
        if ($1105) {
         $1134 = ___cxa_find_matching_catch() | 0;
         $1135 = tempRet0;
         $$8 = $1134;
         $$817 = $1135;
        } else {
         {}
         SAFE_HEAP_STORE($100 | 0, SAFE_HEAP_LOAD($1103 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($100 + 4 | 0, SAFE_HEAP_LOAD($1103 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($100 + 8 | 0, SAFE_HEAP_LOAD($1103 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($1103 | 0, 0 | 0, 4);
         $1106 = $1103 + 4 | 0;
         SAFE_HEAP_STORE($1106 | 0, 0 | 0, 4);
         $1107 = $1103 + 8 | 0;
         SAFE_HEAP_STORE($1107 | 0, 0 | 0, 4);
         $1108 = SAFE_HEAP_LOAD($op2 >> 0 | 0, 1, 0) | 0 | 0;
         $1109 = $1108 & 1;
         $1110 = $1109 << 24 >> 24 == 0;
         $1111 = $op2 + 8 | 0;
         $1112 = SAFE_HEAP_LOAD($1111 | 0, 4, 0) | 0 | 0;
         $1113 = $op2 + 1 | 0;
         $1114 = $1110 ? $1113 : $1112;
         $1115 = $op2 + 4 | 0;
         $1116 = SAFE_HEAP_LOAD($1115 | 0, 4, 0) | 0 | 0;
         $1117 = $1108 & 255;
         $1118 = $1117 >>> 1;
         $1119 = $1110 ? $1118 : $1116;
         __THREW__ = 0;
         $1120 = invoke_iiii(222, $100 | 0, $1114 | 0, $1119 | 0) | 0;
         $1121 = __THREW__;
         __THREW__ = 0;
         $1122 = $1121 & 1;
         do {
          if ($1122) {
           $1136 = ___cxa_find_matching_catch() | 0;
           $1137 = tempRet0;
           $$7 = $1136;
           $$716 = $1137;
          } else {
           {}
           SAFE_HEAP_STORE($99 | 0, SAFE_HEAP_LOAD($1120 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($99 + 4 | 0, SAFE_HEAP_LOAD($1120 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($99 + 8 | 0, SAFE_HEAP_LOAD($1120 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($1120 | 0, 0 | 0, 4);
           $1123 = $1120 + 4 | 0;
           SAFE_HEAP_STORE($1123 | 0, 0 | 0, 4);
           $1124 = $1120 + 8 | 0;
           SAFE_HEAP_STORE($1124 | 0, 0 | 0, 4);
           __THREW__ = 0;
           $1125 = invoke_iii(228, $99 | 0, 10296 | 0) | 0;
           $1126 = __THREW__;
           __THREW__ = 0;
           $1127 = $1126 & 1;
           if ($1127) {
            $1138 = ___cxa_find_matching_catch() | 0;
            $1139 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($99);
            $$7 = $1138;
            $$716 = $1139;
            break;
           } else {
            {}
            SAFE_HEAP_STORE($98 | 0, SAFE_HEAP_LOAD($1125 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($98 + 4 | 0, SAFE_HEAP_LOAD($1125 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($98 + 8 | 0, SAFE_HEAP_LOAD($1125 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1125 | 0, 0 | 0, 4);
            $1128 = $1125 + 4 | 0;
            SAFE_HEAP_STORE($1128 | 0, 0 | 0, 4);
            $1129 = $1125 + 8 | 0;
            SAFE_HEAP_STORE($1129 | 0, 0 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($97, $98);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1100, $97);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($97);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($98);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($99);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($100);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($101);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
            $$0 = $1080;
            break L1;
           }
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($100);
         $$8 = $$7;
         $$817 = $$716;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($101);
        $$9 = $$8;
        $$918 = $$817;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
       $$10 = $$9;
       $$1019 = $$918;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
      $$23 = $$10;
      $$2332 = $$1019;
      break;
     }
    case 108:
     {
      $1144 = $t$0 + 1 | 0;
      $1145 = SAFE_HEAP_LOAD($1144 >> 0 | 0, 1, 0) | 0 | 0;
      $1146 = $1145 << 24 >> 24;
      switch ($1146 | 0) {
      case 101:
       {
        $1147 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($102, 11571, 2);
        __THREW__ = 0;
        $1148 = invoke_iiiii(244, $1147 | 0, $last | 0, $102 | 0, $db | 0) | 0;
        $1149 = __THREW__;
        __THREW__ = 0;
        $1150 = $1149 & 1;
        if ($1150) {
         $1152 = ___cxa_find_matching_catch() | 0;
         $1153 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($102);
         $$23 = $1152;
         $$2332 = $1153;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($102);
         $1151 = ($1148 | 0) == ($1147 | 0);
         $first$47 = $1151 ? $first : $1148;
         $$0 = $first$47;
         break L1;
        }
        break;
       }
      case 115:
       {
        $1154 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($103, 11574, 2);
        __THREW__ = 0;
        $1155 = invoke_iiiii(244, $1154 | 0, $last | 0, $103 | 0, $db | 0) | 0;
        $1156 = __THREW__;
        __THREW__ = 0;
        $1157 = $1156 & 1;
        if ($1157) {
         $1159 = ___cxa_find_matching_catch() | 0;
         $1160 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($103);
         $$23 = $1159;
         $$2332 = $1160;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($103);
         $1158 = ($1155 | 0) == ($1154 | 0);
         $first$48 = $1158 ? $first : $1155;
         $$0 = $first$48;
         break L1;
        }
        break;
       }
      case 83:
       {
        $1161 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($104, 11577, 3);
        __THREW__ = 0;
        $1162 = invoke_iiiii(244, $1161 | 0, $last | 0, $104 | 0, $db | 0) | 0;
        $1163 = __THREW__;
        __THREW__ = 0;
        $1164 = $1163 & 1;
        if ($1164) {
         $1166 = ___cxa_find_matching_catch() | 0;
         $1167 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($104);
         $$23 = $1166;
         $$2332 = $1167;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($104);
         $1165 = ($1162 | 0) == ($1161 | 0);
         $first$49 = $1165 ? $first : $1162;
         $$0 = $first$49;
         break L1;
        }
        break;
       }
      case 116:
       {
        $1168 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($105, 10369, 1);
        __THREW__ = 0;
        $1169 = invoke_iiiii(244, $1168 | 0, $last | 0, $105 | 0, $db | 0) | 0;
        $1170 = __THREW__;
        __THREW__ = 0;
        $1171 = $1170 & 1;
        if ($1171) {
         $1173 = ___cxa_find_matching_catch() | 0;
         $1174 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($105);
         $$23 = $1173;
         $$2332 = $1174;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($105);
         $1172 = ($1169 | 0) == ($1168 | 0);
         $first$50 = $1172 ? $first : $1169;
         $$0 = $first$50;
         break L1;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 109:
     {
      $1175 = $t$0 + 1 | 0;
      $1176 = SAFE_HEAP_LOAD($1175 >> 0 | 0, 1, 0) | 0 | 0;
      $1177 = $1176 << 24 >> 24;
      switch ($1177 | 0) {
      case 105:
       {
        $1178 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($106, 11581, 1);
        __THREW__ = 0;
        $1179 = invoke_iiiii(244, $1178 | 0, $last | 0, $106 | 0, $db | 0) | 0;
        $1180 = __THREW__;
        __THREW__ = 0;
        $1181 = $1180 & 1;
        if ($1181) {
         $1183 = ___cxa_find_matching_catch() | 0;
         $1184 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($106);
         $$23 = $1183;
         $$2332 = $1184;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($106);
         $1182 = ($1179 | 0) == ($1178 | 0);
         $first$51 = $1182 ? $first : $1179;
         $$0 = $first$51;
         break L1;
        }
        break;
       }
      case 73:
       {
        $1185 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($107, 11583, 2);
        __THREW__ = 0;
        $1186 = invoke_iiiii(244, $1185 | 0, $last | 0, $107 | 0, $db | 0) | 0;
        $1187 = __THREW__;
        __THREW__ = 0;
        $1188 = $1187 & 1;
        if ($1188) {
         $1190 = ___cxa_find_matching_catch() | 0;
         $1191 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($107);
         $$23 = $1190;
         $$2332 = $1191;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($107);
         $1189 = ($1186 | 0) == ($1185 | 0);
         $first$52 = $1189 ? $first : $1186;
         $$0 = $first$52;
         break L1;
        }
        break;
       }
      case 108:
       {
        $1192 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($108, 10352, 1);
        __THREW__ = 0;
        $1193 = invoke_iiiii(244, $1192 | 0, $last | 0, $108 | 0, $db | 0) | 0;
        $1194 = __THREW__;
        __THREW__ = 0;
        $1195 = $1194 & 1;
        if ($1195) {
         $1197 = ___cxa_find_matching_catch() | 0;
         $1198 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($108);
         $$23 = $1197;
         $$2332 = $1198;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($108);
         $1196 = ($1193 | 0) == ($1192 | 0);
         $first$53 = $1196 ? $first : $1193;
         $$0 = $first$53;
         break L1;
        }
        break;
       }
      case 76:
       {
        $1199 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($109, 11586, 2);
        __THREW__ = 0;
        $1200 = invoke_iiiii(244, $1199 | 0, $last | 0, $109 | 0, $db | 0) | 0;
        $1201 = __THREW__;
        __THREW__ = 0;
        $1202 = $1201 & 1;
        if ($1202) {
         $1204 = ___cxa_find_matching_catch() | 0;
         $1205 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($109);
         $$23 = $1204;
         $$2332 = $1205;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($109);
         $1203 = ($1200 | 0) == ($1199 | 0);
         $first$54 = $1203 ? $first : $1200;
         $$0 = $first$54;
         break L1;
        }
        break;
       }
      case 109:
       {
        $1206 = $first + 2 | 0;
        $1207 = ($1206 | 0) == ($last | 0);
        if (!$1207) {
         $1208 = SAFE_HEAP_LOAD($1206 >> 0 | 0, 1, 0) | 0 | 0;
         $1209 = $1208 << 24 >> 24 == 95;
         if ($1209) {
          $1210 = $first + 3 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($110, 11589, 2);
          __THREW__ = 0;
          $1211 = invoke_iiiii(245, $1210 | 0, $last | 0, $110 | 0, $db | 0) | 0;
          $1212 = __THREW__;
          __THREW__ = 0;
          $1213 = $1212 & 1;
          if ($1213) {
           $1215 = ___cxa_find_matching_catch() | 0;
           $1216 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($110);
           $$23 = $1215;
           $$2332 = $1216;
           break L7;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($110);
           $1214 = ($1211 | 0) == ($1210 | 0);
           $first$55 = $1214 ? $first : $1211;
           $$0 = $first$55;
           break L1;
          }
         }
        }
        $1217 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1206, $last, $db) | 0;
        $1218 = ($1217 | 0) == ($1206 | 0);
        if ($1218) {
         $$0 = $first;
         break L1;
        }
        $1219 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1220 = $db + 4 | 0;
        $1221 = SAFE_HEAP_LOAD($1220 | 0, 4, 0) | 0 | 0;
        $1222 = ($1219 | 0) == ($1221 | 0);
        if ($1222) {
         $$0 = $first;
         break L1;
        }
        $1223 = $1221 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($114, $1223);
        __THREW__ = 0;
        $1224 = invoke_iiii(227, $114 | 0, 0, 10307 | 0) | 0;
        $1225 = __THREW__;
        __THREW__ = 0;
        $1226 = $1225 & 1;
        do {
         if ($1226) {
          $1234 = ___cxa_find_matching_catch() | 0;
          $1235 = tempRet0;
          $$12 = $1234;
          $$1221 = $1235;
         } else {
          {}
          SAFE_HEAP_STORE($113 | 0, SAFE_HEAP_LOAD($1224 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($113 + 4 | 0, SAFE_HEAP_LOAD($1224 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($113 + 8 | 0, SAFE_HEAP_LOAD($1224 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1224 | 0, 0 | 0, 4);
          $1227 = $1224 + 4 | 0;
          SAFE_HEAP_STORE($1227 | 0, 0 | 0, 4);
          $1228 = $1224 + 8 | 0;
          SAFE_HEAP_STORE($1228 | 0, 0 | 0, 4);
          __THREW__ = 0;
          $1229 = invoke_iii(228, $113 | 0, 11592 | 0) | 0;
          $1230 = __THREW__;
          __THREW__ = 0;
          $1231 = $1230 & 1;
          if ($1231) {
           $1236 = ___cxa_find_matching_catch() | 0;
           $1237 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($113);
           $$12 = $1236;
           $$1221 = $1237;
           break;
          } else {
           {}
           SAFE_HEAP_STORE($112 | 0, SAFE_HEAP_LOAD($1229 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($112 + 4 | 0, SAFE_HEAP_LOAD($1229 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($112 + 8 | 0, SAFE_HEAP_LOAD($1229 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($1229 | 0, 0 | 0, 4);
           $1232 = $1229 + 4 | 0;
           SAFE_HEAP_STORE($1232 | 0, 0 | 0, 4);
           $1233 = $1229 + 8 | 0;
           SAFE_HEAP_STORE($1233 | 0, 0 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($111, $112);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1223, $111);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($111);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($112);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($113);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($114);
           $$0 = $1217;
           break L1;
          }
         }
        } while (0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($114);
        $$23 = $$12;
        $$2332 = $$1221;
        break L7;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 110:
     {
      $1238 = $t$0 + 1 | 0;
      $1239 = SAFE_HEAP_LOAD($1238 >> 0 | 0, 1, 0) | 0 | 0;
      $1240 = $1239 << 24 >> 24;
      switch ($1240 | 0) {
      case 119:
      case 97:
       {
        L530 : do {
         if ($146) {
          $1241 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $1242 = $1241 << 24 >> 24 == 103;
          if ($1242) {
           $1243 = $first + 1 | 0;
           $1244 = SAFE_HEAP_LOAD($1243 >> 0 | 0, 1, 0) | 0 | 0;
           $1245 = $1244 << 24 >> 24 == 115;
           $1246 = $first + 2 | 0;
           $$first$i = $1245 ? $1246 : $first;
           $$pre = SAFE_HEAP_LOAD($$first$i >> 0 | 0, 1, 0) | 0 | 0;
           $1247 = $$pre;
           $parsed_gs$0$off0$i = $1245;
           $t$0$i267 = $$first$i;
          } else {
           $1247 = $1241;
           $parsed_gs$0$off0$i = 0;
           $t$0$i267 = $first;
          }
          $1248 = $1247 << 24 >> 24 == 110;
          if ($1248) {
           $1249 = $t$0$i267 + 1 | 0;
           $1250 = SAFE_HEAP_LOAD($1249 >> 0 | 0, 1, 0) | 0 | 0;
           switch ($1250 << 24 >> 24) {
           case 97:
           case 119:
            {
             break;
            }
           default:
            {
             $$221$i = $first;
             label = 487;
             break L530;
            }
           }
           $1251 = $1250 << 24 >> 24 == 97;
           $1252 = $t$0$i267 + 2 | 0;
           $1253 = ($1252 | 0) == ($last | 0);
           if ($1253) {
            $$9$i = $first;
           } else {
            $has_expr_list$0$off0$i = 0;
            $t$1$i = $1252;
            while (1) {
             $1254 = SAFE_HEAP_LOAD($t$1$i >> 0 | 0, 1, 0) | 0 | 0;
             $1255 = $1254 << 24 >> 24 == 95;
             if ($1255) {
              $has_expr_list$0$off0$i$lcssa = $has_expr_list$0$off0$i;
              $t$1$i$lcssa = $t$1$i;
              break;
             }
             $1256 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i, $last, $db) | 0;
             $1257 = ($1256 | 0) == ($t$1$i | 0);
             $1258 = ($1256 | 0) == ($last | 0);
             $or$cond$i = $1257 | $1258;
             if ($or$cond$i) {
              $$9$i = $first;
              break L530;
             } else {
              $has_expr_list$0$off0$i = 1;
              $t$1$i = $1256;
             }
            }
            $1259 = $t$1$i$lcssa + 1 | 0;
            $1260 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1259, $last, $db) | 0;
            $1261 = ($1260 | 0) == ($1259 | 0);
            $1262 = ($1260 | 0) == ($last | 0);
            $or$cond22$i = $1261 | $1262;
            if ($or$cond22$i) {
             $$9$i = $first;
            } else {
             $1263 = $1260;
             $1264 = $142 - $1263 | 0;
             $1265 = ($1264 | 0) > 2;
             $1266 = SAFE_HEAP_LOAD($1260 >> 0 | 0, 1, 0) | 0 | 0;
             $1267 = $1266 << 24 >> 24 == 112;
             $or$cond = $1265 & $1267;
             L542 : do {
              if ($or$cond) {
               $1268 = $1260 + 1 | 0;
               $1269 = SAFE_HEAP_LOAD($1268 >> 0 | 0, 1, 0) | 0 | 0;
               $1270 = $1269 << 24 >> 24 == 105;
               if (!$1270) {
                $$9$i = $first;
                break L530;
               }
               $1271 = $1260 + 2 | 0;
               $t$2$i = $1271;
               while (1) {
                $1272 = SAFE_HEAP_LOAD($t$2$i >> 0 | 0, 1, 0) | 0 | 0;
                $1273 = $1272 << 24 >> 24 == 69;
                if ($1273) {
                 $has_init$0$off0$i513 = 1;
                 $t$3$i512 = $t$2$i;
                 break L542;
                }
                $1274 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$2$i, $last, $db) | 0;
                $1275 = ($1274 | 0) == ($t$2$i | 0);
                $1276 = ($1274 | 0) == ($last | 0);
                $or$cond23$i = $1275 | $1276;
                if ($or$cond23$i) {
                 $$9$i = $first;
                 break L530;
                } else {
                 $t$2$i = $1274;
                }
               }
              } else {
               $1277 = $1266 << 24 >> 24 == 69;
               if ($1277) {
                $has_init$0$off0$i513 = 0;
                $t$3$i512 = $1260;
               } else {
                $$9$i = $first;
                break L530;
               }
              }
             } while (0);
             SAFE_HEAP_STORE($init_list$i | 0, 0 | 0, 4);
             $1278 = $init_list$i + 4 | 0;
             SAFE_HEAP_STORE($1278 | 0, 0 | 0, 4);
             $1279 = $init_list$i + 8 | 0;
             SAFE_HEAP_STORE($1279 | 0, 0 | 0, 4);
             if ($has_init$0$off0$i513) {
              $1280 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $1281 = $db + 4 | 0;
              $1282 = SAFE_HEAP_LOAD($1281 | 0, 4, 0) | 0 | 0;
              $1283 = ($1280 | 0) == ($1282 | 0);
              if ($1283) {
               label = 482;
              } else {
               $1284 = $1282 + -24 | 0;
               __THREW__ = 0;
               invoke_vii(232, $27 | 0, $1284 | 0);
               $1285 = __THREW__;
               __THREW__ = 0;
               $1286 = $1285 & 1;
               if ($1286) {
                label = 430;
               } else {
                $1287 = SAFE_HEAP_LOAD($init_list$i >> 0 | 0, 1, 0) | 0 | 0;
                $1288 = $1287 & 1;
                $1289 = $1288 << 24 >> 24 == 0;
                L554 : do {
                 if ($1289) {
                  $1290 = $init_list$i + 1 | 0;
                  SAFE_HEAP_STORE($1290 >> 0 | 0, 0 | 0, 1);
                  SAFE_HEAP_STORE($init_list$i >> 0 | 0, 0 | 0, 1);
                 } else {
                  $1291 = $init_list$i + 8 | 0;
                  $1292 = SAFE_HEAP_LOAD($1291 | 0, 4, 0) | 0 | 0;
                  SAFE_HEAP_STORE($1292 >> 0 | 0, 0 | 0, 1);
                  $1293 = $init_list$i + 4 | 0;
                  SAFE_HEAP_STORE($1293 | 0, 0 | 0, 4);
                  $1294 = SAFE_HEAP_LOAD($init_list$i | 0, 4, 0) | 0 | 0;
                  $1295 = $1294 & -2;
                  $phitmp$i$i$i$i$i$i$i273 = $1295 + -1 | 0;
                  $1296 = $1294 & 255;
                  $1297 = $1296 & 1;
                  $1298 = $1297 << 24 >> 24 == 0;
                  do {
                   if ($1298) {
                    $1299 = $1294 >>> 1;
                    $1300 = $1299 & 127;
                    $1301 = ($1296 & 255) < 22;
                    if ($1301) {
                     $1308 = $init_list$i + 1 | 0;
                     $1309 = $1294 >>> 1;
                     $1310 = $1309 & 127;
                     $1311 = $1310 + 1 | 0;
                     _memcpy($1308 | 0, $1292 | 0, $1311 | 0) | 0;
                     _free($1292);
                     $$ph518 = $1300;
                     break;
                    }
                    $1302 = $1300 + 16 | 0;
                    $1303 = $1302 & 240;
                    $phitmp$i2$i$i$i$i$i$i276 = $1303 + -1 | 0;
                    $1304 = ($phitmp$i2$i$i$i$i$i$i276 | 0) == ($phitmp$i$i$i$i$i$i$i273 | 0);
                    if ($1304) {
                     break L554;
                    }
                    $1305 = $phitmp$i2$i$i$i$i$i$i276 >>> 0 <= $phitmp$i$i$i$i$i$i$i273 >>> 0;
                    $1306 = _malloc($1303) | 0;
                    $1307 = ($1306 | 0) == (0 | 0);
                    $or$cond$i$i$i$i$i$i278 = $1305 & $1307;
                    if ($or$cond$i$i$i$i$i$i278) {
                     break L554;
                    }
                    $1313 = $init_list$i + 1 | 0;
                    $1314 = $1294 >>> 1;
                    $1315 = $1314 & 127;
                    $1316 = $1315 + 1 | 0;
                    _memcpy($1306 | 0, $1313 | 0, $1316 | 0) | 0;
                    $1317 = $1303 | 1;
                    SAFE_HEAP_STORE($init_list$i | 0, $1317 | 0, 4);
                    SAFE_HEAP_STORE($1293 | 0, $1300 | 0, 4);
                    SAFE_HEAP_STORE($1291 | 0, $1306 | 0, 4);
                    break L554;
                   } else {
                    $1312 = $init_list$i + 1 | 0;
                    SAFE_HEAP_STORE($1312 >> 0 | 0, 0 | 0, 1);
                    _free($1292);
                    $$ph518 = 0;
                   }
                  } while (0);
                  $1318 = $$ph518 << 1;
                  $1319 = $1318 & 255;
                  SAFE_HEAP_STORE($init_list$i >> 0 | 0, $1319 | 0, 1);
                 }
                } while (0);
                {}
                SAFE_HEAP_STORE($init_list$i | 0, SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($init_list$i + 4 | 0, SAFE_HEAP_LOAD($27 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($init_list$i + 8 | 0, SAFE_HEAP_LOAD($27 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
                $1320 = $27 + 4 | 0;
                SAFE_HEAP_STORE($1320 | 0, 0 | 0, 4);
                $1321 = $27 + 8 | 0;
                SAFE_HEAP_STORE($1321 | 0, 0 | 0, 4);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                $1322 = SAFE_HEAP_LOAD($1281 | 0, 4, 0) | 0 | 0;
                $1323 = $1322 + -24 | 0;
                $1325 = $1322;
                while (1) {
                 $1324 = $1325 + -24 | 0;
                 SAFE_HEAP_STORE($1281 | 0, $1324 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1324);
                 $$pre$i$i289 = SAFE_HEAP_LOAD($1281 | 0, 4, 0) | 0 | 0;
                 $1326 = ($$pre$i$i289 | 0) == ($1323 | 0);
                 if ($1326) {
                  $$pre$phi511Z2D = $1281;
                  $$pre$phiZ2D = $db;
                  $1331 = $1323;
                  label = 431;
                  break;
                 } else {
                  $1325 = $$pre$i$i289;
                 }
                }
               }
              }
             } else {
              $$phi$trans$insert = $db + 4 | 0;
              $$pre507 = SAFE_HEAP_LOAD($$phi$trans$insert | 0, 4, 0) | 0 | 0;
              $$pre$phi511Z2D = $$phi$trans$insert;
              $$pre$phiZ2D = $db;
              $1331 = $$pre507;
              label = 431;
             }
             do {
              if ((label | 0) == 431) {
               $1329 = SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0;
               $1330 = ($1329 | 0) == ($1331 | 0);
               if ($1330) {
                label = 482;
               } else {
                $1332 = $1331 + -24 | 0;
                __THREW__ = 0;
                invoke_vii(232, $type$i | 0, $1332 | 0);
                $1333 = __THREW__;
                __THREW__ = 0;
                $1334 = $1333 & 1;
                if ($1334) {
                 label = 430;
                } else {
                 $1335 = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                 $1336 = $1335 + -24 | 0;
                 $1338 = $1335;
                 while (1) {
                  $1337 = $1338 + -24 | 0;
                  SAFE_HEAP_STORE($$pre$phi511Z2D | 0, $1337 | 0, 4);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1337);
                  $$pre$i24$i = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                  $1339 = ($$pre$i24$i | 0) == ($1336 | 0);
                  if ($1339) {
                   break;
                  } else {
                   $1338 = $$pre$i24$i;
                  }
                 }
                 SAFE_HEAP_STORE($expr_list$i | 0, 0 | 0, 4);
                 $1340 = $expr_list$i + 4 | 0;
                 SAFE_HEAP_STORE($1340 | 0, 0 | 0, 4);
                 $1341 = $expr_list$i + 8 | 0;
                 SAFE_HEAP_STORE($1341 | 0, 0 | 0, 4);
                 do {
                  if ($has_expr_list$0$off0$i$lcssa) {
                   $1342 = SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0;
                   $1343 = ($1342 | 0) == ($1336 | 0);
                   if ($1343) {
                    $$019$i = $first;
                    $$2$i302 = 0;
                    label = 483;
                   } else {
                    $1344 = $1335 + -48 | 0;
                    __THREW__ = 0;
                    invoke_vii(232, $28 | 0, $1344 | 0);
                    $1345 = __THREW__;
                    __THREW__ = 0;
                    $1346 = $1345 & 1;
                    if ($1346) {
                     $1387 = ___cxa_find_matching_catch() | 0;
                     $1388 = tempRet0;
                     $$310$i = $1387;
                     $$36$i = $1388;
                     label = 485;
                     break;
                    }
                    $1347 = SAFE_HEAP_LOAD($expr_list$i >> 0 | 0, 1, 0) | 0 | 0;
                    $1348 = $1347 & 1;
                    $1349 = $1348 << 24 >> 24 == 0;
                    L583 : do {
                     if ($1349) {
                      $1350 = $expr_list$i + 1 | 0;
                      SAFE_HEAP_STORE($1350 >> 0 | 0, 0 | 0, 1);
                      SAFE_HEAP_STORE($expr_list$i >> 0 | 0, 0 | 0, 1);
                     } else {
                      $1351 = $expr_list$i + 8 | 0;
                      $1352 = SAFE_HEAP_LOAD($1351 | 0, 4, 0) | 0 | 0;
                      SAFE_HEAP_STORE($1352 >> 0 | 0, 0 | 0, 1);
                      $1353 = $expr_list$i + 4 | 0;
                      SAFE_HEAP_STORE($1353 | 0, 0 | 0, 4);
                      $1354 = SAFE_HEAP_LOAD($expr_list$i | 0, 4, 0) | 0 | 0;
                      $1355 = $1354 & -2;
                      $phitmp$i$i$i$i$i$i32$i = $1355 + -1 | 0;
                      $1356 = $1354 & 255;
                      $1357 = $1356 & 1;
                      $1358 = $1357 << 24 >> 24 == 0;
                      do {
                       if ($1358) {
                        $1359 = $1354 >>> 1;
                        $1360 = $1359 & 127;
                        $1361 = ($1356 & 255) < 22;
                        if ($1361) {
                         $1368 = $expr_list$i + 1 | 0;
                         $1369 = $1354 >>> 1;
                         $1370 = $1369 & 127;
                         $1371 = $1370 + 1 | 0;
                         _memcpy($1368 | 0, $1352 | 0, $1371 | 0) | 0;
                         _free($1352);
                         $$ph520524 = $1360;
                         break;
                        }
                        $1362 = $1360 + 16 | 0;
                        $1363 = $1362 & 240;
                        $phitmp$i2$i$i$i$i$i35$i = $1363 + -1 | 0;
                        $1364 = ($phitmp$i2$i$i$i$i$i35$i | 0) == ($phitmp$i$i$i$i$i$i32$i | 0);
                        if ($1364) {
                         break L583;
                        }
                        $1365 = $phitmp$i2$i$i$i$i$i35$i >>> 0 <= $phitmp$i$i$i$i$i$i32$i >>> 0;
                        $1366 = _malloc($1363) | 0;
                        $1367 = ($1366 | 0) == (0 | 0);
                        $or$cond$i$i$i$i$i37$i = $1365 & $1367;
                        if ($or$cond$i$i$i$i$i37$i) {
                         break L583;
                        }
                        $1373 = $expr_list$i + 1 | 0;
                        $1374 = $1354 >>> 1;
                        $1375 = $1374 & 127;
                        $1376 = $1375 + 1 | 0;
                        _memcpy($1366 | 0, $1373 | 0, $1376 | 0) | 0;
                        $1377 = $1363 | 1;
                        SAFE_HEAP_STORE($expr_list$i | 0, $1377 | 0, 4);
                        SAFE_HEAP_STORE($1353 | 0, $1360 | 0, 4);
                        SAFE_HEAP_STORE($1351 | 0, $1366 | 0, 4);
                        break L583;
                       } else {
                        $1372 = $expr_list$i + 1 | 0;
                        SAFE_HEAP_STORE($1372 >> 0 | 0, 0 | 0, 1);
                        _free($1352);
                        $$ph520524 = 0;
                       }
                      } while (0);
                      $1378 = $$ph520524 << 1;
                      $1379 = $1378 & 255;
                      SAFE_HEAP_STORE($expr_list$i >> 0 | 0, $1379 | 0, 1);
                     }
                    } while (0);
                    {}
                    SAFE_HEAP_STORE($expr_list$i | 0, SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($expr_list$i + 4 | 0, SAFE_HEAP_LOAD($28 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($expr_list$i + 8 | 0, SAFE_HEAP_LOAD($28 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
                    $1380 = $28 + 4 | 0;
                    SAFE_HEAP_STORE($1380 | 0, 0 | 0, 4);
                    $1381 = $28 + 8 | 0;
                    SAFE_HEAP_STORE($1381 | 0, 0 | 0, 4);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
                    $1382 = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                    $1383 = $1382 + -24 | 0;
                    $1385 = $1382;
                    while (1) {
                     $1384 = $1385 + -24 | 0;
                     SAFE_HEAP_STORE($$pre$phi511Z2D | 0, $1384 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1384);
                     $$pre$i48$i = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                     $1386 = ($$pre$i48$i | 0) == ($1383 | 0);
                     if ($1386) {
                      label = 451;
                      break;
                     } else {
                      $1385 = $$pre$i48$i;
                     }
                    }
                   }
                  } else {
                   label = 451;
                  }
                 } while (0);
                 L598 : do {
                  if ((label | 0) == 451) {
                   SAFE_HEAP_STORE($r$i | 0, 0 | 0, 4);
                   $1389 = $r$i + 4 | 0;
                   SAFE_HEAP_STORE($1389 | 0, 0 | 0, 4);
                   $1390 = $r$i + 8 | 0;
                   SAFE_HEAP_STORE($1390 | 0, 0 | 0, 4);
                   if ($parsed_gs$0$off0$i) {
                    __THREW__ = 0;
                    invoke_viii(246, $r$i | 0, 10495 | 0, 2);
                    $1391 = __THREW__;
                    __THREW__ = 0;
                    $1392 = $1391 & 1;
                    if ($1392) {
                     label = 453;
                    } else {
                     label = 454;
                    }
                   } else {
                    label = 454;
                   }
                   L602 : do {
                    if ((label | 0) == 454) {
                     __THREW__ = 0;
                     if ($1251) {
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($r$i, 11596) | 0;
                      $1395 = __THREW__;
                      __THREW__ = 0;
                      $1396 = $1395 & 1;
                      if ($1396) {
                       label = 453;
                       break;
                      }
                     } else {
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($r$i, 10319) | 0;
                      $1397 = __THREW__;
                      __THREW__ = 0;
                      $1398 = $1397 & 1;
                      if ($1398) {
                       label = 453;
                       break;
                      }
                     }
                     L608 : do {
                      if ($has_expr_list$0$off0$i$lcssa) {
                       __THREW__ = 0;
                       invoke_viii(243, $30 | 0, 10307 | 0, $expr_list$i | 0);
                       $1399 = __THREW__;
                       __THREW__ = 0;
                       $1400 = $1399 & 1;
                       if ($1400) {
                        label = 453;
                        break L602;
                       }
                       __THREW__ = 0;
                       $1401 = invoke_iii(228, $30 | 0, 11600 | 0) | 0;
                       $1402 = __THREW__;
                       __THREW__ = 0;
                       $1403 = $1402 & 1;
                       do {
                        if ($1403) {
                         $1420 = ___cxa_find_matching_catch() | 0;
                         $1421 = tempRet0;
                         $$03$i297 = $1421;
                         $$07$i = $1420;
                        } else {
                         {}
                         SAFE_HEAP_STORE($29 | 0, SAFE_HEAP_LOAD($1401 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($29 + 4 | 0, SAFE_HEAP_LOAD($1401 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($29 + 8 | 0, SAFE_HEAP_LOAD($1401 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($1401 | 0, 0 | 0, 4);
                         $1404 = $1401 + 4 | 0;
                         SAFE_HEAP_STORE($1404 | 0, 0 | 0, 4);
                         $1405 = $1401 + 8 | 0;
                         SAFE_HEAP_STORE($1405 | 0, 0 | 0, 4);
                         $1406 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
                         $1407 = $1406 & 1;
                         $1408 = $1407 << 24 >> 24 == 0;
                         $1409 = $29 + 8 | 0;
                         $1410 = SAFE_HEAP_LOAD($1409 | 0, 4, 0) | 0 | 0;
                         $1411 = $29 + 1 | 0;
                         $1412 = $1408 ? $1411 : $1410;
                         $1413 = $29 + 4 | 0;
                         $1414 = SAFE_HEAP_LOAD($1413 | 0, 4, 0) | 0 | 0;
                         $1415 = $1406 & 255;
                         $1416 = $1415 >>> 1;
                         $1417 = $1408 ? $1416 : $1414;
                         __THREW__ = 0;
                         invoke_iiii(222, $r$i | 0, $1412 | 0, $1417 | 0) | 0;
                         $1418 = __THREW__;
                         __THREW__ = 0;
                         $1419 = $1418 & 1;
                         if ($1419) {
                          $1422 = ___cxa_find_matching_catch() | 0;
                          $1423 = tempRet0;
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                          $$03$i297 = $1423;
                          $$07$i = $1422;
                          break;
                         } else {
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
                          break L608;
                         }
                        }
                       } while (0);
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
                       $$25$i = $$03$i297;
                       $$29$i = $$07$i;
                       break L602;
                      }
                     } while (0);
                     $1424 = SAFE_HEAP_LOAD($type$i >> 0 | 0, 1, 0) | 0 | 0;
                     $1425 = $1424 & 1;
                     $1426 = $1425 << 24 >> 24 == 0;
                     $1427 = $type$i + 8 | 0;
                     $1428 = SAFE_HEAP_LOAD($1427 | 0, 4, 0) | 0 | 0;
                     $1429 = $type$i + 1 | 0;
                     $1430 = $1426 ? $1429 : $1428;
                     $1431 = $type$i + 4 | 0;
                     $1432 = SAFE_HEAP_LOAD($1431 | 0, 4, 0) | 0 | 0;
                     $1433 = $1424 & 255;
                     $1434 = $1433 >>> 1;
                     $1435 = $1426 ? $1434 : $1432;
                     __THREW__ = 0;
                     invoke_iiii(222, $r$i | 0, $1430 | 0, $1435 | 0) | 0;
                     $1436 = __THREW__;
                     __THREW__ = 0;
                     $1437 = $1436 & 1;
                     if ($1437) {
                      label = 453;
                      break;
                     }
                     L620 : do {
                      if ($has_init$0$off0$i513) {
                       __THREW__ = 0;
                       invoke_viii(243, $32 | 0, 10209 | 0, $init_list$i | 0);
                       $1438 = __THREW__;
                       __THREW__ = 0;
                       $1439 = $1438 & 1;
                       if ($1439) {
                        label = 453;
                        break L602;
                       }
                       __THREW__ = 0;
                       $1440 = invoke_iii(228, $32 | 0, 10212 | 0) | 0;
                       $1441 = __THREW__;
                       __THREW__ = 0;
                       $1442 = $1441 & 1;
                       do {
                        if ($1442) {
                         $1459 = ___cxa_find_matching_catch() | 0;
                         $1460 = tempRet0;
                         $$14$i = $1460;
                         $$18$i = $1459;
                        } else {
                         {}
                         SAFE_HEAP_STORE($31 | 0, SAFE_HEAP_LOAD($1440 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($31 + 4 | 0, SAFE_HEAP_LOAD($1440 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($31 + 8 | 0, SAFE_HEAP_LOAD($1440 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                         SAFE_HEAP_STORE($1440 | 0, 0 | 0, 4);
                         $1443 = $1440 + 4 | 0;
                         SAFE_HEAP_STORE($1443 | 0, 0 | 0, 4);
                         $1444 = $1440 + 8 | 0;
                         SAFE_HEAP_STORE($1444 | 0, 0 | 0, 4);
                         $1445 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
                         $1446 = $1445 & 1;
                         $1447 = $1446 << 24 >> 24 == 0;
                         $1448 = $31 + 8 | 0;
                         $1449 = SAFE_HEAP_LOAD($1448 | 0, 4, 0) | 0 | 0;
                         $1450 = $31 + 1 | 0;
                         $1451 = $1447 ? $1450 : $1449;
                         $1452 = $31 + 4 | 0;
                         $1453 = SAFE_HEAP_LOAD($1452 | 0, 4, 0) | 0 | 0;
                         $1454 = $1445 & 255;
                         $1455 = $1454 >>> 1;
                         $1456 = $1447 ? $1455 : $1453;
                         __THREW__ = 0;
                         invoke_iiii(222, $r$i | 0, $1451 | 0, $1456 | 0) | 0;
                         $1457 = __THREW__;
                         __THREW__ = 0;
                         $1458 = $1457 & 1;
                         if ($1458) {
                          $1461 = ___cxa_find_matching_catch() | 0;
                          $1462 = tempRet0;
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
                          $$14$i = $1462;
                          $$18$i = $1461;
                          break;
                         } else {
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
                          break L620;
                         }
                        }
                       } while (0);
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
                       $$25$i = $$14$i;
                       $$29$i = $$18$i;
                       break L602;
                      }
                     } while (0);
                     {}
                     SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($r$i | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($34 + 4 | 0, SAFE_HEAP_LOAD($r$i + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($34 + 8 | 0, SAFE_HEAP_LOAD($r$i + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($r$i | 0, 0 | 0, 4);
                     $1463 = $r$i + 4 | 0;
                     SAFE_HEAP_STORE($1463 | 0, 0 | 0, 4);
                     $1464 = $r$i + 8 | 0;
                     SAFE_HEAP_STORE($1464 | 0, 0 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($33, $34);
                     $1465 = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                     $1466 = $db + 8 | 0;
                     $1467 = SAFE_HEAP_LOAD($1466 | 0, 4, 0) | 0 | 0;
                     $1468 = $1465 >>> 0 < $1467 >>> 0;
                     if ($1468) {
                      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1465, $33);
                      $1469 = SAFE_HEAP_LOAD($$pre$phi511Z2D | 0, 4, 0) | 0 | 0;
                      $1470 = $1469 + 24 | 0;
                      SAFE_HEAP_STORE($$pre$phi511Z2D | 0, $1470 | 0, 4);
                     } else {
                      $1471 = $db + 12 | 0;
                      $1472 = SAFE_HEAP_LOAD($$pre$phiZ2D | 0, 4, 0) | 0 | 0;
                      $1473 = $1465;
                      $1474 = $1472;
                      $1475 = $1473 - $1474 | 0;
                      $1476 = ($1475 | 0) / 24 & -1;
                      $1477 = $1476 + 1 | 0;
                      $1478 = ($1475 | 0) < -24;
                      if ($1478) {
                       __THREW__ = 0;
                       invoke_vi(238, $db | 0);
                       $1479 = __THREW__;
                       __THREW__ = 0;
                       $1480 = ___cxa_find_matching_catch() | 0;
                       $1481 = tempRet0;
                       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
                       $$25$i = $1481;
                       $$29$i = $1480;
                       break;
                      }
                      $1482 = $1467;
                      $1483 = $1482 - $1474 | 0;
                      $1484 = ($1483 | 0) / 24 & -1;
                      $1485 = $1484 >>> 0 < 1073741823;
                      if ($1485) {
                       $1486 = $1484 << 1;
                       $1487 = $1486 >>> 0 < $1477 >>> 0;
                       $1488 = $1487 ? $1477 : $1486;
                       $$0$i$i$i$i299 = $1488;
                      } else {
                       $$0$i$i$i$i299 = 2147483647;
                      }
                      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i266, $$0$i$i$i$i299, $1476, $1471);
                      $1489 = $__v$i$i$i266 + 8 | 0;
                      $1490 = SAFE_HEAP_LOAD($1489 | 0, 4, 0) | 0 | 0;
                      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1490, $33);
                      $1491 = $1490 + 24 | 0;
                      SAFE_HEAP_STORE($1489 | 0, $1491 | 0, 4);
                      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i266);
                      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i266);
                     }
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
                     $1492 = $t$3$i512 + 1 | 0;
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r$i);
                     $$019$i = $1492;
                     $$2$i302 = 1;
                     label = 483;
                     break L598;
                    }
                   } while (0);
                   if ((label | 0) == 453) {
                    $1393 = ___cxa_find_matching_catch() | 0;
                    $1394 = tempRet0;
                    $$25$i = $1394;
                    $$29$i = $1393;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r$i);
                   $$310$i = $$29$i;
                   $$36$i = $$25$i;
                   label = 485;
                  }
                 } while (0);
                 if ((label | 0) == 483) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr_list$i);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type$i);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list$i);
                  if ($$2$i302) {
                   $$221$i = $$019$i;
                   label = 487;
                   break L530;
                  } else {
                   $$9$i = $first;
                   break L530;
                  }
                 } else if ((label | 0) == 485) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr_list$i);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type$i);
                  $$4$i304 = $$36$i;
                  $$411$i = $$310$i;
                  break;
                 }
                }
               }
              }
             } while (0);
             if ((label | 0) == 430) {
              $1327 = ___cxa_find_matching_catch() | 0;
              $1328 = tempRet0;
              $$4$i304 = $1328;
              $$411$i = $1327;
             } else if ((label | 0) == 482) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list$i);
              $$9$i = $first;
              break;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list$i);
             ___resumeException($$411$i | 0);
            }
           }
          } else {
           $$221$i = $first;
           label = 487;
          }
         } else {
          $$221$i = $first;
          label = 487;
         }
        } while (0);
        if ((label | 0) == 487) {
         $$9$i = $$221$i;
        }
        $$0 = $$9$i;
        break L1;
        break;
       }
      case 101:
       {
        $1493 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($115, 11603, 2);
        __THREW__ = 0;
        $1494 = invoke_iiiii(244, $1493 | 0, $last | 0, $115 | 0, $db | 0) | 0;
        $1495 = __THREW__;
        __THREW__ = 0;
        $1496 = $1495 & 1;
        if ($1496) {
         $1498 = ___cxa_find_matching_catch() | 0;
         $1499 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($115);
         $$23 = $1498;
         $$2332 = $1499;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($115);
         $1497 = ($1494 | 0) == ($1493 | 0);
         $first$56 = $1497 ? $first : $1494;
         $$0 = $first$56;
         break L1;
        }
        break;
       }
      case 103:
       {
        $1500 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($116, 11581, 1);
        __THREW__ = 0;
        $1501 = invoke_iiiii(245, $1500 | 0, $last | 0, $116 | 0, $db | 0) | 0;
        $1502 = __THREW__;
        __THREW__ = 0;
        $1503 = $1502 & 1;
        if ($1503) {
         $1505 = ___cxa_find_matching_catch() | 0;
         $1506 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($116);
         $$23 = $1505;
         $$2332 = $1506;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($116);
         $1504 = ($1501 | 0) == ($1500 | 0);
         $first$57 = $1504 ? $first : $1501;
         $$0 = $first$57;
         break L1;
        }
        break;
       }
      case 116:
       {
        $1507 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($117, 11606, 1);
        __THREW__ = 0;
        $1508 = invoke_iiiii(245, $1507 | 0, $last | 0, $117 | 0, $db | 0) | 0;
        $1509 = __THREW__;
        __THREW__ = 0;
        $1510 = $1509 & 1;
        if ($1510) {
         $1512 = ___cxa_find_matching_catch() | 0;
         $1513 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($117);
         $$23 = $1512;
         $$2332 = $1513;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($117);
         $1511 = ($1508 | 0) == ($1507 | 0);
         $first$58 = $1511 ? $first : $1508;
         $$0 = $first$58;
         break L1;
        }
        break;
       }
      case 120:
       {
        $1514 = $first + 2 | 0;
        $1515 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1514, $last, $db) | 0;
        $1516 = ($1515 | 0) == ($1514 | 0);
        L667 : do {
         if ($1516) {
          $$03$i265 = $1514;
         } else {
          $1517 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1518 = $db + 4 | 0;
          $1519 = SAFE_HEAP_LOAD($1518 | 0, 4, 0) | 0 | 0;
          $1520 = ($1517 | 0) == ($1519 | 0);
          if ($1520) {
           $$03$i265 = $1514;
          } else {
           $1521 = $1519 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($37, $1521);
           __THREW__ = 0;
           $1522 = invoke_iiii(227, $37 | 0, 0, 11608 | 0) | 0;
           $1523 = __THREW__;
           __THREW__ = 0;
           $1524 = $1523 & 1;
           do {
            if ($1524) {
             $1578 = ___cxa_find_matching_catch() | 0;
             $1579 = tempRet0;
             $$1$i264 = $1579;
             $$12$i263 = $1578;
            } else {
             {}
             SAFE_HEAP_STORE($36 | 0, SAFE_HEAP_LOAD($1522 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($36 + 4 | 0, SAFE_HEAP_LOAD($1522 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($36 + 8 | 0, SAFE_HEAP_LOAD($1522 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($1522 | 0, 0 | 0, 4);
             $1525 = $1522 + 4 | 0;
             SAFE_HEAP_STORE($1525 | 0, 0 | 0, 4);
             $1526 = $1522 + 8 | 0;
             SAFE_HEAP_STORE($1526 | 0, 0 | 0, 4);
             __THREW__ = 0;
             $1527 = invoke_iii(228, $36 | 0, 10212 | 0) | 0;
             $1528 = __THREW__;
             __THREW__ = 0;
             $1529 = $1528 & 1;
             if ($1529) {
              $1580 = ___cxa_find_matching_catch() | 0;
              $1581 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
              $$1$i264 = $1581;
              $$12$i263 = $1580;
              break;
             }
             {}
             SAFE_HEAP_STORE($35 | 0, SAFE_HEAP_LOAD($1527 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($35 + 4 | 0, SAFE_HEAP_LOAD($1527 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($35 + 8 | 0, SAFE_HEAP_LOAD($1527 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($1527 | 0, 0 | 0, 4);
             $1530 = $1527 + 4 | 0;
             SAFE_HEAP_STORE($1530 | 0, 0 | 0, 4);
             $1531 = $1527 + 8 | 0;
             SAFE_HEAP_STORE($1531 | 0, 0 | 0, 4);
             $1532 = SAFE_HEAP_LOAD($1521 >> 0 | 0, 1, 0) | 0 | 0;
             $1533 = $1532 & 1;
             $1534 = $1533 << 24 >> 24 == 0;
             do {
              if ($1534) {
               $1535 = $1521 + 1 | 0;
               SAFE_HEAP_STORE($1535 >> 0 | 0, 0 | 0, 1);
               SAFE_HEAP_STORE($1521 >> 0 | 0, 0 | 0, 1);
              } else {
               $1536 = $1519 + -16 | 0;
               $1537 = SAFE_HEAP_LOAD($1536 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($1537 >> 0 | 0, 0 | 0, 1);
               $1538 = $1519 + -20 | 0;
               SAFE_HEAP_STORE($1538 | 0, 0 | 0, 4);
               $$pre$i$i$i$i = SAFE_HEAP_LOAD($1521 >> 0 | 0, 1, 0) | 0 | 0;
               $1539 = $$pre$i$i$i$i & 1;
               $1540 = $1539 << 24 >> 24 == 0;
               if ($1540) {
                $1545 = $$pre$i$i$i$i;
                $1554 = 10;
               } else {
                $1541 = SAFE_HEAP_LOAD($1521 | 0, 4, 0) | 0 | 0;
                $1542 = $1541 & -2;
                $phitmp$i$i$i$i$i$i$i = $1542 + -1 | 0;
                $1543 = $1541 & 255;
                $1545 = $1543;
                $1554 = $phitmp$i$i$i$i$i$i$i;
               }
               $1544 = $1545 & 1;
               $1546 = $1544 << 24 >> 24 == 0;
               if ($1546) {
                $1547 = $1545 & 255;
                $1548 = $1547 >>> 1;
                $1549 = ($1545 & 255) < 22;
                if ($1549) {
                 $1552 = 10;
                 $1573 = $1548;
                 $2317 = 1;
                } else {
                 $1550 = $1548 + 16 | 0;
                 $1551 = $1550 & 240;
                 $phitmp$i2$i$i$i$i$i$i = $1551 + -1 | 0;
                 $1552 = $phitmp$i2$i$i$i$i$i$i;
                 $1573 = $1548;
                 $2317 = 1;
                }
               } else {
                $1552 = 10;
                $1573 = 0;
                $2317 = 0;
               }
               $1553 = ($1552 | 0) == ($1554 | 0);
               if (!$1553) {
                $1555 = ($1552 | 0) == 10;
                if ($1555) {
                 $1560 = $1521 + 1 | 0;
                 $1561 = SAFE_HEAP_LOAD($1536 | 0, 4, 0) | 0 | 0;
                 if ($2317) {
                  $1562 = $1545 & 255;
                  $1563 = $1562 >>> 1;
                  $1564 = $1563 + 1 | 0;
                  _memcpy($1560 | 0, $1561 | 0, $1564 | 0) | 0;
                  _free($1561);
                 } else {
                  $1569 = SAFE_HEAP_LOAD($1561 >> 0 | 0, 1, 0) | 0 | 0;
                  SAFE_HEAP_STORE($1560 >> 0 | 0, $1569 | 0, 1);
                  _free($1561);
                 }
                 $1574 = $1573 << 1;
                 $1575 = $1574 & 255;
                 SAFE_HEAP_STORE($1521 >> 0 | 0, $1575 | 0, 1);
                 break;
                }
                $1556 = $1552 >>> 0 <= $1554 >>> 0;
                $1557 = $1552 + 1 | 0;
                $1558 = _malloc($1557) | 0;
                $1559 = ($1558 | 0) == (0 | 0);
                $or$cond$i$i$i$i$i$i = $1556 & $1559;
                if (!$or$cond$i$i$i$i$i$i) {
                 if ($2317) {
                  $1565 = $1521 + 1 | 0;
                  $1566 = $1545 & 255;
                  $1567 = $1566 >>> 1;
                  $1568 = $1567 + 1 | 0;
                  _memcpy($1558 | 0, $1565 | 0, $1568 | 0) | 0;
                 } else {
                  $1570 = SAFE_HEAP_LOAD($1536 | 0, 4, 0) | 0 | 0;
                  $1571 = SAFE_HEAP_LOAD($1570 >> 0 | 0, 1, 0) | 0 | 0;
                  SAFE_HEAP_STORE($1558 >> 0 | 0, $1571 | 0, 1);
                  _free($1570);
                 }
                 $1572 = $1557 | 1;
                 SAFE_HEAP_STORE($1521 | 0, $1572 | 0, 4);
                 SAFE_HEAP_STORE($1538 | 0, $1573 | 0, 4);
                 SAFE_HEAP_STORE($1536 | 0, $1558 | 0, 4);
                }
               }
              }
             } while (0);
             {}
             SAFE_HEAP_STORE($1521 | 0, SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($1521 + 4 | 0, SAFE_HEAP_LOAD($35 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($1521 + 8 | 0, SAFE_HEAP_LOAD($35 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($35 | 0, 0 | 0, 4);
             $1576 = $35 + 4 | 0;
             SAFE_HEAP_STORE($1576 | 0, 0 | 0, 4);
             $1577 = $35 + 8 | 0;
             SAFE_HEAP_STORE($1577 | 0, 0 | 0, 4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
             $$03$i265 = $1515;
             break L667;
            }
           } while (0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
           ___resumeException($$12$i263 | 0);
          }
         }
        } while (0);
        $1582 = ($$03$i265 | 0) == ($1514 | 0);
        $first$59 = $1582 ? $first : $$03$i265;
        $$0 = $first$59;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 111:
     {
      $1583 = $t$0 + 1 | 0;
      $1584 = SAFE_HEAP_LOAD($1583 >> 0 | 0, 1, 0) | 0 | 0;
      $1585 = $1584 << 24 >> 24;
      switch ($1585 | 0) {
      case 110:
       {
        $1586 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        $$0 = $1586;
        break L1;
        break;
       }
      case 111:
       {
        $1587 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($118, 11619, 2);
        __THREW__ = 0;
        $1588 = invoke_iiiii(244, $1587 | 0, $last | 0, $118 | 0, $db | 0) | 0;
        $1589 = __THREW__;
        __THREW__ = 0;
        $1590 = $1589 & 1;
        if ($1590) {
         $1592 = ___cxa_find_matching_catch() | 0;
         $1593 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($118);
         $$23 = $1592;
         $$2332 = $1593;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($118);
         $1591 = ($1588 | 0) == ($1587 | 0);
         $first$60 = $1591 ? $first : $1588;
         $$0 = $first$60;
         break L1;
        }
        break;
       }
      case 114:
       {
        $1594 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($119, 11622, 1);
        __THREW__ = 0;
        $1595 = invoke_iiiii(244, $1594 | 0, $last | 0, $119 | 0, $db | 0) | 0;
        $1596 = __THREW__;
        __THREW__ = 0;
        $1597 = $1596 & 1;
        if ($1597) {
         $1599 = ___cxa_find_matching_catch() | 0;
         $1600 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($119);
         $$23 = $1599;
         $$2332 = $1600;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($119);
         $1598 = ($1595 | 0) == ($1594 | 0);
         $first$61 = $1598 ? $first : $1595;
         $$0 = $first$61;
         break L1;
        }
        break;
       }
      case 82:
       {
        $1601 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($120, 11624, 2);
        __THREW__ = 0;
        $1602 = invoke_iiiii(244, $1601 | 0, $last | 0, $120 | 0, $db | 0) | 0;
        $1603 = __THREW__;
        __THREW__ = 0;
        $1604 = $1603 & 1;
        if ($1604) {
         $1606 = ___cxa_find_matching_catch() | 0;
         $1607 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($120);
         $$23 = $1606;
         $$2332 = $1607;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($120);
         $1605 = ($1602 | 0) == ($1601 | 0);
         $first$62 = $1605 ? $first : $1602;
         $$0 = $first$62;
         break L1;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 112:
     {
      $1608 = $t$0 + 1 | 0;
      $1609 = SAFE_HEAP_LOAD($1608 >> 0 | 0, 1, 0) | 0 | 0;
      $1610 = $1609 << 24 >> 24;
      switch ($1610 | 0) {
      case 109:
       {
        $1611 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($121, 11627, 3);
        __THREW__ = 0;
        $1612 = invoke_iiiii(244, $1611 | 0, $last | 0, $121 | 0, $db | 0) | 0;
        $1613 = __THREW__;
        __THREW__ = 0;
        $1614 = $1613 & 1;
        if ($1614) {
         $1616 = ___cxa_find_matching_catch() | 0;
         $1617 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($121);
         $$23 = $1616;
         $$2332 = $1617;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($121);
         $1615 = ($1612 | 0) == ($1611 | 0);
         $first$63 = $1615 ? $first : $1612;
         $$0 = $first$63;
         break L1;
        }
        break;
       }
      case 108:
       {
        $1618 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($122, 11631, 1);
        __THREW__ = 0;
        $1619 = invoke_iiiii(244, $1618 | 0, $last | 0, $122 | 0, $db | 0) | 0;
        $1620 = __THREW__;
        __THREW__ = 0;
        $1621 = $1620 & 1;
        if ($1621) {
         $1623 = ___cxa_find_matching_catch() | 0;
         $1624 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($122);
         $$23 = $1623;
         $$2332 = $1624;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($122);
         $1622 = ($1619 | 0) == ($1618 | 0);
         $first$64 = $1622 ? $first : $1619;
         $$0 = $first$64;
         break L1;
        }
        break;
       }
      case 76:
       {
        $1625 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($123, 11633, 2);
        __THREW__ = 0;
        $1626 = invoke_iiiii(244, $1625 | 0, $last | 0, $123 | 0, $db | 0) | 0;
        $1627 = __THREW__;
        __THREW__ = 0;
        $1628 = $1627 & 1;
        if ($1628) {
         $1630 = ___cxa_find_matching_catch() | 0;
         $1631 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($123);
         $$23 = $1630;
         $$2332 = $1631;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($123);
         $1629 = ($1626 | 0) == ($1625 | 0);
         $first$65 = $1629 ? $first : $1626;
         $$0 = $first$65;
         break L1;
        }
        break;
       }
      case 112:
       {
        $1632 = $first + 2 | 0;
        $1633 = ($1632 | 0) == ($last | 0);
        if (!$1633) {
         $1634 = SAFE_HEAP_LOAD($1632 >> 0 | 0, 1, 0) | 0 | 0;
         $1635 = $1634 << 24 >> 24 == 95;
         if ($1635) {
          $1636 = $first + 3 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($124, 11636, 2);
          __THREW__ = 0;
          $1637 = invoke_iiiii(245, $1636 | 0, $last | 0, $124 | 0, $db | 0) | 0;
          $1638 = __THREW__;
          __THREW__ = 0;
          $1639 = $1638 & 1;
          if ($1639) {
           $1641 = ___cxa_find_matching_catch() | 0;
           $1642 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($124);
           $$23 = $1641;
           $$2332 = $1642;
           break L7;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($124);
           $1640 = ($1637 | 0) == ($1636 | 0);
           $first$66 = $1640 ? $first : $1637;
           $$0 = $first$66;
           break L1;
          }
         }
        }
        $1643 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1632, $last, $db) | 0;
        $1644 = ($1643 | 0) == ($1632 | 0);
        if ($1644) {
         $$0 = $first;
         break L1;
        }
        $1645 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1646 = $db + 4 | 0;
        $1647 = SAFE_HEAP_LOAD($1646 | 0, 4, 0) | 0 | 0;
        $1648 = ($1645 | 0) == ($1647 | 0);
        if ($1648) {
         $$0 = $first;
         break L1;
        }
        $1649 = $1647 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($128, $1649);
        __THREW__ = 0;
        $1650 = invoke_iiii(227, $128 | 0, 0, 10307 | 0) | 0;
        $1651 = __THREW__;
        __THREW__ = 0;
        $1652 = $1651 & 1;
        do {
         if ($1652) {
          $1660 = ___cxa_find_matching_catch() | 0;
          $1661 = tempRet0;
          $$14 = $1660;
          $$1423 = $1661;
         } else {
          {}
          SAFE_HEAP_STORE($127 | 0, SAFE_HEAP_LOAD($1650 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($127 + 4 | 0, SAFE_HEAP_LOAD($1650 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($127 + 8 | 0, SAFE_HEAP_LOAD($1650 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1650 | 0, 0 | 0, 4);
          $1653 = $1650 + 4 | 0;
          SAFE_HEAP_STORE($1653 | 0, 0 | 0, 4);
          $1654 = $1650 + 8 | 0;
          SAFE_HEAP_STORE($1654 | 0, 0 | 0, 4);
          __THREW__ = 0;
          $1655 = invoke_iii(228, $127 | 0, 11639 | 0) | 0;
          $1656 = __THREW__;
          __THREW__ = 0;
          $1657 = $1656 & 1;
          if ($1657) {
           $1662 = ___cxa_find_matching_catch() | 0;
           $1663 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($127);
           $$14 = $1662;
           $$1423 = $1663;
           break;
          } else {
           {}
           SAFE_HEAP_STORE($126 | 0, SAFE_HEAP_LOAD($1655 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($126 + 4 | 0, SAFE_HEAP_LOAD($1655 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($126 + 8 | 0, SAFE_HEAP_LOAD($1655 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($1655 | 0, 0 | 0, 4);
           $1658 = $1655 + 4 | 0;
           SAFE_HEAP_STORE($1658 | 0, 0 | 0, 4);
           $1659 = $1655 + 8 | 0;
           SAFE_HEAP_STORE($1659 | 0, 0 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($125, $126);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1649, $125);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($126);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($127);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($128);
           $$0 = $1643;
           break L1;
          }
         }
        } while (0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($128);
        $$23 = $$14;
        $$2332 = $$1423;
        break L7;
        break;
       }
      case 115:
       {
        $1664 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($129, 11631, 1);
        __THREW__ = 0;
        $1665 = invoke_iiiii(245, $1664 | 0, $last | 0, $129 | 0, $db | 0) | 0;
        $1666 = __THREW__;
        __THREW__ = 0;
        $1667 = $1666 & 1;
        if ($1667) {
         $1669 = ___cxa_find_matching_catch() | 0;
         $1670 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($129);
         $$23 = $1669;
         $$2332 = $1670;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($129);
         $1668 = ($1665 | 0) == ($1664 | 0);
         $first$67 = $1668 ? $first : $1665;
         $$0 = $first$67;
         break L1;
        }
        break;
       }
      case 116:
       {
        $1671 = ($144 | 0) > 2;
        do {
         if ($1671) {
          $1672 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $1673 = $1672 << 24 >> 24 == 112;
          if ($1673) {
           $1674 = $first + 1 | 0;
           $1675 = SAFE_HEAP_LOAD($1674 >> 0 | 0, 1, 0) | 0 | 0;
           $1676 = $1675 << 24 >> 24 == 116;
           if ($1676) {
            $1677 = $first + 2 | 0;
            $1678 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1677, $last, $db) | 0;
            $1679 = ($1678 | 0) == ($1677 | 0);
            if ($1679) {
             $$0$i254 = $first;
            } else {
             $1680 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1678, $last, $db) | 0;
             $1681 = ($1680 | 0) == ($1678 | 0);
             if ($1681) {
              $$0$i254 = $first;
             } else {
              $1682 = $db + 4 | 0;
              $1683 = SAFE_HEAP_LOAD($1682 | 0, 4, 0) | 0 | 0;
              $1684 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $1685 = $1683;
              $1686 = $1684;
              $1687 = $1685 - $1686 | 0;
              $1688 = ($1687 | 0) / 24 & -1;
              $1689 = $1688 >>> 0 < 2;
              if ($1689) {
               $$0$i254 = $first;
              } else {
               $1690 = $1683 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i249, $1690);
               $1691 = SAFE_HEAP_LOAD($1682 | 0, 4, 0) | 0 | 0;
               $1692 = $1691 + -24 | 0;
               $1694 = $1691;
               while (1) {
                $1693 = $1694 + -24 | 0;
                SAFE_HEAP_STORE($1682 | 0, $1693 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1693);
                $$pre$i$i250 = SAFE_HEAP_LOAD($1682 | 0, 4, 0) | 0 | 0;
                $1695 = ($$pre$i$i250 | 0) == ($1692 | 0);
                if ($1695) {
                 break;
                } else {
                 $1694 = $$pre$i$i250;
                }
               }
               $1696 = $1691 + -48 | 0;
               __THREW__ = 0;
               invoke_iii(228, $1696 | 0, 11643 | 0) | 0;
               $1697 = __THREW__;
               __THREW__ = 0;
               $1698 = $1697 & 1;
               if (!$1698) {
                $1699 = SAFE_HEAP_LOAD($1682 | 0, 4, 0) | 0 | 0;
                $1700 = $1699 + -24 | 0;
                $1701 = SAFE_HEAP_LOAD($tmp$i249 >> 0 | 0, 1, 0) | 0 | 0;
                $1702 = $1701 & 1;
                $1703 = $1702 << 24 >> 24 == 0;
                $1704 = $tmp$i249 + 8 | 0;
                $1705 = SAFE_HEAP_LOAD($1704 | 0, 4, 0) | 0 | 0;
                $1706 = $tmp$i249 + 1 | 0;
                $1707 = $1703 ? $1706 : $1705;
                $1708 = $tmp$i249 + 4 | 0;
                $1709 = SAFE_HEAP_LOAD($1708 | 0, 4, 0) | 0 | 0;
                $1710 = $1701 & 255;
                $1711 = $1710 >>> 1;
                $1712 = $1703 ? $1711 : $1709;
                __THREW__ = 0;
                invoke_iiii(222, $1700 | 0, $1707 | 0, $1712 | 0) | 0;
                $1713 = __THREW__;
                __THREW__ = 0;
                $1714 = $1713 & 1;
                if (!$1714) {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i249);
                 $$0$i254 = $1680;
                 break;
                }
               }
               $1715 = ___cxa_find_matching_catch() | 0;
               $1716 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i249);
               ___resumeException($1715 | 0);
              }
             }
            }
           } else {
            $$0$i254 = $first;
           }
          } else {
           $$0$i254 = $first;
          }
         } else {
          $$0$i254 = $first;
         }
        } while (0);
        $$0 = $$0$i254;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 113:
     {
      $1717 = $t$0 + 1 | 0;
      $1718 = SAFE_HEAP_LOAD($1717 >> 0 | 0, 1, 0) | 0 | 0;
      $1719 = $1718 << 24 >> 24 == 117;
      if (!$1719) {
       $$0 = $first;
       break L1;
      }
      $1720 = $first + 2 | 0;
      $1721 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1720, $last, $db) | 0;
      $1722 = ($1721 | 0) == ($1720 | 0);
      if ($1722) {
       $$0 = $first;
       break L1;
      }
      $1723 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1721, $last, $db) | 0;
      $1724 = ($1723 | 0) == ($1721 | 0);
      if ($1724) {
       $1829 = $db + 4 | 0;
       $1830 = SAFE_HEAP_LOAD($1829 | 0, 4, 0) | 0 | 0;
       $1831 = $1830 + -24 | 0;
       $1833 = $1830;
       while (1) {
        $1832 = $1833 + -24 | 0;
        SAFE_HEAP_STORE($1829 | 0, $1832 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1832);
        $$pre$i161 = SAFE_HEAP_LOAD($1829 | 0, 4, 0) | 0 | 0;
        $1834 = ($$pre$i161 | 0) == ($1831 | 0);
        if ($1834) {
         $$0 = $first;
         break L1;
        } else {
         $1833 = $$pre$i161;
        }
       }
      }
      $1725 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1723, $last, $db) | 0;
      $1726 = ($1725 | 0) == ($1723 | 0);
      $1727 = $db + 4 | 0;
      $1728 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
      if ($1726) {
       $1821 = $1728 + -24 | 0;
       $1823 = $1728;
       while (1) {
        $1822 = $1823 + -24 | 0;
        SAFE_HEAP_STORE($1727 | 0, $1822 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1822);
        $$pre$i157 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
        $1824 = ($$pre$i157 | 0) == ($1821 | 0);
        if ($1824) {
         break;
        } else {
         $1823 = $$pre$i157;
        }
       }
       $1825 = $1728 + -48 | 0;
       $1827 = $1821;
       while (1) {
        $1826 = $1827 + -24 | 0;
        SAFE_HEAP_STORE($1727 | 0, $1826 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1826);
        $$pre$i159 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
        $1828 = ($$pre$i159 | 0) == ($1825 | 0);
        if ($1828) {
         $$0 = $first;
         break L1;
        } else {
         $1827 = $$pre$i159;
        }
       }
      }
      $1729 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $1730 = $1728;
      $1731 = $1729;
      $1732 = $1730 - $1731 | 0;
      $1733 = ($1732 | 0) / 24 & -1;
      $1734 = $1733 >>> 0 < 3;
      if ($1734) {
       $$0 = $first;
       break L1;
      }
      $1735 = $1728 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op3, $1735);
      $1736 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
      $1737 = $1736 + -24 | 0;
      $1739 = $1736;
      while (1) {
       $1738 = $1739 + -24 | 0;
       SAFE_HEAP_STORE($1727 | 0, $1738 | 0, 4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1738);
       $$pre$i133 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
       $1740 = ($$pre$i133 | 0) == ($1737 | 0);
       if ($1740) {
        break;
       } else {
        $1739 = $$pre$i133;
       }
      }
      $1741 = $1736 + -48 | 0;
      __THREW__ = 0;
      invoke_vii(232, $op27 | 0, $1741 | 0);
      $1742 = __THREW__;
      __THREW__ = 0;
      $1743 = $1742 & 1;
      if ($1743) {
       $1805 = ___cxa_find_matching_catch() | 0;
       $1806 = tempRet0;
       $$22 = $1805;
       $$2231 = $1806;
      } else {
       $1744 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
       $1745 = $1744 + -24 | 0;
       $1747 = $1744;
       while (1) {
        $1746 = $1747 + -24 | 0;
        SAFE_HEAP_STORE($1727 | 0, $1746 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1746);
        $$pre$i135 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
        $1748 = ($$pre$i135 | 0) == ($1745 | 0);
        if ($1748) {
         break;
        } else {
         $1747 = $$pre$i135;
        }
       }
       $1749 = $1744 + -48 | 0;
       __THREW__ = 0;
       invoke_vii(232, $op18 | 0, $1749 | 0);
       $1750 = __THREW__;
       __THREW__ = 0;
       $1751 = $1750 & 1;
       if ($1751) {
        $1807 = ___cxa_find_matching_catch() | 0;
        $1808 = tempRet0;
        $$21 = $1807;
        $$2130 = $1808;
       } else {
        $1752 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
        $1753 = $1752 + -24 | 0;
        __THREW__ = 0;
        invoke_viii(243, $136 | 0, 10307 | 0, $op18 | 0);
        $1754 = __THREW__;
        __THREW__ = 0;
        $1755 = $1754 & 1;
        if ($1755) {
         $1809 = ___cxa_find_matching_catch() | 0;
         $1810 = tempRet0;
         $$20 = $1809;
         $$2029 = $1810;
        } else {
         __THREW__ = 0;
         $1756 = invoke_iii(228, $136 | 0, 11646 | 0) | 0;
         $1757 = __THREW__;
         __THREW__ = 0;
         $1758 = $1757 & 1;
         if ($1758) {
          $1811 = ___cxa_find_matching_catch() | 0;
          $1812 = tempRet0;
          $$19 = $1811;
          $$1928 = $1812;
         } else {
          {}
          SAFE_HEAP_STORE($135 | 0, SAFE_HEAP_LOAD($1756 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($135 + 4 | 0, SAFE_HEAP_LOAD($1756 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($135 + 8 | 0, SAFE_HEAP_LOAD($1756 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1756 | 0, 0 | 0, 4);
          $1759 = $1756 + 4 | 0;
          SAFE_HEAP_STORE($1759 | 0, 0 | 0, 4);
          $1760 = $1756 + 8 | 0;
          SAFE_HEAP_STORE($1760 | 0, 0 | 0, 4);
          $1761 = SAFE_HEAP_LOAD($op27 >> 0 | 0, 1, 0) | 0 | 0;
          $1762 = $1761 & 1;
          $1763 = $1762 << 24 >> 24 == 0;
          $1764 = $op27 + 8 | 0;
          $1765 = SAFE_HEAP_LOAD($1764 | 0, 4, 0) | 0 | 0;
          $1766 = $op27 + 1 | 0;
          $1767 = $1763 ? $1766 : $1765;
          $1768 = $op27 + 4 | 0;
          $1769 = SAFE_HEAP_LOAD($1768 | 0, 4, 0) | 0 | 0;
          $1770 = $1761 & 255;
          $1771 = $1770 >>> 1;
          $1772 = $1763 ? $1771 : $1769;
          __THREW__ = 0;
          $1773 = invoke_iiii(222, $135 | 0, $1767 | 0, $1772 | 0) | 0;
          $1774 = __THREW__;
          __THREW__ = 0;
          $1775 = $1774 & 1;
          if ($1775) {
           $1813 = ___cxa_find_matching_catch() | 0;
           $1814 = tempRet0;
           $$18 = $1813;
           $$1827 = $1814;
          } else {
           {}
           SAFE_HEAP_STORE($134 | 0, SAFE_HEAP_LOAD($1773 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($134 + 4 | 0, SAFE_HEAP_LOAD($1773 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($134 + 8 | 0, SAFE_HEAP_LOAD($1773 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($1773 | 0, 0 | 0, 4);
           $1776 = $1773 + 4 | 0;
           SAFE_HEAP_STORE($1776 | 0, 0 | 0, 4);
           $1777 = $1773 + 8 | 0;
           SAFE_HEAP_STORE($1777 | 0, 0 | 0, 4);
           __THREW__ = 0;
           $1778 = invoke_iii(228, $134 | 0, 11652 | 0) | 0;
           $1779 = __THREW__;
           __THREW__ = 0;
           $1780 = $1779 & 1;
           if ($1780) {
            $1815 = ___cxa_find_matching_catch() | 0;
            $1816 = tempRet0;
            $$17 = $1815;
            $$1726 = $1816;
           } else {
            {}
            SAFE_HEAP_STORE($133 | 0, SAFE_HEAP_LOAD($1778 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($133 + 4 | 0, SAFE_HEAP_LOAD($1778 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($133 + 8 | 0, SAFE_HEAP_LOAD($1778 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1778 | 0, 0 | 0, 4);
            $1781 = $1778 + 4 | 0;
            SAFE_HEAP_STORE($1781 | 0, 0 | 0, 4);
            $1782 = $1778 + 8 | 0;
            SAFE_HEAP_STORE($1782 | 0, 0 | 0, 4);
            $1783 = SAFE_HEAP_LOAD($op3 >> 0 | 0, 1, 0) | 0 | 0;
            $1784 = $1783 & 1;
            $1785 = $1784 << 24 >> 24 == 0;
            $1786 = $op3 + 8 | 0;
            $1787 = SAFE_HEAP_LOAD($1786 | 0, 4, 0) | 0 | 0;
            $1788 = $op3 + 1 | 0;
            $1789 = $1785 ? $1788 : $1787;
            $1790 = $op3 + 4 | 0;
            $1791 = SAFE_HEAP_LOAD($1790 | 0, 4, 0) | 0 | 0;
            $1792 = $1783 & 255;
            $1793 = $1792 >>> 1;
            $1794 = $1785 ? $1793 : $1791;
            __THREW__ = 0;
            $1795 = invoke_iiii(222, $133 | 0, $1789 | 0, $1794 | 0) | 0;
            $1796 = __THREW__;
            __THREW__ = 0;
            $1797 = $1796 & 1;
            do {
             if ($1797) {
              $1817 = ___cxa_find_matching_catch() | 0;
              $1818 = tempRet0;
              $$16 = $1817;
              $$1625 = $1818;
             } else {
              {}
              SAFE_HEAP_STORE($132 | 0, SAFE_HEAP_LOAD($1795 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($132 + 4 | 0, SAFE_HEAP_LOAD($1795 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($132 + 8 | 0, SAFE_HEAP_LOAD($1795 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($1795 | 0, 0 | 0, 4);
              $1798 = $1795 + 4 | 0;
              SAFE_HEAP_STORE($1798 | 0, 0 | 0, 4);
              $1799 = $1795 + 8 | 0;
              SAFE_HEAP_STORE($1799 | 0, 0 | 0, 4);
              __THREW__ = 0;
              $1800 = invoke_iii(228, $132 | 0, 10212 | 0) | 0;
              $1801 = __THREW__;
              __THREW__ = 0;
              $1802 = $1801 & 1;
              if ($1802) {
               $1819 = ___cxa_find_matching_catch() | 0;
               $1820 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($132);
               $$16 = $1819;
               $$1625 = $1820;
               break;
              } else {
               {}
               SAFE_HEAP_STORE($131 | 0, SAFE_HEAP_LOAD($1800 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($131 + 4 | 0, SAFE_HEAP_LOAD($1800 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($131 + 8 | 0, SAFE_HEAP_LOAD($1800 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($1800 | 0, 0 | 0, 4);
               $1803 = $1800 + 4 | 0;
               SAFE_HEAP_STORE($1803 | 0, 0 | 0, 4);
               $1804 = $1800 + 8 | 0;
               SAFE_HEAP_STORE($1804 | 0, 0 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($130, $131);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1753, $130);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($130);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($131);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($132);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($133);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($134);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($135);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($136);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op18);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op27);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op3);
               $$0 = $1725;
               break L1;
              }
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($133);
            $$17 = $$16;
            $$1726 = $$1625;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($134);
           $$18 = $$17;
           $$1827 = $$1726;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($135);
          $$19 = $$18;
          $$1928 = $$1827;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($136);
         $$20 = $$19;
         $$2029 = $$1928;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op18);
        $$21 = $$20;
        $$2130 = $$2029;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op27);
       $$22 = $$21;
       $$2231 = $$2130;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op3);
      $$23 = $$22;
      $$2332 = $$2231;
      break;
     }
    case 114:
     {
      $1835 = $t$0 + 1 | 0;
      $1836 = SAFE_HEAP_LOAD($1835 >> 0 | 0, 1, 0) | 0 | 0;
      $1837 = $1836 << 24 >> 24;
      switch ($1837 | 0) {
      case 99:
       {
        $1838 = ($144 | 0) > 2;
        L825 : do {
         if ($1838) {
          $1839 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $1840 = $1839 << 24 >> 24 == 114;
          if ($1840) {
           $1841 = $first + 1 | 0;
           $1842 = SAFE_HEAP_LOAD($1841 >> 0 | 0, 1, 0) | 0 | 0;
           $1843 = $1842 << 24 >> 24 == 99;
           if ($1843) {
            $1844 = $first + 2 | 0;
            $1845 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1844, $last, $db) | 0;
            $1846 = ($1845 | 0) == ($1844 | 0);
            if ($1846) {
             $$06$i248 = $first;
            } else {
             $1847 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1845, $last, $db) | 0;
             $1848 = ($1847 | 0) == ($1845 | 0);
             if ($1848) {
              $$06$i248 = $first;
             } else {
              $1849 = $db + 4 | 0;
              $1850 = SAFE_HEAP_LOAD($1849 | 0, 4, 0) | 0 | 0;
              $1851 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $1852 = $1850;
              $1853 = $1851;
              $1854 = $1852 - $1853 | 0;
              $1855 = ($1854 | 0) / 24 & -1;
              $1856 = $1855 >>> 0 < 2;
              if ($1856) {
               $$06$i248 = $first;
              } else {
               $1857 = $1850 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i221, $1857);
               $1858 = SAFE_HEAP_LOAD($1849 | 0, 4, 0) | 0 | 0;
               $1859 = $1858 + -24 | 0;
               $1861 = $1858;
               while (1) {
                $1860 = $1861 + -24 | 0;
                SAFE_HEAP_STORE($1849 | 0, $1860 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1860);
                $$pre$i$i222 = SAFE_HEAP_LOAD($1849 | 0, 4, 0) | 0 | 0;
                $1862 = ($$pre$i$i222 | 0) == ($1859 | 0);
                if ($1862) {
                 break;
                } else {
                 $1861 = $$pre$i$i222;
                }
               }
               $1863 = $1858 + -48 | 0;
               __THREW__ = 0;
               invoke_vii(232, $43 | 0, $1863 | 0);
               $1864 = __THREW__;
               __THREW__ = 0;
               $1865 = $1864 & 1;
               if ($1865) {
                $1898 = ___cxa_find_matching_catch() | 0;
                $1899 = tempRet0;
                $$4$i247 = $1899;
                $$45$i246 = $1898;
               } else {
                __THREW__ = 0;
                $1866 = invoke_iiii(227, $43 | 0, 0, 11658 | 0) | 0;
                $1867 = __THREW__;
                __THREW__ = 0;
                $1868 = $1867 & 1;
                if ($1868) {
                 $1900 = ___cxa_find_matching_catch() | 0;
                 $1901 = tempRet0;
                 $$3$i245 = $1901;
                 $$34$i244 = $1900;
                } else {
                 {}
                 SAFE_HEAP_STORE($42 | 0, SAFE_HEAP_LOAD($1866 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($42 + 4 | 0, SAFE_HEAP_LOAD($1866 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($42 + 8 | 0, SAFE_HEAP_LOAD($1866 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($1866 | 0, 0 | 0, 4);
                 $1869 = $1866 + 4 | 0;
                 SAFE_HEAP_STORE($1869 | 0, 0 | 0, 4);
                 $1870 = $1866 + 8 | 0;
                 SAFE_HEAP_STORE($1870 | 0, 0 | 0, 4);
                 __THREW__ = 0;
                 $1871 = invoke_iii(228, $42 | 0, 11509 | 0) | 0;
                 $1872 = __THREW__;
                 __THREW__ = 0;
                 $1873 = $1872 & 1;
                 if ($1873) {
                  $1902 = ___cxa_find_matching_catch() | 0;
                  $1903 = tempRet0;
                  $$2$i243 = $1903;
                  $$23$i242 = $1902;
                 } else {
                  {}
                  SAFE_HEAP_STORE($41 | 0, SAFE_HEAP_LOAD($1871 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($41 + 4 | 0, SAFE_HEAP_LOAD($1871 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($41 + 8 | 0, SAFE_HEAP_LOAD($1871 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1871 | 0, 0 | 0, 4);
                  $1874 = $1871 + 4 | 0;
                  SAFE_HEAP_STORE($1874 | 0, 0 | 0, 4);
                  $1875 = $1871 + 8 | 0;
                  SAFE_HEAP_STORE($1875 | 0, 0 | 0, 4);
                  $1876 = SAFE_HEAP_LOAD($expr$i221 >> 0 | 0, 1, 0) | 0 | 0;
                  $1877 = $1876 & 1;
                  $1878 = $1877 << 24 >> 24 == 0;
                  $1879 = $expr$i221 + 8 | 0;
                  $1880 = SAFE_HEAP_LOAD($1879 | 0, 4, 0) | 0 | 0;
                  $1881 = $expr$i221 + 1 | 0;
                  $1882 = $1878 ? $1881 : $1880;
                  $1883 = $expr$i221 + 4 | 0;
                  $1884 = SAFE_HEAP_LOAD($1883 | 0, 4, 0) | 0 | 0;
                  $1885 = $1876 & 255;
                  $1886 = $1885 >>> 1;
                  $1887 = $1878 ? $1886 : $1884;
                  __THREW__ = 0;
                  $1888 = invoke_iiii(222, $41 | 0, $1882 | 0, $1887 | 0) | 0;
                  $1889 = __THREW__;
                  __THREW__ = 0;
                  $1890 = $1889 & 1;
                  do {
                   if ($1890) {
                    $1904 = ___cxa_find_matching_catch() | 0;
                    $1905 = tempRet0;
                    $$1$i241 = $1905;
                    $$12$i240 = $1904;
                   } else {
                    {}
                    SAFE_HEAP_STORE($40 | 0, SAFE_HEAP_LOAD($1888 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($40 + 4 | 0, SAFE_HEAP_LOAD($1888 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($40 + 8 | 0, SAFE_HEAP_LOAD($1888 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($1888 | 0, 0 | 0, 4);
                    $1891 = $1888 + 4 | 0;
                    SAFE_HEAP_STORE($1891 | 0, 0 | 0, 4);
                    $1892 = $1888 + 8 | 0;
                    SAFE_HEAP_STORE($1892 | 0, 0 | 0, 4);
                    __THREW__ = 0;
                    $1893 = invoke_iii(228, $40 | 0, 10212 | 0) | 0;
                    $1894 = __THREW__;
                    __THREW__ = 0;
                    $1895 = $1894 & 1;
                    if ($1895) {
                     $1906 = ___cxa_find_matching_catch() | 0;
                     $1907 = tempRet0;
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                     $$1$i241 = $1907;
                     $$12$i240 = $1906;
                     break;
                    } else {
                     {}
                     SAFE_HEAP_STORE($39 | 0, SAFE_HEAP_LOAD($1893 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($39 + 4 | 0, SAFE_HEAP_LOAD($1893 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($39 + 8 | 0, SAFE_HEAP_LOAD($1893 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($1893 | 0, 0 | 0, 4);
                     $1896 = $1893 + 4 | 0;
                     SAFE_HEAP_STORE($1896 | 0, 0 | 0, 4);
                     $1897 = $1893 + 8 | 0;
                     SAFE_HEAP_STORE($1897 | 0, 0 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($38, $39);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1863, $38);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i221);
                     $$06$i248 = $1847;
                     break L825;
                    }
                   }
                  } while (0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
                  $$2$i243 = $$1$i241;
                  $$23$i242 = $$12$i240;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
                 $$3$i245 = $$2$i243;
                 $$34$i244 = $$23$i242;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
                $$4$i247 = $$3$i245;
                $$45$i246 = $$34$i244;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i221);
               ___resumeException($$45$i246 | 0);
              }
             }
            }
           } else {
            $$06$i248 = $first;
           }
          } else {
           $$06$i248 = $first;
          }
         } else {
          $$06$i248 = $first;
         }
        } while (0);
        $$0 = $$06$i248;
        break L1;
        break;
       }
      case 109:
       {
        $1908 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($137, 11676, 1);
        __THREW__ = 0;
        $1909 = invoke_iiiii(244, $1908 | 0, $last | 0, $137 | 0, $db | 0) | 0;
        $1910 = __THREW__;
        __THREW__ = 0;
        $1911 = $1910 & 1;
        if ($1911) {
         $1913 = ___cxa_find_matching_catch() | 0;
         $1914 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($137);
         $$23 = $1913;
         $$2332 = $1914;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($137);
         $1912 = ($1909 | 0) == ($1908 | 0);
         $first$68 = $1912 ? $first : $1909;
         $$0 = $first$68;
         break L1;
        }
        break;
       }
      case 77:
       {
        $1915 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($138, 11678, 2);
        __THREW__ = 0;
        $1916 = invoke_iiiii(244, $1915 | 0, $last | 0, $138 | 0, $db | 0) | 0;
        $1917 = __THREW__;
        __THREW__ = 0;
        $1918 = $1917 & 1;
        if ($1918) {
         $1920 = ___cxa_find_matching_catch() | 0;
         $1921 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($138);
         $$23 = $1920;
         $$2332 = $1921;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($138);
         $1919 = ($1916 | 0) == ($1915 | 0);
         $first$69 = $1919 ? $first : $1916;
         $$0 = $first$69;
         break L1;
        }
        break;
       }
      case 115:
       {
        $1922 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($139, 11681, 2);
        __THREW__ = 0;
        $1923 = invoke_iiiii(244, $1922 | 0, $last | 0, $139 | 0, $db | 0) | 0;
        $1924 = __THREW__;
        __THREW__ = 0;
        $1925 = $1924 & 1;
        if ($1925) {
         $1927 = ___cxa_find_matching_catch() | 0;
         $1928 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($139);
         $$23 = $1927;
         $$2332 = $1928;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($139);
         $1926 = ($1923 | 0) == ($1922 | 0);
         $first$70 = $1926 ? $first : $1923;
         $$0 = $first$70;
         break L1;
        }
        break;
       }
      case 83:
       {
        $1929 = $first + 2 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($140, 11684, 3);
        __THREW__ = 0;
        $1930 = invoke_iiiii(244, $1929 | 0, $last | 0, $140 | 0, $db | 0) | 0;
        $1931 = __THREW__;
        __THREW__ = 0;
        $1932 = $1931 & 1;
        if ($1932) {
         $1934 = ___cxa_find_matching_catch() | 0;
         $1935 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($140);
         $$23 = $1934;
         $$2332 = $1935;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($140);
         $1933 = ($1930 | 0) == ($1929 | 0);
         $first$71 = $1933 ? $first : $1930;
         STACKTOP = sp;
         return $first$71 | 0;
        }
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 115:
     {
      $1936 = $t$0 + 1 | 0;
      $1937 = SAFE_HEAP_LOAD($1936 >> 0 | 0, 1, 0) | 0 | 0;
      $1938 = $1937 << 24 >> 24;
      switch ($1938 | 0) {
      case 99:
       {
        $1939 = ($144 | 0) > 2;
        L874 : do {
         if ($1939) {
          $1940 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $1941 = $1940 << 24 >> 24 == 115;
          if ($1941) {
           $1942 = $first + 1 | 0;
           $1943 = SAFE_HEAP_LOAD($1942 >> 0 | 0, 1, 0) | 0 | 0;
           $1944 = $1943 << 24 >> 24 == 99;
           if ($1944) {
            $1945 = $first + 2 | 0;
            $1946 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1945, $last, $db) | 0;
            $1947 = ($1946 | 0) == ($1945 | 0);
            if ($1947) {
             $$06$i = $first;
            } else {
             $1948 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1946, $last, $db) | 0;
             $1949 = ($1948 | 0) == ($1946 | 0);
             if ($1949) {
              $$06$i = $first;
             } else {
              $1950 = $db + 4 | 0;
              $1951 = SAFE_HEAP_LOAD($1950 | 0, 4, 0) | 0 | 0;
              $1952 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $1953 = $1951;
              $1954 = $1952;
              $1955 = $1953 - $1954 | 0;
              $1956 = ($1955 | 0) / 24 & -1;
              $1957 = $1956 >>> 0 < 2;
              if ($1957) {
               $$06$i = $first;
              } else {
               $1958 = $1951 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i, $1958);
               $1959 = SAFE_HEAP_LOAD($1950 | 0, 4, 0) | 0 | 0;
               $1960 = $1959 + -24 | 0;
               $1962 = $1959;
               while (1) {
                $1961 = $1962 + -24 | 0;
                SAFE_HEAP_STORE($1950 | 0, $1961 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1961);
                $$pre$i$i212 = SAFE_HEAP_LOAD($1950 | 0, 4, 0) | 0 | 0;
                $1963 = ($$pre$i$i212 | 0) == ($1960 | 0);
                if ($1963) {
                 break;
                } else {
                 $1962 = $$pre$i$i212;
                }
               }
               $1964 = $1959 + -48 | 0;
               __THREW__ = 0;
               invoke_vii(232, $49 | 0, $1964 | 0);
               $1965 = __THREW__;
               __THREW__ = 0;
               $1966 = $1965 & 1;
               if ($1966) {
                $1999 = ___cxa_find_matching_catch() | 0;
                $2000 = tempRet0;
                $$4$i = $2000;
                $$45$i = $1999;
               } else {
                __THREW__ = 0;
                $1967 = invoke_iiii(227, $49 | 0, 0, 11688 | 0) | 0;
                $1968 = __THREW__;
                __THREW__ = 0;
                $1969 = $1968 & 1;
                if ($1969) {
                 $2001 = ___cxa_find_matching_catch() | 0;
                 $2002 = tempRet0;
                 $$3$i = $2002;
                 $$34$i = $2001;
                } else {
                 {}
                 SAFE_HEAP_STORE($48 | 0, SAFE_HEAP_LOAD($1967 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($48 + 4 | 0, SAFE_HEAP_LOAD($1967 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($48 + 8 | 0, SAFE_HEAP_LOAD($1967 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($1967 | 0, 0 | 0, 4);
                 $1970 = $1967 + 4 | 0;
                 SAFE_HEAP_STORE($1970 | 0, 0 | 0, 4);
                 $1971 = $1967 + 8 | 0;
                 SAFE_HEAP_STORE($1971 | 0, 0 | 0, 4);
                 __THREW__ = 0;
                 $1972 = invoke_iii(228, $48 | 0, 11509 | 0) | 0;
                 $1973 = __THREW__;
                 __THREW__ = 0;
                 $1974 = $1973 & 1;
                 if ($1974) {
                  $2003 = ___cxa_find_matching_catch() | 0;
                  $2004 = tempRet0;
                  $$2$i = $2004;
                  $$23$i = $2003;
                 } else {
                  {}
                  SAFE_HEAP_STORE($47 | 0, SAFE_HEAP_LOAD($1972 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($47 + 4 | 0, SAFE_HEAP_LOAD($1972 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($47 + 8 | 0, SAFE_HEAP_LOAD($1972 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1972 | 0, 0 | 0, 4);
                  $1975 = $1972 + 4 | 0;
                  SAFE_HEAP_STORE($1975 | 0, 0 | 0, 4);
                  $1976 = $1972 + 8 | 0;
                  SAFE_HEAP_STORE($1976 | 0, 0 | 0, 4);
                  $1977 = SAFE_HEAP_LOAD($expr$i >> 0 | 0, 1, 0) | 0 | 0;
                  $1978 = $1977 & 1;
                  $1979 = $1978 << 24 >> 24 == 0;
                  $1980 = $expr$i + 8 | 0;
                  $1981 = SAFE_HEAP_LOAD($1980 | 0, 4, 0) | 0 | 0;
                  $1982 = $expr$i + 1 | 0;
                  $1983 = $1979 ? $1982 : $1981;
                  $1984 = $expr$i + 4 | 0;
                  $1985 = SAFE_HEAP_LOAD($1984 | 0, 4, 0) | 0 | 0;
                  $1986 = $1977 & 255;
                  $1987 = $1986 >>> 1;
                  $1988 = $1979 ? $1987 : $1985;
                  __THREW__ = 0;
                  $1989 = invoke_iiii(222, $47 | 0, $1983 | 0, $1988 | 0) | 0;
                  $1990 = __THREW__;
                  __THREW__ = 0;
                  $1991 = $1990 & 1;
                  do {
                   if ($1991) {
                    $2005 = ___cxa_find_matching_catch() | 0;
                    $2006 = tempRet0;
                    $$1$i220 = $2006;
                    $$12$i219 = $2005;
                   } else {
                    {}
                    SAFE_HEAP_STORE($46 | 0, SAFE_HEAP_LOAD($1989 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($46 + 4 | 0, SAFE_HEAP_LOAD($1989 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($46 + 8 | 0, SAFE_HEAP_LOAD($1989 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($1989 | 0, 0 | 0, 4);
                    $1992 = $1989 + 4 | 0;
                    SAFE_HEAP_STORE($1992 | 0, 0 | 0, 4);
                    $1993 = $1989 + 8 | 0;
                    SAFE_HEAP_STORE($1993 | 0, 0 | 0, 4);
                    __THREW__ = 0;
                    $1994 = invoke_iii(228, $46 | 0, 10212 | 0) | 0;
                    $1995 = __THREW__;
                    __THREW__ = 0;
                    $1996 = $1995 & 1;
                    if ($1996) {
                     $2007 = ___cxa_find_matching_catch() | 0;
                     $2008 = tempRet0;
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
                     $$1$i220 = $2008;
                     $$12$i219 = $2007;
                     break;
                    } else {
                     {}
                     SAFE_HEAP_STORE($45 | 0, SAFE_HEAP_LOAD($1994 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($45 + 4 | 0, SAFE_HEAP_LOAD($1994 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($45 + 8 | 0, SAFE_HEAP_LOAD($1994 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                     SAFE_HEAP_STORE($1994 | 0, 0 | 0, 4);
                     $1997 = $1994 + 4 | 0;
                     SAFE_HEAP_STORE($1997 | 0, 0 | 0, 4);
                     $1998 = $1994 + 8 | 0;
                     SAFE_HEAP_STORE($1998 | 0, 0 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($44, $45);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1964, $44);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i);
                     $$06$i = $1948;
                     break L874;
                    }
                   }
                  } while (0);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
                  $$2$i = $$1$i220;
                  $$23$i = $$12$i219;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
                 $$3$i = $$2$i;
                 $$34$i = $$23$i;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
                $$4$i = $$3$i;
                $$45$i = $$34$i;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i);
               ___resumeException($$45$i | 0);
              }
             }
            }
           } else {
            $$06$i = $first;
           }
          } else {
           $$06$i = $first;
          }
         } else {
          $$06$i = $first;
         }
        } while (0);
        $$0 = $$06$i;
        break L1;
        break;
       }
      case 112:
       {
        $2009 = ($144 | 0) > 2;
        if (!$2009) {
         $$0 = $first;
         break L1;
        }
        $2010 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
        $2011 = $2010 << 24 >> 24 == 115;
        if (!$2011) {
         $$0 = $first;
         break L1;
        }
        $2012 = $first + 1 | 0;
        $2013 = SAFE_HEAP_LOAD($2012 >> 0 | 0, 1, 0) | 0 | 0;
        $2014 = $2013 << 24 >> 24 == 112;
        if (!$2014) {
         $$0 = $first;
         break L1;
        }
        $2015 = $first + 2 | 0;
        $2016 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2015, $last, $db) | 0;
        $2017 = ($2016 | 0) == ($2015 | 0);
        $first$$i = $2017 ? $first : $2016;
        $$0 = $first$$i;
        break L1;
        break;
       }
      case 114:
       {
        $2018 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        $$0 = $2018;
        break L1;
        break;
       }
      case 116:
       {
        $2019 = ($144 | 0) > 2;
        L910 : do {
         if ($2019) {
          $2020 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $2021 = $2020 << 24 >> 24 == 115;
          if ($2021) {
           $2022 = $first + 1 | 0;
           $2023 = SAFE_HEAP_LOAD($2022 >> 0 | 0, 1, 0) | 0 | 0;
           $2024 = $2023 << 24 >> 24 == 116;
           if ($2024) {
            $2025 = $first + 2 | 0;
            $2026 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2025, $last, $db) | 0;
            $2027 = ($2026 | 0) == ($2025 | 0);
            if ($2027) {
             $$03$i211 = $first;
            } else {
             $2028 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $2029 = $db + 4 | 0;
             $2030 = SAFE_HEAP_LOAD($2029 | 0, 4, 0) | 0 | 0;
             $2031 = ($2028 | 0) == ($2030 | 0);
             if ($2031) {
              $$03$i211 = $first;
             } else {
              $2032 = $2030 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($53, $2032);
              __THREW__ = 0;
              $2033 = invoke_iiii(227, $53 | 0, 0, 11701 | 0) | 0;
              $2034 = __THREW__;
              __THREW__ = 0;
              $2035 = $2034 & 1;
              do {
               if ($2035) {
                $2043 = ___cxa_find_matching_catch() | 0;
                $2044 = tempRet0;
                $$1$i210 = $2044;
                $$12$i209 = $2043;
               } else {
                {}
                SAFE_HEAP_STORE($52 | 0, SAFE_HEAP_LOAD($2033 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($52 + 4 | 0, SAFE_HEAP_LOAD($2033 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($52 + 8 | 0, SAFE_HEAP_LOAD($2033 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($2033 | 0, 0 | 0, 4);
                $2036 = $2033 + 4 | 0;
                SAFE_HEAP_STORE($2036 | 0, 0 | 0, 4);
                $2037 = $2033 + 8 | 0;
                SAFE_HEAP_STORE($2037 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $2038 = invoke_iii(228, $52 | 0, 10212 | 0) | 0;
                $2039 = __THREW__;
                __THREW__ = 0;
                $2040 = $2039 & 1;
                if ($2040) {
                 $2045 = ___cxa_find_matching_catch() | 0;
                 $2046 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
                 $$1$i210 = $2046;
                 $$12$i209 = $2045;
                 break;
                } else {
                 {}
                 SAFE_HEAP_STORE($51 | 0, SAFE_HEAP_LOAD($2038 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($51 + 4 | 0, SAFE_HEAP_LOAD($2038 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($51 + 8 | 0, SAFE_HEAP_LOAD($2038 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($2038 | 0, 0 | 0, 4);
                 $2041 = $2038 + 4 | 0;
                 SAFE_HEAP_STORE($2041 | 0, 0 | 0, 4);
                 $2042 = $2038 + 8 | 0;
                 SAFE_HEAP_STORE($2042 | 0, 0 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($50, $51);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2032, $50);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
                 $$03$i211 = $2026;
                 break L910;
                }
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
              ___resumeException($$12$i209 | 0);
             }
            }
           } else {
            $$03$i211 = $first;
           }
          } else {
           $$03$i211 = $first;
          }
         } else {
          $$03$i211 = $first;
         }
        } while (0);
        $$0 = $$03$i211;
        break L1;
        break;
       }
      case 122:
       {
        $2047 = ($144 | 0) > 2;
        L925 : do {
         if ($2047) {
          $2048 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $2049 = $2048 << 24 >> 24 == 115;
          if ($2049) {
           $2050 = $first + 1 | 0;
           $2051 = SAFE_HEAP_LOAD($2050 >> 0 | 0, 1, 0) | 0 | 0;
           $2052 = $2051 << 24 >> 24 == 122;
           if ($2052) {
            $2053 = $first + 2 | 0;
            $2054 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2053, $last, $db) | 0;
            $2055 = ($2054 | 0) == ($2053 | 0);
            if ($2055) {
             $$03$i200 = $first;
            } else {
             $2056 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $2057 = $db + 4 | 0;
             $2058 = SAFE_HEAP_LOAD($2057 | 0, 4, 0) | 0 | 0;
             $2059 = ($2056 | 0) == ($2058 | 0);
             if ($2059) {
              $$03$i200 = $first;
             } else {
              $2060 = $2058 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($57, $2060);
              __THREW__ = 0;
              $2061 = invoke_iiii(227, $57 | 0, 0, 11701 | 0) | 0;
              $2062 = __THREW__;
              __THREW__ = 0;
              $2063 = $2062 & 1;
              do {
               if ($2063) {
                $2071 = ___cxa_find_matching_catch() | 0;
                $2072 = tempRet0;
                $$1$i199 = $2072;
                $$12$i198 = $2071;
               } else {
                {}
                SAFE_HEAP_STORE($56 | 0, SAFE_HEAP_LOAD($2061 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($56 + 4 | 0, SAFE_HEAP_LOAD($2061 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($56 + 8 | 0, SAFE_HEAP_LOAD($2061 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($2061 | 0, 0 | 0, 4);
                $2064 = $2061 + 4 | 0;
                SAFE_HEAP_STORE($2064 | 0, 0 | 0, 4);
                $2065 = $2061 + 8 | 0;
                SAFE_HEAP_STORE($2065 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $2066 = invoke_iii(228, $56 | 0, 10212 | 0) | 0;
                $2067 = __THREW__;
                __THREW__ = 0;
                $2068 = $2067 & 1;
                if ($2068) {
                 $2073 = ___cxa_find_matching_catch() | 0;
                 $2074 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
                 $$1$i199 = $2074;
                 $$12$i198 = $2073;
                 break;
                } else {
                 {}
                 SAFE_HEAP_STORE($55 | 0, SAFE_HEAP_LOAD($2066 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($55 + 4 | 0, SAFE_HEAP_LOAD($2066 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($55 + 8 | 0, SAFE_HEAP_LOAD($2066 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($2066 | 0, 0 | 0, 4);
                 $2069 = $2066 + 4 | 0;
                 SAFE_HEAP_STORE($2069 | 0, 0 | 0, 4);
                 $2070 = $2066 + 8 | 0;
                 SAFE_HEAP_STORE($2070 | 0, 0 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($54, $55);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2060, $54);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($54);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
                 $$03$i200 = $2054;
                 break L925;
                }
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
              ___resumeException($$12$i198 | 0);
             }
            }
           } else {
            $$03$i200 = $first;
           }
          } else {
           $$03$i200 = $first;
          }
         } else {
          $$03$i200 = $first;
         }
        } while (0);
        $$0 = $$03$i200;
        break L1;
        break;
       }
      case 90:
       {
        $2075 = $t$0;
        $2076 = $142 - $2075 | 0;
        $2077 = ($2076 | 0) > 2;
        if (!$2077) {
         $$0 = $first;
         break L1;
        }
        $2078 = $t$0 + 2 | 0;
        $2079 = SAFE_HEAP_LOAD($2078 >> 0 | 0, 1, 0) | 0 | 0;
        $2080 = $2079 << 24 >> 24;
        switch ($2080 | 0) {
        case 84:
         {
          break;
         }
        case 102:
         {
          $2199 = ($144 | 0) > 2;
          L943 : do {
           if ($2199) {
            $2200 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
            $2201 = $2200 << 24 >> 24 == 115;
            if ($2201) {
             $2202 = $first + 1 | 0;
             $2203 = SAFE_HEAP_LOAD($2202 >> 0 | 0, 1, 0) | 0 | 0;
             $2204 = $2203 << 24 >> 24 == 90;
             if ($2204) {
              $2205 = $first + 2 | 0;
              $2206 = SAFE_HEAP_LOAD($2205 >> 0 | 0, 1, 0) | 0 | 0;
              $2207 = $2206 << 24 >> 24 == 102;
              if ($2207) {
               $2208 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($2205, $last, $db) | 0;
               $2209 = ($2208 | 0) == ($2205 | 0);
               if ($2209) {
                $$03$i174 = $first;
               } else {
                $2210 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                $2211 = $db + 4 | 0;
                $2212 = SAFE_HEAP_LOAD($2211 | 0, 4, 0) | 0 | 0;
                $2213 = ($2210 | 0) == ($2212 | 0);
                if ($2213) {
                 $$03$i174 = $first;
                } else {
                 $2214 = $2212 + -24 | 0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($68, $2214);
                 __THREW__ = 0;
                 $2215 = invoke_iiii(227, $68 | 0, 0, 11710 | 0) | 0;
                 $2216 = __THREW__;
                 __THREW__ = 0;
                 $2217 = $2216 & 1;
                 do {
                  if ($2217) {
                   $2225 = ___cxa_find_matching_catch() | 0;
                   $2226 = tempRet0;
                   $$1$i173 = $2226;
                   $$12$i172 = $2225;
                  } else {
                   {}
                   SAFE_HEAP_STORE($67 | 0, SAFE_HEAP_LOAD($2215 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($67 + 4 | 0, SAFE_HEAP_LOAD($2215 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($67 + 8 | 0, SAFE_HEAP_LOAD($2215 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($2215 | 0, 0 | 0, 4);
                   $2218 = $2215 + 4 | 0;
                   SAFE_HEAP_STORE($2218 | 0, 0 | 0, 4);
                   $2219 = $2215 + 8 | 0;
                   SAFE_HEAP_STORE($2219 | 0, 0 | 0, 4);
                   __THREW__ = 0;
                   $2220 = invoke_iii(228, $67 | 0, 10212 | 0) | 0;
                   $2221 = __THREW__;
                   __THREW__ = 0;
                   $2222 = $2221 & 1;
                   if ($2222) {
                    $2227 = ___cxa_find_matching_catch() | 0;
                    $2228 = tempRet0;
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
                    $$1$i173 = $2228;
                    $$12$i172 = $2227;
                    break;
                   } else {
                    {}
                    SAFE_HEAP_STORE($66 | 0, SAFE_HEAP_LOAD($2220 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($66 + 4 | 0, SAFE_HEAP_LOAD($2220 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($66 + 8 | 0, SAFE_HEAP_LOAD($2220 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                    SAFE_HEAP_STORE($2220 | 0, 0 | 0, 4);
                    $2223 = $2220 + 4 | 0;
                    SAFE_HEAP_STORE($2223 | 0, 0 | 0, 4);
                    $2224 = $2220 + 8 | 0;
                    SAFE_HEAP_STORE($2224 | 0, 0 | 0, 4);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($65, $66);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2214, $65);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($65);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
                    $$03$i174 = $2208;
                    break L943;
                   }
                  }
                 } while (0);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
                 ___resumeException($$12$i172 | 0);
                }
               }
              } else {
               $$03$i174 = $first;
              }
             } else {
              $$03$i174 = $first;
             }
            } else {
             $$03$i174 = $first;
            }
           } else {
            $$03$i174 = $first;
           }
          } while (0);
          $$0 = $$03$i174;
          break L1;
          break;
         }
        default:
         {
          $$0 = $first;
          break L1;
         }
        }
        $2081 = ($144 | 0) > 2;
        L959 : do {
         if ($2081) {
          $2082 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $2083 = $2082 << 24 >> 24 == 115;
          if ($2083) {
           $2084 = $first + 1 | 0;
           $2085 = SAFE_HEAP_LOAD($2084 >> 0 | 0, 1, 0) | 0 | 0;
           $2086 = $2085 << 24 >> 24 == 90;
           if ($2086) {
            $2087 = $first + 2 | 0;
            $2088 = SAFE_HEAP_LOAD($2087 >> 0 | 0, 1, 0) | 0 | 0;
            $2089 = $2088 << 24 >> 24 == 84;
            if ($2089) {
             $2090 = $db + 4 | 0;
             $2091 = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
             $2092 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $2093 = $2091;
             $2094 = $2092;
             $2095 = $2093 - $2094 | 0;
             $2096 = ($2095 | 0) / 24 & -1;
             $2097 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($2087, $last, $db) | 0;
             $2098 = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
             $2099 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $2100 = $2098;
             $2101 = $2099;
             $2102 = $2100 - $2101 | 0;
             $2103 = ($2102 | 0) / 24 & -1;
             $2104 = ($2097 | 0) == ($2087 | 0);
             if ($2104) {
              $$03$i = $first;
             } else {
              SAFE_HEAP_STORE($tmp$i >> 0 | 0, 20 | 0, 1);
              $2105 = $tmp$i + 1 | 0;
              dest = $2105;
              src = 11710;
              stop = dest + 10 | 0;
              do {
               SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
               dest = dest + 1 | 0;
               src = src + 1 | 0;
              } while ((dest | 0) < (stop | 0));
              $2106 = $tmp$i + 11 | 0;
              SAFE_HEAP_STORE($2106 >> 0 | 0, 0 | 0, 1);
              $2107 = ($2096 | 0) == ($2103 | 0);
              L965 : do {
               if ($2107) {
                label = 727;
               } else {
                $2108 = $2099 + ($2096 * 24 | 0) | 0;
                __THREW__ = 0;
                invoke_vii(232, $69 | 0, $2108 | 0);
                $2109 = __THREW__;
                __THREW__ = 0;
                $2110 = $2109 & 1;
                if ($2110) {
                 label = 721;
                } else {
                 $2111 = SAFE_HEAP_LOAD($69 >> 0 | 0, 1, 0) | 0 | 0;
                 $2112 = $2111 & 1;
                 $2113 = $2112 << 24 >> 24 == 0;
                 $2114 = $69 + 8 | 0;
                 $2115 = SAFE_HEAP_LOAD($2114 | 0, 4, 0) | 0 | 0;
                 $2116 = $69 + 1 | 0;
                 $2117 = $2113 ? $2116 : $2115;
                 $2118 = $69 + 4 | 0;
                 $2119 = SAFE_HEAP_LOAD($2118 | 0, 4, 0) | 0 | 0;
                 $2120 = $2111 & 255;
                 $2121 = $2120 >>> 1;
                 $2122 = $2113 ? $2121 : $2119;
                 __THREW__ = 0;
                 invoke_iiii(222, $tmp$i | 0, $2117 | 0, $2122 | 0) | 0;
                 $2123 = __THREW__;
                 __THREW__ = 0;
                 $2124 = $2123 & 1;
                 if ($2124) {
                  $2154 = ___cxa_find_matching_catch() | 0;
                  $2155 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
                  $$1$i = $2155;
                  $$12$i = $2154;
                  break;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
                 $2125 = $70 + 8 | 0;
                 $2126 = $70 + 1 | 0;
                 $2127 = $70 + 4 | 0;
                 $k$0$i621 = $2096 + 1 | 0;
                 $2128 = ($k$0$i621 | 0) == ($2103 | 0);
                 if ($2128) {
                  label = 727;
                 } else {
                  $k$0$i622 = $k$0$i621;
                  while (1) {
                   $2129 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                   $2130 = $2129 + ($k$0$i622 * 24 | 0) | 0;
                   __THREW__ = 0;
                   invoke_vii(232, $71 | 0, $2130 | 0);
                   $2131 = __THREW__;
                   __THREW__ = 0;
                   $2132 = $2131 & 1;
                   if ($2132) {
                    label = 720;
                    break;
                   }
                   __THREW__ = 0;
                   $2133 = invoke_iiii(227, $71 | 0, 0, 10309 | 0) | 0;
                   $2134 = __THREW__;
                   __THREW__ = 0;
                   $2135 = $2134 & 1;
                   if ($2135) {
                    label = 724;
                    break;
                   }
                   {}
                   SAFE_HEAP_STORE($70 | 0, SAFE_HEAP_LOAD($2133 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($70 + 4 | 0, SAFE_HEAP_LOAD($2133 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($70 + 8 | 0, SAFE_HEAP_LOAD($2133 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($2133 | 0, 0 | 0, 4);
                   $2136 = $2133 + 4 | 0;
                   SAFE_HEAP_STORE($2136 | 0, 0 | 0, 4);
                   $2137 = $2133 + 8 | 0;
                   SAFE_HEAP_STORE($2137 | 0, 0 | 0, 4);
                   $2138 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
                   $2139 = $2138 & 1;
                   $2140 = $2139 << 24 >> 24 == 0;
                   $2141 = SAFE_HEAP_LOAD($2125 | 0, 4, 0) | 0 | 0;
                   $2142 = $2140 ? $2126 : $2141;
                   $2143 = SAFE_HEAP_LOAD($2127 | 0, 4, 0) | 0 | 0;
                   $2144 = $2138 & 255;
                   $2145 = $2144 >>> 1;
                   $2146 = $2140 ? $2145 : $2143;
                   __THREW__ = 0;
                   invoke_iiii(222, $tmp$i | 0, $2142 | 0, $2146 | 0) | 0;
                   $2147 = __THREW__;
                   __THREW__ = 0;
                   $2148 = $2147 & 1;
                   if ($2148) {
                    label = 725;
                    break;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
                   $k$0$i = $k$0$i622 + 1 | 0;
                   $2149 = ($k$0$i | 0) == ($2103 | 0);
                   if ($2149) {
                    label = 727;
                    break L965;
                   } else {
                    $k$0$i622 = $k$0$i;
                   }
                  }
                  if ((label | 0) == 720) {
                   $2150 = ___cxa_find_matching_catch() | 0;
                   $2151 = tempRet0;
                   $lpad$phi$i$index = $2150;
                   $lpad$phi$i$index2 = $2151;
                   label = 722;
                   break;
                  } else if ((label | 0) == 724) {
                   $2156 = ___cxa_find_matching_catch() | 0;
                   $2157 = tempRet0;
                   $$0$i = $2157;
                   $$01$i = $2156;
                  } else if ((label | 0) == 725) {
                   $2158 = ___cxa_find_matching_catch() | 0;
                   $2159 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
                   $$0$i = $2159;
                   $$01$i = $2158;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
                  $$1$i = $$0$i;
                  $$12$i = $$01$i;
                 }
                }
               }
              } while (0);
              do {
               if ((label | 0) == 727) {
                __THREW__ = 0;
                invoke_iii(228, $tmp$i | 0, 10212 | 0) | 0;
                $2160 = __THREW__;
                __THREW__ = 0;
                $2161 = $2160 & 1;
                if ($2161) {
                 label = 721;
                } else {
                 $2162 = ($2103 | 0) == ($2096 | 0);
                 if (!$2162) {
                  $k1$0$i618 = $2103;
                  while (1) {
                   $2163 = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
                   $2164 = $2163 + -24 | 0;
                   $2166 = $2163;
                   while (1) {
                    $2165 = $2166 + -24 | 0;
                    SAFE_HEAP_STORE($2090 | 0, $2165 | 0, 4);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2165);
                    $$pre$i$i = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
                    $2167 = ($$pre$i$i | 0) == ($2164 | 0);
                    if ($2167) {
                     break;
                    } else {
                     $2166 = $$pre$i$i;
                    }
                   }
                   $2168 = $k1$0$i618 + -1 | 0;
                   $2169 = ($2168 | 0) == ($2096 | 0);
                   if ($2169) {
                    break;
                   } else {
                    $k1$0$i618 = $2168;
                   }
                  }
                 }
                 {}
                 SAFE_HEAP_STORE($73 | 0, SAFE_HEAP_LOAD($tmp$i | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($73 + 4 | 0, SAFE_HEAP_LOAD($tmp$i + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($73 + 8 | 0, SAFE_HEAP_LOAD($tmp$i + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($tmp$i | 0, 0 | 0, 4);
                 $2170 = $tmp$i + 4 | 0;
                 SAFE_HEAP_STORE($2170 | 0, 0 | 0, 4);
                 $2171 = $tmp$i + 8 | 0;
                 SAFE_HEAP_STORE($2171 | 0, 0 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($72, $73);
                 $2172 = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
                 $2173 = $db + 8 | 0;
                 $2174 = SAFE_HEAP_LOAD($2173 | 0, 4, 0) | 0 | 0;
                 $2175 = $2172 >>> 0 < $2174 >>> 0;
                 if ($2175) {
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2172, $72);
                  $2176 = SAFE_HEAP_LOAD($2090 | 0, 4, 0) | 0 | 0;
                  $2177 = $2176 + 24 | 0;
                  SAFE_HEAP_STORE($2090 | 0, $2177 | 0, 4);
                 } else {
                  $2178 = $db + 12 | 0;
                  $2179 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $2180 = $2172;
                  $2181 = $2179;
                  $2182 = $2180 - $2181 | 0;
                  $2183 = ($2182 | 0) / 24 & -1;
                  $2184 = $2183 + 1 | 0;
                  $2185 = ($2182 | 0) < -24;
                  if ($2185) {
                   __THREW__ = 0;
                   invoke_vi(238, $db | 0);
                   $2186 = __THREW__;
                   __THREW__ = 0;
                   $2187 = ___cxa_find_matching_catch() | 0;
                   $2188 = tempRet0;
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
                   $$1$i = $2188;
                   $$12$i = $2187;
                   break;
                  }
                  $2189 = $2174;
                  $2190 = $2189 - $2181 | 0;
                  $2191 = ($2190 | 0) / 24 & -1;
                  $2192 = $2191 >>> 0 < 1073741823;
                  if ($2192) {
                   $2193 = $2191 << 1;
                   $2194 = $2193 >>> 0 < $2184 >>> 0;
                   $2195 = $2194 ? $2184 : $2193;
                   $$0$i$i$i$i = $2195;
                  } else {
                   $$0$i$i$i$i = 2147483647;
                  }
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $2183, $2178);
                  $2196 = $__v$i$i$i + 8 | 0;
                  $2197 = SAFE_HEAP_LOAD($2196 | 0, 4, 0) | 0 | 0;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2197, $72);
                  $2198 = $2197 + 24 | 0;
                  SAFE_HEAP_STORE($2196 | 0, $2198 | 0, 4);
                  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
                 }
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
                 $$03$i = $2097;
                 break L959;
                }
               }
              } while (0);
              if ((label | 0) == 721) {
               $2152 = ___cxa_find_matching_catch() | 0;
               $2153 = tempRet0;
               $lpad$phi$i$index = $2152;
               $lpad$phi$i$index2 = $2153;
               label = 722;
              }
              if ((label | 0) == 722) {
               $$1$i = $lpad$phi$i$index2;
               $$12$i = $lpad$phi$i$index;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
              ___resumeException($$12$i | 0);
             }
            } else {
             $$03$i = $first;
            }
           } else {
            $$03$i = $first;
           }
          } else {
           $$03$i = $first;
          }
         } else {
          $$03$i = $first;
         }
        } while (0);
        $$0 = $$03$i;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 116:
     {
      $2229 = $t$0 + 1 | 0;
      $2230 = SAFE_HEAP_LOAD($2229 >> 0 | 0, 1, 0) | 0 | 0;
      $2231 = $2230 << 24 >> 24;
      switch ($2231 | 0) {
      case 105:
      case 101:
       {
        $2232 = ($144 | 0) > 2;
        L1010 : do {
         if ($2232) {
          $2233 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $2234 = $2233 << 24 >> 24 == 116;
          if ($2234) {
           $2235 = $first + 1 | 0;
           $2236 = SAFE_HEAP_LOAD($2235 >> 0 | 0, 1, 0) | 0 | 0;
           switch ($2236 << 24 >> 24) {
           case 105:
           case 101:
            {
             break;
            }
           default:
            {
             $$03$i189 = $first;
             break L1010;
            }
           }
           $2237 = $2236 << 24 >> 24 == 101;
           $2238 = $first + 2 | 0;
           if ($2237) {
            $2239 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2238, $last, $db) | 0;
            $t$0$i = $2239;
           } else {
            $2240 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2238, $last, $db) | 0;
            $t$0$i = $2240;
           }
           $2241 = ($t$0$i | 0) == ($2238 | 0);
           if ($2241) {
            $$03$i189 = $first;
           } else {
            $2242 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $2243 = $db + 4 | 0;
            $2244 = SAFE_HEAP_LOAD($2243 | 0, 4, 0) | 0 | 0;
            $2245 = ($2242 | 0) == ($2244 | 0);
            if ($2245) {
             $$03$i189 = $first;
            } else {
             $2246 = $2244 + -24 | 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($61, $2246);
             __THREW__ = 0;
             $2247 = invoke_iiii(227, $61 | 0, 0, 11721 | 0) | 0;
             $2248 = __THREW__;
             __THREW__ = 0;
             $2249 = $2248 & 1;
             do {
              if ($2249) {
               $2257 = ___cxa_find_matching_catch() | 0;
               $2258 = tempRet0;
               $$1$i188 = $2258;
               $$12$i187 = $2257;
              } else {
               {}
               SAFE_HEAP_STORE($60 | 0, SAFE_HEAP_LOAD($2247 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($60 + 4 | 0, SAFE_HEAP_LOAD($2247 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($60 + 8 | 0, SAFE_HEAP_LOAD($2247 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($2247 | 0, 0 | 0, 4);
               $2250 = $2247 + 4 | 0;
               SAFE_HEAP_STORE($2250 | 0, 0 | 0, 4);
               $2251 = $2247 + 8 | 0;
               SAFE_HEAP_STORE($2251 | 0, 0 | 0, 4);
               __THREW__ = 0;
               $2252 = invoke_iii(228, $60 | 0, 10212 | 0) | 0;
               $2253 = __THREW__;
               __THREW__ = 0;
               $2254 = $2253 & 1;
               if ($2254) {
                $2259 = ___cxa_find_matching_catch() | 0;
                $2260 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
                $$1$i188 = $2260;
                $$12$i187 = $2259;
                break;
               } else {
                {}
                SAFE_HEAP_STORE($59 | 0, SAFE_HEAP_LOAD($2252 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($59 + 4 | 0, SAFE_HEAP_LOAD($2252 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($59 + 8 | 0, SAFE_HEAP_LOAD($2252 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($2252 | 0, 0 | 0, 4);
                $2255 = $2252 + 4 | 0;
                SAFE_HEAP_STORE($2255 | 0, 0 | 0, 4);
                $2256 = $2252 + 8 | 0;
                SAFE_HEAP_STORE($2256 | 0, 0 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($58, $59);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2246, $58);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
                $$03$i189 = $t$0$i;
                break L1010;
               }
              }
             } while (0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
             ___resumeException($$12$i187 | 0);
            }
           }
          } else {
           $$03$i189 = $first;
          }
         } else {
          $$03$i189 = $first;
         }
        } while (0);
        $$0 = $$03$i189;
        break L1;
        break;
       }
      case 114:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($141, 11729);
        $2261 = $db + 4 | 0;
        $2262 = SAFE_HEAP_LOAD($2261 | 0, 4, 0) | 0 | 0;
        $2263 = $db + 8 | 0;
        $2264 = SAFE_HEAP_LOAD($2263 | 0, 4, 0) | 0 | 0;
        $2265 = $2262 >>> 0 < $2264 >>> 0;
        if ($2265) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2262, $141);
         $2266 = SAFE_HEAP_LOAD($2261 | 0, 4, 0) | 0 | 0;
         $2267 = $2266 + 24 | 0;
         SAFE_HEAP_STORE($2261 | 0, $2267 | 0, 4);
        } else {
         $2268 = $db + 12 | 0;
         $2269 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $2270 = $2262;
         $2271 = $2269;
         $2272 = $2270 - $2271 | 0;
         $2273 = ($2272 | 0) / 24 & -1;
         $2274 = $2273 + 1 | 0;
         $2275 = ($2272 | 0) < -24;
         if ($2275) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $2276 = __THREW__;
          __THREW__ = 0;
          $2277 = ___cxa_find_matching_catch() | 0;
          $2278 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
          $$23 = $2277;
          $$2332 = $2278;
          break L7;
         }
         $2279 = $2264;
         $2280 = $2279 - $2271 | 0;
         $2281 = ($2280 | 0) / 24 & -1;
         $2282 = $2281 >>> 0 < 1073741823;
         if ($2282) {
          $2283 = $2281 << 1;
          $2284 = $2283 >>> 0 < $2274 >>> 0;
          $2285 = $2284 ? $2274 : $2283;
          $$0$i$i$i = $2285;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $2273, $2268);
         $2286 = $__v$i$i + 8 | 0;
         $2287 = SAFE_HEAP_LOAD($2286 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2287, $141);
         $2288 = $2287 + 24 | 0;
         SAFE_HEAP_STORE($2286 | 0, $2288 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
        $2289 = $first + 2 | 0;
        $$0 = $2289;
        break L1;
        break;
       }
      case 119:
       {
        $2290 = ($144 | 0) > 2;
        do {
         if ($2290) {
          $2291 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
          $2292 = $2291 << 24 >> 24 == 116;
          if ($2292) {
           $2293 = $first + 1 | 0;
           $2294 = SAFE_HEAP_LOAD($2293 >> 0 | 0, 1, 0) | 0 | 0;
           $2295 = $2294 << 24 >> 24 == 119;
           if ($2295) {
            $2296 = $first + 2 | 0;
            $2297 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2296, $last, $db) | 0;
            $2298 = ($2297 | 0) == ($2296 | 0);
            if ($2298) {
             $$02$i = $first;
            } else {
             $2299 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $2300 = $db + 4 | 0;
             $2301 = SAFE_HEAP_LOAD($2300 | 0, 4, 0) | 0 | 0;
             $2302 = ($2299 | 0) == ($2301 | 0);
             if ($2302) {
              $$02$i = $first;
             } else {
              $2303 = $2301 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($64, $2303);
              __THREW__ = 0;
              $2304 = invoke_iiii(227, $64 | 0, 0, 11735 | 0) | 0;
              $2305 = __THREW__;
              __THREW__ = 0;
              $2306 = $2305 & 1;
              if ($2306) {
               $2309 = ___cxa_find_matching_catch() | 0;
               $2310 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
               ___resumeException($2309 | 0);
              } else {
               {}
               SAFE_HEAP_STORE($63 | 0, SAFE_HEAP_LOAD($2304 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($63 + 4 | 0, SAFE_HEAP_LOAD($2304 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($63 + 8 | 0, SAFE_HEAP_LOAD($2304 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($2304 | 0, 0 | 0, 4);
               $2307 = $2304 + 4 | 0;
               SAFE_HEAP_STORE($2307 | 0, 0 | 0, 4);
               $2308 = $2304 + 8 | 0;
               SAFE_HEAP_STORE($2308 | 0, 0 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($62, $63);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2303, $62);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($62);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
               $$02$i = $2297;
               break;
              }
             }
            }
           } else {
            $$02$i = $first;
           }
          } else {
           $$02$i = $first;
          }
         } else {
          $$02$i = $first;
         }
        } while (0);
        $$0 = $$02$i;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 57:
    case 56:
    case 55:
    case 54:
    case 53:
    case 52:
    case 51:
    case 50:
    case 49:
     {
      $2311 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $$0 = $2311;
      break L1;
      break;
     }
    default:
     {
      $$0 = $first;
      break L1;
     }
    }
   } while (0);
   ___resumeException($$23 | 0);
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$ = 0, $$$$i$i$i = 0, $$$$i$i$i$i = 0, $$$$i$i$i$i162 = 0, $$$$i$i$i$i189 = 0, $$$$i$i$i100 = 0, $$$$i$i$i118 = 0, $$$$i$i$i13$i = 0, $$$$i$i$i22$i = 0, $$$i$i$i = 0, $$$i$i$i$i = 0, $$$i$i$i$i161 = 0, $$$i$i$i$i188 = 0, $$$i$i$i117 = 0, $$$i$i$i12$i = 0, $$$i$i$i21$i = 0, $$$i$i$i99 = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i105 = 0, $$0$i$i$i113 = 0, $$0$i$i$i123 = 0, $$0$i$i$i131 = 0, $$0$i$i$i136 = 0, $$0$i$i$i148 = 0, $$0$i$i$i153 = 0, $$0$i$i$i17 = 0, $$0$i$i$i181 = 0, $$0$i$i$i191509 = 0, $$0$i$i$i22 = 0, $$0$i$i$i27 = 0, $$0$i$i$i29 = 0, $$0$i$i$i31 = 0, $$0$i$i$i38 = 0, $$0$i$i$i43 = 0, $$0$i$i$i51 = 0, $$0$i$i$i56 = 0;
 var $$0$i$i$i61 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i87 = 0, $$0$i$i$i95 = 0, $$01$i$i = 0, $$01$i198 = 0, $$02 = 0, $$02$i = 0, $$03 = 0, $$03$i$i = 0, $$04$i = 0, $$04$i232 = 0, $$05$i = 0, $$07$i = 0, $$08$i = 0, $$1$i = 0, $$1$i$i = 0;
 var $$1$i199 = 0, $$1$i263 = 0, $$10 = 0, $$1013 = 0, $$12$i = 0, $$12$i$i = 0, $$13$i = 0, $$13$i259$ph = 0, $$14$i$i = 0, $$15$i = 0, $$18$i = 0, $$2 = 0, $$2$i = 0, $$2$i$i = 0, $$23$i = 0, $$25 = 0, $$26$i = 0, $$29$i = 0, $$3$i = 0, $$3$i234 = 0;
 var $$310$i = 0, $$35$i = 0, $$4 = 0, $$4$i = 0, $$4$i222 = 0, $$4$i258 = 0, $$411$i = 0, $$45$i = 0, $$46$i = 0, $$47 = 0, $$5 = 0, $$5$i = 0, $$5$i223 = 0, $$5$i261 = 0, $$512$i = 0, $$56$i = 0, $$57$i = 0, $$58 = 0, $$6 = 0, $$6$i = 0;
 var $$6$i224 = 0, $$6$i264 = 0, $$613$i = 0, $$67$i = 0, $$68$i = 0, $$69 = 0, $$7 = 0, $$710 = 0, $$8 = 0, $$811 = 0, $$9 = 0, $$912 = 0, $$in = 0, $$lcssa = 0, $$lcssa667 = 0, $$lcssa672 = 0, $$lcssa674 = 0, $$lcssa678 = 0, $$lcssa680 = 0, $$lcssa682 = 0;
 var $$lcssa686 = 0, $$lcssa688 = 0, $$lcssa690 = 0, $$lcssa694 = 0, $$lcssa696 = 0, $$lcssa698 = 0, $$lcssa702 = 0, $$lcssa704 = 0, $$lcssa706 = 0, $$lcssa710 = 0, $$lcssa712 = 0, $$off = 0, $$off271 = 0, $$ph390 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i203 = 0, $$pre$i$i$i21$i = 0, $$pre$i$i$i36$i = 0;
 var $$pre$i$i$i52$i = 0, $$pre$i$i$i71$i = 0, $$pre$i$i183 = 0, $$pre$i$i200 = 0, $$pre$i$i256 = 0, $$pre$i143 = 0, $$pre$i157 = 0, $$pre$i165 = 0, $$pre$i36 = 0, $$pre$i7$i = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
 var $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0;
 var $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0;
 var $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0;
 var $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0;
 var $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0;
 var $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0;
 var $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0;
 var $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0;
 var $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0;
 var $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0;
 var $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0;
 var $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0;
 var $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0;
 var $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0;
 var $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0;
 var $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0;
 var $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0;
 var $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0;
 var $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0;
 var $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0;
 var $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0;
 var $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0;
 var $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0;
 var $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0;
 var $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0;
 var $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0;
 var $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0;
 var $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0;
 var $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0;
 var $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0;
 var $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0;
 var $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0;
 var $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0;
 var $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0;
 var $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0;
 var $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0;
 var $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0;
 var $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0;
 var $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0;
 var $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0;
 var $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0;
 var $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0;
 var $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0;
 var $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0;
 var $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0;
 var $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0;
 var $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0;
 var $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0;
 var $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0;
 var $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0;
 var $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0;
 var $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0;
 var $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0;
 var $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0;
 var $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0;
 var $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0;
 var $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0;
 var $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0;
 var $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0;
 var $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0;
 var $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0;
 var $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0;
 var $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0;
 var $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0;
 var $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0;
 var $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0;
 var $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0;
 var $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0;
 var $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0;
 var $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0;
 var $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0;
 var $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0;
 var $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0;
 var $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0;
 var $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0;
 var $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0;
 var $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0;
 var $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0;
 var $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0;
 var $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0;
 var $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0;
 var $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0;
 var $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0;
 var $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0;
 var $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0;
 var $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0;
 var $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0;
 var $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0;
 var $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0;
 var $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0;
 var $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0;
 var $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0;
 var $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0;
 var $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0;
 var $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0;
 var $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $__p$0$i$i$i508 = 0, $__p$0$ph$i$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i103 = 0, $__v$i$i112 = 0, $__v$i$i121 = 0, $__v$i$i130 = 0, $__v$i$i134 = 0, $__v$i$i147 = 0, $__v$i$i152 = 0, $__v$i$i16 = 0, $__v$i$i180 = 0, $__v$i$i21 = 0, $__v$i$i26 = 0, $__v$i$i28 = 0, $__v$i$i30 = 0, $__v$i$i37 = 0, $__v$i$i41 = 0;
 var $__v$i$i50 = 0, $__v$i$i55 = 0, $__v$i$i60 = 0, $__v$i$i65 = 0, $__v$i$i70 = 0, $__v$i$i75 = 0, $__v$i$i80 = 0, $__v$i$i85 = 0, $__v$i$i94 = 0, $args = 0, $class_type$i = 0, $cv = 0, $eh$lpad$body$i$i$index34Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i108$index19Z2D = 0, $eh$lpad$body$i$i108$indexZ2D = 0, $eh$lpad$body$i$i126$index24Z2D = 0, $eh$lpad$body$i$i126$indexZ2D = 0, $eh$lpad$body$i$i139$index29Z2D = 0, $eh$lpad$body$i$i139$indexZ2D = 0;
 var $eh$lpad$body$i$i46$index2Z2D = 0, $eh$lpad$body$i$i46$indexZ2D = 0, $eh$lpad$body$i$i90$index14Z2D = 0, $eh$lpad$body$i$i90$indexZ2D = 0, $expr$i = 0, $func$i = 0, $k$0$i515 = 0, $k$0560 = 0, $k11$0540 = 0, $k15$0543 = 0, $k2$0$i516 = 0, $k20$0550 = 0, $k5$0533 = 0, $k8$0536 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $num1$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0;
 var $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i210 = 0, $or$cond$i$i$i$i$i$i245 = 0, $or$cond$i$i$i$i$i28$i = 0, $or$cond$i$i$i$i$i43$i = 0, $or$cond$i$i$i$i$i59$i = 0, $or$cond$i$i$i$i$i78$i = 0, $or$cond10$i = 0, $or$cond448 = 0, $or$cond449 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i205 = 0, $phitmp$i$i$i$i$i$i$i240 = 0, $phitmp$i$i$i$i$i$i23$i = 0, $phitmp$i$i$i$i$i$i38$i = 0, $phitmp$i$i$i$i$i$i54$i = 0;
 var $phitmp$i$i$i$i$i$i73$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i208 = 0, $phitmp$i2$i$i$i$i$i$i243 = 0, $phitmp$i2$i$i$i$i$i26$i = 0, $phitmp$i2$i$i$i$i$i41$i = 0, $phitmp$i2$i$i$i$i$i57$i = 0, $phitmp$i2$i$i$i$i$i76$i = 0, $proto = 0, $ref_qual$0$i$ph$ph = 0, $ref_qual$0$i$ph521 = 0, $ref_qual$0$i$ph521$lcssa = 0, $scevgep2$i$i$i = 0, $sig$i = 0, $t$0$i = 0, $t$1$i$be = 0, $t$1$i$ph$ph = 0, $t$1$i$ph520 = 0, $t$1$i518 = 0, $t$1$i518$lcssa = 0;
 var $t12$0$i = 0, $template_args = 0, $type = 0, $type$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i$i = sp + 1572 | 0;
 $0 = sp + 1560 | 0;
 $1 = sp + 1548 | 0;
 $2 = sp + 1536 | 0;
 $3 = sp + 1512 | 0;
 $4 = sp + 1500 | 0;
 $5 = sp + 1488 | 0;
 $6 = sp + 1476 | 0;
 $num1$i = sp + 1464 | 0;
 $7 = sp + 1452 | 0;
 $8 = sp + 1440 | 0;
 $9 = sp + 1428 | 0;
 $10 = sp + 1416 | 0;
 $11 = sp + 1404 | 0;
 $12 = sp + 1392 | 0;
 $13 = sp + 1380 | 0;
 $14 = sp + 1368 | 0;
 $type$i = sp + 1344 | 0;
 $expr$i = sp + 1320 | 0;
 $15 = sp + 1304 | 0;
 $16 = sp + 1292 | 0;
 $17 = sp + 1280 | 0;
 $18 = sp + 1268 | 0;
 $19 = sp + 1256 | 0;
 $sig$i = sp + 1244 | 0;
 $20 = sp + 1232 | 0;
 $func$i = sp + 1208 | 0;
 $class_type$i = sp + 1184 | 0;
 $21 = sp + 1168 | 0;
 $22 = sp + 1156 | 0;
 $23 = sp + 1144 | 0;
 $24 = sp + 1132 | 0;
 $25 = sp + 1120 | 0;
 $26 = sp + 1108 | 0;
 $27 = sp + 1096 | 0;
 $28 = sp + 1084 | 0;
 $29 = sp + 1072 | 0;
 $__v$i$i180 = sp + 1052 | 0;
 $__v$i$i152 = sp + 1032 | 0;
 $__v$i$i147 = sp + 1012 | 0;
 $__v$i$i134 = sp + 992 | 0;
 $__v$i$i130 = sp + 972 | 0;
 $__v$i$i121 = sp + 952 | 0;
 $__v$i$i112 = sp + 932 | 0;
 $__v$i$i103 = sp + 912 | 0;
 $__v$i$i94 = sp + 892 | 0;
 $__v$i$i85 = sp + 872 | 0;
 $__v$i$i80 = sp + 852 | 0;
 $__v$i$i75 = sp + 832 | 0;
 $__v$i$i70 = sp + 812 | 0;
 $__v$i$i65 = sp + 792 | 0;
 $__v$i$i60 = sp + 772 | 0;
 $__v$i$i55 = sp + 752 | 0;
 $__v$i$i50 = sp + 732 | 0;
 $__v$i$i41 = sp + 712 | 0;
 $__v$i$i37 = sp + 692 | 0;
 $__v$i$i30 = sp + 672 | 0;
 $__v$i$i28 = sp + 652 | 0;
 $__v$i$i26 = sp + 632 | 0;
 $__v$i$i21 = sp + 612 | 0;
 $__v$i$i16 = sp + 592 | 0;
 $__v$i$i = sp + 572 | 0;
 $cv = sp + 568 | 0;
 $30 = sp + 552 | 0;
 $31 = sp + 544 | 0;
 $32 = sp + 528 | 0;
 $33 = sp + 520 | 0;
 $34 = sp + 504 | 0;
 $35 = sp + 496 | 0;
 $36 = sp + 480 | 0;
 $37 = sp + 472 | 0;
 $38 = sp + 456 | 0;
 $39 = sp + 452 | 0;
 $40 = sp + 440 | 0;
 $41 = sp + 428 | 0;
 $42 = sp + 416 | 0;
 $43 = sp + 404 | 0;
 $args = sp + 392 | 0;
 $44 = sp + 376 | 0;
 $45 = sp + 368 | 0;
 $type = sp + 356 | 0;
 $46 = sp + 344 | 0;
 $47 = sp + 320 | 0;
 $48 = sp + 308 | 0;
 $49 = sp + 296 | 0;
 $50 = sp + 284 | 0;
 $proto = sp + 272 | 0;
 $51 = sp + 248 | 0;
 $52 = sp + 236 | 0;
 $53 = sp + 224 | 0;
 $54 = sp + 212 | 0;
 $55 = sp + 200 | 0;
 $56 = sp + 176 | 0;
 $57 = sp + 164 | 0;
 $58 = sp + 152 | 0;
 $59 = sp + 136 | 0;
 $60 = sp + 128 | 0;
 $61 = sp + 112 | 0;
 $62 = sp + 108 | 0;
 $template_args = sp + 96 | 0;
 $63 = sp + 80 | 0;
 $64 = sp + 72 | 0;
 $65 = sp + 56 | 0;
 $66 = sp + 48 | 0;
 $67 = sp + 32 | 0;
 $68 = sp + 24 | 0;
 $69 = sp + 8 | 0;
 $70 = sp;
 $71 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($71) {
   $$0 = $first;
  } else {
   $72 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $73 = $72 << 24 >> 24;
   switch ($73 | 0) {
   case 75:
   case 86:
   case 114:
    {
     SAFE_HEAP_STORE($cv | 0, 0 | 0, 4);
     $74 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $cv) | 0;
     $75 = ($74 | 0) == ($first | 0);
     if ($75) {
      $$0 = $first;
      break L1;
     }
     $76 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0;
     $77 = $db + 4 | 0;
     $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
     $79 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
     $80 = $78;
     $81 = $79;
     $82 = $80 - $81 | 0;
     $83 = ($82 | 0) / 24 & -1;
     $84 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($74, $last, $db) | 0;
     $85 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
     $86 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
     $87 = $85;
     $88 = $86;
     $89 = $87 - $88 | 0;
     $90 = ($89 | 0) / 24 & -1;
     $91 = ($84 | 0) == ($74 | 0);
     if ($91) {
      $$0 = $first;
      break L1;
     }
     $92 = $76 << 24 >> 24 == 70;
     $93 = $db + 20 | 0;
     $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
     if ($92) {
      $95 = $94 + -16 | 0;
      $97 = $94;
      while (1) {
       $96 = $97 + -16 | 0;
       SAFE_HEAP_STORE($93 | 0, $96 | 0, 4);
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($96);
       $$pre$i36 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
       $98 = ($$pre$i36 | 0) == ($95 | 0);
       if ($98) {
        $105 = $95;
        break;
       } else {
        $97 = $$pre$i36;
       }
      }
     } else {
      $105 = $94;
     }
     $99 = $db + 16 | 0;
     $100 = $db + 12 | 0;
     $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
     $102 = $101;
     $103 = $db + 24 | 0;
     $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
     $106 = $105 >>> 0 < $104 >>> 0;
     if ($106) {
      SAFE_HEAP_STORE($105 | 0, 0 | 0, 4);
      $107 = $105 + 4 | 0;
      SAFE_HEAP_STORE($107 | 0, 0 | 0, 4);
      $108 = $105 + 8 | 0;
      SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
      $109 = $105 + 12 | 0;
      SAFE_HEAP_STORE($109 | 0, $102 | 0, 4);
      $110 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
      $111 = $110 + 16 | 0;
      SAFE_HEAP_STORE($93 | 0, $111 | 0, 4);
     } else {
      $112 = $db + 28 | 0;
      $113 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
      $114 = $105;
      $115 = $113;
      $116 = $114 - $115 | 0;
      $117 = $116 >> 4;
      $118 = $117 + 1 | 0;
      $119 = ($116 | 0) < -16;
      if ($119) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($99);
      }
      $120 = $104;
      $121 = $120 - $115 | 0;
      $122 = $121 >> 4;
      $123 = $122 >>> 0 < 1073741823;
      if ($123) {
       $124 = $121 >> 3;
       $125 = $124 >>> 0 < $118 >>> 0;
       $126 = $125 ? $118 : $124;
       $$0$i$i$i38 = $126;
      } else {
       $$0$i$i$i38 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i37, $$0$i$i$i38, $117, $112);
      $127 = $__v$i$i37 + 8 | 0;
      $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($128 | 0, 0 | 0, 4);
      $129 = $128 + 4 | 0;
      SAFE_HEAP_STORE($129 | 0, 0 | 0, 4);
      $130 = $128 + 8 | 0;
      SAFE_HEAP_STORE($130 | 0, 0 | 0, 4);
      $131 = $128 + 12 | 0;
      SAFE_HEAP_STORE($131 | 0, $102 | 0, 4);
      $132 = $128 + 16 | 0;
      SAFE_HEAP_STORE($127 | 0, $132 | 0, 4);
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($99, $__v$i$i37);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i37);
     }
     $133 = SAFE_HEAP_LOAD($cv | 0, 4, 0) | 0 | 0;
     $134 = $133 & 1;
     $135 = ($134 | 0) == 0;
     $136 = $133 & 2;
     $137 = ($136 | 0) == 0;
     $138 = $133 & 4;
     $139 = ($138 | 0) == 0;
     $140 = $__v$i$i41 + 8 | 0;
     $141 = $83 >>> 0 < $90 >>> 0;
     if ($141) {
      $k$0560 = $83;
     } else {
      $$0 = $84;
      break L1;
     }
     while (1) {
      if ($92) {
       $142 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $143 = ($142 + ($k$0560 * 24 | 0) | 0) + 12 | 0;
       $144 = SAFE_HEAP_LOAD($143 >> 0 | 0, 1, 0) | 0 | 0;
       $145 = $144 & 1;
       $146 = $145 << 24 >> 24 == 0;
       if ($146) {
        $151 = $144 & 255;
        $152 = $151 >>> 1;
        $153 = $143 + 1 | 0;
        $$in = $152;
        $156 = $153;
       } else {
        $147 = ($142 + ($k$0560 * 24 | 0) | 0) + 16 | 0;
        $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
        $149 = ($142 + ($k$0560 * 24 | 0) | 0) + 20 | 0;
        $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
        $$in = $148;
        $156 = $150;
       }
       $154 = $$in + -2 | 0;
       $155 = $156 + $154 | 0;
       $157 = SAFE_HEAP_LOAD($155 >> 0 | 0, 1, 0) | 0 | 0;
       $158 = $157 << 24 >> 24 == 38;
       if ($158) {
        $159 = $$in + -3 | 0;
        $p$0 = $159;
       } else {
        if ($146) {
         $164 = $143 + 1 | 0;
         $165 = $144 & 255;
         $166 = $165 >>> 1;
         $167 = $166;
         $169 = $164;
        } else {
         $160 = ($142 + ($k$0560 * 24 | 0) | 0) + 20 | 0;
         $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
         $162 = ($142 + ($k$0560 * 24 | 0) | 0) + 16 | 0;
         $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
         $167 = $163;
         $169 = $161;
        }
        $$sum$i = $167 + -1 | 0;
        $168 = $169 + $$sum$i | 0;
        $170 = SAFE_HEAP_LOAD($168 >> 0 | 0, 1, 0) | 0 | 0;
        $171 = $170 << 24 >> 24 == 38;
        $$ = $171 ? $154 : $$in;
        $p$0 = $$;
       }
       if ($135) {
        $p$1 = $p$0;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($143, $p$0, 10262) | 0;
        $172 = $p$0 + 6 | 0;
        $p$1 = $172;
       }
       if ($137) {
        $p$2 = $p$1;
       } else {
        $173 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $174 = ($173 + ($k$0560 * 24 | 0) | 0) + 12 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($174, $p$1, 10269) | 0;
        $175 = $p$1 + 9 | 0;
        $p$2 = $175;
       }
       if (!$139) {
        $176 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $177 = ($176 + ($k$0560 * 24 | 0) | 0) + 12 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($177, $p$2, 10279) | 0;
       }
      } else {
       if (!$135) {
        $178 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $179 = $178 + ($k$0560 * 24 | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($179, 10262) | 0;
       }
       if (!$137) {
        $180 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $181 = $180 + ($k$0560 * 24 | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($181, 10269) | 0;
       }
       if (!$139) {
        $182 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $183 = $182 + ($k$0560 * 24 | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($183, 10279) | 0;
       }
      }
      $184 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
      $185 = $184 + -16 | 0;
      $186 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $187 = $186 + ($k$0560 * 24 | 0) | 0;
      $188 = $184 + -12 | 0;
      $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
      $190 = $184 + -8 | 0;
      $191 = SAFE_HEAP_LOAD($190 | 0, 4, 0) | 0 | 0;
      $192 = ($189 | 0) == ($191 | 0);
      if ($192) {
       $201 = $184 + -4 | 0;
       $202 = SAFE_HEAP_LOAD($185 | 0, 4, 0) | 0 | 0;
       $203 = $189;
       $204 = $202;
       $205 = $203 - $204 | 0;
       $206 = ($205 | 0) / 24 & -1;
       $207 = $206 + 1 | 0;
       $208 = ($205 | 0) < -24;
       if ($208) {
        $$lcssa706 = $185;
        label = 43;
        break;
       }
       $209 = $206 >>> 0 < 1073741823;
       if ($209) {
        $210 = $206 << 1;
        $211 = $210 >>> 0 < $207 >>> 0;
        $212 = $211 ? $207 : $210;
        $$0$i$i$i43 = $212;
       } else {
        $$0$i$i$i43 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i41, $$0$i$i$i43, $206, $201);
       $213 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
       __THREW__ = 0;
       invoke_vii(236, $213 | 0, $187 | 0);
       $214 = __THREW__;
       __THREW__ = 0;
       $215 = $214 & 1;
       if ($215) {
        label = 49;
        break;
       }
       $216 = $213 + 12 | 0;
       $217 = ($186 + ($k$0560 * 24 | 0) | 0) + 12 | 0;
       __THREW__ = 0;
       invoke_vii(236, $216 | 0, $217 | 0);
       $218 = __THREW__;
       __THREW__ = 0;
       $219 = $218 & 1;
       if ($219) {
        $$lcssa712 = $213;
        label = 48;
        break;
       }
       $224 = $213 + 24 | 0;
       SAFE_HEAP_STORE($140 | 0, $224 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($185, $__v$i$i41);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i41);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($189, $187);
       $193 = $189 + 12 | 0;
       $194 = ($186 + ($k$0560 * 24 | 0) | 0) + 12 | 0;
       __THREW__ = 0;
       invoke_vii(236, $193 | 0, $194 | 0);
       $195 = __THREW__;
       __THREW__ = 0;
       $196 = $195 & 1;
       if ($196) {
        $$lcssa710 = $189;
        label = 40;
        break;
       }
       $199 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
       $200 = $199 + 24 | 0;
       SAFE_HEAP_STORE($188 | 0, $200 | 0, 4);
      }
      $225 = $k$0560 + 1 | 0;
      $226 = $225 >>> 0 < $90 >>> 0;
      if ($226) {
       $k$0560 = $225;
      } else {
       $$0 = $84;
       break L1;
      }
     }
     if ((label | 0) == 40) {
      $197 = ___cxa_find_matching_catch() | 0;
      $198 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa710);
      ___resumeException($197 | 0);
     } else if ((label | 0) == 43) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa706);
     } else if ((label | 0) == 48) {
      $220 = ___cxa_find_matching_catch() | 0;
      $221 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa712);
      $eh$lpad$body$i$i46$index2Z2D = $221;
      $eh$lpad$body$i$i46$indexZ2D = $220;
     } else if ((label | 0) == 49) {
      $222 = ___cxa_find_matching_catch() | 0;
      $223 = tempRet0;
      $eh$lpad$body$i$i46$index2Z2D = $223;
      $eh$lpad$body$i$i46$indexZ2D = $222;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i41);
     ___resumeException($eh$lpad$body$i$i46$indexZ2D | 0);
     break;
    }
   default:
    {}
   }
   $227 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   $228 = ($227 | 0) == ($first | 0);
   if ($228) {
    $229 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
    $230 = $229 << 24 >> 24;
    L73 : do {
     switch ($230 | 0) {
     case 65:
      {
       $231 = $229 << 24 >> 24 == 65;
       L75 : do {
        if ($231) {
         $232 = $first + 1 | 0;
         $233 = ($232 | 0) == ($last | 0);
         if ($233) {
          $$0$i = $first;
         } else {
          $234 = SAFE_HEAP_LOAD($232 >> 0 | 0, 1, 0) | 0 | 0;
          $235 = $234 << 24 >> 24 == 95;
          if ($235) {
           $236 = $first + 2 | 0;
           $237 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($236, $last, $db) | 0;
           $238 = ($237 | 0) == ($236 | 0);
           if ($238) {
            $$0$i = $first;
            break;
           }
           $239 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $240 = $db + 4 | 0;
           $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
           $242 = ($239 | 0) == ($241 | 0);
           if ($242) {
            $$0$i = $first;
            break;
           }
           $243 = $241 + -12 | 0;
           $244 = SAFE_HEAP_LOAD($243 >> 0 | 0, 1, 0) | 0 | 0;
           $245 = $244 & 1;
           $246 = $245 << 24 >> 24 == 0;
           $247 = $241 + -8 | 0;
           $248 = SAFE_HEAP_LOAD($247 | 0, 4, 0) | 0 | 0;
           $249 = $244 & 255;
           $250 = $249 >>> 1;
           $251 = $246 ? $250 : $248;
           $252 = $241 + -4 | 0;
           $253 = SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0;
           $254 = $243 + 1 | 0;
           $255 = $246 ? $254 : $253;
           $256 = $251 >>> 0 < 2;
           $257 = $256 ? $251 : 2;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10, $255, $257);
           $258 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
           $259 = $258 & 1;
           $260 = $259 << 24 >> 24 == 0;
           $261 = $10 + 4 | 0;
           $262 = SAFE_HEAP_LOAD($261 | 0, 4, 0) | 0 | 0;
           $263 = $258 & 255;
           $264 = $263 >>> 1;
           $265 = $260 ? $264 : $262;
           $266 = $10 + 8 | 0;
           $267 = SAFE_HEAP_LOAD($266 | 0, 4, 0) | 0 | 0;
           $268 = $10 + 1 | 0;
           $269 = $260 ? $268 : $267;
           $270 = $265 >>> 0 > 2;
           $271 = $270 ? 2 : $265;
           $272 = _memcmp($269, 10289, $271) | 0;
           $273 = ($272 | 0) == 0;
           $274 = $265 >>> 0 < 2;
           $$$i$i$i$i188 = $270 & 1;
           $$$$i$i$i$i189 = $274 ? -1 : $$$i$i$i$i188;
           $275 = $273 ? $$$$i$i$i$i189 : $272;
           $276 = ($275 | 0) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           if ($276) {
            $277 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
            $278 = $277 + -12 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($278);
           }
           $279 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
           $280 = $279 + -12 | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($280, 0, 10292) | 0;
           $$0$i = $237;
           break;
          }
          $$off271 = $234 + -49 << 24 >> 24;
          $281 = ($$off271 & 255) < 9;
          if ($281) {
           $282 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($232, $last) | 0;
           $283 = ($282 | 0) == ($last | 0);
           if ($283) {
            $$0$i = $first;
            break;
           }
           $284 = SAFE_HEAP_LOAD($282 >> 0 | 0, 1, 0) | 0 | 0;
           $285 = $284 << 24 >> 24 == 95;
           if (!$285) {
            $$0$i = $first;
            break;
           }
           $286 = $282 + 1 | 0;
           $287 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($286, $last, $db) | 0;
           $288 = ($287 | 0) == ($286 | 0);
           if ($288) {
            $$0$i = $first;
            break;
           }
           $289 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $290 = $db + 4 | 0;
           $291 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
           $292 = ($289 | 0) == ($291 | 0);
           if ($292) {
            $$0$i = $first;
            break;
           }
           $293 = $291 + -12 | 0;
           $294 = SAFE_HEAP_LOAD($293 >> 0 | 0, 1, 0) | 0 | 0;
           $295 = $294 & 1;
           $296 = $295 << 24 >> 24 == 0;
           $297 = $291 + -8 | 0;
           $298 = SAFE_HEAP_LOAD($297 | 0, 4, 0) | 0 | 0;
           $299 = $294 & 255;
           $300 = $299 >>> 1;
           $301 = $296 ? $300 : $298;
           $302 = $291 + -4 | 0;
           $303 = SAFE_HEAP_LOAD($302 | 0, 4, 0) | 0 | 0;
           $304 = $293 + 1 | 0;
           $305 = $296 ? $304 : $303;
           $306 = $301 >>> 0 < 2;
           $307 = $306 ? $301 : 2;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11, $305, $307);
           $308 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
           $309 = $308 & 1;
           $310 = $309 << 24 >> 24 == 0;
           $311 = $11 + 4 | 0;
           $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
           $313 = $308 & 255;
           $314 = $313 >>> 1;
           $315 = $310 ? $314 : $312;
           $316 = $11 + 8 | 0;
           $317 = SAFE_HEAP_LOAD($316 | 0, 4, 0) | 0 | 0;
           $318 = $11 + 1 | 0;
           $319 = $310 ? $318 : $317;
           $320 = $315 >>> 0 > 2;
           $321 = $320 ? 2 : $315;
           $322 = _memcmp($319, 10289, $321) | 0;
           $323 = ($322 | 0) == 0;
           $324 = $315 >>> 0 < 2;
           $$$i$i$i12$i = $320 & 1;
           $$$$i$i$i13$i = $324 ? -1 : $$$i$i$i12$i;
           $325 = $323 ? $$$$i$i$i13$i : $322;
           $326 = ($325 | 0) == 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
           if ($326) {
            $327 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
            $328 = $327 + -12 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($328);
           }
           $329 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
           $330 = $329 + -12 | 0;
           $331 = $232;
           $332 = $282;
           $333 = $332 - $331 | 0;
           $334 = $333 >>> 0 > 4294967279;
           if ($334) {
            __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($14);
           }
           $335 = $333 >>> 0 < 11;
           if ($335) {
            $336 = $333 << 1;
            $337 = $336 & 255;
            SAFE_HEAP_STORE($14 >> 0 | 0, $337 | 0, 1);
            $338 = $14 + 1 | 0;
            $__p$0$ph$i$i$i = $338;
           } else {
            $339 = $333 + 16 | 0;
            $340 = $339 & -16;
            $341 = _malloc($340) | 0;
            $342 = $14 + 8 | 0;
            SAFE_HEAP_STORE($342 | 0, $341 | 0, 4);
            $343 = $340 | 1;
            SAFE_HEAP_STORE($14 | 0, $343 | 0, 4);
            $344 = $14 + 4 | 0;
            SAFE_HEAP_STORE($344 | 0, $333 | 0, 4);
            $__p$0$ph$i$i$i = $341;
           }
           $345 = ($232 | 0) == ($282 | 0);
           if (!$345) {
            $$0$i$i$i191509 = $232;
            $__p$0$i$i$i508 = $__p$0$ph$i$i$i;
            while (1) {
             $346 = SAFE_HEAP_LOAD($$0$i$i$i191509 >> 0 | 0, 1, 0) | 0 | 0;
             SAFE_HEAP_STORE($__p$0$i$i$i508 >> 0 | 0, $346 | 0, 1);
             $347 = $$0$i$i$i191509 + 1 | 0;
             $348 = $__p$0$i$i$i508 + 1 | 0;
             $349 = ($347 | 0) == ($282 | 0);
             if ($349) {
              break;
             } else {
              $$0$i$i$i191509 = $347;
              $__p$0$i$i$i508 = $348;
             }
            }
           }
           $scevgep2$i$i$i = $__p$0$ph$i$i$i + $333 | 0;
           SAFE_HEAP_STORE($scevgep2$i$i$i >> 0 | 0, 0 | 0, 1);
           __THREW__ = 0;
           $350 = invoke_iiii(227, $14 | 0, 0, 10289 | 0) | 0;
           $351 = __THREW__;
           __THREW__ = 0;
           $352 = $351 & 1;
           if ($352) {
            $374 = ___cxa_find_matching_catch() | 0;
            $375 = tempRet0;
            $$1$i199 = $375;
            $$13$i = $374;
           } else {
            {}
            SAFE_HEAP_STORE($13 | 0, SAFE_HEAP_LOAD($350 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($13 + 4 | 0, SAFE_HEAP_LOAD($350 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($13 + 8 | 0, SAFE_HEAP_LOAD($350 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($350 | 0, 0 | 0, 4);
            $353 = $350 + 4 | 0;
            SAFE_HEAP_STORE($353 | 0, 0 | 0, 4);
            $354 = $350 + 8 | 0;
            SAFE_HEAP_STORE($354 | 0, 0 | 0, 4);
            __THREW__ = 0;
            $355 = invoke_iii(228, $13 | 0, 10296 | 0) | 0;
            $356 = __THREW__;
            __THREW__ = 0;
            $357 = $356 & 1;
            do {
             if ($357) {
              $376 = ___cxa_find_matching_catch() | 0;
              $377 = tempRet0;
              $$01$i198 = $377;
              $$02$i = $376;
             } else {
              {}
              SAFE_HEAP_STORE($12 | 0, SAFE_HEAP_LOAD($355 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($12 + 4 | 0, SAFE_HEAP_LOAD($355 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($12 + 8 | 0, SAFE_HEAP_LOAD($355 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($355 | 0, 0 | 0, 4);
              $358 = $355 + 4 | 0;
              SAFE_HEAP_STORE($358 | 0, 0 | 0, 4);
              $359 = $355 + 8 | 0;
              SAFE_HEAP_STORE($359 | 0, 0 | 0, 4);
              $360 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
              $361 = $360 & 1;
              $362 = $361 << 24 >> 24 == 0;
              $363 = $12 + 8 | 0;
              $364 = SAFE_HEAP_LOAD($363 | 0, 4, 0) | 0 | 0;
              $365 = $12 + 1 | 0;
              $366 = $362 ? $365 : $364;
              $367 = $12 + 4 | 0;
              $368 = SAFE_HEAP_LOAD($367 | 0, 4, 0) | 0 | 0;
              $369 = $360 & 255;
              $370 = $369 >>> 1;
              $371 = $362 ? $370 : $368;
              __THREW__ = 0;
              invoke_iiiii(235, $330 | 0, 0, $366 | 0, $371 | 0) | 0;
              $372 = __THREW__;
              __THREW__ = 0;
              $373 = $372 & 1;
              if ($373) {
               $378 = ___cxa_find_matching_catch() | 0;
               $379 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
               $$01$i198 = $379;
               $$02$i = $378;
               break;
              } else {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
               $$0$i = $287;
               break L75;
              }
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
            $$1$i199 = $$01$i198;
            $$13$i = $$02$i;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
           $$6$i224 = $$1$i199;
           $$68$i = $$13$i;
          } else {
           $380 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($232, $last, $db) | 0;
           $381 = ($380 | 0) == ($232 | 0);
           $382 = ($380 | 0) == ($last | 0);
           $or$cond10$i = $381 | $382;
           if ($or$cond10$i) {
            $$0$i = $first;
            break;
           }
           $383 = SAFE_HEAP_LOAD($380 >> 0 | 0, 1, 0) | 0 | 0;
           $384 = $383 << 24 >> 24 == 95;
           if (!$384) {
            $$0$i = $first;
            break;
           }
           $385 = $380 + 1 | 0;
           $386 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($385, $last, $db) | 0;
           $387 = ($386 | 0) == ($385 | 0);
           if ($387) {
            $$0$i = $first;
            break;
           }
           $388 = $db + 4 | 0;
           $389 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
           $390 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $391 = $389;
           $392 = $390;
           $393 = $391 - $392 | 0;
           $394 = ($393 | 0) / 24 & -1;
           $395 = $394 >>> 0 < 2;
           if ($395) {
            $$0$i = $first;
            break;
           }
           $396 = $389 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($type$i, $396);
           $397 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
           $398 = $397 + -24 | 0;
           $400 = $397;
           while (1) {
            $399 = $400 + -24 | 0;
            SAFE_HEAP_STORE($388 | 0, $399 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($399);
            $$pre$i$i200 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
            $401 = ($$pre$i$i200 | 0) == ($398 | 0);
            if ($401) {
             break;
            } else {
             $400 = $$pre$i$i200;
            }
           }
           $402 = $397 + -48 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($expr$i, $402);
           $403 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
           $404 = $403 + -24 | 0;
           $405 = SAFE_HEAP_LOAD($404 >> 0 | 0, 1, 0) | 0 | 0;
           $406 = $405 & 1;
           $407 = $406 << 24 >> 24 == 0;
           do {
            if ($407) {
             $408 = $404 + 1 | 0;
             SAFE_HEAP_STORE($408 >> 0 | 0, 0 | 0, 1);
             SAFE_HEAP_STORE($404 >> 0 | 0, 0 | 0, 1);
            } else {
             $409 = $403 + -16 | 0;
             $410 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
             SAFE_HEAP_STORE($410 >> 0 | 0, 0 | 0, 1);
             $411 = $403 + -20 | 0;
             SAFE_HEAP_STORE($411 | 0, 0 | 0, 4);
             $$pre$i$i$i$i203 = SAFE_HEAP_LOAD($404 >> 0 | 0, 1, 0) | 0 | 0;
             $412 = $$pre$i$i$i$i203 & 1;
             $413 = $412 << 24 >> 24 == 0;
             if ($413) {
              $418 = $$pre$i$i$i$i203;
              $427 = 10;
             } else {
              $414 = SAFE_HEAP_LOAD($404 | 0, 4, 0) | 0 | 0;
              $415 = $414 & -2;
              $phitmp$i$i$i$i$i$i$i205 = $415 + -1 | 0;
              $416 = $414 & 255;
              $418 = $416;
              $427 = $phitmp$i$i$i$i$i$i$i205;
             }
             $417 = $418 & 1;
             $419 = $417 << 24 >> 24 == 0;
             if ($419) {
              $420 = $418 & 255;
              $421 = $420 >>> 1;
              $422 = ($418 & 255) < 22;
              if ($422) {
               $2881 = 1;
               $425 = 10;
               $446 = $421;
              } else {
               $423 = $421 + 16 | 0;
               $424 = $423 & 240;
               $phitmp$i2$i$i$i$i$i$i208 = $424 + -1 | 0;
               $2881 = 1;
               $425 = $phitmp$i2$i$i$i$i$i$i208;
               $446 = $421;
              }
             } else {
              $2881 = 0;
              $425 = 10;
              $446 = 0;
             }
             $426 = ($425 | 0) == ($427 | 0);
             if (!$426) {
              $428 = ($425 | 0) == 10;
              if ($428) {
               $433 = $404 + 1 | 0;
               $434 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
               if ($2881) {
                $435 = $418 & 255;
                $436 = $435 >>> 1;
                $437 = $436 + 1 | 0;
                _memcpy($433 | 0, $434 | 0, $437 | 0) | 0;
                _free($434);
               } else {
                $442 = SAFE_HEAP_LOAD($434 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($433 >> 0 | 0, $442 | 0, 1);
                _free($434);
               }
               $447 = $446 << 1;
               $448 = $447 & 255;
               SAFE_HEAP_STORE($404 >> 0 | 0, $448 | 0, 1);
               break;
              }
              $429 = $425 >>> 0 <= $427 >>> 0;
              $430 = $425 + 1 | 0;
              $431 = _malloc($430) | 0;
              $432 = ($431 | 0) == (0 | 0);
              $or$cond$i$i$i$i$i$i210 = $429 & $432;
              if ($or$cond$i$i$i$i$i$i210) {
               break;
              }
              if ($2881) {
               $438 = $404 + 1 | 0;
               $439 = $418 & 255;
               $440 = $439 >>> 1;
               $441 = $440 + 1 | 0;
               _memcpy($431 | 0, $438 | 0, $441 | 0) | 0;
              } else {
               $443 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
               $444 = SAFE_HEAP_LOAD($443 >> 0 | 0, 1, 0) | 0 | 0;
               SAFE_HEAP_STORE($431 >> 0 | 0, $444 | 0, 1);
               _free($443);
              }
              $445 = $430 | 1;
              SAFE_HEAP_STORE($404 | 0, $445 | 0, 4);
              SAFE_HEAP_STORE($411 | 0, $446 | 0, 4);
              SAFE_HEAP_STORE($409 | 0, $431 | 0, 4);
             }
            }
           } while (0);
           {}
           SAFE_HEAP_STORE($404 | 0, SAFE_HEAP_LOAD($type$i | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($404 + 4 | 0, SAFE_HEAP_LOAD($type$i + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($404 + 8 | 0, SAFE_HEAP_LOAD($type$i + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($type$i | 0, 0 | 0, 4);
           $449 = $type$i + 4 | 0;
           SAFE_HEAP_STORE($449 | 0, 0 | 0, 4);
           $450 = $type$i + 8 | 0;
           SAFE_HEAP_STORE($450 | 0, 0 | 0, 4);
           $451 = $type$i + 12 | 0;
           $452 = SAFE_HEAP_LOAD($451 >> 0 | 0, 1, 0) | 0 | 0;
           $453 = $452 & 1;
           $454 = $453 << 24 >> 24 == 0;
           $455 = $type$i + 16 | 0;
           $456 = SAFE_HEAP_LOAD($455 | 0, 4, 0) | 0 | 0;
           $457 = $452 & 255;
           $458 = $457 >>> 1;
           $459 = $454 ? $458 : $456;
           $460 = $type$i + 20 | 0;
           $461 = SAFE_HEAP_LOAD($460 | 0, 4, 0) | 0 | 0;
           $462 = $451 + 1 | 0;
           $463 = $454 ? $462 : $461;
           $464 = $459 >>> 0 < 2;
           $465 = $464 ? $459 : 2;
           __THREW__ = 0;
           invoke_viii(237, $15 | 0, $463 | 0, $465 | 0);
           $466 = __THREW__;
           __THREW__ = 0;
           $467 = $466 & 1;
           if ($467) {
            label = 113;
           } else {
            $468 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
            $469 = $468 & 1;
            $470 = $469 << 24 >> 24 == 0;
            $471 = $15 + 4 | 0;
            $472 = SAFE_HEAP_LOAD($471 | 0, 4, 0) | 0 | 0;
            $473 = $468 & 255;
            $474 = $473 >>> 1;
            $475 = $470 ? $474 : $472;
            $476 = $15 + 8 | 0;
            $477 = SAFE_HEAP_LOAD($476 | 0, 4, 0) | 0 | 0;
            $478 = $15 + 1 | 0;
            $479 = $470 ? $478 : $477;
            $480 = $475 >>> 0 > 2;
            $481 = $480 ? 2 : $475;
            $482 = _memcmp($479, 10289, $481) | 0;
            $483 = ($482 | 0) == 0;
            $484 = $475 >>> 0 < 2;
            $$$i$i$i21$i = $480 & 1;
            $$$$i$i$i22$i = $484 ? -1 : $$$i$i$i21$i;
            $485 = $483 ? $$$$i$i$i22$i : $482;
            $486 = ($485 | 0) == 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
            if ($486) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($451);
            }
            $489 = SAFE_HEAP_LOAD($388 | 0, 4, 0) | 0 | 0;
            $490 = $489 + -12 | 0;
            __THREW__ = 0;
            invoke_vii(232, $19 | 0, $expr$i | 0);
            $491 = __THREW__;
            __THREW__ = 0;
            $492 = $491 & 1;
            if ($492) {
             label = 113;
            } else {
             __THREW__ = 0;
             $493 = invoke_iiii(227, $19 | 0, 0, 10289 | 0) | 0;
             $494 = __THREW__;
             __THREW__ = 0;
             $495 = $494 & 1;
             if ($495) {
              $563 = ___cxa_find_matching_catch() | 0;
              $564 = tempRet0;
              $$4$i222 = $564;
              $$46$i = $563;
             } else {
              {}
              SAFE_HEAP_STORE($18 | 0, SAFE_HEAP_LOAD($493 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($18 + 4 | 0, SAFE_HEAP_LOAD($493 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($18 + 8 | 0, SAFE_HEAP_LOAD($493 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($493 | 0, 0 | 0, 4);
              $496 = $493 + 4 | 0;
              SAFE_HEAP_STORE($496 | 0, 0 | 0, 4);
              $497 = $493 + 8 | 0;
              SAFE_HEAP_STORE($497 | 0, 0 | 0, 4);
              __THREW__ = 0;
              $498 = invoke_iii(228, $18 | 0, 10296 | 0) | 0;
              $499 = __THREW__;
              __THREW__ = 0;
              $500 = $499 & 1;
              do {
               if ($500) {
                $565 = ___cxa_find_matching_catch() | 0;
                $566 = tempRet0;
                $$3$i = $566;
                $$35$i = $565;
               } else {
                {}
                SAFE_HEAP_STORE($17 | 0, SAFE_HEAP_LOAD($498 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($17 + 4 | 0, SAFE_HEAP_LOAD($498 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($17 + 8 | 0, SAFE_HEAP_LOAD($498 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($498 | 0, 0 | 0, 4);
                $501 = $498 + 4 | 0;
                SAFE_HEAP_STORE($501 | 0, 0 | 0, 4);
                $502 = $498 + 8 | 0;
                SAFE_HEAP_STORE($502 | 0, 0 | 0, 4);
                $503 = SAFE_HEAP_LOAD($451 >> 0 | 0, 1, 0) | 0 | 0;
                $504 = $503 & 1;
                $505 = $504 << 24 >> 24 == 0;
                $506 = SAFE_HEAP_LOAD($460 | 0, 4, 0) | 0 | 0;
                $507 = $505 ? $462 : $506;
                $508 = SAFE_HEAP_LOAD($455 | 0, 4, 0) | 0 | 0;
                $509 = $503 & 255;
                $510 = $509 >>> 1;
                $511 = $505 ? $510 : $508;
                __THREW__ = 0;
                $512 = invoke_iiii(222, $17 | 0, $507 | 0, $511 | 0) | 0;
                $513 = __THREW__;
                __THREW__ = 0;
                $514 = $513 & 1;
                if ($514) {
                 $567 = ___cxa_find_matching_catch() | 0;
                 $568 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                 $$3$i = $568;
                 $$35$i = $567;
                 break;
                }
                {}
                SAFE_HEAP_STORE($16 | 0, SAFE_HEAP_LOAD($512 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($16 + 4 | 0, SAFE_HEAP_LOAD($512 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($16 + 8 | 0, SAFE_HEAP_LOAD($512 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($512 | 0, 0 | 0, 4);
                $515 = $512 + 4 | 0;
                SAFE_HEAP_STORE($515 | 0, 0 | 0, 4);
                $516 = $512 + 8 | 0;
                SAFE_HEAP_STORE($516 | 0, 0 | 0, 4);
                $517 = SAFE_HEAP_LOAD($490 >> 0 | 0, 1, 0) | 0 | 0;
                $518 = $517 & 1;
                $519 = $518 << 24 >> 24 == 0;
                do {
                 if ($519) {
                  $520 = $490 + 1 | 0;
                  SAFE_HEAP_STORE($520 >> 0 | 0, 0 | 0, 1);
                  SAFE_HEAP_STORE($490 >> 0 | 0, 0 | 0, 1);
                 } else {
                  $521 = $489 + -4 | 0;
                  $522 = SAFE_HEAP_LOAD($521 | 0, 4, 0) | 0 | 0;
                  SAFE_HEAP_STORE($522 >> 0 | 0, 0 | 0, 1);
                  $523 = $489 + -8 | 0;
                  SAFE_HEAP_STORE($523 | 0, 0 | 0, 4);
                  $$pre$i$i$i36$i = SAFE_HEAP_LOAD($490 >> 0 | 0, 1, 0) | 0 | 0;
                  $524 = $$pre$i$i$i36$i & 1;
                  $525 = $524 << 24 >> 24 == 0;
                  if ($525) {
                   $530 = $$pre$i$i$i36$i;
                   $539 = 10;
                  } else {
                   $526 = SAFE_HEAP_LOAD($490 | 0, 4, 0) | 0 | 0;
                   $527 = $526 & -2;
                   $phitmp$i$i$i$i$i$i38$i = $527 + -1 | 0;
                   $528 = $526 & 255;
                   $530 = $528;
                   $539 = $phitmp$i$i$i$i$i$i38$i;
                  }
                  $529 = $530 & 1;
                  $531 = $529 << 24 >> 24 == 0;
                  do {
                   if ($531) {
                    $532 = $530 & 255;
                    $533 = $532 >>> 1;
                    $534 = ($530 & 255) < 22;
                    if ($534) {
                     $2882 = 1;
                     $537 = 10;
                     $558 = $533;
                     break;
                    }
                    $535 = $533 + 16 | 0;
                    $536 = $535 & 240;
                    $phitmp$i2$i$i$i$i$i41$i = $536 + -1 | 0;
                    $2882 = 1;
                    $537 = $phitmp$i2$i$i$i$i$i41$i;
                    $558 = $533;
                   } else {
                    $2882 = 0;
                    $537 = 10;
                    $558 = 0;
                   }
                  } while (0);
                  $538 = ($537 | 0) == ($539 | 0);
                  if ($538) {
                   break;
                  }
                  $540 = ($537 | 0) == 10;
                  if ($540) {
                   $545 = $490 + 1 | 0;
                   $546 = SAFE_HEAP_LOAD($521 | 0, 4, 0) | 0 | 0;
                   if ($2882) {
                    $547 = $530 & 255;
                    $548 = $547 >>> 1;
                    $549 = $548 + 1 | 0;
                    _memcpy($545 | 0, $546 | 0, $549 | 0) | 0;
                    _free($546);
                   } else {
                    $554 = SAFE_HEAP_LOAD($546 >> 0 | 0, 1, 0) | 0 | 0;
                    SAFE_HEAP_STORE($545 >> 0 | 0, $554 | 0, 1);
                    _free($546);
                   }
                   $559 = $558 << 1;
                   $560 = $559 & 255;
                   SAFE_HEAP_STORE($490 >> 0 | 0, $560 | 0, 1);
                   break;
                  }
                  $541 = $537 >>> 0 <= $539 >>> 0;
                  $542 = $537 + 1 | 0;
                  $543 = _malloc($542) | 0;
                  $544 = ($543 | 0) == (0 | 0);
                  $or$cond$i$i$i$i$i43$i = $541 & $544;
                  if ($or$cond$i$i$i$i$i43$i) {
                   break;
                  }
                  if ($2882) {
                   $550 = $490 + 1 | 0;
                   $551 = $530 & 255;
                   $552 = $551 >>> 1;
                   $553 = $552 + 1 | 0;
                   _memcpy($543 | 0, $550 | 0, $553 | 0) | 0;
                  } else {
                   $555 = SAFE_HEAP_LOAD($521 | 0, 4, 0) | 0 | 0;
                   $556 = SAFE_HEAP_LOAD($555 >> 0 | 0, 1, 0) | 0 | 0;
                   SAFE_HEAP_STORE($543 >> 0 | 0, $556 | 0, 1);
                   _free($555);
                  }
                  $557 = $542 | 1;
                  SAFE_HEAP_STORE($490 | 0, $557 | 0, 4);
                  SAFE_HEAP_STORE($523 | 0, $558 | 0, 4);
                  SAFE_HEAP_STORE($521 | 0, $543 | 0, 4);
                 }
                } while (0);
                {}
                SAFE_HEAP_STORE($490 | 0, SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($490 + 4 | 0, SAFE_HEAP_LOAD($16 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($490 + 8 | 0, SAFE_HEAP_LOAD($16 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
                $561 = $16 + 4 | 0;
                SAFE_HEAP_STORE($561 | 0, 0 | 0, 4);
                $562 = $16 + 8 | 0;
                SAFE_HEAP_STORE($562 | 0, 0 | 0, 4);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
                $$0$i = $386;
                break L75;
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
              $$4$i222 = $$3$i;
              $$46$i = $$35$i;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
             $$5$i223 = $$4$i222;
             $$57$i = $$46$i;
            }
           }
           if ((label | 0) == 113) {
            $487 = ___cxa_find_matching_catch() | 0;
            $488 = tempRet0;
            $$5$i223 = $488;
            $$57$i = $487;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
           $$6$i224 = $$5$i223;
           $$68$i = $$57$i;
          }
          ___resumeException($$68$i | 0);
         }
        } else {
         $$0$i = $first;
        }
       } while (0);
       $569 = ($$0$i | 0) == ($first | 0);
       if ($569) {
        $$0 = $first;
        break L1;
       }
       $570 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $571 = $db + 4 | 0;
       $572 = SAFE_HEAP_LOAD($571 | 0, 4, 0) | 0 | 0;
       $573 = ($570 | 0) == ($572 | 0);
       if ($573) {
        $$0 = $first;
        break L1;
       }
       $574 = $db + 16 | 0;
       $575 = $572 + -24 | 0;
       $576 = $db + 12 | 0;
       $577 = SAFE_HEAP_LOAD($576 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($31 | 0, $577 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($30, $575, $31);
       $578 = $db + 20 | 0;
       $579 = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
       $580 = $db + 24 | 0;
       $581 = SAFE_HEAP_LOAD($580 | 0, 4, 0) | 0 | 0;
       $582 = $579 >>> 0 < $581 >>> 0;
       if ($582) {
        $583 = $30 + 12 | 0;
        $584 = $579 + 4 | 0;
        $585 = SAFE_HEAP_LOAD($583 | 0, 4, 0) | 0 | 0;
        $586 = $579 + 12 | 0;
        SAFE_HEAP_STORE($586 | 0, $585 | 0, 4);
        $587 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($579 | 0, $587 | 0, 4);
        $588 = $30 + 4 | 0;
        $589 = SAFE_HEAP_LOAD($588 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($584 | 0, $589 | 0, 4);
        $590 = $30 + 8 | 0;
        $591 = SAFE_HEAP_LOAD($590 | 0, 4, 0) | 0 | 0;
        $592 = $579 + 8 | 0;
        SAFE_HEAP_STORE($592 | 0, $591 | 0, 4);
        SAFE_HEAP_STORE($590 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($588 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
        $593 = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
        $594 = $593 + 16 | 0;
        SAFE_HEAP_STORE($578 | 0, $594 | 0, 4);
       } else {
        $595 = $db + 28 | 0;
        $596 = SAFE_HEAP_LOAD($574 | 0, 4, 0) | 0 | 0;
        $597 = $579;
        $598 = $596;
        $599 = $597 - $598 | 0;
        $600 = $599 >> 4;
        $601 = $600 + 1 | 0;
        $602 = ($599 | 0) < -16;
        if ($602) {
         __THREW__ = 0;
         invoke_vi(238, $574 | 0);
         $603 = __THREW__;
         __THREW__ = 0;
         $604 = ___cxa_find_matching_catch() | 0;
         $605 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($30);
         $$10 = $604;
         $$1013 = $605;
         break L73;
        }
        $606 = $581;
        $607 = $606 - $598 | 0;
        $608 = $607 >> 4;
        $609 = $608 >>> 0 < 1073741823;
        if ($609) {
         $610 = $607 >> 3;
         $611 = $610 >>> 0 < $601 >>> 0;
         $612 = $611 ? $601 : $610;
         $$0$i$i$i56 = $612;
        } else {
         $$0$i$i$i56 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i55, $$0$i$i$i56, $600, $595);
        $613 = $__v$i$i55 + 8 | 0;
        $614 = SAFE_HEAP_LOAD($613 | 0, 4, 0) | 0 | 0;
        $615 = $30 + 12 | 0;
        $616 = $614 + 4 | 0;
        $617 = SAFE_HEAP_LOAD($615 | 0, 4, 0) | 0 | 0;
        $618 = $614 + 12 | 0;
        SAFE_HEAP_STORE($618 | 0, $617 | 0, 4);
        $619 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($614 | 0, $619 | 0, 4);
        $620 = $30 + 4 | 0;
        $621 = SAFE_HEAP_LOAD($620 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($616 | 0, $621 | 0, 4);
        $622 = $30 + 8 | 0;
        $623 = SAFE_HEAP_LOAD($622 | 0, 4, 0) | 0 | 0;
        $624 = $614 + 8 | 0;
        SAFE_HEAP_STORE($624 | 0, $623 | 0, 4);
        SAFE_HEAP_STORE($622 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($620 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
        $625 = $614 + 16 | 0;
        SAFE_HEAP_STORE($613 | 0, $625 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($574, $__v$i$i55);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i55);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($30);
       $$0 = $$0$i;
       break L1;
       break;
      }
     case 67:
      {
       $626 = $first + 1 | 0;
       $627 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($626, $last, $db) | 0;
       $628 = ($627 | 0) == ($626 | 0);
       if ($628) {
        $$0 = $first;
        break L1;
       }
       $629 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $630 = $db + 4 | 0;
       $631 = SAFE_HEAP_LOAD($630 | 0, 4, 0) | 0 | 0;
       $632 = ($629 | 0) == ($631 | 0);
       if ($632) {
        $$0 = $first;
        break L1;
       }
       $633 = $631 + -24 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($633, 10298) | 0;
       $634 = $db + 16 | 0;
       $635 = SAFE_HEAP_LOAD($630 | 0, 4, 0) | 0 | 0;
       $636 = $635 + -24 | 0;
       $637 = $db + 12 | 0;
       $638 = SAFE_HEAP_LOAD($637 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($33 | 0, $638 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($32, $636, $33);
       $639 = $db + 20 | 0;
       $640 = SAFE_HEAP_LOAD($639 | 0, 4, 0) | 0 | 0;
       $641 = $db + 24 | 0;
       $642 = SAFE_HEAP_LOAD($641 | 0, 4, 0) | 0 | 0;
       $643 = $640 >>> 0 < $642 >>> 0;
       if ($643) {
        $644 = $32 + 12 | 0;
        $645 = $640 + 4 | 0;
        $646 = SAFE_HEAP_LOAD($644 | 0, 4, 0) | 0 | 0;
        $647 = $640 + 12 | 0;
        SAFE_HEAP_STORE($647 | 0, $646 | 0, 4);
        $648 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($640 | 0, $648 | 0, 4);
        $649 = $32 + 4 | 0;
        $650 = SAFE_HEAP_LOAD($649 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($645 | 0, $650 | 0, 4);
        $651 = $32 + 8 | 0;
        $652 = SAFE_HEAP_LOAD($651 | 0, 4, 0) | 0 | 0;
        $653 = $640 + 8 | 0;
        SAFE_HEAP_STORE($653 | 0, $652 | 0, 4);
        SAFE_HEAP_STORE($651 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($649 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($32 | 0, 0 | 0, 4);
        $654 = SAFE_HEAP_LOAD($639 | 0, 4, 0) | 0 | 0;
        $655 = $654 + 16 | 0;
        SAFE_HEAP_STORE($639 | 0, $655 | 0, 4);
       } else {
        $656 = $db + 28 | 0;
        $657 = SAFE_HEAP_LOAD($634 | 0, 4, 0) | 0 | 0;
        $658 = $640;
        $659 = $657;
        $660 = $658 - $659 | 0;
        $661 = $660 >> 4;
        $662 = $661 + 1 | 0;
        $663 = ($660 | 0) < -16;
        if ($663) {
         __THREW__ = 0;
         invoke_vi(238, $634 | 0);
         $664 = __THREW__;
         __THREW__ = 0;
         $665 = ___cxa_find_matching_catch() | 0;
         $666 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($32);
         $$10 = $665;
         $$1013 = $666;
         break L73;
        }
        $667 = $642;
        $668 = $667 - $659 | 0;
        $669 = $668 >> 4;
        $670 = $669 >>> 0 < 1073741823;
        if ($670) {
         $671 = $668 >> 3;
         $672 = $671 >>> 0 < $662 >>> 0;
         $673 = $672 ? $662 : $671;
         $$0$i$i$i61 = $673;
        } else {
         $$0$i$i$i61 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i60, $$0$i$i$i61, $661, $656);
        $674 = $__v$i$i60 + 8 | 0;
        $675 = SAFE_HEAP_LOAD($674 | 0, 4, 0) | 0 | 0;
        $676 = $32 + 12 | 0;
        $677 = $675 + 4 | 0;
        $678 = SAFE_HEAP_LOAD($676 | 0, 4, 0) | 0 | 0;
        $679 = $675 + 12 | 0;
        SAFE_HEAP_STORE($679 | 0, $678 | 0, 4);
        $680 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($675 | 0, $680 | 0, 4);
        $681 = $32 + 4 | 0;
        $682 = SAFE_HEAP_LOAD($681 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($677 | 0, $682 | 0, 4);
        $683 = $32 + 8 | 0;
        $684 = SAFE_HEAP_LOAD($683 | 0, 4, 0) | 0 | 0;
        $685 = $675 + 8 | 0;
        SAFE_HEAP_STORE($685 | 0, $684 | 0, 4);
        SAFE_HEAP_STORE($683 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($681 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($32 | 0, 0 | 0, 4);
        $686 = $675 + 16 | 0;
        SAFE_HEAP_STORE($674 | 0, $686 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($634, $__v$i$i60);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i60);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($32);
       $$0 = $627;
       break L1;
       break;
      }
     case 70:
      {
       $687 = $229 << 24 >> 24 == 70;
       do {
        if ($687) {
         $688 = $first + 1 | 0;
         $689 = ($688 | 0) == ($last | 0);
         if (!$689) {
          $690 = SAFE_HEAP_LOAD($688 >> 0 | 0, 1, 0) | 0 | 0;
          $691 = $690 << 24 >> 24 == 89;
          if ($691) {
           $692 = $first + 2 | 0;
           $693 = ($692 | 0) == ($last | 0);
           if ($693) {
            break;
           } else {
            $t$0$i = $692;
           }
          } else {
           $t$0$i = $688;
          }
          $694 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i, $last, $db) | 0;
          $695 = ($694 | 0) == ($t$0$i | 0);
          if (!$695) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($sig$i, 10307, 1);
           $696 = $db + 4 | 0;
           $697 = $sig$i + 4 | 0;
           $698 = $20 + 8 | 0;
           $699 = $20 + 1 | 0;
           $700 = $20 + 4 | 0;
           $701 = ($694 | 0) == ($last | 0);
           L228 : do {
            if ($701) {
             label = 172;
            } else {
             $ref_qual$0$i$ph521 = 0;
             $t$1$i$ph520 = $694;
             L229 : while (1) {
              $t$1$i518 = $t$1$i$ph520;
              L231 : while (1) {
               $714 = SAFE_HEAP_LOAD($t$1$i518 >> 0 | 0, 1, 0) | 0 | 0;
               switch ($714 << 24 >> 24) {
               case 69:
                {
                 $ref_qual$0$i$ph521$lcssa = $ref_qual$0$i$ph521;
                 $t$1$i518$lcssa = $t$1$i518;
                 label = 179;
                 break L229;
                 break;
                }
               case 118:
                {
                 $718 = $t$1$i518 + 1 | 0;
                 $t$1$i$be = $718;
                 break;
                }
               case 82:
                {
                 $720 = $t$1$i518 + 1 | 0;
                 $721 = ($720 | 0) == ($last | 0);
                 if ($721) {
                  label = 187;
                 } else {
                  $722 = SAFE_HEAP_LOAD($720 >> 0 | 0, 1, 0) | 0 | 0;
                  $723 = $722 << 24 >> 24 == 69;
                  if ($723) {
                   $ref_qual$0$i$ph$ph = 1;
                   $t$1$i$ph$ph = $720;
                   break L231;
                  } else {
                   label = 187;
                  }
                 }
                 break;
                }
               case 79:
                {
                 $724 = $t$1$i518 + 1 | 0;
                 $725 = ($724 | 0) == ($last | 0);
                 if ($725) {
                  label = 187;
                 } else {
                  $726 = SAFE_HEAP_LOAD($724 >> 0 | 0, 1, 0) | 0 | 0;
                  $727 = $726 << 24 >> 24 == 69;
                  if ($727) {
                   $ref_qual$0$i$ph$ph = 2;
                   $t$1$i$ph$ph = $724;
                   break L231;
                  } else {
                   label = 187;
                  }
                 }
                 break;
                }
               default:
                {
                 label = 187;
                }
               }
               if ((label | 0) == 187) {
                label = 0;
                $728 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                $729 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                $730 = $728;
                $731 = $729;
                $732 = $730 - $731 | 0;
                $733 = ($732 | 0) / 24 & -1;
                __THREW__ = 0;
                $734 = invoke_iiii(230, $t$1$i518 | 0, $last | 0, $db | 0) | 0;
                $735 = __THREW__;
                __THREW__ = 0;
                $736 = $735 & 1;
                if ($736) {
                 label = 175;
                 break L229;
                }
                $737 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                $738 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                $739 = $737;
                $740 = $738;
                $741 = $739 - $740 | 0;
                $742 = ($741 | 0) / 24 & -1;
                $743 = ($734 | 0) == ($t$1$i518 | 0);
                $744 = ($734 | 0) == ($last | 0);
                $or$cond$i = $743 | $744;
                if ($or$cond$i) {
                 break L228;
                }
                $745 = $733 >>> 0 < $742 >>> 0;
                if ($745) {
                 $k$0$i515 = $733;
                 while (1) {
                  $747 = SAFE_HEAP_LOAD($sig$i >> 0 | 0, 1, 0) | 0 | 0;
                  $748 = $747 & 1;
                  $749 = $748 << 24 >> 24 == 0;
                  $750 = SAFE_HEAP_LOAD($697 | 0, 4, 0) | 0 | 0;
                  $751 = $747 & 255;
                  $752 = $751 >>> 1;
                  $753 = $749 ? $752 : $750;
                  $754 = $753 >>> 0 > 1;
                  if ($754) {
                   __THREW__ = 0;
                   invoke_iii(228, $sig$i | 0, 10309 | 0) | 0;
                   $755 = __THREW__;
                   __THREW__ = 0;
                   $756 = $755 & 1;
                   if ($756) {
                    label = 174;
                    break L229;
                   }
                  }
                  $757 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $758 = $757 + ($k$0$i515 * 24 | 0) | 0;
                  __THREW__ = 0;
                  invoke_vii(232, $20 | 0, $758 | 0);
                  $759 = __THREW__;
                  __THREW__ = 0;
                  $760 = $759 & 1;
                  if ($760) {
                   label = 174;
                   break L229;
                  }
                  $761 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
                  $762 = $761 & 1;
                  $763 = $762 << 24 >> 24 == 0;
                  $764 = SAFE_HEAP_LOAD($698 | 0, 4, 0) | 0 | 0;
                  $765 = $763 ? $699 : $764;
                  $766 = SAFE_HEAP_LOAD($700 | 0, 4, 0) | 0 | 0;
                  $767 = $761 & 255;
                  $768 = $767 >>> 1;
                  $769 = $763 ? $768 : $766;
                  __THREW__ = 0;
                  invoke_iiii(222, $sig$i | 0, $765 | 0, $769 | 0) | 0;
                  $770 = __THREW__;
                  __THREW__ = 0;
                  $771 = $770 & 1;
                  if ($771) {
                   label = 196;
                   break L229;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
                  $772 = $k$0$i515 + 1 | 0;
                  $773 = $772 >>> 0 < $742 >>> 0;
                  if ($773) {
                   $k$0$i515 = $772;
                  } else {
                   break;
                  }
                 }
                }
                $746 = $733 >>> 0 < $742 >>> 0;
                if ($746) {
                 $k2$0$i516 = $733;
                 while (1) {
                  $776 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                  $777 = $776 + -24 | 0;
                  $779 = $776;
                  while (1) {
                   $778 = $779 + -24 | 0;
                   SAFE_HEAP_STORE($696 | 0, $778 | 0, 4);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($778);
                   $$pre$i7$i = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                   $780 = ($$pre$i7$i | 0) == ($777 | 0);
                   if ($780) {
                    break;
                   } else {
                    $779 = $$pre$i7$i;
                   }
                  }
                  $781 = $k2$0$i516 + 1 | 0;
                  $782 = $781 >>> 0 < $742 >>> 0;
                  if ($782) {
                   $k2$0$i516 = $781;
                  } else {
                   $t$1$i$be = $734;
                   break;
                  }
                 }
                } else {
                 $t$1$i$be = $734;
                }
               }
               $719 = ($t$1$i$be | 0) == ($last | 0);
               if ($719) {
                label = 172;
                break L228;
               } else {
                $t$1$i518 = $t$1$i$be;
               }
              }
              $702 = ($t$1$i$ph$ph | 0) == ($last | 0);
              if ($702) {
               label = 172;
               break L228;
              } else {
               $ref_qual$0$i$ph521 = $ref_qual$0$i$ph$ph;
               $t$1$i$ph520 = $t$1$i$ph$ph;
              }
             }
             if ((label | 0) == 174) {
              $708 = ___cxa_find_matching_catch() | 0;
              $709 = tempRet0;
              $lpad$phi$index = $708;
              $lpad$phi$index8 = $709;
              label = 177;
             } else if ((label | 0) == 175) {
              $710 = ___cxa_find_matching_catch() | 0;
              $711 = tempRet0;
              $lpad$phi$index = $710;
              $lpad$phi$index8 = $711;
              label = 177;
             } else if ((label | 0) == 179) {
              $715 = $t$1$i518$lcssa + 1 | 0;
              __THREW__ = 0;
              invoke_iii(228, $sig$i | 0, 10212 | 0) | 0;
              $716 = __THREW__;
              __THREW__ = 0;
              $717 = $716 & 1;
              L261 : do {
               if (!$717) {
                switch ($ref_qual$0$i$ph521$lcssa | 0) {
                case 1:
                 {
                  __THREW__ = 0;
                  invoke_iii(228, $sig$i | 0, 10312 | 0) | 0;
                  $783 = __THREW__;
                  __THREW__ = 0;
                  $784 = $783 & 1;
                  if ($784) {
                   break L261;
                  }
                  break;
                 }
                case 2:
                 {
                  __THREW__ = 0;
                  invoke_iii(228, $sig$i | 0, 10315 | 0) | 0;
                  $785 = __THREW__;
                  __THREW__ = 0;
                  $786 = $785 & 1;
                  if ($786) {
                   break L261;
                  }
                  break;
                 }
                default:
                 {}
                }
                $787 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                $788 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                $789 = ($787 | 0) == ($788 | 0);
                if ($789) {
                 break L228;
                }
                $790 = $788 + -24 | 0;
                __THREW__ = 0;
                invoke_iii(228, $790 | 0, 10319 | 0) | 0;
                $791 = __THREW__;
                __THREW__ = 0;
                $792 = $791 & 1;
                if (!$792) {
                 $793 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                 $794 = $793 + -12 | 0;
                 $795 = SAFE_HEAP_LOAD($sig$i >> 0 | 0, 1, 0) | 0 | 0;
                 $796 = $795 & 1;
                 $797 = $796 << 24 >> 24 == 0;
                 $798 = $sig$i + 8 | 0;
                 $799 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
                 $800 = $sig$i + 1 | 0;
                 $801 = $797 ? $800 : $799;
                 $802 = SAFE_HEAP_LOAD($697 | 0, 4, 0) | 0 | 0;
                 $803 = $795 & 255;
                 $804 = $803 >>> 1;
                 $805 = $797 ? $804 : $802;
                 __THREW__ = 0;
                 invoke_iiiii(235, $794 | 0, 0, $801 | 0, $805 | 0) | 0;
                 $806 = __THREW__;
                 __THREW__ = 0;
                 $807 = $806 & 1;
                 if (!$807) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
                  $808 = ($715 | 0) == ($first | 0);
                  if ($808) {
                   $$0 = $first;
                   break L1;
                  }
                  $809 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $810 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
                  $811 = ($809 | 0) == ($810 | 0);
                  if ($811) {
                   $$0 = $first;
                   break L1;
                  }
                  $812 = $db + 16 | 0;
                  $813 = $810 + -24 | 0;
                  $814 = $db + 12 | 0;
                  $815 = SAFE_HEAP_LOAD($814 | 0, 4, 0) | 0 | 0;
                  SAFE_HEAP_STORE($35 | 0, $815 | 0, 4);
                  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($34, $813, $35);
                  $816 = $db + 20 | 0;
                  $817 = SAFE_HEAP_LOAD($816 | 0, 4, 0) | 0 | 0;
                  $818 = $db + 24 | 0;
                  $819 = SAFE_HEAP_LOAD($818 | 0, 4, 0) | 0 | 0;
                  $820 = $817 >>> 0 < $819 >>> 0;
                  if ($820) {
                   $821 = $34 + 12 | 0;
                   $822 = $817 + 4 | 0;
                   $823 = SAFE_HEAP_LOAD($821 | 0, 4, 0) | 0 | 0;
                   $824 = $817 + 12 | 0;
                   SAFE_HEAP_STORE($824 | 0, $823 | 0, 4);
                   $825 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
                   SAFE_HEAP_STORE($817 | 0, $825 | 0, 4);
                   $826 = $34 + 4 | 0;
                   $827 = SAFE_HEAP_LOAD($826 | 0, 4, 0) | 0 | 0;
                   SAFE_HEAP_STORE($822 | 0, $827 | 0, 4);
                   $828 = $34 + 8 | 0;
                   $829 = SAFE_HEAP_LOAD($828 | 0, 4, 0) | 0 | 0;
                   $830 = $817 + 8 | 0;
                   SAFE_HEAP_STORE($830 | 0, $829 | 0, 4);
                   SAFE_HEAP_STORE($828 | 0, 0 | 0, 4);
                   SAFE_HEAP_STORE($826 | 0, 0 | 0, 4);
                   SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
                   $831 = SAFE_HEAP_LOAD($816 | 0, 4, 0) | 0 | 0;
                   $832 = $831 + 16 | 0;
                   SAFE_HEAP_STORE($816 | 0, $832 | 0, 4);
                  } else {
                   $833 = $db + 28 | 0;
                   $834 = SAFE_HEAP_LOAD($812 | 0, 4, 0) | 0 | 0;
                   $835 = $817;
                   $836 = $834;
                   $837 = $835 - $836 | 0;
                   $838 = $837 >> 4;
                   $839 = $838 + 1 | 0;
                   $840 = ($837 | 0) < -16;
                   if ($840) {
                    __THREW__ = 0;
                    invoke_vi(238, $812 | 0);
                    $841 = __THREW__;
                    __THREW__ = 0;
                    $842 = ___cxa_find_matching_catch() | 0;
                    $843 = tempRet0;
                    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($34);
                    $$10 = $842;
                    $$1013 = $843;
                    break L73;
                   }
                   $844 = $819;
                   $845 = $844 - $836 | 0;
                   $846 = $845 >> 4;
                   $847 = $846 >>> 0 < 1073741823;
                   if ($847) {
                    $848 = $845 >> 3;
                    $849 = $848 >>> 0 < $839 >>> 0;
                    $850 = $849 ? $839 : $848;
                    $$0$i$i$i66 = $850;
                   } else {
                    $$0$i$i$i66 = 2147483647;
                   }
                   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i65, $$0$i$i$i66, $838, $833);
                   $851 = $__v$i$i65 + 8 | 0;
                   $852 = SAFE_HEAP_LOAD($851 | 0, 4, 0) | 0 | 0;
                   $853 = $34 + 12 | 0;
                   $854 = $852 + 4 | 0;
                   $855 = SAFE_HEAP_LOAD($853 | 0, 4, 0) | 0 | 0;
                   $856 = $852 + 12 | 0;
                   SAFE_HEAP_STORE($856 | 0, $855 | 0, 4);
                   $857 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
                   SAFE_HEAP_STORE($852 | 0, $857 | 0, 4);
                   $858 = $34 + 4 | 0;
                   $859 = SAFE_HEAP_LOAD($858 | 0, 4, 0) | 0 | 0;
                   SAFE_HEAP_STORE($854 | 0, $859 | 0, 4);
                   $860 = $34 + 8 | 0;
                   $861 = SAFE_HEAP_LOAD($860 | 0, 4, 0) | 0 | 0;
                   $862 = $852 + 8 | 0;
                   SAFE_HEAP_STORE($862 | 0, $861 | 0, 4);
                   SAFE_HEAP_STORE($860 | 0, 0 | 0, 4);
                   SAFE_HEAP_STORE($858 | 0, 0 | 0, 4);
                   SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
                   $863 = $852 + 16 | 0;
                   SAFE_HEAP_STORE($851 | 0, $863 | 0, 4);
                   __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($812, $__v$i$i65);
                   __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i65);
                  }
                  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($34);
                  $$0 = $715;
                  break L1;
                 }
                }
               }
              } while (0);
              $712 = ___cxa_find_matching_catch() | 0;
              $713 = tempRet0;
              $lpad$phi$index = $712;
              $lpad$phi$index8 = $713;
              label = 177;
             } else if ((label | 0) == 196) {
              $774 = ___cxa_find_matching_catch() | 0;
              $775 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
              $$04$i = $775;
              $$05$i = $774;
             }
             if ((label | 0) == 177) {
              $$04$i = $lpad$phi$index8;
              $$05$i = $lpad$phi$index;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
             ___resumeException($$05$i | 0);
            }
           } while (0);
           if ((label | 0) == 172) {
            $703 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
            $704 = $703 + -24 | 0;
            $706 = $703;
            while (1) {
             $705 = $706 + -24 | 0;
             SAFE_HEAP_STORE($696 | 0, $705 | 0, 4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($705);
             $$pre$i$i183 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
             $707 = ($$pre$i$i183 | 0) == ($704 | 0);
             if ($707) {
              break;
             } else {
              $706 = $$pre$i$i183;
             }
            }
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
          }
         }
        }
       } while (0);
       $$0 = $first;
       break L1;
       break;
      }
     case 71:
      {
       $864 = $first + 1 | 0;
       $865 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($864, $last, $db) | 0;
       $866 = ($865 | 0) == ($864 | 0);
       if ($866) {
        $$0 = $first;
        break L1;
       }
       $867 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $868 = $db + 4 | 0;
       $869 = SAFE_HEAP_LOAD($868 | 0, 4, 0) | 0 | 0;
       $870 = ($867 | 0) == ($869 | 0);
       if ($870) {
        $$0 = $first;
        break L1;
       }
       $871 = $869 + -24 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($871, 10321) | 0;
       $872 = $db + 16 | 0;
       $873 = SAFE_HEAP_LOAD($868 | 0, 4, 0) | 0 | 0;
       $874 = $873 + -24 | 0;
       $875 = $db + 12 | 0;
       $876 = SAFE_HEAP_LOAD($875 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($37 | 0, $876 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($36, $874, $37);
       $877 = $db + 20 | 0;
       $878 = SAFE_HEAP_LOAD($877 | 0, 4, 0) | 0 | 0;
       $879 = $db + 24 | 0;
       $880 = SAFE_HEAP_LOAD($879 | 0, 4, 0) | 0 | 0;
       $881 = $878 >>> 0 < $880 >>> 0;
       if ($881) {
        $882 = $36 + 12 | 0;
        $883 = $878 + 4 | 0;
        $884 = SAFE_HEAP_LOAD($882 | 0, 4, 0) | 0 | 0;
        $885 = $878 + 12 | 0;
        SAFE_HEAP_STORE($885 | 0, $884 | 0, 4);
        $886 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($878 | 0, $886 | 0, 4);
        $887 = $36 + 4 | 0;
        $888 = SAFE_HEAP_LOAD($887 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($883 | 0, $888 | 0, 4);
        $889 = $36 + 8 | 0;
        $890 = SAFE_HEAP_LOAD($889 | 0, 4, 0) | 0 | 0;
        $891 = $878 + 8 | 0;
        SAFE_HEAP_STORE($891 | 0, $890 | 0, 4);
        SAFE_HEAP_STORE($889 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($887 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($36 | 0, 0 | 0, 4);
        $892 = SAFE_HEAP_LOAD($877 | 0, 4, 0) | 0 | 0;
        $893 = $892 + 16 | 0;
        SAFE_HEAP_STORE($877 | 0, $893 | 0, 4);
       } else {
        $894 = $db + 28 | 0;
        $895 = SAFE_HEAP_LOAD($872 | 0, 4, 0) | 0 | 0;
        $896 = $878;
        $897 = $895;
        $898 = $896 - $897 | 0;
        $899 = $898 >> 4;
        $900 = $899 + 1 | 0;
        $901 = ($898 | 0) < -16;
        if ($901) {
         __THREW__ = 0;
         invoke_vi(238, $872 | 0);
         $902 = __THREW__;
         __THREW__ = 0;
         $903 = ___cxa_find_matching_catch() | 0;
         $904 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($36);
         $$10 = $903;
         $$1013 = $904;
         break L73;
        }
        $905 = $880;
        $906 = $905 - $897 | 0;
        $907 = $906 >> 4;
        $908 = $907 >>> 0 < 1073741823;
        if ($908) {
         $909 = $906 >> 3;
         $910 = $909 >>> 0 < $900 >>> 0;
         $911 = $910 ? $900 : $909;
         $$0$i$i$i71 = $911;
        } else {
         $$0$i$i$i71 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i70, $$0$i$i$i71, $899, $894);
        $912 = $__v$i$i70 + 8 | 0;
        $913 = SAFE_HEAP_LOAD($912 | 0, 4, 0) | 0 | 0;
        $914 = $36 + 12 | 0;
        $915 = $913 + 4 | 0;
        $916 = SAFE_HEAP_LOAD($914 | 0, 4, 0) | 0 | 0;
        $917 = $913 + 12 | 0;
        SAFE_HEAP_STORE($917 | 0, $916 | 0, 4);
        $918 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($913 | 0, $918 | 0, 4);
        $919 = $36 + 4 | 0;
        $920 = SAFE_HEAP_LOAD($919 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($915 | 0, $920 | 0, 4);
        $921 = $36 + 8 | 0;
        $922 = SAFE_HEAP_LOAD($921 | 0, 4, 0) | 0 | 0;
        $923 = $913 + 8 | 0;
        SAFE_HEAP_STORE($923 | 0, $922 | 0, 4);
        SAFE_HEAP_STORE($921 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($919 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($36 | 0, 0 | 0, 4);
        $924 = $913 + 16 | 0;
        SAFE_HEAP_STORE($912 | 0, $924 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($872, $__v$i$i70);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i70);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($36);
       $$0 = $865;
       break L1;
       break;
      }
     case 77:
      {
       $925 = $229 << 24 >> 24 == 77;
       do {
        if ($925) {
         $926 = $first + 1 | 0;
         $927 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($926, $last, $db) | 0;
         $928 = ($927 | 0) == ($926 | 0);
         if ($928) {
          $$08$i = $first;
         } else {
          $929 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($927, $last, $db) | 0;
          $930 = ($929 | 0) == ($927 | 0);
          if ($930) {
           $$08$i = $first;
          } else {
           $931 = $db + 4 | 0;
           $932 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
           $933 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $934 = $932;
           $935 = $933;
           $936 = $934 - $935 | 0;
           $937 = ($936 | 0) / 24 & -1;
           $938 = $937 >>> 0 < 2;
           if ($938) {
            $$08$i = $first;
           } else {
            $939 = $932 + -24 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($func$i, $939);
            $940 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
            $941 = $940 + -24 | 0;
            $943 = $940;
            while (1) {
             $942 = $943 + -24 | 0;
             SAFE_HEAP_STORE($931 | 0, $942 | 0, 4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($942);
             $$pre$i$i = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
             $944 = ($$pre$i$i | 0) == ($941 | 0);
             if ($944) {
              break;
             } else {
              $943 = $$pre$i$i;
             }
            }
            $945 = $940 + -48 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($class_type$i, $945);
            $946 = $func$i + 12 | 0;
            $947 = SAFE_HEAP_LOAD($946 >> 0 | 0, 1, 0) | 0 | 0;
            $948 = $947 & 1;
            $949 = $948 << 24 >> 24 == 0;
            $950 = $func$i + 20 | 0;
            $951 = SAFE_HEAP_LOAD($950 | 0, 4, 0) | 0 | 0;
            $952 = $946 + 1 | 0;
            $953 = $949 ? $952 : $951;
            $954 = SAFE_HEAP_LOAD($953 >> 0 | 0, 1, 0) | 0 | 0;
            $955 = $954 << 24 >> 24 == 40;
            $956 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
            $957 = $956 + -24 | 0;
            __THREW__ = 0;
            L317 : do {
             if ($955) {
              $958 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($func$i, 10307) | 0;
              $959 = __THREW__;
              __THREW__ = 0;
              $960 = $959 & 1;
              if ($960) {
               label = 277;
              } else {
               {}
               SAFE_HEAP_STORE($23 | 0, SAFE_HEAP_LOAD($958 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($23 + 4 | 0, SAFE_HEAP_LOAD($958 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($23 + 8 | 0, SAFE_HEAP_LOAD($958 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($958 | 0, 0 | 0, 4);
               $961 = $958 + 4 | 0;
               SAFE_HEAP_STORE($961 | 0, 0 | 0, 4);
               $962 = $958 + 8 | 0;
               SAFE_HEAP_STORE($962 | 0, 0 | 0, 4);
               __THREW__ = 0;
               invoke_vii(232, $24 | 0, $class_type$i | 0);
               $963 = __THREW__;
               __THREW__ = 0;
               $964 = $963 & 1;
               if ($964) {
                $1088 = ___cxa_find_matching_catch() | 0;
                $1089 = tempRet0;
                $$2$i = $1089;
                $$23$i = $1088;
               } else {
                $965 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
                $966 = $965 & 1;
                $967 = $966 << 24 >> 24 == 0;
                $968 = $24 + 8 | 0;
                $969 = SAFE_HEAP_LOAD($968 | 0, 4, 0) | 0 | 0;
                $970 = $24 + 1 | 0;
                $971 = $967 ? $970 : $969;
                $972 = $24 + 4 | 0;
                $973 = SAFE_HEAP_LOAD($972 | 0, 4, 0) | 0 | 0;
                $974 = $965 & 255;
                $975 = $974 >>> 1;
                $976 = $967 ? $975 : $973;
                __THREW__ = 0;
                $977 = invoke_iiii(222, $23 | 0, $971 | 0, $976 | 0) | 0;
                $978 = __THREW__;
                __THREW__ = 0;
                $979 = $978 & 1;
                do {
                 if ($979) {
                  $1090 = ___cxa_find_matching_catch() | 0;
                  $1091 = tempRet0;
                  $$1$i = $1091;
                  $$12$i = $1090;
                 } else {
                  {}
                  SAFE_HEAP_STORE($22 | 0, SAFE_HEAP_LOAD($977 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($22 + 4 | 0, SAFE_HEAP_LOAD($977 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($22 + 8 | 0, SAFE_HEAP_LOAD($977 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($977 | 0, 0 | 0, 4);
                  $980 = $977 + 4 | 0;
                  SAFE_HEAP_STORE($980 | 0, 0 | 0, 4);
                  $981 = $977 + 8 | 0;
                  SAFE_HEAP_STORE($981 | 0, 0 | 0, 4);
                  __THREW__ = 0;
                  $982 = invoke_iii(228, $22 | 0, 10332 | 0) | 0;
                  $983 = __THREW__;
                  __THREW__ = 0;
                  $984 = $983 & 1;
                  if ($984) {
                   $1092 = ___cxa_find_matching_catch() | 0;
                   $1093 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                   $$1$i = $1093;
                   $$12$i = $1092;
                   break;
                  }
                  {}
                  SAFE_HEAP_STORE($21 | 0, SAFE_HEAP_LOAD($982 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($21 + 4 | 0, SAFE_HEAP_LOAD($982 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($21 + 8 | 0, SAFE_HEAP_LOAD($982 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($982 | 0, 0 | 0, 4);
                  $985 = $982 + 4 | 0;
                  SAFE_HEAP_STORE($985 | 0, 0 | 0, 4);
                  $986 = $982 + 8 | 0;
                  SAFE_HEAP_STORE($986 | 0, 0 | 0, 4);
                  $987 = SAFE_HEAP_LOAD($957 >> 0 | 0, 1, 0) | 0 | 0;
                  $988 = $987 & 1;
                  $989 = $988 << 24 >> 24 == 0;
                  do {
                   if ($989) {
                    $990 = $957 + 1 | 0;
                    SAFE_HEAP_STORE($990 >> 0 | 0, 0 | 0, 1);
                    SAFE_HEAP_STORE($957 >> 0 | 0, 0 | 0, 1);
                   } else {
                    $991 = $956 + -16 | 0;
                    $992 = SAFE_HEAP_LOAD($991 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($992 >> 0 | 0, 0 | 0, 1);
                    $993 = $956 + -20 | 0;
                    SAFE_HEAP_STORE($993 | 0, 0 | 0, 4);
                    $$pre$i$i$i$i = SAFE_HEAP_LOAD($957 >> 0 | 0, 1, 0) | 0 | 0;
                    $994 = $$pre$i$i$i$i & 1;
                    $995 = $994 << 24 >> 24 == 0;
                    if ($995) {
                     $1000 = $$pre$i$i$i$i;
                     $1009 = 10;
                    } else {
                     $996 = SAFE_HEAP_LOAD($957 | 0, 4, 0) | 0 | 0;
                     $997 = $996 & -2;
                     $phitmp$i$i$i$i$i$i$i = $997 + -1 | 0;
                     $998 = $996 & 255;
                     $1000 = $998;
                     $1009 = $phitmp$i$i$i$i$i$i$i;
                    }
                    $999 = $1000 & 1;
                    $1001 = $999 << 24 >> 24 == 0;
                    do {
                     if ($1001) {
                      $1002 = $1000 & 255;
                      $1003 = $1002 >>> 1;
                      $1004 = ($1000 & 255) < 22;
                      if ($1004) {
                       $1007 = 10;
                       $1028 = $1003;
                       $2883 = 1;
                       break;
                      }
                      $1005 = $1003 + 16 | 0;
                      $1006 = $1005 & 240;
                      $phitmp$i2$i$i$i$i$i$i = $1006 + -1 | 0;
                      $1007 = $phitmp$i2$i$i$i$i$i$i;
                      $1028 = $1003;
                      $2883 = 1;
                     } else {
                      $1007 = 10;
                      $1028 = 0;
                      $2883 = 0;
                     }
                    } while (0);
                    $1008 = ($1007 | 0) == ($1009 | 0);
                    if ($1008) {
                     break;
                    }
                    $1010 = ($1007 | 0) == 10;
                    if ($1010) {
                     $1015 = $957 + 1 | 0;
                     $1016 = SAFE_HEAP_LOAD($991 | 0, 4, 0) | 0 | 0;
                     if ($2883) {
                      $1017 = $1000 & 255;
                      $1018 = $1017 >>> 1;
                      $1019 = $1018 + 1 | 0;
                      _memcpy($1015 | 0, $1016 | 0, $1019 | 0) | 0;
                      _free($1016);
                     } else {
                      $1024 = SAFE_HEAP_LOAD($1016 >> 0 | 0, 1, 0) | 0 | 0;
                      SAFE_HEAP_STORE($1015 >> 0 | 0, $1024 | 0, 1);
                      _free($1016);
                     }
                     $1029 = $1028 << 1;
                     $1030 = $1029 & 255;
                     SAFE_HEAP_STORE($957 >> 0 | 0, $1030 | 0, 1);
                     break;
                    }
                    $1011 = $1007 >>> 0 <= $1009 >>> 0;
                    $1012 = $1007 + 1 | 0;
                    $1013 = _malloc($1012) | 0;
                    $1014 = ($1013 | 0) == (0 | 0);
                    $or$cond$i$i$i$i$i$i = $1011 & $1014;
                    if ($or$cond$i$i$i$i$i$i) {
                     break;
                    }
                    if ($2883) {
                     $1020 = $957 + 1 | 0;
                     $1021 = $1000 & 255;
                     $1022 = $1021 >>> 1;
                     $1023 = $1022 + 1 | 0;
                     _memcpy($1013 | 0, $1020 | 0, $1023 | 0) | 0;
                    } else {
                     $1025 = SAFE_HEAP_LOAD($991 | 0, 4, 0) | 0 | 0;
                     $1026 = SAFE_HEAP_LOAD($1025 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($1013 >> 0 | 0, $1026 | 0, 1);
                     _free($1025);
                    }
                    $1027 = $1012 | 1;
                    SAFE_HEAP_STORE($957 | 0, $1027 | 0, 4);
                    SAFE_HEAP_STORE($993 | 0, $1028 | 0, 4);
                    SAFE_HEAP_STORE($991 | 0, $1013 | 0, 4);
                   }
                  } while (0);
                  {}
                  SAFE_HEAP_STORE($957 | 0, SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($957 + 4 | 0, SAFE_HEAP_LOAD($21 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($957 + 8 | 0, SAFE_HEAP_LOAD($21 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($21 | 0, 0 | 0, 4);
                  $1031 = $21 + 4 | 0;
                  SAFE_HEAP_STORE($1031 | 0, 0 | 0, 4);
                  $1032 = $21 + 8 | 0;
                  SAFE_HEAP_STORE($1032 | 0, 0 | 0, 4);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
                  $1033 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
                  __THREW__ = 0;
                  $1034 = invoke_iiii(227, $946 | 0, 0, 10212 | 0) | 0;
                  $1035 = __THREW__;
                  __THREW__ = 0;
                  $1036 = $1035 & 1;
                  if ($1036) {
                   label = 277;
                   break L317;
                  }
                  {}
                  SAFE_HEAP_STORE($25 | 0, SAFE_HEAP_LOAD($1034 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($25 + 4 | 0, SAFE_HEAP_LOAD($1034 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($25 + 8 | 0, SAFE_HEAP_LOAD($1034 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1034 | 0, 0 | 0, 4);
                  $1037 = $1034 + 4 | 0;
                  SAFE_HEAP_STORE($1037 | 0, 0 | 0, 4);
                  $1038 = $1034 + 8 | 0;
                  SAFE_HEAP_STORE($1038 | 0, 0 | 0, 4);
                  $1039 = $1033 + -12 | 0;
                  $1040 = SAFE_HEAP_LOAD($1039 >> 0 | 0, 1, 0) | 0 | 0;
                  $1041 = $1040 & 1;
                  $1042 = $1041 << 24 >> 24 == 0;
                  do {
                   if ($1042) {
                    $1043 = $1039 + 1 | 0;
                    SAFE_HEAP_STORE($1043 >> 0 | 0, 0 | 0, 1);
                    SAFE_HEAP_STORE($1039 >> 0 | 0, 0 | 0, 1);
                   } else {
                    $1044 = $1033 + -4 | 0;
                    $1045 = SAFE_HEAP_LOAD($1044 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($1045 >> 0 | 0, 0 | 0, 1);
                    $1046 = $1033 + -8 | 0;
                    SAFE_HEAP_STORE($1046 | 0, 0 | 0, 4);
                    $$pre$i$i$i21$i = SAFE_HEAP_LOAD($1039 >> 0 | 0, 1, 0) | 0 | 0;
                    $1047 = $$pre$i$i$i21$i & 1;
                    $1048 = $1047 << 24 >> 24 == 0;
                    if ($1048) {
                     $1053 = $$pre$i$i$i21$i;
                     $1062 = 10;
                    } else {
                     $1049 = SAFE_HEAP_LOAD($1039 | 0, 4, 0) | 0 | 0;
                     $1050 = $1049 & -2;
                     $phitmp$i$i$i$i$i$i23$i = $1050 + -1 | 0;
                     $1051 = $1049 & 255;
                     $1053 = $1051;
                     $1062 = $phitmp$i$i$i$i$i$i23$i;
                    }
                    $1052 = $1053 & 1;
                    $1054 = $1052 << 24 >> 24 == 0;
                    do {
                     if ($1054) {
                      $1055 = $1053 & 255;
                      $1056 = $1055 >>> 1;
                      $1057 = ($1053 & 255) < 22;
                      if ($1057) {
                       $1060 = 10;
                       $1081 = $1056;
                       $2884 = 1;
                       break;
                      }
                      $1058 = $1056 + 16 | 0;
                      $1059 = $1058 & 240;
                      $phitmp$i2$i$i$i$i$i26$i = $1059 + -1 | 0;
                      $1060 = $phitmp$i2$i$i$i$i$i26$i;
                      $1081 = $1056;
                      $2884 = 1;
                     } else {
                      $1060 = 10;
                      $1081 = 0;
                      $2884 = 0;
                     }
                    } while (0);
                    $1061 = ($1060 | 0) == ($1062 | 0);
                    if ($1061) {
                     break;
                    }
                    $1063 = ($1060 | 0) == 10;
                    if ($1063) {
                     $1068 = $1039 + 1 | 0;
                     $1069 = SAFE_HEAP_LOAD($1044 | 0, 4, 0) | 0 | 0;
                     if ($2884) {
                      $1070 = $1053 & 255;
                      $1071 = $1070 >>> 1;
                      $1072 = $1071 + 1 | 0;
                      _memcpy($1068 | 0, $1069 | 0, $1072 | 0) | 0;
                      _free($1069);
                     } else {
                      $1077 = SAFE_HEAP_LOAD($1069 >> 0 | 0, 1, 0) | 0 | 0;
                      SAFE_HEAP_STORE($1068 >> 0 | 0, $1077 | 0, 1);
                      _free($1069);
                     }
                     $1082 = $1081 << 1;
                     $1083 = $1082 & 255;
                     SAFE_HEAP_STORE($1039 >> 0 | 0, $1083 | 0, 1);
                     break;
                    }
                    $1064 = $1060 >>> 0 <= $1062 >>> 0;
                    $1065 = $1060 + 1 | 0;
                    $1066 = _malloc($1065) | 0;
                    $1067 = ($1066 | 0) == (0 | 0);
                    $or$cond$i$i$i$i$i28$i = $1064 & $1067;
                    if ($or$cond$i$i$i$i$i28$i) {
                     break;
                    }
                    if ($2884) {
                     $1073 = $1039 + 1 | 0;
                     $1074 = $1053 & 255;
                     $1075 = $1074 >>> 1;
                     $1076 = $1075 + 1 | 0;
                     _memcpy($1066 | 0, $1073 | 0, $1076 | 0) | 0;
                    } else {
                     $1078 = SAFE_HEAP_LOAD($1044 | 0, 4, 0) | 0 | 0;
                     $1079 = SAFE_HEAP_LOAD($1078 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($1066 >> 0 | 0, $1079 | 0, 1);
                     _free($1078);
                    }
                    $1080 = $1065 | 1;
                    SAFE_HEAP_STORE($1039 | 0, $1080 | 0, 4);
                    SAFE_HEAP_STORE($1046 | 0, $1081 | 0, 4);
                    SAFE_HEAP_STORE($1044 | 0, $1066 | 0, 4);
                   }
                  } while (0);
                  {}
                  SAFE_HEAP_STORE($1039 | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1039 + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1039 + 8 | 0, SAFE_HEAP_LOAD($25 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
                  $1084 = $25 + 4 | 0;
                  SAFE_HEAP_STORE($1084 | 0, 0 | 0, 4);
                  $1085 = $25 + 8 | 0;
                  SAFE_HEAP_STORE($1085 | 0, 0 | 0, 4);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                  label = 329;
                  break L317;
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                $$2$i = $$1$i;
                $$23$i = $$12$i;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
               $$6$i = $$2$i;
               $$67$i = $$23$i;
              }
             } else {
              $1094 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($func$i, 10319) | 0;
              $1095 = __THREW__;
              __THREW__ = 0;
              $1096 = $1095 & 1;
              if ($1096) {
               label = 277;
              } else {
               {}
               SAFE_HEAP_STORE($28 | 0, SAFE_HEAP_LOAD($1094 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($28 + 4 | 0, SAFE_HEAP_LOAD($1094 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($28 + 8 | 0, SAFE_HEAP_LOAD($1094 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($1094 | 0, 0 | 0, 4);
               $1097 = $1094 + 4 | 0;
               SAFE_HEAP_STORE($1097 | 0, 0 | 0, 4);
               $1098 = $1094 + 8 | 0;
               SAFE_HEAP_STORE($1098 | 0, 0 | 0, 4);
               __THREW__ = 0;
               invoke_vii(232, $29 | 0, $class_type$i | 0);
               $1099 = __THREW__;
               __THREW__ = 0;
               $1100 = $1099 & 1;
               if ($1100) {
                $1217 = ___cxa_find_matching_catch() | 0;
                $1218 = tempRet0;
                $$5$i = $1218;
                $$56$i = $1217;
               } else {
                $1101 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
                $1102 = $1101 & 1;
                $1103 = $1102 << 24 >> 24 == 0;
                $1104 = $29 + 8 | 0;
                $1105 = SAFE_HEAP_LOAD($1104 | 0, 4, 0) | 0 | 0;
                $1106 = $29 + 1 | 0;
                $1107 = $1103 ? $1106 : $1105;
                $1108 = $29 + 4 | 0;
                $1109 = SAFE_HEAP_LOAD($1108 | 0, 4, 0) | 0 | 0;
                $1110 = $1101 & 255;
                $1111 = $1110 >>> 1;
                $1112 = $1103 ? $1111 : $1109;
                __THREW__ = 0;
                $1113 = invoke_iiii(222, $28 | 0, $1107 | 0, $1112 | 0) | 0;
                $1114 = __THREW__;
                __THREW__ = 0;
                $1115 = $1114 & 1;
                do {
                 if ($1115) {
                  $1219 = ___cxa_find_matching_catch() | 0;
                  $1220 = tempRet0;
                  $$4$i = $1220;
                  $$45$i = $1219;
                 } else {
                  {}
                  SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($1113 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($1113 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($27 + 8 | 0, SAFE_HEAP_LOAD($1113 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1113 | 0, 0 | 0, 4);
                  $1116 = $1113 + 4 | 0;
                  SAFE_HEAP_STORE($1116 | 0, 0 | 0, 4);
                  $1117 = $1113 + 8 | 0;
                  SAFE_HEAP_STORE($1117 | 0, 0 | 0, 4);
                  __THREW__ = 0;
                  $1118 = invoke_iii(228, $27 | 0, 10332 | 0) | 0;
                  $1119 = __THREW__;
                  __THREW__ = 0;
                  $1120 = $1119 & 1;
                  if ($1120) {
                   $1221 = ___cxa_find_matching_catch() | 0;
                   $1222 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                   $$4$i = $1222;
                   $$45$i = $1221;
                   break;
                  }
                  {}
                  SAFE_HEAP_STORE($26 | 0, SAFE_HEAP_LOAD($1118 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($26 + 4 | 0, SAFE_HEAP_LOAD($1118 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($26 + 8 | 0, SAFE_HEAP_LOAD($1118 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1118 | 0, 0 | 0, 4);
                  $1121 = $1118 + 4 | 0;
                  SAFE_HEAP_STORE($1121 | 0, 0 | 0, 4);
                  $1122 = $1118 + 8 | 0;
                  SAFE_HEAP_STORE($1122 | 0, 0 | 0, 4);
                  $1123 = SAFE_HEAP_LOAD($957 >> 0 | 0, 1, 0) | 0 | 0;
                  $1124 = $1123 & 1;
                  $1125 = $1124 << 24 >> 24 == 0;
                  do {
                   if ($1125) {
                    $1126 = $957 + 1 | 0;
                    SAFE_HEAP_STORE($1126 >> 0 | 0, 0 | 0, 1);
                    SAFE_HEAP_STORE($957 >> 0 | 0, 0 | 0, 1);
                   } else {
                    $1127 = $956 + -16 | 0;
                    $1128 = SAFE_HEAP_LOAD($1127 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($1128 >> 0 | 0, 0 | 0, 1);
                    $1129 = $956 + -20 | 0;
                    SAFE_HEAP_STORE($1129 | 0, 0 | 0, 4);
                    $$pre$i$i$i52$i = SAFE_HEAP_LOAD($957 >> 0 | 0, 1, 0) | 0 | 0;
                    $1130 = $$pre$i$i$i52$i & 1;
                    $1131 = $1130 << 24 >> 24 == 0;
                    if ($1131) {
                     $1136 = $$pre$i$i$i52$i;
                     $1145 = 10;
                    } else {
                     $1132 = SAFE_HEAP_LOAD($957 | 0, 4, 0) | 0 | 0;
                     $1133 = $1132 & -2;
                     $phitmp$i$i$i$i$i$i54$i = $1133 + -1 | 0;
                     $1134 = $1132 & 255;
                     $1136 = $1134;
                     $1145 = $phitmp$i$i$i$i$i$i54$i;
                    }
                    $1135 = $1136 & 1;
                    $1137 = $1135 << 24 >> 24 == 0;
                    do {
                     if ($1137) {
                      $1138 = $1136 & 255;
                      $1139 = $1138 >>> 1;
                      $1140 = ($1136 & 255) < 22;
                      if ($1140) {
                       $1143 = 10;
                       $1164 = $1139;
                       $2885 = 1;
                       break;
                      }
                      $1141 = $1139 + 16 | 0;
                      $1142 = $1141 & 240;
                      $phitmp$i2$i$i$i$i$i57$i = $1142 + -1 | 0;
                      $1143 = $phitmp$i2$i$i$i$i$i57$i;
                      $1164 = $1139;
                      $2885 = 1;
                     } else {
                      $1143 = 10;
                      $1164 = 0;
                      $2885 = 0;
                     }
                    } while (0);
                    $1144 = ($1143 | 0) == ($1145 | 0);
                    if ($1144) {
                     break;
                    }
                    $1146 = ($1143 | 0) == 10;
                    if ($1146) {
                     $1151 = $957 + 1 | 0;
                     $1152 = SAFE_HEAP_LOAD($1127 | 0, 4, 0) | 0 | 0;
                     if ($2885) {
                      $1153 = $1136 & 255;
                      $1154 = $1153 >>> 1;
                      $1155 = $1154 + 1 | 0;
                      _memcpy($1151 | 0, $1152 | 0, $1155 | 0) | 0;
                      _free($1152);
                     } else {
                      $1160 = SAFE_HEAP_LOAD($1152 >> 0 | 0, 1, 0) | 0 | 0;
                      SAFE_HEAP_STORE($1151 >> 0 | 0, $1160 | 0, 1);
                      _free($1152);
                     }
                     $1165 = $1164 << 1;
                     $1166 = $1165 & 255;
                     SAFE_HEAP_STORE($957 >> 0 | 0, $1166 | 0, 1);
                     break;
                    }
                    $1147 = $1143 >>> 0 <= $1145 >>> 0;
                    $1148 = $1143 + 1 | 0;
                    $1149 = _malloc($1148) | 0;
                    $1150 = ($1149 | 0) == (0 | 0);
                    $or$cond$i$i$i$i$i59$i = $1147 & $1150;
                    if ($or$cond$i$i$i$i$i59$i) {
                     break;
                    }
                    if ($2885) {
                     $1156 = $957 + 1 | 0;
                     $1157 = $1136 & 255;
                     $1158 = $1157 >>> 1;
                     $1159 = $1158 + 1 | 0;
                     _memcpy($1149 | 0, $1156 | 0, $1159 | 0) | 0;
                    } else {
                     $1161 = SAFE_HEAP_LOAD($1127 | 0, 4, 0) | 0 | 0;
                     $1162 = SAFE_HEAP_LOAD($1161 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($1149 >> 0 | 0, $1162 | 0, 1);
                     _free($1161);
                    }
                    $1163 = $1148 | 1;
                    SAFE_HEAP_STORE($957 | 0, $1163 | 0, 4);
                    SAFE_HEAP_STORE($1129 | 0, $1164 | 0, 4);
                    SAFE_HEAP_STORE($1127 | 0, $1149 | 0, 4);
                   }
                  } while (0);
                  {}
                  SAFE_HEAP_STORE($957 | 0, SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($957 + 4 | 0, SAFE_HEAP_LOAD($26 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($957 + 8 | 0, SAFE_HEAP_LOAD($26 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
                  $1167 = $26 + 4 | 0;
                  SAFE_HEAP_STORE($1167 | 0, 0 | 0, 4);
                  $1168 = $26 + 8 | 0;
                  SAFE_HEAP_STORE($1168 | 0, 0 | 0, 4);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
                  $1169 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
                  $1170 = $1169 + -12 | 0;
                  $1171 = SAFE_HEAP_LOAD($1170 >> 0 | 0, 1, 0) | 0 | 0;
                  $1172 = $1171 & 1;
                  $1173 = $1172 << 24 >> 24 == 0;
                  do {
                   if ($1173) {
                    $1174 = $1170 + 1 | 0;
                    SAFE_HEAP_STORE($1174 >> 0 | 0, 0 | 0, 1);
                    SAFE_HEAP_STORE($1170 >> 0 | 0, 0 | 0, 1);
                   } else {
                    $1175 = $1169 + -4 | 0;
                    $1176 = SAFE_HEAP_LOAD($1175 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($1176 >> 0 | 0, 0 | 0, 1);
                    $1177 = $1169 + -8 | 0;
                    SAFE_HEAP_STORE($1177 | 0, 0 | 0, 4);
                    $$pre$i$i$i71$i = SAFE_HEAP_LOAD($1170 >> 0 | 0, 1, 0) | 0 | 0;
                    $1178 = $$pre$i$i$i71$i & 1;
                    $1179 = $1178 << 24 >> 24 == 0;
                    if ($1179) {
                     $1184 = $$pre$i$i$i71$i;
                     $1193 = 10;
                    } else {
                     $1180 = SAFE_HEAP_LOAD($1170 | 0, 4, 0) | 0 | 0;
                     $1181 = $1180 & -2;
                     $phitmp$i$i$i$i$i$i73$i = $1181 + -1 | 0;
                     $1182 = $1180 & 255;
                     $1184 = $1182;
                     $1193 = $phitmp$i$i$i$i$i$i73$i;
                    }
                    $1183 = $1184 & 1;
                    $1185 = $1183 << 24 >> 24 == 0;
                    do {
                     if ($1185) {
                      $1186 = $1184 & 255;
                      $1187 = $1186 >>> 1;
                      $1188 = ($1184 & 255) < 22;
                      if ($1188) {
                       $1191 = 10;
                       $1212 = $1187;
                       $2886 = 1;
                       break;
                      }
                      $1189 = $1187 + 16 | 0;
                      $1190 = $1189 & 240;
                      $phitmp$i2$i$i$i$i$i76$i = $1190 + -1 | 0;
                      $1191 = $phitmp$i2$i$i$i$i$i76$i;
                      $1212 = $1187;
                      $2886 = 1;
                     } else {
                      $1191 = 10;
                      $1212 = 0;
                      $2886 = 0;
                     }
                    } while (0);
                    $1192 = ($1191 | 0) == ($1193 | 0);
                    if ($1192) {
                     break;
                    }
                    $1194 = ($1191 | 0) == 10;
                    if ($1194) {
                     $1199 = $1170 + 1 | 0;
                     $1200 = SAFE_HEAP_LOAD($1175 | 0, 4, 0) | 0 | 0;
                     if ($2886) {
                      $1201 = $1184 & 255;
                      $1202 = $1201 >>> 1;
                      $1203 = $1202 + 1 | 0;
                      _memcpy($1199 | 0, $1200 | 0, $1203 | 0) | 0;
                      _free($1200);
                     } else {
                      $1208 = SAFE_HEAP_LOAD($1200 >> 0 | 0, 1, 0) | 0 | 0;
                      SAFE_HEAP_STORE($1199 >> 0 | 0, $1208 | 0, 1);
                      _free($1200);
                     }
                     $1213 = $1212 << 1;
                     $1214 = $1213 & 255;
                     SAFE_HEAP_STORE($1170 >> 0 | 0, $1214 | 0, 1);
                     break;
                    }
                    $1195 = $1191 >>> 0 <= $1193 >>> 0;
                    $1196 = $1191 + 1 | 0;
                    $1197 = _malloc($1196) | 0;
                    $1198 = ($1197 | 0) == (0 | 0);
                    $or$cond$i$i$i$i$i78$i = $1195 & $1198;
                    if ($or$cond$i$i$i$i$i78$i) {
                     break;
                    }
                    if ($2886) {
                     $1204 = $1170 + 1 | 0;
                     $1205 = $1184 & 255;
                     $1206 = $1205 >>> 1;
                     $1207 = $1206 + 1 | 0;
                     _memcpy($1197 | 0, $1204 | 0, $1207 | 0) | 0;
                    } else {
                     $1209 = SAFE_HEAP_LOAD($1175 | 0, 4, 0) | 0 | 0;
                     $1210 = SAFE_HEAP_LOAD($1209 >> 0 | 0, 1, 0) | 0 | 0;
                     SAFE_HEAP_STORE($1197 >> 0 | 0, $1210 | 0, 1);
                     _free($1209);
                    }
                    $1211 = $1196 | 1;
                    SAFE_HEAP_STORE($1170 | 0, $1211 | 0, 4);
                    SAFE_HEAP_STORE($1177 | 0, $1212 | 0, 4);
                    SAFE_HEAP_STORE($1175 | 0, $1197 | 0, 4);
                   }
                  } while (0);
                  {}
                  SAFE_HEAP_STORE($1170 | 0, SAFE_HEAP_LOAD($946 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1170 + 4 | 0, SAFE_HEAP_LOAD($946 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($1170 + 8 | 0, SAFE_HEAP_LOAD($946 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($946 | 0, 0 | 0, 4);
                  $1215 = $946 + 4 | 0;
                  SAFE_HEAP_STORE($1215 | 0, 0 | 0, 4);
                  $1216 = $946 + 8 | 0;
                  SAFE_HEAP_STORE($1216 | 0, 0 | 0, 4);
                  label = 329;
                  break L317;
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                $$5$i = $$4$i;
                $$56$i = $$45$i;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
               $$6$i = $$5$i;
               $$67$i = $$56$i;
              }
             }
            } while (0);
            if ((label | 0) == 277) {
             $1086 = ___cxa_find_matching_catch() | 0;
             $1087 = tempRet0;
             $$6$i = $1087;
             $$67$i = $1086;
            } else if ((label | 0) == 329) {
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
             $$08$i = $929;
             break;
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
            ___resumeException($$67$i | 0);
           }
          }
         }
        } else {
         $$08$i = $first;
        }
       } while (0);
       $1223 = ($$08$i | 0) == ($first | 0);
       if ($1223) {
        $$0 = $first;
        break L1;
       }
       $1224 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1225 = $db + 4 | 0;
       $1226 = SAFE_HEAP_LOAD($1225 | 0, 4, 0) | 0 | 0;
       $1227 = ($1224 | 0) == ($1226 | 0);
       if ($1227) {
        $$0 = $first;
        break L1;
       }
       $1228 = $db + 16 | 0;
       $1229 = $1226 + -24 | 0;
       $1230 = $db + 12 | 0;
       $1231 = SAFE_HEAP_LOAD($1230 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($39 | 0, $1231 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($38, $1229, $39);
       $1232 = $db + 20 | 0;
       $1233 = SAFE_HEAP_LOAD($1232 | 0, 4, 0) | 0 | 0;
       $1234 = $db + 24 | 0;
       $1235 = SAFE_HEAP_LOAD($1234 | 0, 4, 0) | 0 | 0;
       $1236 = $1233 >>> 0 < $1235 >>> 0;
       if ($1236) {
        $1237 = $38 + 12 | 0;
        $1238 = $1233 + 4 | 0;
        $1239 = SAFE_HEAP_LOAD($1237 | 0, 4, 0) | 0 | 0;
        $1240 = $1233 + 12 | 0;
        SAFE_HEAP_STORE($1240 | 0, $1239 | 0, 4);
        $1241 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1233 | 0, $1241 | 0, 4);
        $1242 = $38 + 4 | 0;
        $1243 = SAFE_HEAP_LOAD($1242 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1238 | 0, $1243 | 0, 4);
        $1244 = $38 + 8 | 0;
        $1245 = SAFE_HEAP_LOAD($1244 | 0, 4, 0) | 0 | 0;
        $1246 = $1233 + 8 | 0;
        SAFE_HEAP_STORE($1246 | 0, $1245 | 0, 4);
        SAFE_HEAP_STORE($1244 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($1242 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
        $1247 = SAFE_HEAP_LOAD($1232 | 0, 4, 0) | 0 | 0;
        $1248 = $1247 + 16 | 0;
        SAFE_HEAP_STORE($1232 | 0, $1248 | 0, 4);
       } else {
        $1249 = $db + 28 | 0;
        $1250 = SAFE_HEAP_LOAD($1228 | 0, 4, 0) | 0 | 0;
        $1251 = $1233;
        $1252 = $1250;
        $1253 = $1251 - $1252 | 0;
        $1254 = $1253 >> 4;
        $1255 = $1254 + 1 | 0;
        $1256 = ($1253 | 0) < -16;
        if ($1256) {
         __THREW__ = 0;
         invoke_vi(238, $1228 | 0);
         $1257 = __THREW__;
         __THREW__ = 0;
         $1258 = ___cxa_find_matching_catch() | 0;
         $1259 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($38);
         $$10 = $1258;
         $$1013 = $1259;
         break L73;
        }
        $1260 = $1235;
        $1261 = $1260 - $1252 | 0;
        $1262 = $1261 >> 4;
        $1263 = $1262 >>> 0 < 1073741823;
        if ($1263) {
         $1264 = $1261 >> 3;
         $1265 = $1264 >>> 0 < $1255 >>> 0;
         $1266 = $1265 ? $1255 : $1264;
         $$0$i$i$i76 = $1266;
        } else {
         $$0$i$i$i76 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i75, $$0$i$i$i76, $1254, $1249);
        $1267 = $__v$i$i75 + 8 | 0;
        $1268 = SAFE_HEAP_LOAD($1267 | 0, 4, 0) | 0 | 0;
        $1269 = $38 + 12 | 0;
        $1270 = $1268 + 4 | 0;
        $1271 = SAFE_HEAP_LOAD($1269 | 0, 4, 0) | 0 | 0;
        $1272 = $1268 + 12 | 0;
        SAFE_HEAP_STORE($1272 | 0, $1271 | 0, 4);
        $1273 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1268 | 0, $1273 | 0, 4);
        $1274 = $38 + 4 | 0;
        $1275 = SAFE_HEAP_LOAD($1274 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1270 | 0, $1275 | 0, 4);
        $1276 = $38 + 8 | 0;
        $1277 = SAFE_HEAP_LOAD($1276 | 0, 4, 0) | 0 | 0;
        $1278 = $1268 + 8 | 0;
        SAFE_HEAP_STORE($1278 | 0, $1277 | 0, 4);
        SAFE_HEAP_STORE($1276 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($1274 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
        $1279 = $1268 + 16 | 0;
        SAFE_HEAP_STORE($1267 | 0, $1279 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1228, $__v$i$i75);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i75);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($38);
       $$0 = $$08$i;
       break L1;
       break;
      }
     case 79:
      {
       $1280 = $db + 4 | 0;
       $1281 = SAFE_HEAP_LOAD($1280 | 0, 4, 0) | 0 | 0;
       $1282 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1283 = $1281;
       $1284 = $1282;
       $1285 = $1283 - $1284 | 0;
       $1286 = ($1285 | 0) / 24 & -1;
       $1287 = $first + 1 | 0;
       $1288 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1287, $last, $db) | 0;
       $1289 = SAFE_HEAP_LOAD($1280 | 0, 4, 0) | 0 | 0;
       $1290 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1291 = $1289;
       $1292 = $1290;
       $1293 = $1291 - $1292 | 0;
       $1294 = ($1293 | 0) / 24 & -1;
       $1295 = ($1288 | 0) == ($1287 | 0);
       if ($1295) {
        $$0 = $first;
        break L1;
       }
       $1296 = $db + 16 | 0;
       $1297 = $db + 12 | 0;
       $1298 = SAFE_HEAP_LOAD($1297 | 0, 4, 0) | 0 | 0;
       $1299 = $1298;
       $1300 = $db + 20 | 0;
       $1301 = SAFE_HEAP_LOAD($1300 | 0, 4, 0) | 0 | 0;
       $1302 = $db + 24 | 0;
       $1303 = SAFE_HEAP_LOAD($1302 | 0, 4, 0) | 0 | 0;
       $1304 = $1301 >>> 0 < $1303 >>> 0;
       if ($1304) {
        SAFE_HEAP_STORE($1301 | 0, 0 | 0, 4);
        $1305 = $1301 + 4 | 0;
        SAFE_HEAP_STORE($1305 | 0, 0 | 0, 4);
        $1306 = $1301 + 8 | 0;
        SAFE_HEAP_STORE($1306 | 0, 0 | 0, 4);
        $1307 = $1301 + 12 | 0;
        SAFE_HEAP_STORE($1307 | 0, $1299 | 0, 4);
        $1308 = SAFE_HEAP_LOAD($1300 | 0, 4, 0) | 0 | 0;
        $1309 = $1308 + 16 | 0;
        SAFE_HEAP_STORE($1300 | 0, $1309 | 0, 4);
       } else {
        $1310 = $db + 28 | 0;
        $1311 = SAFE_HEAP_LOAD($1296 | 0, 4, 0) | 0 | 0;
        $1312 = $1301;
        $1313 = $1311;
        $1314 = $1312 - $1313 | 0;
        $1315 = $1314 >> 4;
        $1316 = $1315 + 1 | 0;
        $1317 = ($1314 | 0) < -16;
        if ($1317) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1296);
        }
        $1318 = $1303;
        $1319 = $1318 - $1313 | 0;
        $1320 = $1319 >> 4;
        $1321 = $1320 >>> 0 < 1073741823;
        if ($1321) {
         $1322 = $1319 >> 3;
         $1323 = $1322 >>> 0 < $1316 >>> 0;
         $1324 = $1323 ? $1316 : $1322;
         $$0$i$i$i81 = $1324;
        } else {
         $$0$i$i$i81 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i80, $$0$i$i$i81, $1315, $1310);
        $1325 = $__v$i$i80 + 8 | 0;
        $1326 = SAFE_HEAP_LOAD($1325 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1326 | 0, 0 | 0, 4);
        $1327 = $1326 + 4 | 0;
        SAFE_HEAP_STORE($1327 | 0, 0 | 0, 4);
        $1328 = $1326 + 8 | 0;
        SAFE_HEAP_STORE($1328 | 0, 0 | 0, 4);
        $1329 = $1326 + 12 | 0;
        SAFE_HEAP_STORE($1329 | 0, $1299 | 0, 4);
        $1330 = $1326 + 16 | 0;
        SAFE_HEAP_STORE($1325 | 0, $1330 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1296, $__v$i$i80);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i80);
       }
       $1331 = $40 + 4 | 0;
       $1332 = $40 + 8 | 0;
       $1333 = $40 + 1 | 0;
       $1334 = $__v$i$i85 + 8 | 0;
       $1335 = $1286 >>> 0 < $1294 >>> 0;
       if ($1335) {
        $k5$0533 = $1286;
       } else {
        $$0 = $1288;
        break L1;
       }
       while (1) {
        $1336 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1337 = ($1336 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
        $1338 = SAFE_HEAP_LOAD($1337 >> 0 | 0, 1, 0) | 0 | 0;
        $1339 = $1338 & 1;
        $1340 = $1339 << 24 >> 24 == 0;
        $1341 = ($1336 + ($k5$0533 * 24 | 0) | 0) + 16 | 0;
        $1342 = SAFE_HEAP_LOAD($1341 | 0, 4, 0) | 0 | 0;
        $1343 = $1338 & 255;
        $1344 = $1343 >>> 1;
        $1345 = $1340 ? $1344 : $1342;
        $1346 = ($1336 + ($k5$0533 * 24 | 0) | 0) + 20 | 0;
        $1347 = SAFE_HEAP_LOAD($1346 | 0, 4, 0) | 0 | 0;
        $1348 = $1337 + 1 | 0;
        $1349 = $1340 ? $1348 : $1347;
        $1350 = $1345 >>> 0 < 2;
        $1351 = $1350 ? $1345 : 2;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($40, $1349, $1351);
        $1352 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
        $1353 = $1352 & 1;
        $1354 = $1353 << 24 >> 24 == 0;
        $1355 = SAFE_HEAP_LOAD($1331 | 0, 4, 0) | 0 | 0;
        $1356 = $1352 & 255;
        $1357 = $1356 >>> 1;
        $1358 = $1354 ? $1357 : $1355;
        $1359 = SAFE_HEAP_LOAD($1332 | 0, 4, 0) | 0 | 0;
        $1360 = $1354 ? $1333 : $1359;
        $1361 = $1358 >>> 0 > 2;
        $1362 = $1361 ? 2 : $1358;
        $1363 = _memcmp($1360, 10289, $1362) | 0;
        $1364 = ($1363 | 0) == 0;
        $1365 = $1358 >>> 0 < 2;
        $$$i$i$i = $1361 & 1;
        $$$$i$i$i = $1365 ? -1 : $$$i$i$i;
        $1366 = $1364 ? $$$$i$i$i : $1363;
        $1367 = ($1366 | 0) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
        $1368 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        if ($1367) {
         $1369 = $1368 + ($k5$0533 * 24 | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1369, 10209) | 0;
         $1370 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1371 = ($1370 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1371, 0, 10212) | 0;
        } else {
         $1372 = ($1368 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
         $1373 = SAFE_HEAP_LOAD($1372 >> 0 | 0, 1, 0) | 0 | 0;
         $1374 = $1373 & 1;
         $1375 = $1374 << 24 >> 24 == 0;
         if ($1375) {
          $1378 = $1372 + 1 | 0;
          $1380 = $1378;
         } else {
          $1376 = ($1368 + ($k5$0533 * 24 | 0) | 0) + 20 | 0;
          $1377 = SAFE_HEAP_LOAD($1376 | 0, 4, 0) | 0 | 0;
          $1380 = $1377;
         }
         $1379 = SAFE_HEAP_LOAD($1380 >> 0 | 0, 1, 0) | 0 | 0;
         $1381 = $1379 << 24 >> 24 == 40;
         if ($1381) {
          $1382 = $1368 + ($k5$0533 * 24 | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1382, 10307) | 0;
          $1383 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1384 = ($1383 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1384, 0, 10212) | 0;
         }
        }
        $1385 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1386 = $1385 + ($k5$0533 * 24 | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1386, 10336) | 0;
        $1387 = SAFE_HEAP_LOAD($1300 | 0, 4, 0) | 0 | 0;
        $1388 = $1387 + -16 | 0;
        $1389 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1390 = $1389 + ($k5$0533 * 24 | 0) | 0;
        $1391 = $1387 + -12 | 0;
        $1392 = SAFE_HEAP_LOAD($1391 | 0, 4, 0) | 0 | 0;
        $1393 = $1387 + -8 | 0;
        $1394 = SAFE_HEAP_LOAD($1393 | 0, 4, 0) | 0 | 0;
        $1395 = ($1392 | 0) == ($1394 | 0);
        if ($1395) {
         $1404 = $1387 + -4 | 0;
         $1405 = SAFE_HEAP_LOAD($1388 | 0, 4, 0) | 0 | 0;
         $1406 = $1392;
         $1407 = $1405;
         $1408 = $1406 - $1407 | 0;
         $1409 = ($1408 | 0) / 24 & -1;
         $1410 = $1409 + 1 | 0;
         $1411 = ($1408 | 0) < -24;
         if ($1411) {
          $$lcssa667 = $1388;
          label = 362;
          break;
         }
         $1412 = $1409 >>> 0 < 1073741823;
         if ($1412) {
          $1413 = $1409 << 1;
          $1414 = $1413 >>> 0 < $1410 >>> 0;
          $1415 = $1414 ? $1410 : $1413;
          $$0$i$i$i87 = $1415;
         } else {
          $$0$i$i$i87 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i85, $$0$i$i$i87, $1409, $1404);
         $1416 = SAFE_HEAP_LOAD($1334 | 0, 4, 0) | 0 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1416 | 0, $1390 | 0);
         $1417 = __THREW__;
         __THREW__ = 0;
         $1418 = $1417 & 1;
         if ($1418) {
          label = 368;
          break;
         }
         $1419 = $1416 + 12 | 0;
         $1420 = ($1389 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1419 | 0, $1420 | 0);
         $1421 = __THREW__;
         __THREW__ = 0;
         $1422 = $1421 & 1;
         if ($1422) {
          $$lcssa672 = $1416;
          label = 367;
          break;
         }
         $1427 = $1416 + 24 | 0;
         SAFE_HEAP_STORE($1334 | 0, $1427 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1388, $__v$i$i85);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i85);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1392, $1390);
         $1396 = $1392 + 12 | 0;
         $1397 = ($1389 + ($k5$0533 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1396 | 0, $1397 | 0);
         $1398 = __THREW__;
         __THREW__ = 0;
         $1399 = $1398 & 1;
         if ($1399) {
          $$lcssa = $1392;
          label = 359;
          break;
         }
         $1402 = SAFE_HEAP_LOAD($1391 | 0, 4, 0) | 0 | 0;
         $1403 = $1402 + 24 | 0;
         SAFE_HEAP_STORE($1391 | 0, $1403 | 0, 4);
        }
        $1428 = $k5$0533 + 1 | 0;
        $1429 = $1428 >>> 0 < $1294 >>> 0;
        if ($1429) {
         $k5$0533 = $1428;
        } else {
         $$0 = $1288;
         break L1;
        }
       }
       if ((label | 0) == 359) {
        $1400 = ___cxa_find_matching_catch() | 0;
        $1401 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
        ___resumeException($1400 | 0);
       } else if ((label | 0) == 362) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa667);
       } else if ((label | 0) == 367) {
        $1423 = ___cxa_find_matching_catch() | 0;
        $1424 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa672);
        $eh$lpad$body$i$i90$index14Z2D = $1424;
        $eh$lpad$body$i$i90$indexZ2D = $1423;
       } else if ((label | 0) == 368) {
        $1425 = ___cxa_find_matching_catch() | 0;
        $1426 = tempRet0;
        $eh$lpad$body$i$i90$index14Z2D = $1426;
        $eh$lpad$body$i$i90$indexZ2D = $1425;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i85);
       ___resumeException($eh$lpad$body$i$i90$indexZ2D | 0);
       break;
      }
     case 80:
      {
       $1430 = $db + 4 | 0;
       $1431 = SAFE_HEAP_LOAD($1430 | 0, 4, 0) | 0 | 0;
       $1432 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1433 = $1431;
       $1434 = $1432;
       $1435 = $1433 - $1434 | 0;
       $1436 = ($1435 | 0) / 24 & -1;
       $1437 = $first + 1 | 0;
       $1438 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1437, $last, $db) | 0;
       $1439 = SAFE_HEAP_LOAD($1430 | 0, 4, 0) | 0 | 0;
       $1440 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1441 = $1439;
       $1442 = $1440;
       $1443 = $1441 - $1442 | 0;
       $1444 = ($1443 | 0) / 24 & -1;
       $1445 = ($1438 | 0) == ($1437 | 0);
       if ($1445) {
        $$0 = $first;
        break L1;
       }
       $1446 = $db + 16 | 0;
       $1447 = $db + 12 | 0;
       $1448 = SAFE_HEAP_LOAD($1447 | 0, 4, 0) | 0 | 0;
       $1449 = $1448;
       $1450 = $db + 20 | 0;
       $1451 = SAFE_HEAP_LOAD($1450 | 0, 4, 0) | 0 | 0;
       $1452 = $db + 24 | 0;
       $1453 = SAFE_HEAP_LOAD($1452 | 0, 4, 0) | 0 | 0;
       $1454 = $1451 >>> 0 < $1453 >>> 0;
       if ($1454) {
        SAFE_HEAP_STORE($1451 | 0, 0 | 0, 4);
        $1455 = $1451 + 4 | 0;
        SAFE_HEAP_STORE($1455 | 0, 0 | 0, 4);
        $1456 = $1451 + 8 | 0;
        SAFE_HEAP_STORE($1456 | 0, 0 | 0, 4);
        $1457 = $1451 + 12 | 0;
        SAFE_HEAP_STORE($1457 | 0, $1449 | 0, 4);
        $1458 = SAFE_HEAP_LOAD($1450 | 0, 4, 0) | 0 | 0;
        $1459 = $1458 + 16 | 0;
        SAFE_HEAP_STORE($1450 | 0, $1459 | 0, 4);
       } else {
        $1460 = $db + 28 | 0;
        $1461 = SAFE_HEAP_LOAD($1446 | 0, 4, 0) | 0 | 0;
        $1462 = $1451;
        $1463 = $1461;
        $1464 = $1462 - $1463 | 0;
        $1465 = $1464 >> 4;
        $1466 = $1465 + 1 | 0;
        $1467 = ($1464 | 0) < -16;
        if ($1467) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1446);
        }
        $1468 = $1453;
        $1469 = $1468 - $1463 | 0;
        $1470 = $1469 >> 4;
        $1471 = $1470 >>> 0 < 1073741823;
        if ($1471) {
         $1472 = $1469 >> 3;
         $1473 = $1472 >>> 0 < $1466 >>> 0;
         $1474 = $1473 ? $1466 : $1472;
         $$0$i$i$i95 = $1474;
        } else {
         $$0$i$i$i95 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i94, $$0$i$i$i95, $1465, $1460);
        $1475 = $__v$i$i94 + 8 | 0;
        $1476 = SAFE_HEAP_LOAD($1475 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1476 | 0, 0 | 0, 4);
        $1477 = $1476 + 4 | 0;
        SAFE_HEAP_STORE($1477 | 0, 0 | 0, 4);
        $1478 = $1476 + 8 | 0;
        SAFE_HEAP_STORE($1478 | 0, 0 | 0, 4);
        $1479 = $1476 + 12 | 0;
        SAFE_HEAP_STORE($1479 | 0, $1449 | 0, 4);
        $1480 = $1476 + 16 | 0;
        SAFE_HEAP_STORE($1475 | 0, $1480 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1446, $__v$i$i94);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i94);
       }
       $1481 = $41 + 4 | 0;
       $1482 = $41 + 8 | 0;
       $1483 = $41 + 1 | 0;
       $1484 = $42 + 4 | 0;
       $1485 = $42 + 8 | 0;
       $1486 = $42 + 1 | 0;
       $1487 = $__v$i$i103 + 8 | 0;
       $1488 = $1436 >>> 0 < $1444 >>> 0;
       if ($1488) {
        $k8$0536 = $1436;
       } else {
        $$0 = $1438;
        break L1;
       }
       while (1) {
        $1489 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1490 = ($1489 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
        $1491 = SAFE_HEAP_LOAD($1490 >> 0 | 0, 1, 0) | 0 | 0;
        $1492 = $1491 & 1;
        $1493 = $1492 << 24 >> 24 == 0;
        $1494 = ($1489 + ($k8$0536 * 24 | 0) | 0) + 16 | 0;
        $1495 = SAFE_HEAP_LOAD($1494 | 0, 4, 0) | 0 | 0;
        $1496 = $1491 & 255;
        $1497 = $1496 >>> 1;
        $1498 = $1493 ? $1497 : $1495;
        $1499 = ($1489 + ($k8$0536 * 24 | 0) | 0) + 20 | 0;
        $1500 = SAFE_HEAP_LOAD($1499 | 0, 4, 0) | 0 | 0;
        $1501 = $1490 + 1 | 0;
        $1502 = $1493 ? $1501 : $1500;
        $1503 = $1498 >>> 0 < 2;
        $1504 = $1503 ? $1498 : 2;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($41, $1502, $1504);
        $1505 = SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0;
        $1506 = $1505 & 1;
        $1507 = $1506 << 24 >> 24 == 0;
        $1508 = SAFE_HEAP_LOAD($1481 | 0, 4, 0) | 0 | 0;
        $1509 = $1505 & 255;
        $1510 = $1509 >>> 1;
        $1511 = $1507 ? $1510 : $1508;
        $1512 = SAFE_HEAP_LOAD($1482 | 0, 4, 0) | 0 | 0;
        $1513 = $1507 ? $1483 : $1512;
        $1514 = $1511 >>> 0 > 2;
        $1515 = $1514 ? 2 : $1511;
        $1516 = _memcmp($1513, 10289, $1515) | 0;
        $1517 = ($1516 | 0) == 0;
        $1518 = $1511 >>> 0 < 2;
        $$$i$i$i99 = $1514 & 1;
        $$$$i$i$i100 = $1518 ? -1 : $$$i$i$i99;
        $1519 = $1517 ? $$$$i$i$i100 : $1516;
        $1520 = ($1519 | 0) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
        $1521 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        if ($1520) {
         $1522 = $1521 + ($k8$0536 * 24 | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1522, 10209) | 0;
         $1523 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1524 = ($1523 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1524, 0, 10212) | 0;
        } else {
         $1525 = ($1521 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
         $1526 = SAFE_HEAP_LOAD($1525 >> 0 | 0, 1, 0) | 0 | 0;
         $1527 = $1526 & 1;
         $1528 = $1527 << 24 >> 24 == 0;
         if ($1528) {
          $1531 = $1525 + 1 | 0;
          $1533 = $1531;
         } else {
          $1529 = ($1521 + ($k8$0536 * 24 | 0) | 0) + 20 | 0;
          $1530 = SAFE_HEAP_LOAD($1529 | 0, 4, 0) | 0 | 0;
          $1533 = $1530;
         }
         $1532 = SAFE_HEAP_LOAD($1533 >> 0 | 0, 1, 0) | 0 | 0;
         $1534 = $1532 << 24 >> 24 == 40;
         if ($1534) {
          $1535 = $1521 + ($k8$0536 * 24 | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1535, 10307) | 0;
          $1536 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1537 = ($1536 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1537, 0, 10212) | 0;
         }
        }
        $1538 = SAFE_HEAP_LOAD($1437 >> 0 | 0, 1, 0) | 0 | 0;
        $1539 = $1538 << 24 >> 24 == 85;
        $1540 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1541 = $1540 + ($k8$0536 * 24 | 0) | 0;
        do {
         if ($1539) {
          $1542 = SAFE_HEAP_LOAD($1541 >> 0 | 0, 1, 0) | 0 | 0;
          $1543 = $1542 & 1;
          $1544 = $1543 << 24 >> 24 == 0;
          $1545 = ($1540 + ($k8$0536 * 24 | 0) | 0) + 4 | 0;
          $1546 = SAFE_HEAP_LOAD($1545 | 0, 4, 0) | 0 | 0;
          $1547 = $1542 & 255;
          $1548 = $1547 >>> 1;
          $1549 = $1544 ? $1548 : $1546;
          $1550 = ($1540 + ($k8$0536 * 24 | 0) | 0) + 8 | 0;
          $1551 = SAFE_HEAP_LOAD($1550 | 0, 4, 0) | 0 | 0;
          $1552 = $1541 + 1 | 0;
          $1553 = $1544 ? $1552 : $1551;
          $1554 = $1549 >>> 0 < 12;
          $1555 = $1554 ? $1549 : 12;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42, $1553, $1555);
          $1556 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
          $1557 = $1556 & 1;
          $1558 = $1557 << 24 >> 24 == 0;
          $1559 = SAFE_HEAP_LOAD($1484 | 0, 4, 0) | 0 | 0;
          $1560 = $1556 & 255;
          $1561 = $1560 >>> 1;
          $1562 = $1558 ? $1561 : $1559;
          $1563 = SAFE_HEAP_LOAD($1485 | 0, 4, 0) | 0 | 0;
          $1564 = $1558 ? $1486 : $1563;
          $1565 = $1562 >>> 0 > 12;
          $1566 = $1565 ? 12 : $1562;
          $1567 = _memcmp($1564, 10339, $1566) | 0;
          $1568 = ($1567 | 0) == 0;
          $1569 = $1562 >>> 0 < 12;
          $$$i$i$i$i = $1565 & 1;
          $$$$i$i$i$i = $1569 ? -1 : $$$i$i$i$i;
          $1570 = $1568 ? $$$$i$i$i$i : $1567;
          $1571 = ($1570 | 0) == 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
          $1572 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1573 = $1572 + ($k8$0536 * 24 | 0) | 0;
          if ($1571) {
           $1575 = SAFE_HEAP_LOAD($1573 >> 0 | 0, 1, 0) | 0 | 0;
           $1576 = $1575 & 1;
           $1577 = $1576 << 24 >> 24 == 0;
           if ($1577) {
            $1578 = $1575 & 255;
            $1579 = $1578 >>> 1;
            $1580 = $1579 >>> 0 < 11;
            $1581 = $1580 ? $1579 : 11;
            $1590 = $1581;
            $1591 = $1579;
            $1593 = 10;
            $1596 = $1575;
           } else {
            $1582 = ($1572 + ($k8$0536 * 24 | 0) | 0) + 4 | 0;
            $1583 = SAFE_HEAP_LOAD($1582 | 0, 4, 0) | 0 | 0;
            $1584 = $1583 >>> 0 < 11;
            $1585 = $1584 ? $1583 : 11;
            $1586 = SAFE_HEAP_LOAD($1573 | 0, 4, 0) | 0 | 0;
            $1587 = $1586 & -2;
            $phitmp$i$i$i = $1587 + -1 | 0;
            $1588 = $1586 & 255;
            $1590 = $1585;
            $1591 = $1583;
            $1593 = $phitmp$i$i$i;
            $1596 = $1588;
           }
           $1589 = $1590 - $1591 | 0;
           $1592 = $1589 + $1593 | 0;
           $1594 = $1592 >>> 0 < 2;
           if ($1594) {
            $1630 = 2 - $1590 | 0;
            $1631 = $1630 + $1591 | 0;
            $1632 = $1631 - $1593 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1573, $1593, $1632, $1591, 0, $1590, 2, 10354);
            break;
           }
           $1595 = $1596 & 1;
           $1597 = $1595 << 24 >> 24 == 0;
           if ($1597) {
            $1600 = $1573 + 1 | 0;
            $1605 = $1600;
           } else {
            $1598 = ($1572 + ($k8$0536 * 24 | 0) | 0) + 8 | 0;
            $1599 = SAFE_HEAP_LOAD($1598 | 0, 4, 0) | 0 | 0;
            $1605 = $1599;
           }
           $1601 = ($1590 | 0) == 2;
           do {
            if ($1601) {
             $$1$i$i = 0;
             $$12$i$i = 10354;
             $$14$i$i = 2;
             $2887 = 2;
             label = 407;
            } else {
             $1602 = $1591 - $1590 | 0;
             $1603 = ($1591 | 0) == ($1590 | 0);
             if ($1603) {
              $$1$i$i = 0;
              $$12$i$i = 10354;
              $$14$i$i = 2;
              $2887 = $1590;
              label = 407;
             } else {
              $1604 = $1590 >>> 0 > 2;
              if ($1604) {
               SAFE_HEAP_STORE($1605 >> 0 | 0, 25705 & 255 | 0, 1);
               SAFE_HEAP_STORE($1605 + 1 >> 0 | 0, 25705 >> 8 | 0, 1);
               $1606 = $1605 + 2 | 0;
               $1607 = $1605 + $1590 | 0;
               _memmove($1606 | 0, $1607 | 0, $1602 | 0) | 0;
               $$2$i$i = 2;
               $1621 = $1590;
               break;
              }
              $1608 = $1605 >>> 0 < 10354 >>> 0;
              $1609 = $1605 + $1591 | 0;
              $1610 = $1609 >>> 0 > 10354 >>> 0;
              $or$cond$i$i = $1608 & $1610;
              do {
               if ($or$cond$i$i) {
                $1611 = $1605 + $1590 | 0;
                $1612 = $1611 >>> 0 > 10354 >>> 0;
                if ($1612) {
                 _memcpy($1605 | 0, 10354 | 0, $1590 | 0) | 0;
                 $1615 = 2 - $1590 | 0;
                 $$0$i$i = $1590;
                 $$01$i$i = 10356;
                 $$03$i$i = $1615;
                 $1617 = 0;
                 break;
                } else {
                 $1613 = 2 - $1590 | 0;
                 $1614 = 10354 + $1613 | 0;
                 $$0$i$i = 0;
                 $$01$i$i = $1614;
                 $$03$i$i = 2;
                 $1617 = $1590;
                 break;
                }
               } else {
                $$0$i$i = 0;
                $$01$i$i = 10354;
                $$03$i$i = 2;
                $1617 = $1590;
               }
              } while (0);
              $$sum$i$i = $$0$i$i + $$03$i$i | 0;
              $1616 = $1605 + $$sum$i$i | 0;
              $$sum1$i$i = $$0$i$i + $1617 | 0;
              $1618 = $1605 + $$sum1$i$i | 0;
              _memmove($1616 | 0, $1618 | 0, $1602 | 0) | 0;
              $$1$i$i = $$0$i$i;
              $$12$i$i = $$01$i$i;
              $$14$i$i = $$03$i$i;
              $2887 = $1617;
              label = 407;
             }
            }
           } while (0);
           if ((label | 0) == 407) {
            label = 0;
            $1619 = $1605 + $$1$i$i | 0;
            _memmove($1619 | 0, $$12$i$i | 0, $$14$i$i | 0) | 0;
            $$2$i$i = $$14$i$i;
            $1621 = $2887;
           }
           $1620 = $$2$i$i - $1621 | 0;
           $1622 = $1620 + $1591 | 0;
           $1623 = SAFE_HEAP_LOAD($1573 >> 0 | 0, 1, 0) | 0 | 0;
           $1624 = $1623 & 1;
           $1625 = $1624 << 24 >> 24 == 0;
           if ($1625) {
            $1627 = $1622 << 1;
            $1628 = $1627 & 255;
            SAFE_HEAP_STORE($1573 >> 0 | 0, $1628 | 0, 1);
           } else {
            $1626 = ($1572 + ($k8$0536 * 24 | 0) | 0) + 4 | 0;
            SAFE_HEAP_STORE($1626 | 0, $1622 | 0, 4);
           }
           $1629 = $1605 + $1622 | 0;
           SAFE_HEAP_STORE($1629 >> 0 | 0, 0 | 0, 1);
          } else {
           $1574 = $1573;
           label = 390;
          }
         } else {
          $1574 = $1541;
          label = 390;
         }
        } while (0);
        if ((label | 0) == 390) {
         label = 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1574, 10352) | 0;
        }
        $1633 = SAFE_HEAP_LOAD($1450 | 0, 4, 0) | 0 | 0;
        $1634 = $1633 + -16 | 0;
        $1635 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1636 = $1635 + ($k8$0536 * 24 | 0) | 0;
        $1637 = $1633 + -12 | 0;
        $1638 = SAFE_HEAP_LOAD($1637 | 0, 4, 0) | 0 | 0;
        $1639 = $1633 + -8 | 0;
        $1640 = SAFE_HEAP_LOAD($1639 | 0, 4, 0) | 0 | 0;
        $1641 = ($1638 | 0) == ($1640 | 0);
        if ($1641) {
         $1650 = $1633 + -4 | 0;
         $1651 = SAFE_HEAP_LOAD($1634 | 0, 4, 0) | 0 | 0;
         $1652 = $1638;
         $1653 = $1651;
         $1654 = $1652 - $1653 | 0;
         $1655 = ($1654 | 0) / 24 & -1;
         $1656 = $1655 + 1 | 0;
         $1657 = ($1654 | 0) < -24;
         if ($1657) {
          $$lcssa674 = $1634;
          label = 418;
          break;
         }
         $1658 = $1655 >>> 0 < 1073741823;
         if ($1658) {
          $1659 = $1655 << 1;
          $1660 = $1659 >>> 0 < $1656 >>> 0;
          $1661 = $1660 ? $1656 : $1659;
          $$0$i$i$i105 = $1661;
         } else {
          $$0$i$i$i105 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i103, $$0$i$i$i105, $1655, $1650);
         $1662 = SAFE_HEAP_LOAD($1487 | 0, 4, 0) | 0 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1662 | 0, $1636 | 0);
         $1663 = __THREW__;
         __THREW__ = 0;
         $1664 = $1663 & 1;
         if ($1664) {
          label = 424;
          break;
         }
         $1665 = $1662 + 12 | 0;
         $1666 = ($1635 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1665 | 0, $1666 | 0);
         $1667 = __THREW__;
         __THREW__ = 0;
         $1668 = $1667 & 1;
         if ($1668) {
          $$lcssa680 = $1662;
          label = 423;
          break;
         }
         $1673 = $1662 + 24 | 0;
         SAFE_HEAP_STORE($1487 | 0, $1673 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1634, $__v$i$i103);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i103);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1638, $1636);
         $1642 = $1638 + 12 | 0;
         $1643 = ($1635 + ($k8$0536 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1642 | 0, $1643 | 0);
         $1644 = __THREW__;
         __THREW__ = 0;
         $1645 = $1644 & 1;
         if ($1645) {
          $$lcssa678 = $1638;
          label = 415;
          break;
         }
         $1648 = SAFE_HEAP_LOAD($1637 | 0, 4, 0) | 0 | 0;
         $1649 = $1648 + 24 | 0;
         SAFE_HEAP_STORE($1637 | 0, $1649 | 0, 4);
        }
        $1674 = $k8$0536 + 1 | 0;
        $1675 = $1674 >>> 0 < $1444 >>> 0;
        if ($1675) {
         $k8$0536 = $1674;
        } else {
         $$0 = $1438;
         break L1;
        }
       }
       if ((label | 0) == 415) {
        $1646 = ___cxa_find_matching_catch() | 0;
        $1647 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa678);
        ___resumeException($1646 | 0);
       } else if ((label | 0) == 418) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa674);
       } else if ((label | 0) == 423) {
        $1669 = ___cxa_find_matching_catch() | 0;
        $1670 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa680);
        $eh$lpad$body$i$i108$index19Z2D = $1670;
        $eh$lpad$body$i$i108$indexZ2D = $1669;
       } else if ((label | 0) == 424) {
        $1671 = ___cxa_find_matching_catch() | 0;
        $1672 = tempRet0;
        $eh$lpad$body$i$i108$index19Z2D = $1672;
        $eh$lpad$body$i$i108$indexZ2D = $1671;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i103);
       ___resumeException($eh$lpad$body$i$i108$indexZ2D | 0);
       break;
      }
     case 82:
      {
       $1676 = $db + 4 | 0;
       $1677 = SAFE_HEAP_LOAD($1676 | 0, 4, 0) | 0 | 0;
       $1678 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1679 = $1677;
       $1680 = $1678;
       $1681 = $1679 - $1680 | 0;
       $1682 = ($1681 | 0) / 24 & -1;
       $1683 = $first + 1 | 0;
       $1684 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1683, $last, $db) | 0;
       $1685 = SAFE_HEAP_LOAD($1676 | 0, 4, 0) | 0 | 0;
       $1686 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1687 = $1685;
       $1688 = $1686;
       $1689 = $1687 - $1688 | 0;
       $1690 = ($1689 | 0) / 24 & -1;
       $1691 = ($1684 | 0) == ($1683 | 0);
       if ($1691) {
        $$0 = $first;
        break L1;
       }
       $1692 = $db + 16 | 0;
       $1693 = $db + 12 | 0;
       $1694 = SAFE_HEAP_LOAD($1693 | 0, 4, 0) | 0 | 0;
       $1695 = $1694;
       $1696 = $db + 20 | 0;
       $1697 = SAFE_HEAP_LOAD($1696 | 0, 4, 0) | 0 | 0;
       $1698 = $db + 24 | 0;
       $1699 = SAFE_HEAP_LOAD($1698 | 0, 4, 0) | 0 | 0;
       $1700 = $1697 >>> 0 < $1699 >>> 0;
       if ($1700) {
        SAFE_HEAP_STORE($1697 | 0, 0 | 0, 4);
        $1701 = $1697 + 4 | 0;
        SAFE_HEAP_STORE($1701 | 0, 0 | 0, 4);
        $1702 = $1697 + 8 | 0;
        SAFE_HEAP_STORE($1702 | 0, 0 | 0, 4);
        $1703 = $1697 + 12 | 0;
        SAFE_HEAP_STORE($1703 | 0, $1695 | 0, 4);
        $1704 = SAFE_HEAP_LOAD($1696 | 0, 4, 0) | 0 | 0;
        $1705 = $1704 + 16 | 0;
        SAFE_HEAP_STORE($1696 | 0, $1705 | 0, 4);
       } else {
        $1706 = $db + 28 | 0;
        $1707 = SAFE_HEAP_LOAD($1692 | 0, 4, 0) | 0 | 0;
        $1708 = $1697;
        $1709 = $1707;
        $1710 = $1708 - $1709 | 0;
        $1711 = $1710 >> 4;
        $1712 = $1711 + 1 | 0;
        $1713 = ($1710 | 0) < -16;
        if ($1713) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1692);
        }
        $1714 = $1699;
        $1715 = $1714 - $1709 | 0;
        $1716 = $1715 >> 4;
        $1717 = $1716 >>> 0 < 1073741823;
        if ($1717) {
         $1718 = $1715 >> 3;
         $1719 = $1718 >>> 0 < $1712 >>> 0;
         $1720 = $1719 ? $1712 : $1718;
         $$0$i$i$i113 = $1720;
        } else {
         $$0$i$i$i113 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i112, $$0$i$i$i113, $1711, $1706);
        $1721 = $__v$i$i112 + 8 | 0;
        $1722 = SAFE_HEAP_LOAD($1721 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1722 | 0, 0 | 0, 4);
        $1723 = $1722 + 4 | 0;
        SAFE_HEAP_STORE($1723 | 0, 0 | 0, 4);
        $1724 = $1722 + 8 | 0;
        SAFE_HEAP_STORE($1724 | 0, 0 | 0, 4);
        $1725 = $1722 + 12 | 0;
        SAFE_HEAP_STORE($1725 | 0, $1695 | 0, 4);
        $1726 = $1722 + 16 | 0;
        SAFE_HEAP_STORE($1721 | 0, $1726 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1692, $__v$i$i112);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i112);
       }
       $1727 = $43 + 4 | 0;
       $1728 = $43 + 8 | 0;
       $1729 = $43 + 1 | 0;
       $1730 = $__v$i$i121 + 8 | 0;
       $1731 = $1682 >>> 0 < $1690 >>> 0;
       if ($1731) {
        $k11$0540 = $1682;
       } else {
        $$0 = $1684;
        break L1;
       }
       while (1) {
        $1732 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1733 = ($1732 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
        $1734 = SAFE_HEAP_LOAD($1733 >> 0 | 0, 1, 0) | 0 | 0;
        $1735 = $1734 & 1;
        $1736 = $1735 << 24 >> 24 == 0;
        $1737 = ($1732 + ($k11$0540 * 24 | 0) | 0) + 16 | 0;
        $1738 = SAFE_HEAP_LOAD($1737 | 0, 4, 0) | 0 | 0;
        $1739 = $1734 & 255;
        $1740 = $1739 >>> 1;
        $1741 = $1736 ? $1740 : $1738;
        $1742 = ($1732 + ($k11$0540 * 24 | 0) | 0) + 20 | 0;
        $1743 = SAFE_HEAP_LOAD($1742 | 0, 4, 0) | 0 | 0;
        $1744 = $1733 + 1 | 0;
        $1745 = $1736 ? $1744 : $1743;
        $1746 = $1741 >>> 0 < 2;
        $1747 = $1746 ? $1741 : 2;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($43, $1745, $1747);
        $1748 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0;
        $1749 = $1748 & 1;
        $1750 = $1749 << 24 >> 24 == 0;
        $1751 = SAFE_HEAP_LOAD($1727 | 0, 4, 0) | 0 | 0;
        $1752 = $1748 & 255;
        $1753 = $1752 >>> 1;
        $1754 = $1750 ? $1753 : $1751;
        $1755 = SAFE_HEAP_LOAD($1728 | 0, 4, 0) | 0 | 0;
        $1756 = $1750 ? $1729 : $1755;
        $1757 = $1754 >>> 0 > 2;
        $1758 = $1757 ? 2 : $1754;
        $1759 = _memcmp($1756, 10289, $1758) | 0;
        $1760 = ($1759 | 0) == 0;
        $1761 = $1754 >>> 0 < 2;
        $$$i$i$i117 = $1757 & 1;
        $$$$i$i$i118 = $1761 ? -1 : $$$i$i$i117;
        $1762 = $1760 ? $$$$i$i$i118 : $1759;
        $1763 = ($1762 | 0) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
        $1764 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        if ($1763) {
         $1765 = $1764 + ($k11$0540 * 24 | 0) | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1765, 10209) | 0;
         $1766 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1767 = ($1766 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1767, 0, 10212) | 0;
        } else {
         $1768 = ($1764 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
         $1769 = SAFE_HEAP_LOAD($1768 >> 0 | 0, 1, 0) | 0 | 0;
         $1770 = $1769 & 1;
         $1771 = $1770 << 24 >> 24 == 0;
         if ($1771) {
          $1774 = $1768 + 1 | 0;
          $1776 = $1774;
         } else {
          $1772 = ($1764 + ($k11$0540 * 24 | 0) | 0) + 20 | 0;
          $1773 = SAFE_HEAP_LOAD($1772 | 0, 4, 0) | 0 | 0;
          $1776 = $1773;
         }
         $1775 = SAFE_HEAP_LOAD($1776 >> 0 | 0, 1, 0) | 0 | 0;
         $1777 = $1775 << 24 >> 24 == 40;
         if ($1777) {
          $1778 = $1764 + ($k11$0540 * 24 | 0) | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1778, 10307) | 0;
          $1779 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1780 = ($1779 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1780, 0, 10212) | 0;
         }
        }
        $1781 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1782 = $1781 + ($k11$0540 * 24 | 0) | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1782, 10357) | 0;
        $1783 = SAFE_HEAP_LOAD($1696 | 0, 4, 0) | 0 | 0;
        $1784 = $1783 + -16 | 0;
        $1785 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $1786 = $1785 + ($k11$0540 * 24 | 0) | 0;
        $1787 = $1783 + -12 | 0;
        $1788 = SAFE_HEAP_LOAD($1787 | 0, 4, 0) | 0 | 0;
        $1789 = $1783 + -8 | 0;
        $1790 = SAFE_HEAP_LOAD($1789 | 0, 4, 0) | 0 | 0;
        $1791 = ($1788 | 0) == ($1790 | 0);
        if ($1791) {
         $1800 = $1783 + -4 | 0;
         $1801 = SAFE_HEAP_LOAD($1784 | 0, 4, 0) | 0 | 0;
         $1802 = $1788;
         $1803 = $1801;
         $1804 = $1802 - $1803 | 0;
         $1805 = ($1804 | 0) / 24 & -1;
         $1806 = $1805 + 1 | 0;
         $1807 = ($1804 | 0) < -24;
         if ($1807) {
          $$lcssa682 = $1784;
          label = 449;
          break;
         }
         $1808 = $1805 >>> 0 < 1073741823;
         if ($1808) {
          $1809 = $1805 << 1;
          $1810 = $1809 >>> 0 < $1806 >>> 0;
          $1811 = $1810 ? $1806 : $1809;
          $$0$i$i$i123 = $1811;
         } else {
          $$0$i$i$i123 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i121, $$0$i$i$i123, $1805, $1800);
         $1812 = SAFE_HEAP_LOAD($1730 | 0, 4, 0) | 0 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1812 | 0, $1786 | 0);
         $1813 = __THREW__;
         __THREW__ = 0;
         $1814 = $1813 & 1;
         if ($1814) {
          label = 455;
          break;
         }
         $1815 = $1812 + 12 | 0;
         $1816 = ($1785 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1815 | 0, $1816 | 0);
         $1817 = __THREW__;
         __THREW__ = 0;
         $1818 = $1817 & 1;
         if ($1818) {
          $$lcssa688 = $1812;
          label = 454;
          break;
         }
         $1823 = $1812 + 24 | 0;
         SAFE_HEAP_STORE($1730 | 0, $1823 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1784, $__v$i$i121);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i121);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1788, $1786);
         $1792 = $1788 + 12 | 0;
         $1793 = ($1785 + ($k11$0540 * 24 | 0) | 0) + 12 | 0;
         __THREW__ = 0;
         invoke_vii(236, $1792 | 0, $1793 | 0);
         $1794 = __THREW__;
         __THREW__ = 0;
         $1795 = $1794 & 1;
         if ($1795) {
          $$lcssa686 = $1788;
          label = 446;
          break;
         }
         $1798 = SAFE_HEAP_LOAD($1787 | 0, 4, 0) | 0 | 0;
         $1799 = $1798 + 24 | 0;
         SAFE_HEAP_STORE($1787 | 0, $1799 | 0, 4);
        }
        $1824 = $k11$0540 + 1 | 0;
        $1825 = $1824 >>> 0 < $1690 >>> 0;
        if ($1825) {
         $k11$0540 = $1824;
        } else {
         $$0 = $1684;
         break L1;
        }
       }
       if ((label | 0) == 446) {
        $1796 = ___cxa_find_matching_catch() | 0;
        $1797 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa686);
        ___resumeException($1796 | 0);
       } else if ((label | 0) == 449) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa682);
       } else if ((label | 0) == 454) {
        $1819 = ___cxa_find_matching_catch() | 0;
        $1820 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa688);
        $eh$lpad$body$i$i126$index24Z2D = $1820;
        $eh$lpad$body$i$i126$indexZ2D = $1819;
       } else if ((label | 0) == 455) {
        $1821 = ___cxa_find_matching_catch() | 0;
        $1822 = tempRet0;
        $eh$lpad$body$i$i126$index24Z2D = $1822;
        $eh$lpad$body$i$i126$indexZ2D = $1821;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i121);
       ___resumeException($eh$lpad$body$i$i126$indexZ2D | 0);
       break;
      }
     case 84:
      {
       $1826 = $db + 4 | 0;
       $1827 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
       $1828 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1829 = $1827;
       $1830 = $1828;
       $1831 = $1829 - $1830 | 0;
       $1832 = ($1831 | 0) / 24 & -1;
       $1833 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
       $1834 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
       $1835 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1836 = $1834;
       $1837 = $1835;
       $1838 = $1836 - $1837 | 0;
       $1839 = ($1838 | 0) / 24 & -1;
       $1840 = ($1833 | 0) == ($first | 0);
       if ($1840) {
        $$0 = $first;
        break L1;
       }
       $1841 = $db + 16 | 0;
       $1842 = $db + 12 | 0;
       $1843 = SAFE_HEAP_LOAD($1842 | 0, 4, 0) | 0 | 0;
       $1844 = $1843;
       $1845 = $db + 20 | 0;
       $1846 = SAFE_HEAP_LOAD($1845 | 0, 4, 0) | 0 | 0;
       $1847 = $db + 24 | 0;
       $1848 = SAFE_HEAP_LOAD($1847 | 0, 4, 0) | 0 | 0;
       $1849 = $1846 >>> 0 < $1848 >>> 0;
       if ($1849) {
        SAFE_HEAP_STORE($1846 | 0, 0 | 0, 4);
        $1850 = $1846 + 4 | 0;
        SAFE_HEAP_STORE($1850 | 0, 0 | 0, 4);
        $1851 = $1846 + 8 | 0;
        SAFE_HEAP_STORE($1851 | 0, 0 | 0, 4);
        $1852 = $1846 + 12 | 0;
        SAFE_HEAP_STORE($1852 | 0, $1844 | 0, 4);
        $1853 = SAFE_HEAP_LOAD($1845 | 0, 4, 0) | 0 | 0;
        $1854 = $1853 + 16 | 0;
        SAFE_HEAP_STORE($1845 | 0, $1854 | 0, 4);
       } else {
        $1855 = $db + 28 | 0;
        $1856 = SAFE_HEAP_LOAD($1841 | 0, 4, 0) | 0 | 0;
        $1857 = $1846;
        $1858 = $1856;
        $1859 = $1857 - $1858 | 0;
        $1860 = $1859 >> 4;
        $1861 = $1860 + 1 | 0;
        $1862 = ($1859 | 0) < -16;
        if ($1862) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1841);
        }
        $1863 = $1848;
        $1864 = $1863 - $1858 | 0;
        $1865 = $1864 >> 4;
        $1866 = $1865 >>> 0 < 1073741823;
        if ($1866) {
         $1867 = $1864 >> 3;
         $1868 = $1867 >>> 0 < $1861 >>> 0;
         $1869 = $1868 ? $1861 : $1867;
         $$0$i$i$i131 = $1869;
        } else {
         $$0$i$i$i131 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i130, $$0$i$i$i131, $1860, $1855);
        $1870 = $__v$i$i130 + 8 | 0;
        $1871 = SAFE_HEAP_LOAD($1870 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($1871 | 0, 0 | 0, 4);
        $1872 = $1871 + 4 | 0;
        SAFE_HEAP_STORE($1872 | 0, 0 | 0, 4);
        $1873 = $1871 + 8 | 0;
        SAFE_HEAP_STORE($1873 | 0, 0 | 0, 4);
        $1874 = $1871 + 12 | 0;
        SAFE_HEAP_STORE($1874 | 0, $1844 | 0, 4);
        $1875 = $1871 + 16 | 0;
        SAFE_HEAP_STORE($1870 | 0, $1875 | 0, 4);
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1841, $__v$i$i130);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i130);
       }
       $1876 = $__v$i$i134 + 8 | 0;
       $1877 = $1832 >>> 0 < $1839 >>> 0;
       L626 : do {
        if ($1877) {
         $k15$0543 = $1832;
         while (1) {
          $1878 = SAFE_HEAP_LOAD($1845 | 0, 4, 0) | 0 | 0;
          $1879 = $1878 + -16 | 0;
          $1880 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $1881 = $1880 + ($k15$0543 * 24 | 0) | 0;
          $1882 = $1878 + -12 | 0;
          $1883 = SAFE_HEAP_LOAD($1882 | 0, 4, 0) | 0 | 0;
          $1884 = $1878 + -8 | 0;
          $1885 = SAFE_HEAP_LOAD($1884 | 0, 4, 0) | 0 | 0;
          $1886 = ($1883 | 0) == ($1885 | 0);
          if ($1886) {
           $1895 = $1878 + -4 | 0;
           $1896 = SAFE_HEAP_LOAD($1879 | 0, 4, 0) | 0 | 0;
           $1897 = $1883;
           $1898 = $1896;
           $1899 = $1897 - $1898 | 0;
           $1900 = ($1899 | 0) / 24 & -1;
           $1901 = $1900 + 1 | 0;
           $1902 = ($1899 | 0) < -24;
           if ($1902) {
            $$lcssa690 = $1879;
            label = 473;
            break;
           }
           $1903 = $1900 >>> 0 < 1073741823;
           if ($1903) {
            $1904 = $1900 << 1;
            $1905 = $1904 >>> 0 < $1901 >>> 0;
            $1906 = $1905 ? $1901 : $1904;
            $$0$i$i$i136 = $1906;
           } else {
            $$0$i$i$i136 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i134, $$0$i$i$i136, $1900, $1895);
           $1907 = SAFE_HEAP_LOAD($1876 | 0, 4, 0) | 0 | 0;
           __THREW__ = 0;
           invoke_vii(236, $1907 | 0, $1881 | 0);
           $1908 = __THREW__;
           __THREW__ = 0;
           $1909 = $1908 & 1;
           if ($1909) {
            label = 479;
            break;
           }
           $1910 = $1907 + 12 | 0;
           $1911 = ($1880 + ($k15$0543 * 24 | 0) | 0) + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $1910 | 0, $1911 | 0);
           $1912 = __THREW__;
           __THREW__ = 0;
           $1913 = $1912 & 1;
           if ($1913) {
            $$lcssa696 = $1907;
            label = 478;
            break;
           }
           $1918 = $1907 + 24 | 0;
           SAFE_HEAP_STORE($1876 | 0, $1918 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1879, $__v$i$i134);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i134);
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1883, $1881);
           $1887 = $1883 + 12 | 0;
           $1888 = ($1880 + ($k15$0543 * 24 | 0) | 0) + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $1887 | 0, $1888 | 0);
           $1889 = __THREW__;
           __THREW__ = 0;
           $1890 = $1889 & 1;
           if ($1890) {
            $$lcssa694 = $1883;
            label = 470;
            break;
           }
           $1893 = SAFE_HEAP_LOAD($1882 | 0, 4, 0) | 0 | 0;
           $1894 = $1893 + 24 | 0;
           SAFE_HEAP_STORE($1882 | 0, $1894 | 0, 4);
          }
          $1919 = $k15$0543 + 1 | 0;
          $1920 = $1919 >>> 0 < $1839 >>> 0;
          if ($1920) {
           $k15$0543 = $1919;
          } else {
           break L626;
          }
         }
         if ((label | 0) == 470) {
          $1891 = ___cxa_find_matching_catch() | 0;
          $1892 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa694);
          ___resumeException($1891 | 0);
         } else if ((label | 0) == 473) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa690);
         } else if ((label | 0) == 478) {
          $1914 = ___cxa_find_matching_catch() | 0;
          $1915 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa696);
          $eh$lpad$body$i$i139$index29Z2D = $1915;
          $eh$lpad$body$i$i139$indexZ2D = $1914;
         } else if ((label | 0) == 479) {
          $1916 = ___cxa_find_matching_catch() | 0;
          $1917 = tempRet0;
          $eh$lpad$body$i$i139$index29Z2D = $1917;
          $eh$lpad$body$i$i139$indexZ2D = $1916;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i134);
         ___resumeException($eh$lpad$body$i$i139$indexZ2D | 0);
        }
       } while (0);
       $1921 = $db + 63 | 0;
       $1922 = SAFE_HEAP_LOAD($1921 >> 0 | 0, 1, 0) | 0 | 0;
       $1923 = $1922 << 24 >> 24 != 0;
       $1924 = $1832 + 1 | 0;
       $1925 = ($1839 | 0) == ($1924 | 0);
       $or$cond = $1925 & $1923;
       if (!$or$cond) {
        $$0 = $1833;
        break L1;
       }
       $1926 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1833, $last, $db) | 0;
       $1927 = ($1926 | 0) == ($1833 | 0);
       if ($1927) {
        $$0 = $1833;
        break L1;
       }
       $1928 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
       $1929 = $1928 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $1929);
       $1930 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
       $1931 = $1930 + -24 | 0;
       $1933 = $1930;
       while (1) {
        $1932 = $1933 + -24 | 0;
        SAFE_HEAP_STORE($1826 | 0, $1932 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1932);
        $$pre$i143 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
        $1934 = ($$pre$i143 | 0) == ($1931 | 0);
        if ($1934) {
         break;
        } else {
         $1933 = $$pre$i143;
        }
       }
       $1935 = $1930 + -48 | 0;
       $1936 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
       $1937 = $1936 & 1;
       $1938 = $1937 << 24 >> 24 == 0;
       $1939 = $args + 8 | 0;
       $1940 = SAFE_HEAP_LOAD($1939 | 0, 4, 0) | 0 | 0;
       $1941 = $args + 1 | 0;
       $1942 = $1938 ? $1941 : $1940;
       $1943 = $args + 4 | 0;
       $1944 = SAFE_HEAP_LOAD($1943 | 0, 4, 0) | 0 | 0;
       $1945 = $1936 & 255;
       $1946 = $1945 >>> 1;
       $1947 = $1938 ? $1946 : $1944;
       __THREW__ = 0;
       invoke_iiii(222, $1935 | 0, $1942 | 0, $1947 | 0) | 0;
       $1948 = __THREW__;
       __THREW__ = 0;
       $1949 = $1948 & 1;
       do {
        if ($1949) {
         label = 497;
        } else {
         $1950 = SAFE_HEAP_LOAD($1826 | 0, 4, 0) | 0 | 0;
         $1951 = $1950 + -24 | 0;
         $1952 = SAFE_HEAP_LOAD($1842 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($45 | 0, $1952 | 0, 4);
         __THREW__ = 0;
         invoke_viii(239, $44 | 0, $1951 | 0, $45 | 0);
         $1953 = __THREW__;
         __THREW__ = 0;
         $1954 = $1953 & 1;
         if ($1954) {
          label = 497;
         } else {
          $1955 = SAFE_HEAP_LOAD($1845 | 0, 4, 0) | 0 | 0;
          $1956 = SAFE_HEAP_LOAD($1847 | 0, 4, 0) | 0 | 0;
          $1957 = $1955 >>> 0 < $1956 >>> 0;
          if ($1957) {
           $1958 = $44 + 12 | 0;
           $1959 = $1955 + 4 | 0;
           $1960 = SAFE_HEAP_LOAD($1958 | 0, 4, 0) | 0 | 0;
           $1961 = $1955 + 12 | 0;
           SAFE_HEAP_STORE($1961 | 0, $1960 | 0, 4);
           $1962 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($1955 | 0, $1962 | 0, 4);
           $1963 = $44 + 4 | 0;
           $1964 = SAFE_HEAP_LOAD($1963 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($1959 | 0, $1964 | 0, 4);
           $1965 = $44 + 8 | 0;
           $1966 = SAFE_HEAP_LOAD($1965 | 0, 4, 0) | 0 | 0;
           $1967 = $1955 + 8 | 0;
           SAFE_HEAP_STORE($1967 | 0, $1966 | 0, 4);
           SAFE_HEAP_STORE($1965 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($1963 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
           $1968 = SAFE_HEAP_LOAD($1845 | 0, 4, 0) | 0 | 0;
           $1969 = $1968 + 16 | 0;
           SAFE_HEAP_STORE($1845 | 0, $1969 | 0, 4);
          } else {
           $1970 = $db + 28 | 0;
           $1971 = SAFE_HEAP_LOAD($1841 | 0, 4, 0) | 0 | 0;
           $1972 = $1955;
           $1973 = $1971;
           $1974 = $1972 - $1973 | 0;
           $1975 = $1974 >> 4;
           $1976 = $1975 + 1 | 0;
           $1977 = ($1974 | 0) < -16;
           if ($1977) {
            __THREW__ = 0;
            invoke_vi(238, $1841 | 0);
            $1978 = __THREW__;
            __THREW__ = 0;
            $1979 = ___cxa_find_matching_catch() | 0;
            $1980 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($44);
            $$02 = $1979;
            $$03 = $1980;
            break;
           }
           $1981 = $1956;
           $1982 = $1981 - $1973 | 0;
           $1983 = $1982 >> 4;
           $1984 = $1983 >>> 0 < 1073741823;
           if ($1984) {
            $1985 = $1982 >> 3;
            $1986 = $1985 >>> 0 < $1976 >>> 0;
            $1987 = $1986 ? $1976 : $1985;
            $$0$i$i$i148 = $1987;
           } else {
            $$0$i$i$i148 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i147, $$0$i$i$i148, $1975, $1970);
           $1988 = $__v$i$i147 + 8 | 0;
           $1989 = SAFE_HEAP_LOAD($1988 | 0, 4, 0) | 0 | 0;
           $1990 = $44 + 12 | 0;
           $1991 = $1989 + 4 | 0;
           $1992 = SAFE_HEAP_LOAD($1990 | 0, 4, 0) | 0 | 0;
           $1993 = $1989 + 12 | 0;
           SAFE_HEAP_STORE($1993 | 0, $1992 | 0, 4);
           $1994 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($1989 | 0, $1994 | 0, 4);
           $1995 = $44 + 4 | 0;
           $1996 = SAFE_HEAP_LOAD($1995 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($1991 | 0, $1996 | 0, 4);
           $1997 = $44 + 8 | 0;
           $1998 = SAFE_HEAP_LOAD($1997 | 0, 4, 0) | 0 | 0;
           $1999 = $1989 + 8 | 0;
           SAFE_HEAP_STORE($1999 | 0, $1998 | 0, 4);
           SAFE_HEAP_STORE($1997 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($1995 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
           $2000 = $1989 + 16 | 0;
           SAFE_HEAP_STORE($1988 | 0, $2000 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1841, $__v$i$i147);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i147);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($44);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
          $$0 = $1926;
          break L1;
         }
        }
       } while (0);
       if ((label | 0) == 497) {
        $2001 = ___cxa_find_matching_catch() | 0;
        $2002 = tempRet0;
        $$02 = $2001;
        $$03 = $2002;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$10 = $$02;
       $$1013 = $$03;
       break;
      }
     case 85:
      {
       $2003 = $first + 1 | 0;
       $2004 = ($2003 | 0) == ($last | 0);
       if ($2004) {
        $$0 = $first;
        break L1;
       }
       $2005 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($2003, $last, $db) | 0;
       $2006 = ($2005 | 0) == ($2003 | 0);
       if ($2006) {
        $$0 = $first;
        break L1;
       }
       $2007 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2005, $last, $db) | 0;
       $2008 = ($2007 | 0) == ($2005 | 0);
       if ($2008) {
        $$0 = $first;
        break L1;
       }
       $2009 = $db + 4 | 0;
       $2010 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
       $2011 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $2012 = $2010;
       $2013 = $2011;
       $2014 = $2012 - $2013 | 0;
       $2015 = ($2014 | 0) / 24 & -1;
       $2016 = $2015 >>> 0 < 2;
       if ($2016) {
        $$0 = $first;
        break L1;
       }
       $2017 = $2010 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type, $2017);
       $2018 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
       $2019 = $2018 + -24 | 0;
       $2021 = $2018;
       while (1) {
        $2020 = $2021 + -24 | 0;
        SAFE_HEAP_STORE($2009 | 0, $2020 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2020);
        $$pre$i157 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
        $2022 = ($$pre$i157 | 0) == ($2019 | 0);
        if ($2022) {
         break;
        } else {
         $2021 = $$pre$i157;
        }
       }
       $2023 = $2018 + -48 | 0;
       $2024 = SAFE_HEAP_LOAD($2023 >> 0 | 0, 1, 0) | 0 | 0;
       $2025 = $2024 & 1;
       $2026 = $2025 << 24 >> 24 == 0;
       $2027 = $2018 + -44 | 0;
       $2028 = SAFE_HEAP_LOAD($2027 | 0, 4, 0) | 0 | 0;
       $2029 = $2024 & 255;
       $2030 = $2029 >>> 1;
       $2031 = $2026 ? $2030 : $2028;
       $2032 = $2018 + -40 | 0;
       $2033 = SAFE_HEAP_LOAD($2032 | 0, 4, 0) | 0 | 0;
       $2034 = $2023 + 1 | 0;
       $2035 = $2026 ? $2034 : $2033;
       $2036 = $2031 >>> 0 < 9;
       $2037 = $2036 ? $2031 : 9;
       __THREW__ = 0;
       invoke_viii(237, $46 | 0, $2035 | 0, $2037 | 0);
       $2038 = __THREW__;
       __THREW__ = 0;
       $2039 = $2038 & 1;
       L676 : do {
        if ($2039) {
         label = 511;
        } else {
         $2040 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
         $2041 = $2040 & 1;
         $2042 = $2041 << 24 >> 24 == 0;
         $2043 = $46 + 4 | 0;
         $2044 = SAFE_HEAP_LOAD($2043 | 0, 4, 0) | 0 | 0;
         $2045 = $2040 & 255;
         $2046 = $2045 >>> 1;
         $2047 = $2042 ? $2046 : $2044;
         $2048 = $46 + 8 | 0;
         $2049 = SAFE_HEAP_LOAD($2048 | 0, 4, 0) | 0 | 0;
         $2050 = $46 + 1 | 0;
         $2051 = $2042 ? $2050 : $2049;
         $2052 = $2047 >>> 0 > 9;
         $2053 = $2052 ? 9 : $2047;
         $2054 = _memcmp($2051, 10359, $2053) | 0;
         $2055 = ($2054 | 0) == 0;
         $2056 = $2047 >>> 0 < 9;
         $$$i$i$i$i161 = $2052 & 1;
         $$$$i$i$i$i162 = $2056 ? -1 : $$$i$i$i$i161;
         $2057 = $2055 ? $$$$i$i$i$i162 : $2054;
         $2058 = ($2057 | 0) == 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
         $2059 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
         $2060 = $2059 + -24 | 0;
         __THREW__ = 0;
         L678 : do {
          if ($2058) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($proto, $2060);
           $2090 = __THREW__;
           __THREW__ = 0;
           $2091 = $2090 & 1;
           if ($2091) {
            label = 511;
            break L676;
           }
           $2092 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
           $2093 = $2092 + -24 | 0;
           $2095 = $2092;
           while (1) {
            $2094 = $2095 + -24 | 0;
            SAFE_HEAP_STORE($2009 | 0, $2094 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2094);
            $$pre$i165 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
            $2096 = ($$pre$i165 | 0) == ($2093 | 0);
            if ($2096) {
             break;
            } else {
             $2095 = $$pre$i165;
            }
           }
           $2097 = SAFE_HEAP_LOAD($proto >> 0 | 0, 1, 0) | 0 | 0;
           $2098 = $2097 & 1;
           $2099 = $2098 << 24 >> 24 == 0;
           $2100 = $proto + 8 | 0;
           $2101 = SAFE_HEAP_LOAD($2100 | 0, 4, 0) | 0 | 0;
           $2102 = $proto + 1 | 0;
           $2103 = $2099 ? $2102 : $2101;
           $2104 = $2103 + 9 | 0;
           $2105 = $proto + 4 | 0;
           $2106 = SAFE_HEAP_LOAD($2105 | 0, 4, 0) | 0 | 0;
           $2107 = $2097 & 255;
           $2108 = $2107 >>> 1;
           $2109 = $2099 ? $2108 : $2106;
           $2110 = $2103 + $2109 | 0;
           __THREW__ = 0;
           $2111 = invoke_iiii(240, $2104 | 0, $2110 | 0, $db | 0) | 0;
           $2112 = __THREW__;
           __THREW__ = 0;
           $2113 = $2112 & 1;
           L684 : do {
            if ($2113) {
             label = 525;
            } else {
             $2114 = SAFE_HEAP_LOAD($proto >> 0 | 0, 1, 0) | 0 | 0;
             $2115 = $2114 & 1;
             $2116 = $2115 << 24 >> 24 == 0;
             $2117 = SAFE_HEAP_LOAD($2100 | 0, 4, 0) | 0 | 0;
             $2118 = $2116 ? $2102 : $2117;
             $2119 = $2118 + 9 | 0;
             $2120 = ($2111 | 0) == ($2119 | 0);
             L686 : do {
              if ($2120) {
               __THREW__ = 0;
               invoke_viii(241, $58 | 0, $type | 0, 10319 | 0);
               $2159 = __THREW__;
               __THREW__ = 0;
               $2160 = $2159 & 1;
               if ($2160) {
                label = 525;
                break L684;
               }
               $2161 = SAFE_HEAP_LOAD($proto >> 0 | 0, 1, 0) | 0 | 0;
               $2162 = $2161 & 1;
               $2163 = $2162 << 24 >> 24 == 0;
               $2164 = SAFE_HEAP_LOAD($2100 | 0, 4, 0) | 0 | 0;
               $2165 = $2163 ? $2102 : $2164;
               $2166 = SAFE_HEAP_LOAD($2105 | 0, 4, 0) | 0 | 0;
               $2167 = $2161 & 255;
               $2168 = $2167 >>> 1;
               $2169 = $2163 ? $2168 : $2166;
               __THREW__ = 0;
               $2170 = invoke_iiii(222, $58 | 0, $2165 | 0, $2169 | 0) | 0;
               $2171 = __THREW__;
               __THREW__ = 0;
               $2172 = $2171 & 1;
               do {
                if ($2172) {
                 $2202 = ___cxa_find_matching_catch() | 0;
                 $2203 = tempRet0;
                 $$6 = $2202;
                 $$69 = $2203;
                } else {
                 {}
                 SAFE_HEAP_STORE($57 | 0, SAFE_HEAP_LOAD($2170 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($57 + 4 | 0, SAFE_HEAP_LOAD($2170 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($57 + 8 | 0, SAFE_HEAP_LOAD($2170 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($2170 | 0, 0 | 0, 4);
                 $2173 = $2170 + 4 | 0;
                 SAFE_HEAP_STORE($2173 | 0, 0 | 0, 4);
                 $2174 = $2170 + 8 | 0;
                 SAFE_HEAP_STORE($2174 | 0, 0 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($56, $57);
                 $2175 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
                 $2176 = $db + 8 | 0;
                 $2177 = SAFE_HEAP_LOAD($2176 | 0, 4, 0) | 0 | 0;
                 $2178 = $2175 >>> 0 < $2177 >>> 0;
                 if ($2178) {
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2175, $56);
                  $2179 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
                  $2180 = $2179 + 24 | 0;
                  SAFE_HEAP_STORE($2009 | 0, $2180 | 0, 4);
                 } else {
                  $2181 = $db + 12 | 0;
                  $2182 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $2183 = $2175;
                  $2184 = $2182;
                  $2185 = $2183 - $2184 | 0;
                  $2186 = ($2185 | 0) / 24 & -1;
                  $2187 = $2186 + 1 | 0;
                  $2188 = ($2185 | 0) < -24;
                  if ($2188) {
                   __THREW__ = 0;
                   invoke_vi(238, $db | 0);
                   $2189 = __THREW__;
                   __THREW__ = 0;
                   $2190 = ___cxa_find_matching_catch() | 0;
                   $2191 = tempRet0;
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
                   $$6 = $2190;
                   $$69 = $2191;
                   break;
                  }
                  $2192 = $2177;
                  $2193 = $2192 - $2184 | 0;
                  $2194 = ($2193 | 0) / 24 & -1;
                  $2195 = $2194 >>> 0 < 1073741823;
                  if ($2195) {
                   $2196 = $2194 << 1;
                   $2197 = $2196 >>> 0 < $2187 >>> 0;
                   $2198 = $2197 ? $2187 : $2196;
                   $$0$i$i$i181 = $2198;
                  } else {
                   $$0$i$i$i181 = 2147483647;
                  }
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i180, $$0$i$i$i181, $2186, $2181);
                  $2199 = $__v$i$i180 + 8 | 0;
                  $2200 = SAFE_HEAP_LOAD($2199 | 0, 4, 0) | 0 | 0;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2200, $56);
                  $2201 = $2200 + 24 | 0;
                  SAFE_HEAP_STORE($2199 | 0, $2201 | 0, 4);
                  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i180);
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i180);
                 }
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
                 break L686;
                }
               } while (0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
               $$7 = $$6;
               $$710 = $$69;
               break L684;
              } else {
               $2121 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
               $2122 = $2121 + -24 | 0;
               __THREW__ = 0;
               invoke_viii(241, $54 | 0, $type | 0, 10369 | 0);
               $2123 = __THREW__;
               __THREW__ = 0;
               $2124 = $2123 & 1;
               if ($2124) {
                label = 525;
                break L684;
               }
               $2125 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
               $2126 = $2125 + -24 | 0;
               __THREW__ = 0;
               invoke_vii(232, $55 | 0, $2126 | 0);
               $2127 = __THREW__;
               __THREW__ = 0;
               $2128 = $2127 & 1;
               if ($2128) {
                $2153 = ___cxa_find_matching_catch() | 0;
                $2154 = tempRet0;
                $$5 = $2153;
                $$58 = $2154;
               } else {
                $2129 = SAFE_HEAP_LOAD($55 >> 0 | 0, 1, 0) | 0 | 0;
                $2130 = $2129 & 1;
                $2131 = $2130 << 24 >> 24 == 0;
                $2132 = $55 + 8 | 0;
                $2133 = SAFE_HEAP_LOAD($2132 | 0, 4, 0) | 0 | 0;
                $2134 = $55 + 1 | 0;
                $2135 = $2131 ? $2134 : $2133;
                $2136 = $55 + 4 | 0;
                $2137 = SAFE_HEAP_LOAD($2136 | 0, 4, 0) | 0 | 0;
                $2138 = $2129 & 255;
                $2139 = $2138 >>> 1;
                $2140 = $2131 ? $2139 : $2137;
                __THREW__ = 0;
                $2141 = invoke_iiii(222, $54 | 0, $2135 | 0, $2140 | 0) | 0;
                $2142 = __THREW__;
                __THREW__ = 0;
                $2143 = $2142 & 1;
                do {
                 if ($2143) {
                  $2155 = ___cxa_find_matching_catch() | 0;
                  $2156 = tempRet0;
                  $$4 = $2155;
                  $$47 = $2156;
                 } else {
                  {}
                  SAFE_HEAP_STORE($53 | 0, SAFE_HEAP_LOAD($2141 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($53 + 4 | 0, SAFE_HEAP_LOAD($2141 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($53 + 8 | 0, SAFE_HEAP_LOAD($2141 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($2141 | 0, 0 | 0, 4);
                  $2144 = $2141 + 4 | 0;
                  SAFE_HEAP_STORE($2144 | 0, 0 | 0, 4);
                  $2145 = $2141 + 8 | 0;
                  SAFE_HEAP_STORE($2145 | 0, 0 | 0, 4);
                  __THREW__ = 0;
                  $2146 = invoke_iii(228, $53 | 0, 10371 | 0) | 0;
                  $2147 = __THREW__;
                  __THREW__ = 0;
                  $2148 = $2147 & 1;
                  if ($2148) {
                   $2157 = ___cxa_find_matching_catch() | 0;
                   $2158 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
                   $$4 = $2157;
                   $$47 = $2158;
                   break;
                  } else {
                   {}
                   SAFE_HEAP_STORE($52 | 0, SAFE_HEAP_LOAD($2146 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($52 + 4 | 0, SAFE_HEAP_LOAD($2146 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($52 + 8 | 0, SAFE_HEAP_LOAD($2146 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($2146 | 0, 0 | 0, 4);
                   $2149 = $2146 + 4 | 0;
                   SAFE_HEAP_STORE($2149 | 0, 0 | 0, 4);
                   $2150 = $2146 + 8 | 0;
                   SAFE_HEAP_STORE($2150 | 0, 0 | 0, 4);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($51, $52);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2122, $51);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($51);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
                   break L686;
                  }
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
                $$5 = $$4;
                $$58 = $$47;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
               $$7 = $$5;
               $$710 = $$58;
               break L684;
              }
             } while (0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($proto);
             break L678;
            }
           } while (0);
           if ((label | 0) == 525) {
            $2151 = ___cxa_find_matching_catch() | 0;
            $2152 = tempRet0;
            $$7 = $2151;
            $$710 = $2152;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($proto);
           $$8 = $$7;
           $$811 = $$710;
           break L676;
          } else {
           __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($49, $type, 10319);
           $2061 = __THREW__;
           __THREW__ = 0;
           $2062 = $2061 & 1;
           if ($2062) {
            label = 511;
            break L676;
           }
           $2063 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
           $2064 = $2063 + -24 | 0;
           __THREW__ = 0;
           invoke_vii(232, $50 | 0, $2064 | 0);
           $2065 = __THREW__;
           __THREW__ = 0;
           $2066 = $2065 & 1;
           do {
            if ($2066) {
             $2086 = ___cxa_find_matching_catch() | 0;
             $2087 = tempRet0;
             $$2 = $2086;
             $$25 = $2087;
            } else {
             $2067 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0;
             $2068 = $2067 & 1;
             $2069 = $2068 << 24 >> 24 == 0;
             $2070 = $50 + 8 | 0;
             $2071 = SAFE_HEAP_LOAD($2070 | 0, 4, 0) | 0 | 0;
             $2072 = $50 + 1 | 0;
             $2073 = $2069 ? $2072 : $2071;
             $2074 = $50 + 4 | 0;
             $2075 = SAFE_HEAP_LOAD($2074 | 0, 4, 0) | 0 | 0;
             $2076 = $2067 & 255;
             $2077 = $2076 >>> 1;
             $2078 = $2069 ? $2077 : $2075;
             __THREW__ = 0;
             $2079 = invoke_iiii(222, $49 | 0, $2073 | 0, $2078 | 0) | 0;
             $2080 = __THREW__;
             __THREW__ = 0;
             $2081 = $2080 & 1;
             if ($2081) {
              $2088 = ___cxa_find_matching_catch() | 0;
              $2089 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
              $$2 = $2088;
              $$25 = $2089;
              break;
             } else {
              {}
              SAFE_HEAP_STORE($48 | 0, SAFE_HEAP_LOAD($2079 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($48 + 4 | 0, SAFE_HEAP_LOAD($2079 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($48 + 8 | 0, SAFE_HEAP_LOAD($2079 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($2079 | 0, 0 | 0, 4);
              $2082 = $2079 + 4 | 0;
              SAFE_HEAP_STORE($2082 | 0, 0 | 0, 4);
              $2083 = $2079 + 8 | 0;
              SAFE_HEAP_STORE($2083 | 0, 0 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($47, $48);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2060, $47);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
              break L678;
             }
            }
           } while (0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
           $$8 = $$2;
           $$811 = $$25;
           break L676;
          }
         } while (0);
         $2204 = SAFE_HEAP_LOAD($2009 | 0, 4, 0) | 0 | 0;
         $2205 = $2204 + -24 | 0;
         $2206 = $db + 12 | 0;
         $2207 = SAFE_HEAP_LOAD($2206 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($60 | 0, $2207 | 0, 4);
         __THREW__ = 0;
         invoke_viii(239, $59 | 0, $2205 | 0, $60 | 0);
         $2208 = __THREW__;
         __THREW__ = 0;
         $2209 = $2208 & 1;
         if ($2209) {
          label = 511;
         } else {
          $2210 = $db + 16 | 0;
          $2211 = $db + 20 | 0;
          $2212 = SAFE_HEAP_LOAD($2211 | 0, 4, 0) | 0 | 0;
          $2213 = $db + 24 | 0;
          $2214 = SAFE_HEAP_LOAD($2213 | 0, 4, 0) | 0 | 0;
          $2215 = $2212 >>> 0 < $2214 >>> 0;
          if ($2215) {
           $2216 = $59 + 12 | 0;
           $2217 = $2212 + 4 | 0;
           $2218 = SAFE_HEAP_LOAD($2216 | 0, 4, 0) | 0 | 0;
           $2219 = $2212 + 12 | 0;
           SAFE_HEAP_STORE($2219 | 0, $2218 | 0, 4);
           $2220 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2212 | 0, $2220 | 0, 4);
           $2221 = $59 + 4 | 0;
           $2222 = SAFE_HEAP_LOAD($2221 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2217 | 0, $2222 | 0, 4);
           $2223 = $59 + 8 | 0;
           $2224 = SAFE_HEAP_LOAD($2223 | 0, 4, 0) | 0 | 0;
           $2225 = $2212 + 8 | 0;
           SAFE_HEAP_STORE($2225 | 0, $2224 | 0, 4);
           SAFE_HEAP_STORE($2223 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2221 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($59 | 0, 0 | 0, 4);
           $2226 = SAFE_HEAP_LOAD($2211 | 0, 4, 0) | 0 | 0;
           $2227 = $2226 + 16 | 0;
           SAFE_HEAP_STORE($2211 | 0, $2227 | 0, 4);
          } else {
           $2228 = $db + 28 | 0;
           $2229 = SAFE_HEAP_LOAD($2210 | 0, 4, 0) | 0 | 0;
           $2230 = $2212;
           $2231 = $2229;
           $2232 = $2230 - $2231 | 0;
           $2233 = $2232 >> 4;
           $2234 = $2233 + 1 | 0;
           $2235 = ($2232 | 0) < -16;
           if ($2235) {
            __THREW__ = 0;
            invoke_vi(238, $2210 | 0);
            $2236 = __THREW__;
            __THREW__ = 0;
            $2237 = ___cxa_find_matching_catch() | 0;
            $2238 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
            $$8 = $2237;
            $$811 = $2238;
            break;
           }
           $2239 = $2214;
           $2240 = $2239 - $2231 | 0;
           $2241 = $2240 >> 4;
           $2242 = $2241 >>> 0 < 1073741823;
           if ($2242) {
            $2243 = $2240 >> 3;
            $2244 = $2243 >>> 0 < $2234 >>> 0;
            $2245 = $2244 ? $2234 : $2243;
            $$0$i$i$i153 = $2245;
           } else {
            $$0$i$i$i153 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i152, $$0$i$i$i153, $2233, $2228);
           $2246 = $__v$i$i152 + 8 | 0;
           $2247 = SAFE_HEAP_LOAD($2246 | 0, 4, 0) | 0 | 0;
           $2248 = $59 + 12 | 0;
           $2249 = $2247 + 4 | 0;
           $2250 = SAFE_HEAP_LOAD($2248 | 0, 4, 0) | 0 | 0;
           $2251 = $2247 + 12 | 0;
           SAFE_HEAP_STORE($2251 | 0, $2250 | 0, 4);
           $2252 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2247 | 0, $2252 | 0, 4);
           $2253 = $59 + 4 | 0;
           $2254 = SAFE_HEAP_LOAD($2253 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2249 | 0, $2254 | 0, 4);
           $2255 = $59 + 8 | 0;
           $2256 = SAFE_HEAP_LOAD($2255 | 0, 4, 0) | 0 | 0;
           $2257 = $2247 + 8 | 0;
           SAFE_HEAP_STORE($2257 | 0, $2256 | 0, 4);
           SAFE_HEAP_STORE($2255 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2253 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($59 | 0, 0 | 0, 4);
           $2258 = $2247 + 16 | 0;
           SAFE_HEAP_STORE($2246 | 0, $2258 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2210, $__v$i$i152);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i152);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type);
          $$0 = $2007;
          break L1;
         }
        }
       } while (0);
       if ((label | 0) == 511) {
        $2084 = ___cxa_find_matching_catch() | 0;
        $2085 = tempRet0;
        $$8 = $2084;
        $$811 = $2085;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type);
       $$10 = $$8;
       $$1013 = $$811;
       break;
      }
     case 83:
      {
       $2259 = $first + 1 | 0;
       $2260 = ($2259 | 0) == ($last | 0);
       if (!$2260) {
        $2261 = SAFE_HEAP_LOAD($2259 >> 0 | 0, 1, 0) | 0 | 0;
        $2262 = $2261 << 24 >> 24 == 116;
        if ($2262) {
         $2263 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
         $2264 = ($2263 | 0) == ($first | 0);
         if ($2264) {
          $$0 = $first;
          break L1;
         }
         $2265 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $2266 = $db + 4 | 0;
         $2267 = SAFE_HEAP_LOAD($2266 | 0, 4, 0) | 0 | 0;
         $2268 = ($2265 | 0) == ($2267 | 0);
         if ($2268) {
          $$0 = $first;
          break L1;
         }
         $2269 = $db + 16 | 0;
         $2270 = $2267 + -24 | 0;
         $2271 = $db + 12 | 0;
         $2272 = SAFE_HEAP_LOAD($2271 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($62 | 0, $2272 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($61, $2270, $62);
         $2273 = $db + 20 | 0;
         $2274 = SAFE_HEAP_LOAD($2273 | 0, 4, 0) | 0 | 0;
         $2275 = $db + 24 | 0;
         $2276 = SAFE_HEAP_LOAD($2275 | 0, 4, 0) | 0 | 0;
         $2277 = $2274 >>> 0 < $2276 >>> 0;
         if ($2277) {
          $2278 = $61 + 12 | 0;
          $2279 = $2274 + 4 | 0;
          $2280 = SAFE_HEAP_LOAD($2278 | 0, 4, 0) | 0 | 0;
          $2281 = $2274 + 12 | 0;
          SAFE_HEAP_STORE($2281 | 0, $2280 | 0, 4);
          $2282 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($2274 | 0, $2282 | 0, 4);
          $2283 = $61 + 4 | 0;
          $2284 = SAFE_HEAP_LOAD($2283 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($2279 | 0, $2284 | 0, 4);
          $2285 = $61 + 8 | 0;
          $2286 = SAFE_HEAP_LOAD($2285 | 0, 4, 0) | 0 | 0;
          $2287 = $2274 + 8 | 0;
          SAFE_HEAP_STORE($2287 | 0, $2286 | 0, 4);
          SAFE_HEAP_STORE($2285 | 0, 0 | 0, 4);
          SAFE_HEAP_STORE($2283 | 0, 0 | 0, 4);
          SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
          $2288 = SAFE_HEAP_LOAD($2273 | 0, 4, 0) | 0 | 0;
          $2289 = $2288 + 16 | 0;
          SAFE_HEAP_STORE($2273 | 0, $2289 | 0, 4);
         } else {
          $2290 = $db + 28 | 0;
          $2291 = SAFE_HEAP_LOAD($2269 | 0, 4, 0) | 0 | 0;
          $2292 = $2274;
          $2293 = $2291;
          $2294 = $2292 - $2293 | 0;
          $2295 = $2294 >> 4;
          $2296 = $2295 + 1 | 0;
          $2297 = ($2294 | 0) < -16;
          if ($2297) {
           __THREW__ = 0;
           invoke_vi(238, $2269 | 0);
           $2298 = __THREW__;
           __THREW__ = 0;
           $2299 = ___cxa_find_matching_catch() | 0;
           $2300 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
           $$10 = $2299;
           $$1013 = $2300;
           break L73;
          }
          $2301 = $2276;
          $2302 = $2301 - $2293 | 0;
          $2303 = $2302 >> 4;
          $2304 = $2303 >>> 0 < 1073741823;
          if ($2304) {
           $2305 = $2302 >> 3;
           $2306 = $2305 >>> 0 < $2296 >>> 0;
           $2307 = $2306 ? $2296 : $2305;
           $$0$i$i$i51 = $2307;
          } else {
           $$0$i$i$i51 = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i50, $$0$i$i$i51, $2295, $2290);
          $2308 = $__v$i$i50 + 8 | 0;
          $2309 = SAFE_HEAP_LOAD($2308 | 0, 4, 0) | 0 | 0;
          $2310 = $61 + 12 | 0;
          $2311 = $2309 + 4 | 0;
          $2312 = SAFE_HEAP_LOAD($2310 | 0, 4, 0) | 0 | 0;
          $2313 = $2309 + 12 | 0;
          SAFE_HEAP_STORE($2313 | 0, $2312 | 0, 4);
          $2314 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($2309 | 0, $2314 | 0, 4);
          $2315 = $61 + 4 | 0;
          $2316 = SAFE_HEAP_LOAD($2315 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($2311 | 0, $2316 | 0, 4);
          $2317 = $61 + 8 | 0;
          $2318 = SAFE_HEAP_LOAD($2317 | 0, 4, 0) | 0 | 0;
          $2319 = $2309 + 8 | 0;
          SAFE_HEAP_STORE($2319 | 0, $2318 | 0, 4);
          SAFE_HEAP_STORE($2317 | 0, 0 | 0, 4);
          SAFE_HEAP_STORE($2315 | 0, 0 | 0, 4);
          SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
          $2320 = $2309 + 16 | 0;
          SAFE_HEAP_STORE($2308 | 0, $2320 | 0, 4);
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2269, $__v$i$i50);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i50);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
         $$0 = $2263;
         break L1;
        }
       }
       $2321 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
       $2322 = ($2321 | 0) == ($first | 0);
       if ($2322) {
        $$0 = $first;
        break L1;
       }
       $2323 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2321, $last, $db) | 0;
       $2324 = ($2323 | 0) == ($2321 | 0);
       if ($2324) {
        $$0 = $2321;
        break L1;
       }
       $2325 = $db + 4 | 0;
       $2326 = SAFE_HEAP_LOAD($2325 | 0, 4, 0) | 0 | 0;
       $2327 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $2328 = $2326;
       $2329 = $2327;
       $2330 = $2328 - $2329 | 0;
       $2331 = ($2330 | 0) / 24 & -1;
       $2332 = $2331 >>> 0 < 2;
       if ($2332) {
        $$0 = $2321;
        break L1;
       }
       $2333 = $2326 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($template_args, $2333);
       $2334 = SAFE_HEAP_LOAD($2325 | 0, 4, 0) | 0 | 0;
       $2335 = $2334 + -24 | 0;
       $2337 = $2334;
       while (1) {
        $2336 = $2337 + -24 | 0;
        SAFE_HEAP_STORE($2325 | 0, $2336 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2336);
        $$pre$i = SAFE_HEAP_LOAD($2325 | 0, 4, 0) | 0 | 0;
        $2338 = ($$pre$i | 0) == ($2335 | 0);
        if ($2338) {
         break;
        } else {
         $2337 = $$pre$i;
        }
       }
       $2339 = $2334 + -48 | 0;
       $2340 = SAFE_HEAP_LOAD($template_args >> 0 | 0, 1, 0) | 0 | 0;
       $2341 = $2340 & 1;
       $2342 = $2341 << 24 >> 24 == 0;
       $2343 = $template_args + 8 | 0;
       $2344 = SAFE_HEAP_LOAD($2343 | 0, 4, 0) | 0 | 0;
       $2345 = $template_args + 1 | 0;
       $2346 = $2342 ? $2345 : $2344;
       $2347 = $template_args + 4 | 0;
       $2348 = SAFE_HEAP_LOAD($2347 | 0, 4, 0) | 0 | 0;
       $2349 = $2340 & 255;
       $2350 = $2349 >>> 1;
       $2351 = $2342 ? $2350 : $2348;
       __THREW__ = 0;
       invoke_iiii(222, $2339 | 0, $2346 | 0, $2351 | 0) | 0;
       $2352 = __THREW__;
       __THREW__ = 0;
       $2353 = $2352 & 1;
       do {
        if ($2353) {
         label = 582;
        } else {
         $2354 = SAFE_HEAP_LOAD($2325 | 0, 4, 0) | 0 | 0;
         $2355 = $2354 + -24 | 0;
         $2356 = $db + 12 | 0;
         $2357 = SAFE_HEAP_LOAD($2356 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($64 | 0, $2357 | 0, 4);
         __THREW__ = 0;
         invoke_viii(239, $63 | 0, $2355 | 0, $64 | 0);
         $2358 = __THREW__;
         __THREW__ = 0;
         $2359 = $2358 & 1;
         if ($2359) {
          label = 582;
         } else {
          $2360 = $db + 16 | 0;
          $2361 = $db + 20 | 0;
          $2362 = SAFE_HEAP_LOAD($2361 | 0, 4, 0) | 0 | 0;
          $2363 = $db + 24 | 0;
          $2364 = SAFE_HEAP_LOAD($2363 | 0, 4, 0) | 0 | 0;
          $2365 = $2362 >>> 0 < $2364 >>> 0;
          if ($2365) {
           $2366 = $63 + 12 | 0;
           $2367 = $2362 + 4 | 0;
           $2368 = SAFE_HEAP_LOAD($2366 | 0, 4, 0) | 0 | 0;
           $2369 = $2362 + 12 | 0;
           SAFE_HEAP_STORE($2369 | 0, $2368 | 0, 4);
           $2370 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2362 | 0, $2370 | 0, 4);
           $2371 = $63 + 4 | 0;
           $2372 = SAFE_HEAP_LOAD($2371 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2367 | 0, $2372 | 0, 4);
           $2373 = $63 + 8 | 0;
           $2374 = SAFE_HEAP_LOAD($2373 | 0, 4, 0) | 0 | 0;
           $2375 = $2362 + 8 | 0;
           SAFE_HEAP_STORE($2375 | 0, $2374 | 0, 4);
           SAFE_HEAP_STORE($2373 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2371 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
           $2376 = SAFE_HEAP_LOAD($2361 | 0, 4, 0) | 0 | 0;
           $2377 = $2376 + 16 | 0;
           SAFE_HEAP_STORE($2361 | 0, $2377 | 0, 4);
          } else {
           $2378 = $db + 28 | 0;
           $2379 = SAFE_HEAP_LOAD($2360 | 0, 4, 0) | 0 | 0;
           $2380 = $2362;
           $2381 = $2379;
           $2382 = $2380 - $2381 | 0;
           $2383 = $2382 >> 4;
           $2384 = $2383 + 1 | 0;
           $2385 = ($2382 | 0) < -16;
           if ($2385) {
            __THREW__ = 0;
            invoke_vi(238, $2360 | 0);
            $2386 = __THREW__;
            __THREW__ = 0;
            $2387 = ___cxa_find_matching_catch() | 0;
            $2388 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($63);
            $$9 = $2387;
            $$912 = $2388;
            break;
           }
           $2389 = $2364;
           $2390 = $2389 - $2381 | 0;
           $2391 = $2390 >> 4;
           $2392 = $2391 >>> 0 < 1073741823;
           if ($2392) {
            $2393 = $2390 >> 3;
            $2394 = $2393 >>> 0 < $2384 >>> 0;
            $2395 = $2394 ? $2384 : $2393;
            $$0$i$i$i31 = $2395;
           } else {
            $$0$i$i$i31 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i30, $$0$i$i$i31, $2383, $2378);
           $2396 = $__v$i$i30 + 8 | 0;
           $2397 = SAFE_HEAP_LOAD($2396 | 0, 4, 0) | 0 | 0;
           $2398 = $63 + 12 | 0;
           $2399 = $2397 + 4 | 0;
           $2400 = SAFE_HEAP_LOAD($2398 | 0, 4, 0) | 0 | 0;
           $2401 = $2397 + 12 | 0;
           SAFE_HEAP_STORE($2401 | 0, $2400 | 0, 4);
           $2402 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2397 | 0, $2402 | 0, 4);
           $2403 = $63 + 4 | 0;
           $2404 = SAFE_HEAP_LOAD($2403 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2399 | 0, $2404 | 0, 4);
           $2405 = $63 + 8 | 0;
           $2406 = SAFE_HEAP_LOAD($2405 | 0, 4, 0) | 0 | 0;
           $2407 = $2397 + 8 | 0;
           SAFE_HEAP_STORE($2407 | 0, $2406 | 0, 4);
           SAFE_HEAP_STORE($2405 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2403 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
           $2408 = $2397 + 16 | 0;
           SAFE_HEAP_STORE($2396 | 0, $2408 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2360, $__v$i$i30);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i30);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($63);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($template_args);
          $$0 = $2323;
          break L1;
         }
        }
       } while (0);
       if ((label | 0) == 582) {
        $2409 = ___cxa_find_matching_catch() | 0;
        $2410 = tempRet0;
        $$9 = $2409;
        $$912 = $2410;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($template_args);
       $$10 = $$9;
       $$1013 = $$912;
       break;
      }
     case 68:
      {
       $2411 = $first + 1 | 0;
       $2412 = ($2411 | 0) == ($last | 0);
       if ($2412) {
        label = 696;
       } else {
        $2413 = SAFE_HEAP_LOAD($2411 >> 0 | 0, 1, 0) | 0 | 0;
        $2414 = $2413 << 24 >> 24;
        switch ($2414 | 0) {
        case 112:
         {
          $2415 = $db + 4 | 0;
          $2416 = SAFE_HEAP_LOAD($2415 | 0, 4, 0) | 0 | 0;
          $2417 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $2418 = $2416;
          $2419 = $2417;
          $2420 = $2418 - $2419 | 0;
          $2421 = ($2420 | 0) / 24 & -1;
          $2422 = $first + 2 | 0;
          $2423 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2422, $last, $db) | 0;
          $2424 = SAFE_HEAP_LOAD($2415 | 0, 4, 0) | 0 | 0;
          $2425 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $2426 = $2424;
          $2427 = $2425;
          $2428 = $2426 - $2427 | 0;
          $2429 = ($2428 | 0) / 24 & -1;
          $2430 = ($2423 | 0) == ($2422 | 0);
          if ($2430) {
           label = 696;
           break L73;
          }
          $2431 = $db + 16 | 0;
          $2432 = $db + 12 | 0;
          $2433 = SAFE_HEAP_LOAD($2432 | 0, 4, 0) | 0 | 0;
          $2434 = $2433;
          $2435 = $db + 20 | 0;
          $2436 = SAFE_HEAP_LOAD($2435 | 0, 4, 0) | 0 | 0;
          $2437 = $db + 24 | 0;
          $2438 = SAFE_HEAP_LOAD($2437 | 0, 4, 0) | 0 | 0;
          $2439 = $2436 >>> 0 < $2438 >>> 0;
          if ($2439) {
           SAFE_HEAP_STORE($2436 | 0, 0 | 0, 4);
           $2440 = $2436 + 4 | 0;
           SAFE_HEAP_STORE($2440 | 0, 0 | 0, 4);
           $2441 = $2436 + 8 | 0;
           SAFE_HEAP_STORE($2441 | 0, 0 | 0, 4);
           $2442 = $2436 + 12 | 0;
           SAFE_HEAP_STORE($2442 | 0, $2434 | 0, 4);
           $2443 = SAFE_HEAP_LOAD($2435 | 0, 4, 0) | 0 | 0;
           $2444 = $2443 + 16 | 0;
           SAFE_HEAP_STORE($2435 | 0, $2444 | 0, 4);
          } else {
           $2445 = $db + 28 | 0;
           $2446 = SAFE_HEAP_LOAD($2431 | 0, 4, 0) | 0 | 0;
           $2447 = $2436;
           $2448 = $2446;
           $2449 = $2447 - $2448 | 0;
           $2450 = $2449 >> 4;
           $2451 = $2450 + 1 | 0;
           $2452 = ($2449 | 0) < -16;
           if ($2452) {
            __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2431);
           }
           $2453 = $2438;
           $2454 = $2453 - $2448 | 0;
           $2455 = $2454 >> 4;
           $2456 = $2455 >>> 0 < 1073741823;
           if ($2456) {
            $2457 = $2454 >> 3;
            $2458 = $2457 >>> 0 < $2451 >>> 0;
            $2459 = $2458 ? $2451 : $2457;
            $$0$i$i$i29 = $2459;
           } else {
            $$0$i$i$i29 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i28, $$0$i$i$i29, $2450, $2445);
           $2460 = $__v$i$i28 + 8 | 0;
           $2461 = SAFE_HEAP_LOAD($2460 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2461 | 0, 0 | 0, 4);
           $2462 = $2461 + 4 | 0;
           SAFE_HEAP_STORE($2462 | 0, 0 | 0, 4);
           $2463 = $2461 + 8 | 0;
           SAFE_HEAP_STORE($2463 | 0, 0 | 0, 4);
           $2464 = $2461 + 12 | 0;
           SAFE_HEAP_STORE($2464 | 0, $2434 | 0, 4);
           $2465 = $2461 + 16 | 0;
           SAFE_HEAP_STORE($2460 | 0, $2465 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2431, $__v$i$i28);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i28);
          }
          $2466 = $__v$i$i26 + 8 | 0;
          $2467 = $2421 >>> 0 < $2429 >>> 0;
          if ($2467) {
           $k20$0550 = $2421;
          } else {
           $$0 = $2423;
           break L1;
          }
          while (1) {
           $2468 = SAFE_HEAP_LOAD($2435 | 0, 4, 0) | 0 | 0;
           $2469 = $2468 + -16 | 0;
           $2470 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $2471 = $2470 + ($k20$0550 * 24 | 0) | 0;
           $2472 = $2468 + -12 | 0;
           $2473 = SAFE_HEAP_LOAD($2472 | 0, 4, 0) | 0 | 0;
           $2474 = $2468 + -8 | 0;
           $2475 = SAFE_HEAP_LOAD($2474 | 0, 4, 0) | 0 | 0;
           $2476 = ($2473 | 0) == ($2475 | 0);
           if ($2476) {
            $2485 = $2468 + -4 | 0;
            $2486 = SAFE_HEAP_LOAD($2469 | 0, 4, 0) | 0 | 0;
            $2487 = $2473;
            $2488 = $2486;
            $2489 = $2487 - $2488 | 0;
            $2490 = ($2489 | 0) / 24 & -1;
            $2491 = $2490 + 1 | 0;
            $2492 = ($2489 | 0) < -24;
            if ($2492) {
             $$lcssa698 = $2469;
             label = 600;
             break;
            }
            $2493 = $2490 >>> 0 < 1073741823;
            if ($2493) {
             $2494 = $2490 << 1;
             $2495 = $2494 >>> 0 < $2491 >>> 0;
             $2496 = $2495 ? $2491 : $2494;
             $$0$i$i$i27 = $2496;
            } else {
             $$0$i$i$i27 = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i26, $$0$i$i$i27, $2490, $2485);
            $2497 = SAFE_HEAP_LOAD($2466 | 0, 4, 0) | 0 | 0;
            __THREW__ = 0;
            invoke_vii(236, $2497 | 0, $2471 | 0);
            $2498 = __THREW__;
            __THREW__ = 0;
            $2499 = $2498 & 1;
            if ($2499) {
             label = 606;
             break;
            }
            $2500 = $2497 + 12 | 0;
            $2501 = ($2470 + ($k20$0550 * 24 | 0) | 0) + 12 | 0;
            __THREW__ = 0;
            invoke_vii(236, $2500 | 0, $2501 | 0);
            $2502 = __THREW__;
            __THREW__ = 0;
            $2503 = $2502 & 1;
            if ($2503) {
             $$lcssa704 = $2497;
             label = 605;
             break;
            }
            $2508 = $2497 + 24 | 0;
            SAFE_HEAP_STORE($2466 | 0, $2508 | 0, 4);
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2469, $__v$i$i26);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26);
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2473, $2471);
            $2477 = $2473 + 12 | 0;
            $2478 = ($2470 + ($k20$0550 * 24 | 0) | 0) + 12 | 0;
            __THREW__ = 0;
            invoke_vii(236, $2477 | 0, $2478 | 0);
            $2479 = __THREW__;
            __THREW__ = 0;
            $2480 = $2479 & 1;
            if ($2480) {
             $$lcssa702 = $2473;
             label = 597;
             break;
            }
            $2483 = SAFE_HEAP_LOAD($2472 | 0, 4, 0) | 0 | 0;
            $2484 = $2483 + 24 | 0;
            SAFE_HEAP_STORE($2472 | 0, $2484 | 0, 4);
           }
           $2509 = $k20$0550 + 1 | 0;
           $2510 = $2509 >>> 0 < $2429 >>> 0;
           if ($2510) {
            $k20$0550 = $2509;
           } else {
            $$0 = $2423;
            break L1;
           }
          }
          if ((label | 0) == 597) {
           $2481 = ___cxa_find_matching_catch() | 0;
           $2482 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa702);
           ___resumeException($2481 | 0);
          } else if ((label | 0) == 600) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa698);
          } else if ((label | 0) == 605) {
           $2504 = ___cxa_find_matching_catch() | 0;
           $2505 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa704);
           $eh$lpad$body$i$i$index34Z2D = $2505;
           $eh$lpad$body$i$i$indexZ2D = $2504;
          } else if ((label | 0) == 606) {
           $2506 = ___cxa_find_matching_catch() | 0;
           $2507 = tempRet0;
           $eh$lpad$body$i$i$index34Z2D = $2507;
           $eh$lpad$body$i$i$indexZ2D = $2506;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26);
          ___resumeException($eh$lpad$body$i$i$indexZ2D | 0);
          break;
         }
        case 84:
        case 116:
         {
          $2511 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
          $2512 = ($2511 | 0) == ($first | 0);
          if ($2512) {
           label = 696;
           break L73;
          }
          $2513 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $2514 = $db + 4 | 0;
          $2515 = SAFE_HEAP_LOAD($2514 | 0, 4, 0) | 0 | 0;
          $2516 = ($2513 | 0) == ($2515 | 0);
          if ($2516) {
           $$0 = $first;
           break L1;
          }
          $2517 = $db + 16 | 0;
          $2518 = $2515 + -24 | 0;
          $2519 = $db + 12 | 0;
          $2520 = SAFE_HEAP_LOAD($2519 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($66 | 0, $2520 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($65, $2518, $66);
          $2521 = $db + 20 | 0;
          $2522 = SAFE_HEAP_LOAD($2521 | 0, 4, 0) | 0 | 0;
          $2523 = $db + 24 | 0;
          $2524 = SAFE_HEAP_LOAD($2523 | 0, 4, 0) | 0 | 0;
          $2525 = $2522 >>> 0 < $2524 >>> 0;
          if ($2525) {
           $2526 = $65 + 12 | 0;
           $2527 = $2522 + 4 | 0;
           $2528 = SAFE_HEAP_LOAD($2526 | 0, 4, 0) | 0 | 0;
           $2529 = $2522 + 12 | 0;
           SAFE_HEAP_STORE($2529 | 0, $2528 | 0, 4);
           $2530 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2522 | 0, $2530 | 0, 4);
           $2531 = $65 + 4 | 0;
           $2532 = SAFE_HEAP_LOAD($2531 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2527 | 0, $2532 | 0, 4);
           $2533 = $65 + 8 | 0;
           $2534 = SAFE_HEAP_LOAD($2533 | 0, 4, 0) | 0 | 0;
           $2535 = $2522 + 8 | 0;
           SAFE_HEAP_STORE($2535 | 0, $2534 | 0, 4);
           SAFE_HEAP_STORE($2533 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2531 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($65 | 0, 0 | 0, 4);
           $2536 = SAFE_HEAP_LOAD($2521 | 0, 4, 0) | 0 | 0;
           $2537 = $2536 + 16 | 0;
           SAFE_HEAP_STORE($2521 | 0, $2537 | 0, 4);
          } else {
           $2538 = $db + 28 | 0;
           $2539 = SAFE_HEAP_LOAD($2517 | 0, 4, 0) | 0 | 0;
           $2540 = $2522;
           $2541 = $2539;
           $2542 = $2540 - $2541 | 0;
           $2543 = $2542 >> 4;
           $2544 = $2543 + 1 | 0;
           $2545 = ($2542 | 0) < -16;
           if ($2545) {
            __THREW__ = 0;
            invoke_vi(238, $2517 | 0);
            $2546 = __THREW__;
            __THREW__ = 0;
            $2547 = ___cxa_find_matching_catch() | 0;
            $2548 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($65);
            $$10 = $2547;
            $$1013 = $2548;
            break L73;
           }
           $2549 = $2524;
           $2550 = $2549 - $2541 | 0;
           $2551 = $2550 >> 4;
           $2552 = $2551 >>> 0 < 1073741823;
           if ($2552) {
            $2553 = $2550 >> 3;
            $2554 = $2553 >>> 0 < $2544 >>> 0;
            $2555 = $2554 ? $2544 : $2553;
            $$0$i$i$i22 = $2555;
           } else {
            $$0$i$i$i22 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i21, $$0$i$i$i22, $2543, $2538);
           $2556 = $__v$i$i21 + 8 | 0;
           $2557 = SAFE_HEAP_LOAD($2556 | 0, 4, 0) | 0 | 0;
           $2558 = $65 + 12 | 0;
           $2559 = $2557 + 4 | 0;
           $2560 = SAFE_HEAP_LOAD($2558 | 0, 4, 0) | 0 | 0;
           $2561 = $2557 + 12 | 0;
           SAFE_HEAP_STORE($2561 | 0, $2560 | 0, 4);
           $2562 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2557 | 0, $2562 | 0, 4);
           $2563 = $65 + 4 | 0;
           $2564 = SAFE_HEAP_LOAD($2563 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2559 | 0, $2564 | 0, 4);
           $2565 = $65 + 8 | 0;
           $2566 = SAFE_HEAP_LOAD($2565 | 0, 4, 0) | 0 | 0;
           $2567 = $2557 + 8 | 0;
           SAFE_HEAP_STORE($2567 | 0, $2566 | 0, 4);
           SAFE_HEAP_STORE($2565 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2563 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($65 | 0, 0 | 0, 4);
           $2568 = $2557 + 16 | 0;
           SAFE_HEAP_STORE($2556 | 0, $2568 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2517, $__v$i$i21);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i21);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($65);
          $$0 = $2511;
          break L1;
          break;
         }
        case 118:
         {
          $2569 = $last;
          $2570 = $first;
          $2571 = $2569 - $2570 | 0;
          $2572 = ($2571 | 0) > 3;
          $2573 = $229 << 24 >> 24 == 68;
          $or$cond448 = $2572 & $2573;
          $2574 = $2413 << 24 >> 24 == 118;
          $or$cond449 = $or$cond448 & $2574;
          L831 : do {
           if ($or$cond449) {
            $2575 = $first + 2 | 0;
            $2576 = SAFE_HEAP_LOAD($2575 >> 0 | 0, 1, 0) | 0 | 0;
            $$off = $2576 + -49 << 24 >> 24;
            $2577 = ($$off & 255) < 9;
            do {
             if ($2577) {
              $2578 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2575, $last) | 0;
              $2579 = ($2578 | 0) == ($last | 0);
              if ($2579) {
               $$1$i263 = $first;
               break L831;
              }
              $2580 = SAFE_HEAP_LOAD($2578 >> 0 | 0, 1, 0) | 0 | 0;
              $2581 = $2580 << 24 >> 24 == 95;
              if (!$2581) {
               $$1$i263 = $first;
               break L831;
              }
              $2582 = $2578;
              $2583 = $2575;
              $2584 = $2582 - $2583 | 0;
              $2585 = $2578 + 1 | 0;
              $2586 = ($2585 | 0) == ($last | 0);
              if ($2586) {
               $$1$i263 = $first;
               break L831;
              }
              $2587 = SAFE_HEAP_LOAD($2585 >> 0 | 0, 1, 0) | 0 | 0;
              $2588 = $2587 << 24 >> 24 == 112;
              if (!$2588) {
               $2589 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2585, $last, $db) | 0;
               $2590 = ($2589 | 0) == ($2585 | 0);
               if ($2590) {
                $$1$i263 = $first;
                break L831;
               }
               $2591 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
               $2592 = $db + 4 | 0;
               $2593 = SAFE_HEAP_LOAD($2592 | 0, 4, 0) | 0 | 0;
               $2594 = ($2591 | 0) == ($2593 | 0);
               if ($2594) {
                $$1$i263 = $first;
                break L831;
               }
               $2595 = $2593 + -24 | 0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $2575, $2584);
               __THREW__ = 0;
               $2596 = invoke_iiii(227, $2 | 0, 0, 10373 | 0) | 0;
               $2597 = __THREW__;
               __THREW__ = 0;
               $2598 = $2597 & 1;
               if ($2598) {
                $2620 = ___cxa_find_matching_catch() | 0;
                $2621 = tempRet0;
                $$15$i = $2621;
                $$18$i = $2620;
               } else {
                {}
                SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($2596 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($2596 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($2596 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                SAFE_HEAP_STORE($2596 | 0, 0 | 0, 4);
                $2599 = $2596 + 4 | 0;
                SAFE_HEAP_STORE($2599 | 0, 0 | 0, 4);
                $2600 = $2596 + 8 | 0;
                SAFE_HEAP_STORE($2600 | 0, 0 | 0, 4);
                __THREW__ = 0;
                $2601 = invoke_iii(228, $1 | 0, 10296 | 0) | 0;
                $2602 = __THREW__;
                __THREW__ = 0;
                $2603 = $2602 & 1;
                do {
                 if ($2603) {
                  $2622 = ___cxa_find_matching_catch() | 0;
                  $2623 = tempRet0;
                  $$04$i232 = $2623;
                  $$07$i = $2622;
                 } else {
                  {}
                  SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($2601 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($2601 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($2601 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($2601 | 0, 0 | 0, 4);
                  $2604 = $2601 + 4 | 0;
                  SAFE_HEAP_STORE($2604 | 0, 0 | 0, 4);
                  $2605 = $2601 + 8 | 0;
                  SAFE_HEAP_STORE($2605 | 0, 0 | 0, 4);
                  $2606 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
                  $2607 = $2606 & 1;
                  $2608 = $2607 << 24 >> 24 == 0;
                  $2609 = $0 + 8 | 0;
                  $2610 = SAFE_HEAP_LOAD($2609 | 0, 4, 0) | 0 | 0;
                  $2611 = $0 + 1 | 0;
                  $2612 = $2608 ? $2611 : $2610;
                  $2613 = $0 + 4 | 0;
                  $2614 = SAFE_HEAP_LOAD($2613 | 0, 4, 0) | 0 | 0;
                  $2615 = $2606 & 255;
                  $2616 = $2615 >>> 1;
                  $2617 = $2608 ? $2616 : $2614;
                  __THREW__ = 0;
                  invoke_iiii(222, $2595 | 0, $2612 | 0, $2617 | 0) | 0;
                  $2618 = __THREW__;
                  __THREW__ = 0;
                  $2619 = $2618 & 1;
                  if ($2619) {
                   $2624 = ___cxa_find_matching_catch() | 0;
                   $2625 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                   $$04$i232 = $2625;
                   $$07$i = $2624;
                   break;
                  } else {
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
                   $$1$i263 = $2589;
                   break L831;
                  }
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
                $$15$i = $$04$i232;
                $$18$i = $$07$i;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
               $$6$i264 = $$15$i;
               $$613$i = $$18$i;
               break;
              }
              $2626 = $2578 + 2 | 0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6, $2575, $2584);
              __THREW__ = 0;
              $2627 = invoke_iiii(227, $6 | 0, 0, 10382 | 0) | 0;
              $2628 = __THREW__;
              __THREW__ = 0;
              $2629 = $2628 & 1;
              if ($2629) {
               $2665 = ___cxa_find_matching_catch() | 0;
               $2666 = tempRet0;
               $$3$i234 = $2666;
               $$310$i = $2665;
              } else {
               {}
               SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($2627 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($2627 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($5 + 8 | 0, SAFE_HEAP_LOAD($2627 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($2627 | 0, 0 | 0, 4);
               $2630 = $2627 + 4 | 0;
               SAFE_HEAP_STORE($2630 | 0, 0 | 0, 4);
               $2631 = $2627 + 8 | 0;
               SAFE_HEAP_STORE($2631 | 0, 0 | 0, 4);
               __THREW__ = 0;
               $2632 = invoke_iii(228, $5 | 0, 10296 | 0) | 0;
               $2633 = __THREW__;
               __THREW__ = 0;
               $2634 = $2633 & 1;
               do {
                if ($2634) {
                 $2667 = ___cxa_find_matching_catch() | 0;
                 $2668 = tempRet0;
                 $$26$i = $2668;
                 $$29$i = $2667;
                } else {
                 {}
                 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($2632 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($2632 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($2632 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                 SAFE_HEAP_STORE($2632 | 0, 0 | 0, 4);
                 $2635 = $2632 + 4 | 0;
                 SAFE_HEAP_STORE($2635 | 0, 0 | 0, 4);
                 $2636 = $2632 + 8 | 0;
                 SAFE_HEAP_STORE($2636 | 0, 0 | 0, 4);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
                 $2637 = $db + 4 | 0;
                 $2638 = SAFE_HEAP_LOAD($2637 | 0, 4, 0) | 0 | 0;
                 $2639 = $db + 8 | 0;
                 $2640 = SAFE_HEAP_LOAD($2639 | 0, 4, 0) | 0 | 0;
                 $2641 = $2638 >>> 0 < $2640 >>> 0;
                 if ($2641) {
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2638, $3);
                  $2642 = SAFE_HEAP_LOAD($2637 | 0, 4, 0) | 0 | 0;
                  $2643 = $2642 + 24 | 0;
                  SAFE_HEAP_STORE($2637 | 0, $2643 | 0, 4);
                 } else {
                  $2644 = $db + 12 | 0;
                  $2645 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $2646 = $2638;
                  $2647 = $2645;
                  $2648 = $2646 - $2647 | 0;
                  $2649 = ($2648 | 0) / 24 & -1;
                  $2650 = $2649 + 1 | 0;
                  $2651 = ($2648 | 0) < -24;
                  if ($2651) {
                   __THREW__ = 0;
                   invoke_vi(238, $db | 0);
                   $2652 = __THREW__;
                   __THREW__ = 0;
                   $2653 = ___cxa_find_matching_catch() | 0;
                   $2654 = tempRet0;
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                   $$26$i = $2654;
                   $$29$i = $2653;
                   break;
                  }
                  $2655 = $2640;
                  $2656 = $2655 - $2647 | 0;
                  $2657 = ($2656 | 0) / 24 & -1;
                  $2658 = $2657 >>> 0 < 1073741823;
                  if ($2658) {
                   $2659 = $2657 << 1;
                   $2660 = $2659 >>> 0 < $2650 >>> 0;
                   $2661 = $2660 ? $2650 : $2659;
                   $$0$i$i$i$i = $2661;
                  } else {
                   $$0$i$i$i$i = 2147483647;
                  }
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $2649, $2644);
                  $2662 = $__v$i$i$i + 8 | 0;
                  $2663 = SAFE_HEAP_LOAD($2662 | 0, 4, 0) | 0 | 0;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2663, $3);
                  $2664 = $2663 + 24 | 0;
                  SAFE_HEAP_STORE($2662 | 0, $2664 | 0, 4);
                  __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
                  __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
                 }
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
                 $$1$i263 = $2626;
                 break L831;
                }
               } while (0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
               $$3$i234 = $$26$i;
               $$310$i = $$29$i;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$6$i264 = $$3$i234;
              $$613$i = $$310$i;
             } else {
              SAFE_HEAP_STORE($num1$i | 0, 0 | 0, 4);
              $2669 = $num1$i + 4 | 0;
              SAFE_HEAP_STORE($2669 | 0, 0 | 0, 4);
              $2670 = $num1$i + 8 | 0;
              SAFE_HEAP_STORE($2670 | 0, 0 | 0, 4);
              $2671 = $2576 << 24 >> 24 == 95;
              if ($2671) {
               $t12$0$i = $2575;
               label = 669;
              } else {
               __THREW__ = 0;
               $2672 = invoke_iiii(242, $2575 | 0, $last | 0, $db | 0) | 0;
               $2673 = __THREW__;
               __THREW__ = 0;
               $2674 = $2673 & 1;
               if ($2674) {
                label = 655;
               } else {
                $2675 = ($2672 | 0) == ($2575 | 0);
                if ($2675) {
                 $t12$0$i = $2575;
                 label = 669;
                } else {
                 $2676 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                 $2677 = $db + 4 | 0;
                 $2678 = SAFE_HEAP_LOAD($2677 | 0, 4, 0) | 0 | 0;
                 $2679 = ($2676 | 0) == ($2678 | 0);
                 if ($2679) {
                  label = 683;
                 } else {
                  $2682 = $2678 + -24 | 0;
                  __THREW__ = 0;
                  invoke_vii(232, $7 | 0, $2682 | 0);
                  $2683 = __THREW__;
                  __THREW__ = 0;
                  $2684 = $2683 & 1;
                  if ($2684) {
                   label = 655;
                  } else {
                   $2685 = SAFE_HEAP_LOAD($num1$i >> 0 | 0, 1, 0) | 0 | 0;
                   $2686 = $2685 & 1;
                   $2687 = $2686 << 24 >> 24 == 0;
                   L879 : do {
                    if ($2687) {
                     $2688 = $num1$i + 1 | 0;
                     SAFE_HEAP_STORE($2688 >> 0 | 0, 0 | 0, 1);
                     SAFE_HEAP_STORE($num1$i >> 0 | 0, 0 | 0, 1);
                    } else {
                     $2689 = $num1$i + 8 | 0;
                     $2690 = SAFE_HEAP_LOAD($2689 | 0, 4, 0) | 0 | 0;
                     SAFE_HEAP_STORE($2690 >> 0 | 0, 0 | 0, 1);
                     $2691 = $num1$i + 4 | 0;
                     SAFE_HEAP_STORE($2691 | 0, 0 | 0, 4);
                     $2692 = SAFE_HEAP_LOAD($num1$i | 0, 4, 0) | 0 | 0;
                     $2693 = $2692 & -2;
                     $phitmp$i$i$i$i$i$i$i240 = $2693 + -1 | 0;
                     $2694 = $2692 & 255;
                     $2695 = $2694 & 1;
                     $2696 = $2695 << 24 >> 24 == 0;
                     do {
                      if ($2696) {
                       $2697 = $2692 >>> 1;
                       $2698 = $2697 & 127;
                       $2699 = ($2694 & 255) < 22;
                       if ($2699) {
                        $2706 = $num1$i + 1 | 0;
                        $2707 = $2692 >>> 1;
                        $2708 = $2707 & 127;
                        $2709 = $2708 + 1 | 0;
                        _memcpy($2706 | 0, $2690 | 0, $2709 | 0) | 0;
                        _free($2690);
                        $$ph390 = $2698;
                        break;
                       }
                       $2700 = $2698 + 16 | 0;
                       $2701 = $2700 & 240;
                       $phitmp$i2$i$i$i$i$i$i243 = $2701 + -1 | 0;
                       $2702 = ($phitmp$i2$i$i$i$i$i$i243 | 0) == ($phitmp$i$i$i$i$i$i$i240 | 0);
                       if ($2702) {
                        break L879;
                       }
                       $2703 = $phitmp$i2$i$i$i$i$i$i243 >>> 0 <= $phitmp$i$i$i$i$i$i$i240 >>> 0;
                       $2704 = _malloc($2701) | 0;
                       $2705 = ($2704 | 0) == (0 | 0);
                       $or$cond$i$i$i$i$i$i245 = $2703 & $2705;
                       if ($or$cond$i$i$i$i$i$i245) {
                        break L879;
                       }
                       $2711 = $num1$i + 1 | 0;
                       $2712 = $2692 >>> 1;
                       $2713 = $2712 & 127;
                       $2714 = $2713 + 1 | 0;
                       _memcpy($2704 | 0, $2711 | 0, $2714 | 0) | 0;
                       $2715 = $2701 | 1;
                       SAFE_HEAP_STORE($num1$i | 0, $2715 | 0, 4);
                       SAFE_HEAP_STORE($2691 | 0, $2698 | 0, 4);
                       SAFE_HEAP_STORE($2689 | 0, $2704 | 0, 4);
                       break L879;
                      } else {
                       $2710 = $num1$i + 1 | 0;
                       SAFE_HEAP_STORE($2710 >> 0 | 0, 0 | 0, 1);
                       _free($2690);
                       $$ph390 = 0;
                      }
                     } while (0);
                     $2716 = $$ph390 << 1;
                     $2717 = $2716 & 255;
                     SAFE_HEAP_STORE($num1$i >> 0 | 0, $2717 | 0, 1);
                    }
                   } while (0);
                   {}
                   SAFE_HEAP_STORE($num1$i | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($num1$i + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($num1$i + 8 | 0, SAFE_HEAP_LOAD($7 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
                   $2718 = $7 + 4 | 0;
                   SAFE_HEAP_STORE($2718 | 0, 0 | 0, 4);
                   $2719 = $7 + 8 | 0;
                   SAFE_HEAP_STORE($2719 | 0, 0 | 0, 4);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
                   $2720 = SAFE_HEAP_LOAD($2677 | 0, 4, 0) | 0 | 0;
                   $2721 = $2720 + -24 | 0;
                   $2723 = $2720;
                   while (1) {
                    $2722 = $2723 + -24 | 0;
                    SAFE_HEAP_STORE($2677 | 0, $2722 | 0, 4);
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2722);
                    $$pre$i$i256 = SAFE_HEAP_LOAD($2677 | 0, 4, 0) | 0 | 0;
                    $2724 = ($$pre$i$i256 | 0) == ($2721 | 0);
                    if ($2724) {
                     $t12$0$i = $2672;
                     label = 669;
                     break;
                    } else {
                     $2723 = $$pre$i$i256;
                    }
                   }
                  }
                 }
                }
               }
              }
              L894 : do {
               if ((label | 0) == 669) {
                $2725 = ($t12$0$i | 0) == ($last | 0);
                L896 : do {
                 if ($2725) {
                  $$13$i259$ph = $first;
                 } else {
                  $2726 = SAFE_HEAP_LOAD($t12$0$i >> 0 | 0, 1, 0) | 0 | 0;
                  $2727 = $2726 << 24 >> 24 == 95;
                  if ($2727) {
                   $2728 = $t12$0$i + 1 | 0;
                   $2729 = ($2728 | 0) == ($last | 0);
                   if ($2729) {
                    $$13$i259$ph = $first;
                   } else {
                    __THREW__ = 0;
                    $2730 = invoke_iiii(230, $2728 | 0, $last | 0, $db | 0) | 0;
                    $2731 = __THREW__;
                    __THREW__ = 0;
                    $2732 = $2731 & 1;
                    if ($2732) {
                     label = 655;
                     break L894;
                    }
                    $2733 = ($2730 | 0) == ($2728 | 0);
                    if ($2733) {
                     $$13$i259$ph = $first;
                    } else {
                     $2734 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                     $2735 = $db + 4 | 0;
                     $2736 = SAFE_HEAP_LOAD($2735 | 0, 4, 0) | 0 | 0;
                     $2737 = ($2734 | 0) == ($2736 | 0);
                     if ($2737) {
                      label = 683;
                      break L894;
                     }
                     $2738 = $2736 + -24 | 0;
                     __THREW__ = 0;
                     invoke_viii(243, $9 | 0, 10373 | 0, $num1$i | 0);
                     $2739 = __THREW__;
                     __THREW__ = 0;
                     $2740 = $2739 & 1;
                     if ($2740) {
                      label = 655;
                      break L894;
                     }
                     __THREW__ = 0;
                     $2741 = invoke_iii(228, $9 | 0, 10296 | 0) | 0;
                     $2742 = __THREW__;
                     __THREW__ = 0;
                     $2743 = $2742 & 1;
                     do {
                      if ($2743) {
                       $2760 = ___cxa_find_matching_catch() | 0;
                       $2761 = tempRet0;
                       $$4$i258 = $2761;
                       $$411$i = $2760;
                      } else {
                       {}
                       SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($2741 | 0, 4, 0) | 0 | 0 | 0, 4);
                       SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($2741 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                       SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($2741 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                       SAFE_HEAP_STORE($2741 | 0, 0 | 0, 4);
                       $2744 = $2741 + 4 | 0;
                       SAFE_HEAP_STORE($2744 | 0, 0 | 0, 4);
                       $2745 = $2741 + 8 | 0;
                       SAFE_HEAP_STORE($2745 | 0, 0 | 0, 4);
                       $2746 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
                       $2747 = $2746 & 1;
                       $2748 = $2747 << 24 >> 24 == 0;
                       $2749 = $8 + 8 | 0;
                       $2750 = SAFE_HEAP_LOAD($2749 | 0, 4, 0) | 0 | 0;
                       $2751 = $8 + 1 | 0;
                       $2752 = $2748 ? $2751 : $2750;
                       $2753 = $8 + 4 | 0;
                       $2754 = SAFE_HEAP_LOAD($2753 | 0, 4, 0) | 0 | 0;
                       $2755 = $2746 & 255;
                       $2756 = $2755 >>> 1;
                       $2757 = $2748 ? $2756 : $2754;
                       __THREW__ = 0;
                       invoke_iiii(222, $2738 | 0, $2752 | 0, $2757 | 0) | 0;
                       $2758 = __THREW__;
                       __THREW__ = 0;
                       $2759 = $2758 & 1;
                       if ($2759) {
                        $2762 = ___cxa_find_matching_catch() | 0;
                        $2763 = tempRet0;
                        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                        $$4$i258 = $2763;
                        $$411$i = $2762;
                        break;
                       } else {
                        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                        $$13$i259$ph = $2730;
                        break L896;
                       }
                      }
                     } while (0);
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                     $$5$i261 = $$4$i258;
                     $$512$i = $$411$i;
                     break L894;
                    }
                   }
                  } else {
                   $$13$i259$ph = $first;
                  }
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
                $$1$i263 = $$13$i259$ph;
                break L831;
               }
              } while (0);
              if ((label | 0) == 655) {
               $2680 = ___cxa_find_matching_catch() | 0;
               $2681 = tempRet0;
               $$5$i261 = $2681;
               $$512$i = $2680;
              } else if ((label | 0) == 683) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
               $$1$i263 = $first;
               break L831;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num1$i);
              $$6$i264 = $$5$i261;
              $$613$i = $$512$i;
             }
            } while (0);
            ___resumeException($$613$i | 0);
           } else {
            $$1$i263 = $first;
           }
          } while (0);
          $2764 = ($$1$i263 | 0) == ($first | 0);
          if ($2764) {
           label = 696;
           break L73;
          }
          $2765 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $2766 = $db + 4 | 0;
          $2767 = SAFE_HEAP_LOAD($2766 | 0, 4, 0) | 0 | 0;
          $2768 = ($2765 | 0) == ($2767 | 0);
          if ($2768) {
           $$0 = $first;
           break L1;
          }
          $2769 = $db + 16 | 0;
          $2770 = $2767 + -24 | 0;
          $2771 = $db + 12 | 0;
          $2772 = SAFE_HEAP_LOAD($2771 | 0, 4, 0) | 0 | 0;
          SAFE_HEAP_STORE($68 | 0, $2772 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($67, $2770, $68);
          $2773 = $db + 20 | 0;
          $2774 = SAFE_HEAP_LOAD($2773 | 0, 4, 0) | 0 | 0;
          $2775 = $db + 24 | 0;
          $2776 = SAFE_HEAP_LOAD($2775 | 0, 4, 0) | 0 | 0;
          $2777 = $2774 >>> 0 < $2776 >>> 0;
          if ($2777) {
           $2778 = $67 + 12 | 0;
           $2779 = $2774 + 4 | 0;
           $2780 = SAFE_HEAP_LOAD($2778 | 0, 4, 0) | 0 | 0;
           $2781 = $2774 + 12 | 0;
           SAFE_HEAP_STORE($2781 | 0, $2780 | 0, 4);
           $2782 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2774 | 0, $2782 | 0, 4);
           $2783 = $67 + 4 | 0;
           $2784 = SAFE_HEAP_LOAD($2783 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2779 | 0, $2784 | 0, 4);
           $2785 = $67 + 8 | 0;
           $2786 = SAFE_HEAP_LOAD($2785 | 0, 4, 0) | 0 | 0;
           $2787 = $2774 + 8 | 0;
           SAFE_HEAP_STORE($2787 | 0, $2786 | 0, 4);
           SAFE_HEAP_STORE($2785 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2783 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
           $2788 = SAFE_HEAP_LOAD($2773 | 0, 4, 0) | 0 | 0;
           $2789 = $2788 + 16 | 0;
           SAFE_HEAP_STORE($2773 | 0, $2789 | 0, 4);
          } else {
           $2790 = $db + 28 | 0;
           $2791 = SAFE_HEAP_LOAD($2769 | 0, 4, 0) | 0 | 0;
           $2792 = $2774;
           $2793 = $2791;
           $2794 = $2792 - $2793 | 0;
           $2795 = $2794 >> 4;
           $2796 = $2795 + 1 | 0;
           $2797 = ($2794 | 0) < -16;
           if ($2797) {
            __THREW__ = 0;
            invoke_vi(238, $2769 | 0);
            $2798 = __THREW__;
            __THREW__ = 0;
            $2799 = ___cxa_find_matching_catch() | 0;
            $2800 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($67);
            $$10 = $2799;
            $$1013 = $2800;
            break L73;
           }
           $2801 = $2776;
           $2802 = $2801 - $2793 | 0;
           $2803 = $2802 >> 4;
           $2804 = $2803 >>> 0 < 1073741823;
           if ($2804) {
            $2805 = $2802 >> 3;
            $2806 = $2805 >>> 0 < $2796 >>> 0;
            $2807 = $2806 ? $2796 : $2805;
            $$0$i$i$i17 = $2807;
           } else {
            $$0$i$i$i17 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i16, $$0$i$i$i17, $2795, $2790);
           $2808 = $__v$i$i16 + 8 | 0;
           $2809 = SAFE_HEAP_LOAD($2808 | 0, 4, 0) | 0 | 0;
           $2810 = $67 + 12 | 0;
           $2811 = $2809 + 4 | 0;
           $2812 = SAFE_HEAP_LOAD($2810 | 0, 4, 0) | 0 | 0;
           $2813 = $2809 + 12 | 0;
           SAFE_HEAP_STORE($2813 | 0, $2812 | 0, 4);
           $2814 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2809 | 0, $2814 | 0, 4);
           $2815 = $67 + 4 | 0;
           $2816 = SAFE_HEAP_LOAD($2815 | 0, 4, 0) | 0 | 0;
           SAFE_HEAP_STORE($2811 | 0, $2816 | 0, 4);
           $2817 = $67 + 8 | 0;
           $2818 = SAFE_HEAP_LOAD($2817 | 0, 4, 0) | 0 | 0;
           $2819 = $2809 + 8 | 0;
           SAFE_HEAP_STORE($2819 | 0, $2818 | 0, 4);
           SAFE_HEAP_STORE($2817 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($2815 | 0, 0 | 0, 4);
           SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
           $2820 = $2809 + 16 | 0;
           SAFE_HEAP_STORE($2808 | 0, $2820 | 0, 4);
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2769, $__v$i$i16);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i16);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($67);
          $$0 = $$1$i263;
          break L1;
          break;
         }
        default:
         {
          label = 696;
          break L73;
         }
        }
       }
       break;
      }
     default:
      {
       label = 696;
      }
     }
    } while (0);
    do {
     if ((label | 0) == 696) {
      $2821 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $2822 = ($2821 | 0) == ($first | 0);
      if (!$2822) {
       $$0 = $2821;
       break L1;
      }
      $2823 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $2824 = ($2823 | 0) == ($first | 0);
      if ($2824) {
       $$0 = $first;
       break L1;
      }
      $2825 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $2826 = $db + 4 | 0;
      $2827 = SAFE_HEAP_LOAD($2826 | 0, 4, 0) | 0 | 0;
      $2828 = ($2825 | 0) == ($2827 | 0);
      if ($2828) {
       $$0 = $first;
       break L1;
      }
      $2829 = $db + 16 | 0;
      $2830 = $2827 + -24 | 0;
      $2831 = $db + 12 | 0;
      $2832 = SAFE_HEAP_LOAD($2831 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($70 | 0, $2832 | 0, 4);
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($69, $2830, $70);
      $2833 = $db + 20 | 0;
      $2834 = SAFE_HEAP_LOAD($2833 | 0, 4, 0) | 0 | 0;
      $2835 = $db + 24 | 0;
      $2836 = SAFE_HEAP_LOAD($2835 | 0, 4, 0) | 0 | 0;
      $2837 = $2834 >>> 0 < $2836 >>> 0;
      if ($2837) {
       $2838 = $69 + 12 | 0;
       $2839 = $2834 + 4 | 0;
       $2840 = SAFE_HEAP_LOAD($2838 | 0, 4, 0) | 0 | 0;
       $2841 = $2834 + 12 | 0;
       SAFE_HEAP_STORE($2841 | 0, $2840 | 0, 4);
       $2842 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($2834 | 0, $2842 | 0, 4);
       $2843 = $69 + 4 | 0;
       $2844 = SAFE_HEAP_LOAD($2843 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($2839 | 0, $2844 | 0, 4);
       $2845 = $69 + 8 | 0;
       $2846 = SAFE_HEAP_LOAD($2845 | 0, 4, 0) | 0 | 0;
       $2847 = $2834 + 8 | 0;
       SAFE_HEAP_STORE($2847 | 0, $2846 | 0, 4);
       SAFE_HEAP_STORE($2845 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($2843 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($69 | 0, 0 | 0, 4);
       $2848 = SAFE_HEAP_LOAD($2833 | 0, 4, 0) | 0 | 0;
       $2849 = $2848 + 16 | 0;
       SAFE_HEAP_STORE($2833 | 0, $2849 | 0, 4);
      } else {
       $2850 = $db + 28 | 0;
       $2851 = SAFE_HEAP_LOAD($2829 | 0, 4, 0) | 0 | 0;
       $2852 = $2834;
       $2853 = $2851;
       $2854 = $2852 - $2853 | 0;
       $2855 = $2854 >> 4;
       $2856 = $2855 + 1 | 0;
       $2857 = ($2854 | 0) < -16;
       if ($2857) {
        __THREW__ = 0;
        invoke_vi(238, $2829 | 0);
        $2858 = __THREW__;
        __THREW__ = 0;
        $2859 = ___cxa_find_matching_catch() | 0;
        $2860 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($69);
        $$10 = $2859;
        $$1013 = $2860;
        break;
       }
       $2861 = $2836;
       $2862 = $2861 - $2853 | 0;
       $2863 = $2862 >> 4;
       $2864 = $2863 >>> 0 < 1073741823;
       if ($2864) {
        $2865 = $2862 >> 3;
        $2866 = $2865 >>> 0 < $2856 >>> 0;
        $2867 = $2866 ? $2856 : $2865;
        $$0$i$i$i = $2867;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i, $$0$i$i$i, $2855, $2850);
       $2868 = $__v$i$i + 8 | 0;
       $2869 = SAFE_HEAP_LOAD($2868 | 0, 4, 0) | 0 | 0;
       $2870 = $69 + 12 | 0;
       $2871 = $2869 + 4 | 0;
       $2872 = SAFE_HEAP_LOAD($2870 | 0, 4, 0) | 0 | 0;
       $2873 = $2869 + 12 | 0;
       SAFE_HEAP_STORE($2873 | 0, $2872 | 0, 4);
       $2874 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($2869 | 0, $2874 | 0, 4);
       $2875 = $69 + 4 | 0;
       $2876 = SAFE_HEAP_LOAD($2875 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($2871 | 0, $2876 | 0, 4);
       $2877 = $69 + 8 | 0;
       $2878 = SAFE_HEAP_LOAD($2877 | 0, 4, 0) | 0 | 0;
       $2879 = $2869 + 8 | 0;
       SAFE_HEAP_STORE($2879 | 0, $2878 | 0, 4);
       SAFE_HEAP_STORE($2877 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($2875 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($69 | 0, 0 | 0, 4);
       $2880 = $2869 + 16 | 0;
       SAFE_HEAP_STORE($2868 | 0, $2880 | 0, 4);
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2829, $__v$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($69);
      $$0 = $2823;
      break L1;
     }
    } while (0);
    ___resumeException($$10 | 0);
   } else {
    $$0 = $227;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$0$i$i$i100 = 0, $$0$i$i$i105 = 0, $$0$i$i$i110 = 0, $$0$i$i$i115 = 0, $$0$i$i$i120 = 0, $$0$i$i$i125 = 0, $$0$i$i$i130 = 0, $$0$i$i$i135 = 0, $$0$i$i$i140 = 0, $$0$i$i$i145 = 0, $$0$i$i$i15 = 0, $$0$i$i$i150 = 0, $$0$i$i$i155 = 0, $$0$i$i$i160 = 0, $$0$i$i$i165 = 0, $$0$i$i$i170 = 0, $$0$i$i$i175 = 0;
 var $$0$i$i$i180 = 0, $$0$i$i$i185 = 0, $$0$i$i$i190 = 0, $$0$i$i$i195 = 0, $$0$i$i$i20 = 0, $$0$i$i$i200 = 0, $$0$i$i$i205 = 0, $$0$i$i$i210 = 0, $$0$i$i$i215 = 0, $$0$i$i$i220 = 0, $$0$i$i$i225 = 0, $$0$i$i$i25 = 0, $$0$i$i$i30 = 0, $$0$i$i$i35 = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i5 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0;
 var $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $$0$i$i$i80 = 0, $$0$i$i$i85 = 0, $$0$i$i$i90 = 0, $$0$i$i$i95 = 0, $$02 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
 var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
 var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
 var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
 var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
 var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
 var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
 var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
 var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
 var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
 var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
 var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
 var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
 var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
 var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
 var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
 var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__v$i$i = 0, $__v$i$i104 = 0, $__v$i$i109 = 0, $__v$i$i114 = 0, $__v$i$i119 = 0, $__v$i$i124 = 0, $__v$i$i129 = 0, $__v$i$i134 = 0, $__v$i$i139 = 0;
 var $__v$i$i14 = 0, $__v$i$i144 = 0, $__v$i$i149 = 0, $__v$i$i154 = 0, $__v$i$i159 = 0, $__v$i$i164 = 0, $__v$i$i169 = 0, $__v$i$i174 = 0, $__v$i$i179 = 0, $__v$i$i184 = 0, $__v$i$i189 = 0, $__v$i$i19 = 0, $__v$i$i194 = 0, $__v$i$i199 = 0, $__v$i$i204 = 0, $__v$i$i209 = 0, $__v$i$i214 = 0, $__v$i$i219 = 0, $__v$i$i224 = 0, $__v$i$i24 = 0;
 var $__v$i$i29 = 0, $__v$i$i34 = 0, $__v$i$i39 = 0, $__v$i$i4 = 0, $__v$i$i44 = 0, $__v$i$i49 = 0, $__v$i$i54 = 0, $__v$i$i59 = 0, $__v$i$i64 = 0, $__v$i$i69 = 0, $__v$i$i74 = 0, $__v$i$i79 = 0, $__v$i$i84 = 0, $__v$i$i89 = 0, $__v$i$i9 = 0, $__v$i$i94 = 0, $__v$i$i99 = 0, $isdigit = 0, $isdigittmp = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2032 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i224 = sp + 2004 | 0;
 $__v$i$i219 = sp + 1984 | 0;
 $__v$i$i214 = sp + 1964 | 0;
 $__v$i$i209 = sp + 1944 | 0;
 $__v$i$i204 = sp + 1924 | 0;
 $__v$i$i199 = sp + 1904 | 0;
 $__v$i$i194 = sp + 1884 | 0;
 $__v$i$i189 = sp + 1864 | 0;
 $__v$i$i184 = sp + 1844 | 0;
 $__v$i$i179 = sp + 1824 | 0;
 $__v$i$i174 = sp + 1804 | 0;
 $__v$i$i169 = sp + 1784 | 0;
 $__v$i$i164 = sp + 1764 | 0;
 $__v$i$i159 = sp + 1744 | 0;
 $__v$i$i154 = sp + 1724 | 0;
 $__v$i$i149 = sp + 1704 | 0;
 $__v$i$i144 = sp + 1684 | 0;
 $__v$i$i139 = sp + 1664 | 0;
 $__v$i$i134 = sp + 1644 | 0;
 $__v$i$i129 = sp + 1624 | 0;
 $__v$i$i124 = sp + 1604 | 0;
 $__v$i$i119 = sp + 1584 | 0;
 $__v$i$i114 = sp + 1564 | 0;
 $__v$i$i109 = sp + 1544 | 0;
 $__v$i$i104 = sp + 1524 | 0;
 $__v$i$i99 = sp + 1504 | 0;
 $__v$i$i94 = sp + 1484 | 0;
 $__v$i$i89 = sp + 1464 | 0;
 $__v$i$i84 = sp + 1444 | 0;
 $__v$i$i79 = sp + 1424 | 0;
 $__v$i$i74 = sp + 1404 | 0;
 $__v$i$i69 = sp + 1384 | 0;
 $__v$i$i64 = sp + 1364 | 0;
 $__v$i$i59 = sp + 1344 | 0;
 $__v$i$i54 = sp + 1324 | 0;
 $__v$i$i49 = sp + 1304 | 0;
 $__v$i$i44 = sp + 1284 | 0;
 $__v$i$i39 = sp + 1264 | 0;
 $__v$i$i34 = sp + 1244 | 0;
 $__v$i$i29 = sp + 1224 | 0;
 $__v$i$i24 = sp + 1204 | 0;
 $__v$i$i19 = sp + 1184 | 0;
 $__v$i$i14 = sp + 1164 | 0;
 $__v$i$i9 = sp + 1144 | 0;
 $__v$i$i4 = sp + 1124 | 0;
 $__v$i$i = sp + 1104 | 0;
 $0 = sp + 1080 | 0;
 $1 = sp + 1056 | 0;
 $2 = sp + 1032 | 0;
 $3 = sp + 1008 | 0;
 $4 = sp + 984 | 0;
 $5 = sp + 960 | 0;
 $6 = sp + 936 | 0;
 $7 = sp + 912 | 0;
 $8 = sp + 888 | 0;
 $9 = sp + 864 | 0;
 $10 = sp + 840 | 0;
 $11 = sp + 816 | 0;
 $12 = sp + 792 | 0;
 $13 = sp + 768 | 0;
 $14 = sp + 744 | 0;
 $15 = sp + 720 | 0;
 $16 = sp + 696 | 0;
 $17 = sp + 672 | 0;
 $18 = sp + 648 | 0;
 $19 = sp + 624 | 0;
 $20 = sp + 600 | 0;
 $21 = sp + 576 | 0;
 $22 = sp + 552 | 0;
 $23 = sp + 528 | 0;
 $24 = sp + 504 | 0;
 $25 = sp + 480 | 0;
 $26 = sp + 456 | 0;
 $27 = sp + 432 | 0;
 $28 = sp + 408 | 0;
 $29 = sp + 384 | 0;
 $30 = sp + 360 | 0;
 $31 = sp + 336 | 0;
 $32 = sp + 312 | 0;
 $33 = sp + 288 | 0;
 $34 = sp + 264 | 0;
 $35 = sp + 240 | 0;
 $36 = sp + 216 | 0;
 $37 = sp + 192 | 0;
 $38 = sp + 168 | 0;
 $39 = sp + 144 | 0;
 $40 = sp + 120 | 0;
 $41 = sp + 96 | 0;
 $42 = sp + 72 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 24 | 0;
 $45 = sp;
 $46 = $last;
 $47 = $first;
 $48 = $46 - $47 | 0;
 $49 = ($48 | 0) > 1;
 L1 : do {
  if ($49) {
   $50 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $51 = $50 << 24 >> 24;
   L3 : do {
    switch ($51 | 0) {
    case 97:
     {
      $52 = $first + 1 | 0;
      $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
      $54 = $53 << 24 >> 24;
      switch ($54 | 0) {
      case 97:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0, 10542);
        $55 = $db + 4 | 0;
        $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
        $57 = $db + 8 | 0;
        $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
        $59 = $56 >>> 0 < $58 >>> 0;
        if ($59) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56, $0);
         $60 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
         $61 = $60 + 24 | 0;
         SAFE_HEAP_STORE($55 | 0, $61 | 0, 4);
        } else {
         $62 = $db + 12 | 0;
         $63 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $64 = $56;
         $65 = $63;
         $66 = $64 - $65 | 0;
         $67 = ($66 | 0) / 24 & -1;
         $68 = $67 + 1 | 0;
         $69 = ($66 | 0) < -24;
         if ($69) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $70 = __THREW__;
          __THREW__ = 0;
          $71 = ___cxa_find_matching_catch() | 0;
          $72 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          $$02 = $71;
          $$03 = $72;
          break L3;
         }
         $73 = $58;
         $74 = $73 - $65 | 0;
         $75 = ($74 | 0) / 24 & -1;
         $76 = $75 >>> 0 < 1073741823;
         if ($76) {
          $77 = $75 << 1;
          $78 = $77 >>> 0 < $68 >>> 0;
          $79 = $78 ? $68 : $77;
          $$0$i$i$i = $79;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $67, $62);
         $80 = $__v$i$i + 8 | 0;
         $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81, $0);
         $82 = $81 + 24 | 0;
         SAFE_HEAP_STORE($80 | 0, $82 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        $83 = $first + 2 | 0;
        $$0 = $83;
        break L1;
        break;
       }
      case 110:
      case 100:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($1, 10553);
        $84 = $db + 4 | 0;
        $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
        $86 = $db + 8 | 0;
        $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
        $88 = $85 >>> 0 < $87 >>> 0;
        if ($88) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($85, $1);
         $89 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
         $90 = $89 + 24 | 0;
         SAFE_HEAP_STORE($84 | 0, $90 | 0, 4);
        } else {
         $91 = $db + 12 | 0;
         $92 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $93 = $85;
         $94 = $92;
         $95 = $93 - $94 | 0;
         $96 = ($95 | 0) / 24 & -1;
         $97 = $96 + 1 | 0;
         $98 = ($95 | 0) < -24;
         if ($98) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $99 = __THREW__;
          __THREW__ = 0;
          $100 = ___cxa_find_matching_catch() | 0;
          $101 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          $$02 = $100;
          $$03 = $101;
          break L3;
         }
         $102 = $87;
         $103 = $102 - $94 | 0;
         $104 = ($103 | 0) / 24 & -1;
         $105 = $104 >>> 0 < 1073741823;
         if ($105) {
          $106 = $104 << 1;
          $107 = $106 >>> 0 < $97 >>> 0;
          $108 = $107 ? $97 : $106;
          $$0$i$i$i5 = $108;
         } else {
          $$0$i$i$i5 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i5, $96, $91);
         $109 = $__v$i$i4 + 8 | 0;
         $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($110, $1);
         $111 = $110 + 24 | 0;
         SAFE_HEAP_STORE($109 | 0, $111 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        $112 = $first + 2 | 0;
        $$0 = $112;
        break L1;
        break;
       }
      case 78:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($2, 10563);
        $113 = $db + 4 | 0;
        $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
        $115 = $db + 8 | 0;
        $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
        $117 = $114 >>> 0 < $116 >>> 0;
        if ($117) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($114, $2);
         $118 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
         $119 = $118 + 24 | 0;
         SAFE_HEAP_STORE($113 | 0, $119 | 0, 4);
        } else {
         $120 = $db + 12 | 0;
         $121 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $122 = $114;
         $123 = $121;
         $124 = $122 - $123 | 0;
         $125 = ($124 | 0) / 24 & -1;
         $126 = $125 + 1 | 0;
         $127 = ($124 | 0) < -24;
         if ($127) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $128 = __THREW__;
          __THREW__ = 0;
          $129 = ___cxa_find_matching_catch() | 0;
          $130 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
          $$02 = $129;
          $$03 = $130;
          break L3;
         }
         $131 = $116;
         $132 = $131 - $123 | 0;
         $133 = ($132 | 0) / 24 & -1;
         $134 = $133 >>> 0 < 1073741823;
         if ($134) {
          $135 = $133 << 1;
          $136 = $135 >>> 0 < $126 >>> 0;
          $137 = $136 ? $126 : $135;
          $$0$i$i$i10 = $137;
         } else {
          $$0$i$i$i10 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i9, $$0$i$i$i10, $125, $120);
         $138 = $__v$i$i9 + 8 | 0;
         $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($139, $2);
         $140 = $139 + 24 | 0;
         SAFE_HEAP_STORE($138 | 0, $140 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i9);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i9);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        $141 = $first + 2 | 0;
        $$0 = $141;
        break L1;
        break;
       }
      case 83:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3, 10574);
        $142 = $db + 4 | 0;
        $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
        $144 = $db + 8 | 0;
        $145 = SAFE_HEAP_LOAD($144 | 0, 4, 0) | 0 | 0;
        $146 = $143 >>> 0 < $145 >>> 0;
        if ($146) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($143, $3);
         $147 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
         $148 = $147 + 24 | 0;
         SAFE_HEAP_STORE($142 | 0, $148 | 0, 4);
        } else {
         $149 = $db + 12 | 0;
         $150 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $151 = $143;
         $152 = $150;
         $153 = $151 - $152 | 0;
         $154 = ($153 | 0) / 24 & -1;
         $155 = $154 + 1 | 0;
         $156 = ($153 | 0) < -24;
         if ($156) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $157 = __THREW__;
          __THREW__ = 0;
          $158 = ___cxa_find_matching_catch() | 0;
          $159 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
          $$02 = $158;
          $$03 = $159;
          break L3;
         }
         $160 = $145;
         $161 = $160 - $152 | 0;
         $162 = ($161 | 0) / 24 & -1;
         $163 = $162 >>> 0 < 1073741823;
         if ($163) {
          $164 = $162 << 1;
          $165 = $164 >>> 0 < $155 >>> 0;
          $166 = $165 ? $155 : $164;
          $$0$i$i$i15 = $166;
         } else {
          $$0$i$i$i15 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i14, $$0$i$i$i15, $154, $149);
         $167 = $__v$i$i14 + 8 | 0;
         $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($168, $3);
         $169 = $168 + 24 | 0;
         SAFE_HEAP_STORE($167 | 0, $169 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i14);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i14);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $170 = $first + 2 | 0;
        $$0 = $170;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 99:
     {
      $171 = $first + 1 | 0;
      $172 = SAFE_HEAP_LOAD($171 >> 0 | 0, 1, 0) | 0 | 0;
      $173 = $172 << 24 >> 24;
      switch ($173 | 0) {
      case 108:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($4, 10584);
        $174 = $db + 4 | 0;
        $175 = SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0;
        $176 = $db + 8 | 0;
        $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
        $178 = $175 >>> 0 < $177 >>> 0;
        if ($178) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($175, $4);
         $179 = SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0;
         $180 = $179 + 24 | 0;
         SAFE_HEAP_STORE($174 | 0, $180 | 0, 4);
        } else {
         $181 = $db + 12 | 0;
         $182 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $183 = $175;
         $184 = $182;
         $185 = $183 - $184 | 0;
         $186 = ($185 | 0) / 24 & -1;
         $187 = $186 + 1 | 0;
         $188 = ($185 | 0) < -24;
         if ($188) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $189 = __THREW__;
          __THREW__ = 0;
          $190 = ___cxa_find_matching_catch() | 0;
          $191 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
          $$02 = $190;
          $$03 = $191;
          break L3;
         }
         $192 = $177;
         $193 = $192 - $184 | 0;
         $194 = ($193 | 0) / 24 & -1;
         $195 = $194 >>> 0 < 1073741823;
         if ($195) {
          $196 = $194 << 1;
          $197 = $196 >>> 0 < $187 >>> 0;
          $198 = $197 ? $187 : $196;
          $$0$i$i$i20 = $198;
         } else {
          $$0$i$i$i20 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i19, $$0$i$i$i20, $186, $181);
         $199 = $__v$i$i19 + 8 | 0;
         $200 = SAFE_HEAP_LOAD($199 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($200, $4);
         $201 = $200 + 24 | 0;
         SAFE_HEAP_STORE($199 | 0, $201 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i19);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i19);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $202 = $first + 2 | 0;
        $$0 = $202;
        break L1;
        break;
       }
      case 109:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($5, 10595);
        $203 = $db + 4 | 0;
        $204 = SAFE_HEAP_LOAD($203 | 0, 4, 0) | 0 | 0;
        $205 = $db + 8 | 0;
        $206 = SAFE_HEAP_LOAD($205 | 0, 4, 0) | 0 | 0;
        $207 = $204 >>> 0 < $206 >>> 0;
        if ($207) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($204, $5);
         $208 = SAFE_HEAP_LOAD($203 | 0, 4, 0) | 0 | 0;
         $209 = $208 + 24 | 0;
         SAFE_HEAP_STORE($203 | 0, $209 | 0, 4);
        } else {
         $210 = $db + 12 | 0;
         $211 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $212 = $204;
         $213 = $211;
         $214 = $212 - $213 | 0;
         $215 = ($214 | 0) / 24 & -1;
         $216 = $215 + 1 | 0;
         $217 = ($214 | 0) < -24;
         if ($217) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $218 = __THREW__;
          __THREW__ = 0;
          $219 = ___cxa_find_matching_catch() | 0;
          $220 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
          $$02 = $219;
          $$03 = $220;
          break L3;
         }
         $221 = $206;
         $222 = $221 - $213 | 0;
         $223 = ($222 | 0) / 24 & -1;
         $224 = $223 >>> 0 < 1073741823;
         if ($224) {
          $225 = $223 << 1;
          $226 = $225 >>> 0 < $216 >>> 0;
          $227 = $226 ? $216 : $225;
          $$0$i$i$i25 = $227;
         } else {
          $$0$i$i$i25 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i24, $$0$i$i$i25, $215, $210);
         $228 = $__v$i$i24 + 8 | 0;
         $229 = SAFE_HEAP_LOAD($228 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($229, $5);
         $230 = $229 + 24 | 0;
         SAFE_HEAP_STORE($228 | 0, $230 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i24);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i24);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $231 = $first + 2 | 0;
        $$0 = $231;
        break L1;
        break;
       }
      case 111:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($6, 10605);
        $232 = $db + 4 | 0;
        $233 = SAFE_HEAP_LOAD($232 | 0, 4, 0) | 0 | 0;
        $234 = $db + 8 | 0;
        $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
        $236 = $233 >>> 0 < $235 >>> 0;
        if ($236) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($233, $6);
         $237 = SAFE_HEAP_LOAD($232 | 0, 4, 0) | 0 | 0;
         $238 = $237 + 24 | 0;
         SAFE_HEAP_STORE($232 | 0, $238 | 0, 4);
        } else {
         $239 = $db + 12 | 0;
         $240 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $241 = $233;
         $242 = $240;
         $243 = $241 - $242 | 0;
         $244 = ($243 | 0) / 24 & -1;
         $245 = $244 + 1 | 0;
         $246 = ($243 | 0) < -24;
         if ($246) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $247 = __THREW__;
          __THREW__ = 0;
          $248 = ___cxa_find_matching_catch() | 0;
          $249 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
          $$02 = $248;
          $$03 = $249;
          break L3;
         }
         $250 = $235;
         $251 = $250 - $242 | 0;
         $252 = ($251 | 0) / 24 & -1;
         $253 = $252 >>> 0 < 1073741823;
         if ($253) {
          $254 = $252 << 1;
          $255 = $254 >>> 0 < $245 >>> 0;
          $256 = $255 ? $245 : $254;
          $$0$i$i$i30 = $256;
         } else {
          $$0$i$i$i30 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i29, $$0$i$i$i30, $244, $239);
         $257 = $__v$i$i29 + 8 | 0;
         $258 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($258, $6);
         $259 = $258 + 24 | 0;
         SAFE_HEAP_STORE($257 | 0, $259 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i29);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i29);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
        $260 = $first + 2 | 0;
        $$0 = $260;
        break L1;
        break;
       }
      case 118:
       {
        $261 = $db + 63 | 0;
        $262 = SAFE_HEAP_LOAD($261 >> 0 | 0, 1, 0) | 0 | 0;
        SAFE_HEAP_STORE($261 >> 0 | 0, 0 | 0, 1);
        $263 = $first + 2 | 0;
        $264 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($263, $last, $db) | 0;
        SAFE_HEAP_STORE($261 >> 0 | 0, $262 | 0, 1);
        $265 = ($264 | 0) == ($263 | 0);
        if ($265) {
         $$0 = $first;
         break L1;
        }
        $266 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $267 = $db + 4 | 0;
        $268 = SAFE_HEAP_LOAD($267 | 0, 4, 0) | 0 | 0;
        $269 = ($266 | 0) == ($268 | 0);
        if ($269) {
         $$0 = $first;
         break L1;
        }
        $270 = $268 + -24 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($270, 0, 10615) | 0;
        $271 = $db + 60 | 0;
        SAFE_HEAP_STORE($271 >> 0 | 0, 1 | 0, 1);
        $$0 = $264;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 100:
     {
      $272 = $first + 1 | 0;
      $273 = SAFE_HEAP_LOAD($272 >> 0 | 0, 1, 0) | 0 | 0;
      $274 = $273 << 24 >> 24;
      switch ($274 | 0) {
      case 97:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($7, 10625);
        $275 = $db + 4 | 0;
        $276 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
        $277 = $db + 8 | 0;
        $278 = SAFE_HEAP_LOAD($277 | 0, 4, 0) | 0 | 0;
        $279 = $276 >>> 0 < $278 >>> 0;
        if ($279) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($276, $7);
         $280 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
         $281 = $280 + 24 | 0;
         SAFE_HEAP_STORE($275 | 0, $281 | 0, 4);
        } else {
         $282 = $db + 12 | 0;
         $283 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $284 = $276;
         $285 = $283;
         $286 = $284 - $285 | 0;
         $287 = ($286 | 0) / 24 & -1;
         $288 = $287 + 1 | 0;
         $289 = ($286 | 0) < -24;
         if ($289) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $290 = __THREW__;
          __THREW__ = 0;
          $291 = ___cxa_find_matching_catch() | 0;
          $292 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
          $$02 = $291;
          $$03 = $292;
          break L3;
         }
         $293 = $278;
         $294 = $293 - $285 | 0;
         $295 = ($294 | 0) / 24 & -1;
         $296 = $295 >>> 0 < 1073741823;
         if ($296) {
          $297 = $295 << 1;
          $298 = $297 >>> 0 < $288 >>> 0;
          $299 = $298 ? $288 : $297;
          $$0$i$i$i35 = $299;
         } else {
          $$0$i$i$i35 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i34, $$0$i$i$i35, $287, $282);
         $300 = $__v$i$i34 + 8 | 0;
         $301 = SAFE_HEAP_LOAD($300 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($301, $7);
         $302 = $301 + 24 | 0;
         SAFE_HEAP_STORE($300 | 0, $302 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i34);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i34);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        $303 = $first + 2 | 0;
        $$0 = $303;
        break L1;
        break;
       }
      case 101:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($8, 10643);
        $304 = $db + 4 | 0;
        $305 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0;
        $306 = $db + 8 | 0;
        $307 = SAFE_HEAP_LOAD($306 | 0, 4, 0) | 0 | 0;
        $308 = $305 >>> 0 < $307 >>> 0;
        if ($308) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($305, $8);
         $309 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0;
         $310 = $309 + 24 | 0;
         SAFE_HEAP_STORE($304 | 0, $310 | 0, 4);
        } else {
         $311 = $db + 12 | 0;
         $312 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $313 = $305;
         $314 = $312;
         $315 = $313 - $314 | 0;
         $316 = ($315 | 0) / 24 & -1;
         $317 = $316 + 1 | 0;
         $318 = ($315 | 0) < -24;
         if ($318) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $319 = __THREW__;
          __THREW__ = 0;
          $320 = ___cxa_find_matching_catch() | 0;
          $321 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
          $$02 = $320;
          $$03 = $321;
          break L3;
         }
         $322 = $307;
         $323 = $322 - $314 | 0;
         $324 = ($323 | 0) / 24 & -1;
         $325 = $324 >>> 0 < 1073741823;
         if ($325) {
          $326 = $324 << 1;
          $327 = $326 >>> 0 < $317 >>> 0;
          $328 = $327 ? $317 : $326;
          $$0$i$i$i40 = $328;
         } else {
          $$0$i$i$i40 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i39, $$0$i$i$i40, $316, $311);
         $329 = $__v$i$i39 + 8 | 0;
         $330 = SAFE_HEAP_LOAD($329 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($330, $8);
         $331 = $330 + 24 | 0;
         SAFE_HEAP_STORE($329 | 0, $331 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i39);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i39);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        $332 = $first + 2 | 0;
        $$0 = $332;
        break L1;
        break;
       }
      case 108:
       {
        $333 = _malloc(16) | 0;
        $334 = $9 + 8 | 0;
        SAFE_HEAP_STORE($334 | 0, $333 | 0, 4);
        SAFE_HEAP_STORE($9 | 0, 17 | 0, 4);
        $335 = $9 + 4 | 0;
        SAFE_HEAP_STORE($335 | 0, 15 | 0, 4);
        dest = $333;
        src = 10653;
        stop = dest + 15 | 0;
        do {
         SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
         dest = dest + 1 | 0;
         src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        $336 = $333 + 15 | 0;
        SAFE_HEAP_STORE($336 >> 0 | 0, 0 | 0, 1);
        $337 = $9 + 12 | 0;
        SAFE_HEAP_STORE($337 | 0, 0 | 0, 4);
        $338 = $337 + 4 | 0;
        SAFE_HEAP_STORE($338 | 0, 0 | 0, 4);
        $339 = $337 + 8 | 0;
        SAFE_HEAP_STORE($339 | 0, 0 | 0, 4);
        $340 = $db + 4 | 0;
        $341 = SAFE_HEAP_LOAD($340 | 0, 4, 0) | 0 | 0;
        $342 = $db + 8 | 0;
        $343 = SAFE_HEAP_LOAD($342 | 0, 4, 0) | 0 | 0;
        $344 = $341 >>> 0 < $343 >>> 0;
        if ($344) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($341, $9);
         $345 = SAFE_HEAP_LOAD($340 | 0, 4, 0) | 0 | 0;
         $346 = $345 + 24 | 0;
         SAFE_HEAP_STORE($340 | 0, $346 | 0, 4);
        } else {
         $347 = $db + 12 | 0;
         $348 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $349 = $341;
         $350 = $348;
         $351 = $349 - $350 | 0;
         $352 = ($351 | 0) / 24 & -1;
         $353 = $352 + 1 | 0;
         $354 = ($351 | 0) < -24;
         if ($354) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $355 = __THREW__;
          __THREW__ = 0;
          $356 = ___cxa_find_matching_catch() | 0;
          $357 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
          $$02 = $356;
          $$03 = $357;
          break L3;
         }
         $358 = $343;
         $359 = $358 - $350 | 0;
         $360 = ($359 | 0) / 24 & -1;
         $361 = $360 >>> 0 < 1073741823;
         if ($361) {
          $362 = $360 << 1;
          $363 = $362 >>> 0 < $353 >>> 0;
          $364 = $363 ? $353 : $362;
          $$0$i$i$i45 = $364;
         } else {
          $$0$i$i$i45 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i44, $$0$i$i$i45, $352, $347);
         $365 = $__v$i$i44 + 8 | 0;
         $366 = SAFE_HEAP_LOAD($365 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($366, $9);
         $367 = $366 + 24 | 0;
         SAFE_HEAP_STORE($365 | 0, $367 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i44);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i44);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
        $368 = $first + 2 | 0;
        $$0 = $368;
        break L1;
        break;
       }
      case 118:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($10, 10669);
        $369 = $db + 4 | 0;
        $370 = SAFE_HEAP_LOAD($369 | 0, 4, 0) | 0 | 0;
        $371 = $db + 8 | 0;
        $372 = SAFE_HEAP_LOAD($371 | 0, 4, 0) | 0 | 0;
        $373 = $370 >>> 0 < $372 >>> 0;
        if ($373) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($370, $10);
         $374 = SAFE_HEAP_LOAD($369 | 0, 4, 0) | 0 | 0;
         $375 = $374 + 24 | 0;
         SAFE_HEAP_STORE($369 | 0, $375 | 0, 4);
        } else {
         $376 = $db + 12 | 0;
         $377 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $378 = $370;
         $379 = $377;
         $380 = $378 - $379 | 0;
         $381 = ($380 | 0) / 24 & -1;
         $382 = $381 + 1 | 0;
         $383 = ($380 | 0) < -24;
         if ($383) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $384 = __THREW__;
          __THREW__ = 0;
          $385 = ___cxa_find_matching_catch() | 0;
          $386 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
          $$02 = $385;
          $$03 = $386;
          break L3;
         }
         $387 = $372;
         $388 = $387 - $379 | 0;
         $389 = ($388 | 0) / 24 & -1;
         $390 = $389 >>> 0 < 1073741823;
         if ($390) {
          $391 = $389 << 1;
          $392 = $391 >>> 0 < $382 >>> 0;
          $393 = $392 ? $382 : $391;
          $$0$i$i$i50 = $393;
         } else {
          $$0$i$i$i50 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i49, $$0$i$i$i50, $381, $376);
         $394 = $__v$i$i49 + 8 | 0;
         $395 = SAFE_HEAP_LOAD($394 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($395, $10);
         $396 = $395 + 24 | 0;
         SAFE_HEAP_STORE($394 | 0, $396 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i49);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i49);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
        $397 = $first + 2 | 0;
        $$0 = $397;
        break L1;
        break;
       }
      case 86:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($11, 10679);
        $398 = $db + 4 | 0;
        $399 = SAFE_HEAP_LOAD($398 | 0, 4, 0) | 0 | 0;
        $400 = $db + 8 | 0;
        $401 = SAFE_HEAP_LOAD($400 | 0, 4, 0) | 0 | 0;
        $402 = $399 >>> 0 < $401 >>> 0;
        if ($402) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($399, $11);
         $403 = SAFE_HEAP_LOAD($398 | 0, 4, 0) | 0 | 0;
         $404 = $403 + 24 | 0;
         SAFE_HEAP_STORE($398 | 0, $404 | 0, 4);
        } else {
         $405 = $db + 12 | 0;
         $406 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $407 = $399;
         $408 = $406;
         $409 = $407 - $408 | 0;
         $410 = ($409 | 0) / 24 & -1;
         $411 = $410 + 1 | 0;
         $412 = ($409 | 0) < -24;
         if ($412) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $413 = __THREW__;
          __THREW__ = 0;
          $414 = ___cxa_find_matching_catch() | 0;
          $415 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
          $$02 = $414;
          $$03 = $415;
          break L3;
         }
         $416 = $401;
         $417 = $416 - $408 | 0;
         $418 = ($417 | 0) / 24 & -1;
         $419 = $418 >>> 0 < 1073741823;
         if ($419) {
          $420 = $418 << 1;
          $421 = $420 >>> 0 < $411 >>> 0;
          $422 = $421 ? $411 : $420;
          $$0$i$i$i55 = $422;
         } else {
          $$0$i$i$i55 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i54, $$0$i$i$i55, $410, $405);
         $423 = $__v$i$i54 + 8 | 0;
         $424 = SAFE_HEAP_LOAD($423 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($424, $11);
         $425 = $424 + 24 | 0;
         SAFE_HEAP_STORE($423 | 0, $425 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i54);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i54);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        $426 = $first + 2 | 0;
        $$0 = $426;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 101:
     {
      $427 = $first + 1 | 0;
      $428 = SAFE_HEAP_LOAD($427 >> 0 | 0, 1, 0) | 0 | 0;
      $429 = $428 << 24 >> 24;
      switch ($429 | 0) {
      case 111:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12, 10690);
        $430 = $db + 4 | 0;
        $431 = SAFE_HEAP_LOAD($430 | 0, 4, 0) | 0 | 0;
        $432 = $db + 8 | 0;
        $433 = SAFE_HEAP_LOAD($432 | 0, 4, 0) | 0 | 0;
        $434 = $431 >>> 0 < $433 >>> 0;
        if ($434) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($431, $12);
         $435 = SAFE_HEAP_LOAD($430 | 0, 4, 0) | 0 | 0;
         $436 = $435 + 24 | 0;
         SAFE_HEAP_STORE($430 | 0, $436 | 0, 4);
        } else {
         $437 = $db + 12 | 0;
         $438 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $439 = $431;
         $440 = $438;
         $441 = $439 - $440 | 0;
         $442 = ($441 | 0) / 24 & -1;
         $443 = $442 + 1 | 0;
         $444 = ($441 | 0) < -24;
         if ($444) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $445 = __THREW__;
          __THREW__ = 0;
          $446 = ___cxa_find_matching_catch() | 0;
          $447 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
          $$02 = $446;
          $$03 = $447;
          break L3;
         }
         $448 = $433;
         $449 = $448 - $440 | 0;
         $450 = ($449 | 0) / 24 & -1;
         $451 = $450 >>> 0 < 1073741823;
         if ($451) {
          $452 = $450 << 1;
          $453 = $452 >>> 0 < $443 >>> 0;
          $454 = $453 ? $443 : $452;
          $$0$i$i$i60 = $454;
         } else {
          $$0$i$i$i60 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i59, $$0$i$i$i60, $442, $437);
         $455 = $__v$i$i59 + 8 | 0;
         $456 = SAFE_HEAP_LOAD($455 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($456, $12);
         $457 = $456 + 24 | 0;
         SAFE_HEAP_STORE($455 | 0, $457 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i59);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i59);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        $458 = $first + 2 | 0;
        $$0 = $458;
        break L1;
        break;
       }
      case 79:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($13, 10700);
        $459 = $db + 4 | 0;
        $460 = SAFE_HEAP_LOAD($459 | 0, 4, 0) | 0 | 0;
        $461 = $db + 8 | 0;
        $462 = SAFE_HEAP_LOAD($461 | 0, 4, 0) | 0 | 0;
        $463 = $460 >>> 0 < $462 >>> 0;
        if ($463) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($460, $13);
         $464 = SAFE_HEAP_LOAD($459 | 0, 4, 0) | 0 | 0;
         $465 = $464 + 24 | 0;
         SAFE_HEAP_STORE($459 | 0, $465 | 0, 4);
        } else {
         $466 = $db + 12 | 0;
         $467 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $468 = $460;
         $469 = $467;
         $470 = $468 - $469 | 0;
         $471 = ($470 | 0) / 24 & -1;
         $472 = $471 + 1 | 0;
         $473 = ($470 | 0) < -24;
         if ($473) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $474 = __THREW__;
          __THREW__ = 0;
          $475 = ___cxa_find_matching_catch() | 0;
          $476 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
          $$02 = $475;
          $$03 = $476;
          break L3;
         }
         $477 = $462;
         $478 = $477 - $469 | 0;
         $479 = ($478 | 0) / 24 & -1;
         $480 = $479 >>> 0 < 1073741823;
         if ($480) {
          $481 = $479 << 1;
          $482 = $481 >>> 0 < $472 >>> 0;
          $483 = $482 ? $472 : $481;
          $$0$i$i$i65 = $483;
         } else {
          $$0$i$i$i65 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i64, $$0$i$i$i65, $471, $466);
         $484 = $__v$i$i64 + 8 | 0;
         $485 = SAFE_HEAP_LOAD($484 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($485, $13);
         $486 = $485 + 24 | 0;
         SAFE_HEAP_STORE($484 | 0, $486 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i64);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i64);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
        $487 = $first + 2 | 0;
        $$0 = $487;
        break L1;
        break;
       }
      case 113:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($14, 10711);
        $488 = $db + 4 | 0;
        $489 = SAFE_HEAP_LOAD($488 | 0, 4, 0) | 0 | 0;
        $490 = $db + 8 | 0;
        $491 = SAFE_HEAP_LOAD($490 | 0, 4, 0) | 0 | 0;
        $492 = $489 >>> 0 < $491 >>> 0;
        if ($492) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($489, $14);
         $493 = SAFE_HEAP_LOAD($488 | 0, 4, 0) | 0 | 0;
         $494 = $493 + 24 | 0;
         SAFE_HEAP_STORE($488 | 0, $494 | 0, 4);
        } else {
         $495 = $db + 12 | 0;
         $496 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $497 = $489;
         $498 = $496;
         $499 = $497 - $498 | 0;
         $500 = ($499 | 0) / 24 & -1;
         $501 = $500 + 1 | 0;
         $502 = ($499 | 0) < -24;
         if ($502) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $503 = __THREW__;
          __THREW__ = 0;
          $504 = ___cxa_find_matching_catch() | 0;
          $505 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
          $$02 = $504;
          $$03 = $505;
          break L3;
         }
         $506 = $491;
         $507 = $506 - $498 | 0;
         $508 = ($507 | 0) / 24 & -1;
         $509 = $508 >>> 0 < 1073741823;
         if ($509) {
          $510 = $508 << 1;
          $511 = $510 >>> 0 < $501 >>> 0;
          $512 = $511 ? $501 : $510;
          $$0$i$i$i70 = $512;
         } else {
          $$0$i$i$i70 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i69, $$0$i$i$i70, $500, $495);
         $513 = $__v$i$i69 + 8 | 0;
         $514 = SAFE_HEAP_LOAD($513 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($514, $14);
         $515 = $514 + 24 | 0;
         SAFE_HEAP_STORE($513 | 0, $515 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i69);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i69);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
        $516 = $first + 2 | 0;
        $$0 = $516;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 103:
     {
      $517 = $first + 1 | 0;
      $518 = SAFE_HEAP_LOAD($517 >> 0 | 0, 1, 0) | 0 | 0;
      $519 = $518 << 24 >> 24;
      switch ($519 | 0) {
      case 101:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($15, 10722);
        $520 = $db + 4 | 0;
        $521 = SAFE_HEAP_LOAD($520 | 0, 4, 0) | 0 | 0;
        $522 = $db + 8 | 0;
        $523 = SAFE_HEAP_LOAD($522 | 0, 4, 0) | 0 | 0;
        $524 = $521 >>> 0 < $523 >>> 0;
        if ($524) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($521, $15);
         $525 = SAFE_HEAP_LOAD($520 | 0, 4, 0) | 0 | 0;
         $526 = $525 + 24 | 0;
         SAFE_HEAP_STORE($520 | 0, $526 | 0, 4);
        } else {
         $527 = $db + 12 | 0;
         $528 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $529 = $521;
         $530 = $528;
         $531 = $529 - $530 | 0;
         $532 = ($531 | 0) / 24 & -1;
         $533 = $532 + 1 | 0;
         $534 = ($531 | 0) < -24;
         if ($534) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $535 = __THREW__;
          __THREW__ = 0;
          $536 = ___cxa_find_matching_catch() | 0;
          $537 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
          $$02 = $536;
          $$03 = $537;
          break L3;
         }
         $538 = $523;
         $539 = $538 - $530 | 0;
         $540 = ($539 | 0) / 24 & -1;
         $541 = $540 >>> 0 < 1073741823;
         if ($541) {
          $542 = $540 << 1;
          $543 = $542 >>> 0 < $533 >>> 0;
          $544 = $543 ? $533 : $542;
          $$0$i$i$i75 = $544;
         } else {
          $$0$i$i$i75 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i74, $$0$i$i$i75, $532, $527);
         $545 = $__v$i$i74 + 8 | 0;
         $546 = SAFE_HEAP_LOAD($545 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($546, $15);
         $547 = $546 + 24 | 0;
         SAFE_HEAP_STORE($545 | 0, $547 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i74);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i74);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
        $548 = $first + 2 | 0;
        $$0 = $548;
        break L1;
        break;
       }
      case 116:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($16, 10733);
        $549 = $db + 4 | 0;
        $550 = SAFE_HEAP_LOAD($549 | 0, 4, 0) | 0 | 0;
        $551 = $db + 8 | 0;
        $552 = SAFE_HEAP_LOAD($551 | 0, 4, 0) | 0 | 0;
        $553 = $550 >>> 0 < $552 >>> 0;
        if ($553) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($550, $16);
         $554 = SAFE_HEAP_LOAD($549 | 0, 4, 0) | 0 | 0;
         $555 = $554 + 24 | 0;
         SAFE_HEAP_STORE($549 | 0, $555 | 0, 4);
        } else {
         $556 = $db + 12 | 0;
         $557 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $558 = $550;
         $559 = $557;
         $560 = $558 - $559 | 0;
         $561 = ($560 | 0) / 24 & -1;
         $562 = $561 + 1 | 0;
         $563 = ($560 | 0) < -24;
         if ($563) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $564 = __THREW__;
          __THREW__ = 0;
          $565 = ___cxa_find_matching_catch() | 0;
          $566 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
          $$02 = $565;
          $$03 = $566;
          break L3;
         }
         $567 = $552;
         $568 = $567 - $559 | 0;
         $569 = ($568 | 0) / 24 & -1;
         $570 = $569 >>> 0 < 1073741823;
         if ($570) {
          $571 = $569 << 1;
          $572 = $571 >>> 0 < $562 >>> 0;
          $573 = $572 ? $562 : $571;
          $$0$i$i$i80 = $573;
         } else {
          $$0$i$i$i80 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i79, $$0$i$i$i80, $561, $556);
         $574 = $__v$i$i79 + 8 | 0;
         $575 = SAFE_HEAP_LOAD($574 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($575, $16);
         $576 = $575 + 24 | 0;
         SAFE_HEAP_STORE($574 | 0, $576 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i79);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i79);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
        $577 = $first + 2 | 0;
        $$0 = $577;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 105:
     {
      $578 = $first + 1 | 0;
      $579 = SAFE_HEAP_LOAD($578 >> 0 | 0, 1, 0) | 0 | 0;
      $580 = $579 << 24 >> 24 == 120;
      if (!$580) {
       $$0 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($17, 10743);
      $581 = $db + 4 | 0;
      $582 = SAFE_HEAP_LOAD($581 | 0, 4, 0) | 0 | 0;
      $583 = $db + 8 | 0;
      $584 = SAFE_HEAP_LOAD($583 | 0, 4, 0) | 0 | 0;
      $585 = $582 >>> 0 < $584 >>> 0;
      if ($585) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($582, $17);
       $586 = SAFE_HEAP_LOAD($581 | 0, 4, 0) | 0 | 0;
       $587 = $586 + 24 | 0;
       SAFE_HEAP_STORE($581 | 0, $587 | 0, 4);
      } else {
       $588 = $db + 12 | 0;
       $589 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $590 = $582;
       $591 = $589;
       $592 = $590 - $591 | 0;
       $593 = ($592 | 0) / 24 & -1;
       $594 = $593 + 1 | 0;
       $595 = ($592 | 0) < -24;
       if ($595) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $596 = __THREW__;
        __THREW__ = 0;
        $597 = ___cxa_find_matching_catch() | 0;
        $598 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
        $$02 = $597;
        $$03 = $598;
        break L3;
       }
       $599 = $584;
       $600 = $599 - $591 | 0;
       $601 = ($600 | 0) / 24 & -1;
       $602 = $601 >>> 0 < 1073741823;
       if ($602) {
        $603 = $601 << 1;
        $604 = $603 >>> 0 < $594 >>> 0;
        $605 = $604 ? $594 : $603;
        $$0$i$i$i85 = $605;
       } else {
        $$0$i$i$i85 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i84, $$0$i$i$i85, $593, $588);
       $606 = $__v$i$i84 + 8 | 0;
       $607 = SAFE_HEAP_LOAD($606 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($607, $17);
       $608 = $607 + 24 | 0;
       SAFE_HEAP_STORE($606 | 0, $608 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i84);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i84);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
      $609 = $first + 2 | 0;
      $$0 = $609;
      break L1;
      break;
     }
    case 108:
     {
      $610 = $first + 1 | 0;
      $611 = SAFE_HEAP_LOAD($610 >> 0 | 0, 1, 0) | 0 | 0;
      $612 = $611 << 24 >> 24;
      switch ($612 | 0) {
      case 101:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($18, 10754);
        $613 = $db + 4 | 0;
        $614 = SAFE_HEAP_LOAD($613 | 0, 4, 0) | 0 | 0;
        $615 = $db + 8 | 0;
        $616 = SAFE_HEAP_LOAD($615 | 0, 4, 0) | 0 | 0;
        $617 = $614 >>> 0 < $616 >>> 0;
        if ($617) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($614, $18);
         $618 = SAFE_HEAP_LOAD($613 | 0, 4, 0) | 0 | 0;
         $619 = $618 + 24 | 0;
         SAFE_HEAP_STORE($613 | 0, $619 | 0, 4);
        } else {
         $620 = $db + 12 | 0;
         $621 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $622 = $614;
         $623 = $621;
         $624 = $622 - $623 | 0;
         $625 = ($624 | 0) / 24 & -1;
         $626 = $625 + 1 | 0;
         $627 = ($624 | 0) < -24;
         if ($627) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $628 = __THREW__;
          __THREW__ = 0;
          $629 = ___cxa_find_matching_catch() | 0;
          $630 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
          $$02 = $629;
          $$03 = $630;
          break L3;
         }
         $631 = $616;
         $632 = $631 - $623 | 0;
         $633 = ($632 | 0) / 24 & -1;
         $634 = $633 >>> 0 < 1073741823;
         if ($634) {
          $635 = $633 << 1;
          $636 = $635 >>> 0 < $626 >>> 0;
          $637 = $636 ? $626 : $635;
          $$0$i$i$i90 = $637;
         } else {
          $$0$i$i$i90 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i89, $$0$i$i$i90, $625, $620);
         $638 = $__v$i$i89 + 8 | 0;
         $639 = SAFE_HEAP_LOAD($638 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($639, $18);
         $640 = $639 + 24 | 0;
         SAFE_HEAP_STORE($638 | 0, $640 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i89);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i89);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
        $641 = $first + 2 | 0;
        $$0 = $641;
        break L1;
        break;
       }
      case 105:
       {
        $642 = $first + 2 | 0;
        $643 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($642, $last, $db) | 0;
        $644 = ($643 | 0) == ($642 | 0);
        if ($644) {
         $$0 = $first;
         break L1;
        }
        $645 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $646 = $db + 4 | 0;
        $647 = SAFE_HEAP_LOAD($646 | 0, 4, 0) | 0 | 0;
        $648 = ($645 | 0) == ($647 | 0);
        if ($648) {
         $$0 = $first;
         break L1;
        }
        $649 = $647 + -24 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($649, 0, 10765) | 0;
        $$0 = $643;
        break L1;
        break;
       }
      case 115:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19, 10777);
        $650 = $db + 4 | 0;
        $651 = SAFE_HEAP_LOAD($650 | 0, 4, 0) | 0 | 0;
        $652 = $db + 8 | 0;
        $653 = SAFE_HEAP_LOAD($652 | 0, 4, 0) | 0 | 0;
        $654 = $651 >>> 0 < $653 >>> 0;
        if ($654) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($651, $19);
         $655 = SAFE_HEAP_LOAD($650 | 0, 4, 0) | 0 | 0;
         $656 = $655 + 24 | 0;
         SAFE_HEAP_STORE($650 | 0, $656 | 0, 4);
        } else {
         $657 = $db + 12 | 0;
         $658 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $659 = $651;
         $660 = $658;
         $661 = $659 - $660 | 0;
         $662 = ($661 | 0) / 24 & -1;
         $663 = $662 + 1 | 0;
         $664 = ($661 | 0) < -24;
         if ($664) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $665 = __THREW__;
          __THREW__ = 0;
          $666 = ___cxa_find_matching_catch() | 0;
          $667 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
          $$02 = $666;
          $$03 = $667;
          break L3;
         }
         $668 = $653;
         $669 = $668 - $660 | 0;
         $670 = ($669 | 0) / 24 & -1;
         $671 = $670 >>> 0 < 1073741823;
         if ($671) {
          $672 = $670 << 1;
          $673 = $672 >>> 0 < $663 >>> 0;
          $674 = $673 ? $663 : $672;
          $$0$i$i$i95 = $674;
         } else {
          $$0$i$i$i95 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i94, $$0$i$i$i95, $662, $657);
         $675 = $__v$i$i94 + 8 | 0;
         $676 = SAFE_HEAP_LOAD($675 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($676, $19);
         $677 = $676 + 24 | 0;
         SAFE_HEAP_STORE($675 | 0, $677 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i94);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i94);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
        $678 = $first + 2 | 0;
        $$0 = $678;
        break L1;
        break;
       }
      case 83:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($20, 10788);
        $679 = $db + 4 | 0;
        $680 = SAFE_HEAP_LOAD($679 | 0, 4, 0) | 0 | 0;
        $681 = $db + 8 | 0;
        $682 = SAFE_HEAP_LOAD($681 | 0, 4, 0) | 0 | 0;
        $683 = $680 >>> 0 < $682 >>> 0;
        if ($683) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($680, $20);
         $684 = SAFE_HEAP_LOAD($679 | 0, 4, 0) | 0 | 0;
         $685 = $684 + 24 | 0;
         SAFE_HEAP_STORE($679 | 0, $685 | 0, 4);
        } else {
         $686 = $db + 12 | 0;
         $687 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $688 = $680;
         $689 = $687;
         $690 = $688 - $689 | 0;
         $691 = ($690 | 0) / 24 & -1;
         $692 = $691 + 1 | 0;
         $693 = ($690 | 0) < -24;
         if ($693) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $694 = __THREW__;
          __THREW__ = 0;
          $695 = ___cxa_find_matching_catch() | 0;
          $696 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
          $$02 = $695;
          $$03 = $696;
          break L3;
         }
         $697 = $682;
         $698 = $697 - $689 | 0;
         $699 = ($698 | 0) / 24 & -1;
         $700 = $699 >>> 0 < 1073741823;
         if ($700) {
          $701 = $699 << 1;
          $702 = $701 >>> 0 < $692 >>> 0;
          $703 = $702 ? $692 : $701;
          $$0$i$i$i100 = $703;
         } else {
          $$0$i$i$i100 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i99, $$0$i$i$i100, $691, $686);
         $704 = $__v$i$i99 + 8 | 0;
         $705 = SAFE_HEAP_LOAD($704 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($705, $20);
         $706 = $705 + 24 | 0;
         SAFE_HEAP_STORE($704 | 0, $706 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i99);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i99);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
        $707 = $first + 2 | 0;
        $$0 = $707;
        break L1;
        break;
       }
      case 116:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21, 10800);
        $708 = $db + 4 | 0;
        $709 = SAFE_HEAP_LOAD($708 | 0, 4, 0) | 0 | 0;
        $710 = $db + 8 | 0;
        $711 = SAFE_HEAP_LOAD($710 | 0, 4, 0) | 0 | 0;
        $712 = $709 >>> 0 < $711 >>> 0;
        if ($712) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($709, $21);
         $713 = SAFE_HEAP_LOAD($708 | 0, 4, 0) | 0 | 0;
         $714 = $713 + 24 | 0;
         SAFE_HEAP_STORE($708 | 0, $714 | 0, 4);
        } else {
         $715 = $db + 12 | 0;
         $716 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $717 = $709;
         $718 = $716;
         $719 = $717 - $718 | 0;
         $720 = ($719 | 0) / 24 & -1;
         $721 = $720 + 1 | 0;
         $722 = ($719 | 0) < -24;
         if ($722) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $723 = __THREW__;
          __THREW__ = 0;
          $724 = ___cxa_find_matching_catch() | 0;
          $725 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
          $$02 = $724;
          $$03 = $725;
          break L3;
         }
         $726 = $711;
         $727 = $726 - $718 | 0;
         $728 = ($727 | 0) / 24 & -1;
         $729 = $728 >>> 0 < 1073741823;
         if ($729) {
          $730 = $728 << 1;
          $731 = $730 >>> 0 < $721 >>> 0;
          $732 = $731 ? $721 : $730;
          $$0$i$i$i105 = $732;
         } else {
          $$0$i$i$i105 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i104, $$0$i$i$i105, $720, $715);
         $733 = $__v$i$i104 + 8 | 0;
         $734 = SAFE_HEAP_LOAD($733 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($734, $21);
         $735 = $734 + 24 | 0;
         SAFE_HEAP_STORE($733 | 0, $735 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i104);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i104);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
        $736 = $first + 2 | 0;
        $$0 = $736;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 109:
     {
      $737 = $first + 1 | 0;
      $738 = SAFE_HEAP_LOAD($737 >> 0 | 0, 1, 0) | 0 | 0;
      $739 = $738 << 24 >> 24;
      switch ($739 | 0) {
      case 105:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($22, 10810);
        $740 = $db + 4 | 0;
        $741 = SAFE_HEAP_LOAD($740 | 0, 4, 0) | 0 | 0;
        $742 = $db + 8 | 0;
        $743 = SAFE_HEAP_LOAD($742 | 0, 4, 0) | 0 | 0;
        $744 = $741 >>> 0 < $743 >>> 0;
        if ($744) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($741, $22);
         $745 = SAFE_HEAP_LOAD($740 | 0, 4, 0) | 0 | 0;
         $746 = $745 + 24 | 0;
         SAFE_HEAP_STORE($740 | 0, $746 | 0, 4);
        } else {
         $747 = $db + 12 | 0;
         $748 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $749 = $741;
         $750 = $748;
         $751 = $749 - $750 | 0;
         $752 = ($751 | 0) / 24 & -1;
         $753 = $752 + 1 | 0;
         $754 = ($751 | 0) < -24;
         if ($754) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $755 = __THREW__;
          __THREW__ = 0;
          $756 = ___cxa_find_matching_catch() | 0;
          $757 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
          $$02 = $756;
          $$03 = $757;
          break L3;
         }
         $758 = $743;
         $759 = $758 - $750 | 0;
         $760 = ($759 | 0) / 24 & -1;
         $761 = $760 >>> 0 < 1073741823;
         if ($761) {
          $762 = $760 << 1;
          $763 = $762 >>> 0 < $753 >>> 0;
          $764 = $763 ? $753 : $762;
          $$0$i$i$i110 = $764;
         } else {
          $$0$i$i$i110 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i109, $$0$i$i$i110, $752, $747);
         $765 = $__v$i$i109 + 8 | 0;
         $766 = SAFE_HEAP_LOAD($765 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($766, $22);
         $767 = $766 + 24 | 0;
         SAFE_HEAP_STORE($765 | 0, $767 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i109);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i109);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
        $768 = $first + 2 | 0;
        $$0 = $768;
        break L1;
        break;
       }
      case 73:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($23, 10820);
        $769 = $db + 4 | 0;
        $770 = SAFE_HEAP_LOAD($769 | 0, 4, 0) | 0 | 0;
        $771 = $db + 8 | 0;
        $772 = SAFE_HEAP_LOAD($771 | 0, 4, 0) | 0 | 0;
        $773 = $770 >>> 0 < $772 >>> 0;
        if ($773) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($770, $23);
         $774 = SAFE_HEAP_LOAD($769 | 0, 4, 0) | 0 | 0;
         $775 = $774 + 24 | 0;
         SAFE_HEAP_STORE($769 | 0, $775 | 0, 4);
        } else {
         $776 = $db + 12 | 0;
         $777 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $778 = $770;
         $779 = $777;
         $780 = $778 - $779 | 0;
         $781 = ($780 | 0) / 24 & -1;
         $782 = $781 + 1 | 0;
         $783 = ($780 | 0) < -24;
         if ($783) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $784 = __THREW__;
          __THREW__ = 0;
          $785 = ___cxa_find_matching_catch() | 0;
          $786 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
          $$02 = $785;
          $$03 = $786;
          break L3;
         }
         $787 = $772;
         $788 = $787 - $779 | 0;
         $789 = ($788 | 0) / 24 & -1;
         $790 = $789 >>> 0 < 1073741823;
         if ($790) {
          $791 = $789 << 1;
          $792 = $791 >>> 0 < $782 >>> 0;
          $793 = $792 ? $782 : $791;
          $$0$i$i$i115 = $793;
         } else {
          $$0$i$i$i115 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i114, $$0$i$i$i115, $781, $776);
         $794 = $__v$i$i114 + 8 | 0;
         $795 = SAFE_HEAP_LOAD($794 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($795, $23);
         $796 = $795 + 24 | 0;
         SAFE_HEAP_STORE($794 | 0, $796 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i114);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i114);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
        $797 = $first + 2 | 0;
        $$0 = $797;
        break L1;
        break;
       }
      case 108:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24, 10643);
        $798 = $db + 4 | 0;
        $799 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
        $800 = $db + 8 | 0;
        $801 = SAFE_HEAP_LOAD($800 | 0, 4, 0) | 0 | 0;
        $802 = $799 >>> 0 < $801 >>> 0;
        if ($802) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($799, $24);
         $803 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
         $804 = $803 + 24 | 0;
         SAFE_HEAP_STORE($798 | 0, $804 | 0, 4);
        } else {
         $805 = $db + 12 | 0;
         $806 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $807 = $799;
         $808 = $806;
         $809 = $807 - $808 | 0;
         $810 = ($809 | 0) / 24 & -1;
         $811 = $810 + 1 | 0;
         $812 = ($809 | 0) < -24;
         if ($812) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $813 = __THREW__;
          __THREW__ = 0;
          $814 = ___cxa_find_matching_catch() | 0;
          $815 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
          $$02 = $814;
          $$03 = $815;
          break L3;
         }
         $816 = $801;
         $817 = $816 - $808 | 0;
         $818 = ($817 | 0) / 24 & -1;
         $819 = $818 >>> 0 < 1073741823;
         if ($819) {
          $820 = $818 << 1;
          $821 = $820 >>> 0 < $811 >>> 0;
          $822 = $821 ? $811 : $820;
          $$0$i$i$i120 = $822;
         } else {
          $$0$i$i$i120 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i119, $$0$i$i$i120, $810, $805);
         $823 = $__v$i$i119 + 8 | 0;
         $824 = SAFE_HEAP_LOAD($823 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($824, $24);
         $825 = $824 + 24 | 0;
         SAFE_HEAP_STORE($823 | 0, $825 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i119);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i119);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $826 = $first + 2 | 0;
        $$0 = $826;
        break L1;
        break;
       }
      case 76:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($25, 10831);
        $827 = $db + 4 | 0;
        $828 = SAFE_HEAP_LOAD($827 | 0, 4, 0) | 0 | 0;
        $829 = $db + 8 | 0;
        $830 = SAFE_HEAP_LOAD($829 | 0, 4, 0) | 0 | 0;
        $831 = $828 >>> 0 < $830 >>> 0;
        if ($831) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($828, $25);
         $832 = SAFE_HEAP_LOAD($827 | 0, 4, 0) | 0 | 0;
         $833 = $832 + 24 | 0;
         SAFE_HEAP_STORE($827 | 0, $833 | 0, 4);
        } else {
         $834 = $db + 12 | 0;
         $835 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $836 = $828;
         $837 = $835;
         $838 = $836 - $837 | 0;
         $839 = ($838 | 0) / 24 & -1;
         $840 = $839 + 1 | 0;
         $841 = ($838 | 0) < -24;
         if ($841) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $842 = __THREW__;
          __THREW__ = 0;
          $843 = ___cxa_find_matching_catch() | 0;
          $844 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
          $$02 = $843;
          $$03 = $844;
          break L3;
         }
         $845 = $830;
         $846 = $845 - $837 | 0;
         $847 = ($846 | 0) / 24 & -1;
         $848 = $847 >>> 0 < 1073741823;
         if ($848) {
          $849 = $847 << 1;
          $850 = $849 >>> 0 < $840 >>> 0;
          $851 = $850 ? $840 : $849;
          $$0$i$i$i125 = $851;
         } else {
          $$0$i$i$i125 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i124, $$0$i$i$i125, $839, $834);
         $852 = $__v$i$i124 + 8 | 0;
         $853 = SAFE_HEAP_LOAD($852 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($853, $25);
         $854 = $853 + 24 | 0;
         SAFE_HEAP_STORE($852 | 0, $854 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i124);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i124);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $855 = $first + 2 | 0;
        $$0 = $855;
        break L1;
        break;
       }
      case 109:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($26, 10842);
        $856 = $db + 4 | 0;
        $857 = SAFE_HEAP_LOAD($856 | 0, 4, 0) | 0 | 0;
        $858 = $db + 8 | 0;
        $859 = SAFE_HEAP_LOAD($858 | 0, 4, 0) | 0 | 0;
        $860 = $857 >>> 0 < $859 >>> 0;
        if ($860) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($857, $26);
         $861 = SAFE_HEAP_LOAD($856 | 0, 4, 0) | 0 | 0;
         $862 = $861 + 24 | 0;
         SAFE_HEAP_STORE($856 | 0, $862 | 0, 4);
        } else {
         $863 = $db + 12 | 0;
         $864 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $865 = $857;
         $866 = $864;
         $867 = $865 - $866 | 0;
         $868 = ($867 | 0) / 24 & -1;
         $869 = $868 + 1 | 0;
         $870 = ($867 | 0) < -24;
         if ($870) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $871 = __THREW__;
          __THREW__ = 0;
          $872 = ___cxa_find_matching_catch() | 0;
          $873 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
          $$02 = $872;
          $$03 = $873;
          break L3;
         }
         $874 = $859;
         $875 = $874 - $866 | 0;
         $876 = ($875 | 0) / 24 & -1;
         $877 = $876 >>> 0 < 1073741823;
         if ($877) {
          $878 = $876 << 1;
          $879 = $878 >>> 0 < $869 >>> 0;
          $880 = $879 ? $869 : $878;
          $$0$i$i$i130 = $880;
         } else {
          $$0$i$i$i130 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i129, $$0$i$i$i130, $868, $863);
         $881 = $__v$i$i129 + 8 | 0;
         $882 = SAFE_HEAP_LOAD($881 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($882, $26);
         $883 = $882 + 24 | 0;
         SAFE_HEAP_STORE($881 | 0, $883 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i129);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i129);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $884 = $first + 2 | 0;
        $$0 = $884;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 110:
     {
      $885 = $first + 1 | 0;
      $886 = SAFE_HEAP_LOAD($885 >> 0 | 0, 1, 0) | 0 | 0;
      $887 = $886 << 24 >> 24;
      switch ($887 | 0) {
      case 97:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($27, 10853);
        $888 = $db + 4 | 0;
        $889 = SAFE_HEAP_LOAD($888 | 0, 4, 0) | 0 | 0;
        $890 = $db + 8 | 0;
        $891 = SAFE_HEAP_LOAD($890 | 0, 4, 0) | 0 | 0;
        $892 = $889 >>> 0 < $891 >>> 0;
        if ($892) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($889, $27);
         $893 = SAFE_HEAP_LOAD($888 | 0, 4, 0) | 0 | 0;
         $894 = $893 + 24 | 0;
         SAFE_HEAP_STORE($888 | 0, $894 | 0, 4);
        } else {
         $895 = $db + 12 | 0;
         $896 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $897 = $889;
         $898 = $896;
         $899 = $897 - $898 | 0;
         $900 = ($899 | 0) / 24 & -1;
         $901 = $900 + 1 | 0;
         $902 = ($899 | 0) < -24;
         if ($902) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $903 = __THREW__;
          __THREW__ = 0;
          $904 = ___cxa_find_matching_catch() | 0;
          $905 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
          $$02 = $904;
          $$03 = $905;
          break L3;
         }
         $906 = $891;
         $907 = $906 - $898 | 0;
         $908 = ($907 | 0) / 24 & -1;
         $909 = $908 >>> 0 < 1073741823;
         if ($909) {
          $910 = $908 << 1;
          $911 = $910 >>> 0 < $901 >>> 0;
          $912 = $911 ? $901 : $910;
          $$0$i$i$i135 = $912;
         } else {
          $$0$i$i$i135 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i134, $$0$i$i$i135, $900, $895);
         $913 = $__v$i$i134 + 8 | 0;
         $914 = SAFE_HEAP_LOAD($913 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($914, $27);
         $915 = $914 + 24 | 0;
         SAFE_HEAP_STORE($913 | 0, $915 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i134);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i134);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $916 = $first + 2 | 0;
        $$0 = $916;
        break L1;
        break;
       }
      case 101:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($28, 10868);
        $917 = $db + 4 | 0;
        $918 = SAFE_HEAP_LOAD($917 | 0, 4, 0) | 0 | 0;
        $919 = $db + 8 | 0;
        $920 = SAFE_HEAP_LOAD($919 | 0, 4, 0) | 0 | 0;
        $921 = $918 >>> 0 < $920 >>> 0;
        if ($921) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($918, $28);
         $922 = SAFE_HEAP_LOAD($917 | 0, 4, 0) | 0 | 0;
         $923 = $922 + 24 | 0;
         SAFE_HEAP_STORE($917 | 0, $923 | 0, 4);
        } else {
         $924 = $db + 12 | 0;
         $925 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $926 = $918;
         $927 = $925;
         $928 = $926 - $927 | 0;
         $929 = ($928 | 0) / 24 & -1;
         $930 = $929 + 1 | 0;
         $931 = ($928 | 0) < -24;
         if ($931) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $932 = __THREW__;
          __THREW__ = 0;
          $933 = ___cxa_find_matching_catch() | 0;
          $934 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
          $$02 = $933;
          $$03 = $934;
          break L3;
         }
         $935 = $920;
         $936 = $935 - $927 | 0;
         $937 = ($936 | 0) / 24 & -1;
         $938 = $937 >>> 0 < 1073741823;
         if ($938) {
          $939 = $937 << 1;
          $940 = $939 >>> 0 < $930 >>> 0;
          $941 = $940 ? $930 : $939;
          $$0$i$i$i140 = $941;
         } else {
          $$0$i$i$i140 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i139, $$0$i$i$i140, $929, $924);
         $942 = $__v$i$i139 + 8 | 0;
         $943 = SAFE_HEAP_LOAD($942 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($943, $28);
         $944 = $943 + 24 | 0;
         SAFE_HEAP_STORE($942 | 0, $944 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i139);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i139);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $945 = $first + 2 | 0;
        $$0 = $945;
        break L1;
        break;
       }
      case 103:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($29, 10810);
        $946 = $db + 4 | 0;
        $947 = SAFE_HEAP_LOAD($946 | 0, 4, 0) | 0 | 0;
        $948 = $db + 8 | 0;
        $949 = SAFE_HEAP_LOAD($948 | 0, 4, 0) | 0 | 0;
        $950 = $947 >>> 0 < $949 >>> 0;
        if ($950) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($947, $29);
         $951 = SAFE_HEAP_LOAD($946 | 0, 4, 0) | 0 | 0;
         $952 = $951 + 24 | 0;
         SAFE_HEAP_STORE($946 | 0, $952 | 0, 4);
        } else {
         $953 = $db + 12 | 0;
         $954 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $955 = $947;
         $956 = $954;
         $957 = $955 - $956 | 0;
         $958 = ($957 | 0) / 24 & -1;
         $959 = $958 + 1 | 0;
         $960 = ($957 | 0) < -24;
         if ($960) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $961 = __THREW__;
          __THREW__ = 0;
          $962 = ___cxa_find_matching_catch() | 0;
          $963 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
          $$02 = $962;
          $$03 = $963;
          break L3;
         }
         $964 = $949;
         $965 = $964 - $956 | 0;
         $966 = ($965 | 0) / 24 & -1;
         $967 = $966 >>> 0 < 1073741823;
         if ($967) {
          $968 = $966 << 1;
          $969 = $968 >>> 0 < $959 >>> 0;
          $970 = $969 ? $959 : $968;
          $$0$i$i$i145 = $970;
         } else {
          $$0$i$i$i145 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i144, $$0$i$i$i145, $958, $953);
         $971 = $__v$i$i144 + 8 | 0;
         $972 = SAFE_HEAP_LOAD($971 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($972, $29);
         $973 = $972 + 24 | 0;
         SAFE_HEAP_STORE($971 | 0, $973 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i144);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i144);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
        $974 = $first + 2 | 0;
        $$0 = $974;
        break L1;
        break;
       }
      case 116:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($30, 10879);
        $975 = $db + 4 | 0;
        $976 = SAFE_HEAP_LOAD($975 | 0, 4, 0) | 0 | 0;
        $977 = $db + 8 | 0;
        $978 = SAFE_HEAP_LOAD($977 | 0, 4, 0) | 0 | 0;
        $979 = $976 >>> 0 < $978 >>> 0;
        if ($979) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($976, $30);
         $980 = SAFE_HEAP_LOAD($975 | 0, 4, 0) | 0 | 0;
         $981 = $980 + 24 | 0;
         SAFE_HEAP_STORE($975 | 0, $981 | 0, 4);
        } else {
         $982 = $db + 12 | 0;
         $983 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $984 = $976;
         $985 = $983;
         $986 = $984 - $985 | 0;
         $987 = ($986 | 0) / 24 & -1;
         $988 = $987 + 1 | 0;
         $989 = ($986 | 0) < -24;
         if ($989) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $990 = __THREW__;
          __THREW__ = 0;
          $991 = ___cxa_find_matching_catch() | 0;
          $992 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
          $$02 = $991;
          $$03 = $992;
          break L3;
         }
         $993 = $978;
         $994 = $993 - $985 | 0;
         $995 = ($994 | 0) / 24 & -1;
         $996 = $995 >>> 0 < 1073741823;
         if ($996) {
          $997 = $995 << 1;
          $998 = $997 >>> 0 < $988 >>> 0;
          $999 = $998 ? $988 : $997;
          $$0$i$i$i150 = $999;
         } else {
          $$0$i$i$i150 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i149, $$0$i$i$i150, $987, $982);
         $1000 = $__v$i$i149 + 8 | 0;
         $1001 = SAFE_HEAP_LOAD($1000 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1001, $30);
         $1002 = $1001 + 24 | 0;
         SAFE_HEAP_STORE($1000 | 0, $1002 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i149);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i149);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
        $1003 = $first + 2 | 0;
        $$0 = $1003;
        break L1;
        break;
       }
      case 119:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($31, 10889);
        $1004 = $db + 4 | 0;
        $1005 = SAFE_HEAP_LOAD($1004 | 0, 4, 0) | 0 | 0;
        $1006 = $db + 8 | 0;
        $1007 = SAFE_HEAP_LOAD($1006 | 0, 4, 0) | 0 | 0;
        $1008 = $1005 >>> 0 < $1007 >>> 0;
        if ($1008) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1005, $31);
         $1009 = SAFE_HEAP_LOAD($1004 | 0, 4, 0) | 0 | 0;
         $1010 = $1009 + 24 | 0;
         SAFE_HEAP_STORE($1004 | 0, $1010 | 0, 4);
        } else {
         $1011 = $db + 12 | 0;
         $1012 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1013 = $1005;
         $1014 = $1012;
         $1015 = $1013 - $1014 | 0;
         $1016 = ($1015 | 0) / 24 & -1;
         $1017 = $1016 + 1 | 0;
         $1018 = ($1015 | 0) < -24;
         if ($1018) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1019 = __THREW__;
          __THREW__ = 0;
          $1020 = ___cxa_find_matching_catch() | 0;
          $1021 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
          $$02 = $1020;
          $$03 = $1021;
          break L3;
         }
         $1022 = $1007;
         $1023 = $1022 - $1014 | 0;
         $1024 = ($1023 | 0) / 24 & -1;
         $1025 = $1024 >>> 0 < 1073741823;
         if ($1025) {
          $1026 = $1024 << 1;
          $1027 = $1026 >>> 0 < $1017 >>> 0;
          $1028 = $1027 ? $1017 : $1026;
          $$0$i$i$i155 = $1028;
         } else {
          $$0$i$i$i155 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i154, $$0$i$i$i155, $1016, $1011);
         $1029 = $__v$i$i154 + 8 | 0;
         $1030 = SAFE_HEAP_LOAD($1029 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1030, $31);
         $1031 = $1030 + 24 | 0;
         SAFE_HEAP_STORE($1029 | 0, $1031 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i154);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i154);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $1032 = $first + 2 | 0;
        $$0 = $1032;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 111:
     {
      $1033 = $first + 1 | 0;
      $1034 = SAFE_HEAP_LOAD($1033 >> 0 | 0, 1, 0) | 0 | 0;
      $1035 = $1034 << 24 >> 24;
      switch ($1035 | 0) {
      case 111:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($32, 10902);
        $1036 = $db + 4 | 0;
        $1037 = SAFE_HEAP_LOAD($1036 | 0, 4, 0) | 0 | 0;
        $1038 = $db + 8 | 0;
        $1039 = SAFE_HEAP_LOAD($1038 | 0, 4, 0) | 0 | 0;
        $1040 = $1037 >>> 0 < $1039 >>> 0;
        if ($1040) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1037, $32);
         $1041 = SAFE_HEAP_LOAD($1036 | 0, 4, 0) | 0 | 0;
         $1042 = $1041 + 24 | 0;
         SAFE_HEAP_STORE($1036 | 0, $1042 | 0, 4);
        } else {
         $1043 = $db + 12 | 0;
         $1044 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1045 = $1037;
         $1046 = $1044;
         $1047 = $1045 - $1046 | 0;
         $1048 = ($1047 | 0) / 24 & -1;
         $1049 = $1048 + 1 | 0;
         $1050 = ($1047 | 0) < -24;
         if ($1050) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1051 = __THREW__;
          __THREW__ = 0;
          $1052 = ___cxa_find_matching_catch() | 0;
          $1053 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
          $$02 = $1052;
          $$03 = $1053;
          break L3;
         }
         $1054 = $1039;
         $1055 = $1054 - $1046 | 0;
         $1056 = ($1055 | 0) / 24 & -1;
         $1057 = $1056 >>> 0 < 1073741823;
         if ($1057) {
          $1058 = $1056 << 1;
          $1059 = $1058 >>> 0 < $1049 >>> 0;
          $1060 = $1059 ? $1049 : $1058;
          $$0$i$i$i160 = $1060;
         } else {
          $$0$i$i$i160 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i159, $$0$i$i$i160, $1048, $1043);
         $1061 = $__v$i$i159 + 8 | 0;
         $1062 = SAFE_HEAP_LOAD($1061 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1062, $32);
         $1063 = $1062 + 24 | 0;
         SAFE_HEAP_STORE($1061 | 0, $1063 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i159);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i159);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
        $1064 = $first + 2 | 0;
        $$0 = $1064;
        break L1;
        break;
       }
      case 114:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($33, 10913);
        $1065 = $db + 4 | 0;
        $1066 = SAFE_HEAP_LOAD($1065 | 0, 4, 0) | 0 | 0;
        $1067 = $db + 8 | 0;
        $1068 = SAFE_HEAP_LOAD($1067 | 0, 4, 0) | 0 | 0;
        $1069 = $1066 >>> 0 < $1068 >>> 0;
        if ($1069) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1066, $33);
         $1070 = SAFE_HEAP_LOAD($1065 | 0, 4, 0) | 0 | 0;
         $1071 = $1070 + 24 | 0;
         SAFE_HEAP_STORE($1065 | 0, $1071 | 0, 4);
        } else {
         $1072 = $db + 12 | 0;
         $1073 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1074 = $1066;
         $1075 = $1073;
         $1076 = $1074 - $1075 | 0;
         $1077 = ($1076 | 0) / 24 & -1;
         $1078 = $1077 + 1 | 0;
         $1079 = ($1076 | 0) < -24;
         if ($1079) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1080 = __THREW__;
          __THREW__ = 0;
          $1081 = ___cxa_find_matching_catch() | 0;
          $1082 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
          $$02 = $1081;
          $$03 = $1082;
          break L3;
         }
         $1083 = $1068;
         $1084 = $1083 - $1075 | 0;
         $1085 = ($1084 | 0) / 24 & -1;
         $1086 = $1085 >>> 0 < 1073741823;
         if ($1086) {
          $1087 = $1085 << 1;
          $1088 = $1087 >>> 0 < $1078 >>> 0;
          $1089 = $1088 ? $1078 : $1087;
          $$0$i$i$i165 = $1089;
         } else {
          $$0$i$i$i165 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i164, $$0$i$i$i165, $1077, $1072);
         $1090 = $__v$i$i164 + 8 | 0;
         $1091 = SAFE_HEAP_LOAD($1090 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1091, $33);
         $1092 = $1091 + 24 | 0;
         SAFE_HEAP_STORE($1090 | 0, $1092 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i164);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i164);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
        $1093 = $first + 2 | 0;
        $$0 = $1093;
        break L1;
        break;
       }
      case 82:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($34, 10923);
        $1094 = $db + 4 | 0;
        $1095 = SAFE_HEAP_LOAD($1094 | 0, 4, 0) | 0 | 0;
        $1096 = $db + 8 | 0;
        $1097 = SAFE_HEAP_LOAD($1096 | 0, 4, 0) | 0 | 0;
        $1098 = $1095 >>> 0 < $1097 >>> 0;
        if ($1098) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1095, $34);
         $1099 = SAFE_HEAP_LOAD($1094 | 0, 4, 0) | 0 | 0;
         $1100 = $1099 + 24 | 0;
         SAFE_HEAP_STORE($1094 | 0, $1100 | 0, 4);
        } else {
         $1101 = $db + 12 | 0;
         $1102 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1103 = $1095;
         $1104 = $1102;
         $1105 = $1103 - $1104 | 0;
         $1106 = ($1105 | 0) / 24 & -1;
         $1107 = $1106 + 1 | 0;
         $1108 = ($1105 | 0) < -24;
         if ($1108) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1109 = __THREW__;
          __THREW__ = 0;
          $1110 = ___cxa_find_matching_catch() | 0;
          $1111 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
          $$02 = $1110;
          $$03 = $1111;
          break L3;
         }
         $1112 = $1097;
         $1113 = $1112 - $1104 | 0;
         $1114 = ($1113 | 0) / 24 & -1;
         $1115 = $1114 >>> 0 < 1073741823;
         if ($1115) {
          $1116 = $1114 << 1;
          $1117 = $1116 >>> 0 < $1107 >>> 0;
          $1118 = $1117 ? $1107 : $1116;
          $$0$i$i$i170 = $1118;
         } else {
          $$0$i$i$i170 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i169, $$0$i$i$i170, $1106, $1101);
         $1119 = $__v$i$i169 + 8 | 0;
         $1120 = SAFE_HEAP_LOAD($1119 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1120, $34);
         $1121 = $1120 + 24 | 0;
         SAFE_HEAP_STORE($1119 | 0, $1121 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i169);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i169);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
        $1122 = $first + 2 | 0;
        $$0 = $1122;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 112:
     {
      $1123 = $first + 1 | 0;
      $1124 = SAFE_HEAP_LOAD($1123 >> 0 | 0, 1, 0) | 0 | 0;
      $1125 = $1124 << 24 >> 24;
      switch ($1125 | 0) {
      case 109:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($35, 10934);
        $1126 = $db + 4 | 0;
        $1127 = SAFE_HEAP_LOAD($1126 | 0, 4, 0) | 0 | 0;
        $1128 = $db + 8 | 0;
        $1129 = SAFE_HEAP_LOAD($1128 | 0, 4, 0) | 0 | 0;
        $1130 = $1127 >>> 0 < $1129 >>> 0;
        if ($1130) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1127, $35);
         $1131 = SAFE_HEAP_LOAD($1126 | 0, 4, 0) | 0 | 0;
         $1132 = $1131 + 24 | 0;
         SAFE_HEAP_STORE($1126 | 0, $1132 | 0, 4);
        } else {
         $1133 = $db + 12 | 0;
         $1134 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1135 = $1127;
         $1136 = $1134;
         $1137 = $1135 - $1136 | 0;
         $1138 = ($1137 | 0) / 24 & -1;
         $1139 = $1138 + 1 | 0;
         $1140 = ($1137 | 0) < -24;
         if ($1140) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1141 = __THREW__;
          __THREW__ = 0;
          $1142 = ___cxa_find_matching_catch() | 0;
          $1143 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
          $$02 = $1142;
          $$03 = $1143;
          break L3;
         }
         $1144 = $1129;
         $1145 = $1144 - $1136 | 0;
         $1146 = ($1145 | 0) / 24 & -1;
         $1147 = $1146 >>> 0 < 1073741823;
         if ($1147) {
          $1148 = $1146 << 1;
          $1149 = $1148 >>> 0 < $1139 >>> 0;
          $1150 = $1149 ? $1139 : $1148;
          $$0$i$i$i175 = $1150;
         } else {
          $$0$i$i$i175 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i174, $$0$i$i$i175, $1138, $1133);
         $1151 = $__v$i$i174 + 8 | 0;
         $1152 = SAFE_HEAP_LOAD($1151 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1152, $35);
         $1153 = $1152 + 24 | 0;
         SAFE_HEAP_STORE($1151 | 0, $1153 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i174);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i174);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
        $1154 = $first + 2 | 0;
        $$0 = $1154;
        break L1;
        break;
       }
      case 108:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($36, 10946);
        $1155 = $db + 4 | 0;
        $1156 = SAFE_HEAP_LOAD($1155 | 0, 4, 0) | 0 | 0;
        $1157 = $db + 8 | 0;
        $1158 = SAFE_HEAP_LOAD($1157 | 0, 4, 0) | 0 | 0;
        $1159 = $1156 >>> 0 < $1158 >>> 0;
        if ($1159) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1156, $36);
         $1160 = SAFE_HEAP_LOAD($1155 | 0, 4, 0) | 0 | 0;
         $1161 = $1160 + 24 | 0;
         SAFE_HEAP_STORE($1155 | 0, $1161 | 0, 4);
        } else {
         $1162 = $db + 12 | 0;
         $1163 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1164 = $1156;
         $1165 = $1163;
         $1166 = $1164 - $1165 | 0;
         $1167 = ($1166 | 0) / 24 & -1;
         $1168 = $1167 + 1 | 0;
         $1169 = ($1166 | 0) < -24;
         if ($1169) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1170 = __THREW__;
          __THREW__ = 0;
          $1171 = ___cxa_find_matching_catch() | 0;
          $1172 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
          $$02 = $1171;
          $$03 = $1172;
          break L3;
         }
         $1173 = $1158;
         $1174 = $1173 - $1165 | 0;
         $1175 = ($1174 | 0) / 24 & -1;
         $1176 = $1175 >>> 0 < 1073741823;
         if ($1176) {
          $1177 = $1175 << 1;
          $1178 = $1177 >>> 0 < $1168 >>> 0;
          $1179 = $1178 ? $1168 : $1177;
          $$0$i$i$i180 = $1179;
         } else {
          $$0$i$i$i180 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i179, $$0$i$i$i180, $1167, $1162);
         $1180 = $__v$i$i179 + 8 | 0;
         $1181 = SAFE_HEAP_LOAD($1180 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1181, $36);
         $1182 = $1181 + 24 | 0;
         SAFE_HEAP_STORE($1180 | 0, $1182 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i179);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i179);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $1183 = $first + 2 | 0;
        $$0 = $1183;
        break L1;
        break;
       }
      case 76:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($37, 10956);
        $1184 = $db + 4 | 0;
        $1185 = SAFE_HEAP_LOAD($1184 | 0, 4, 0) | 0 | 0;
        $1186 = $db + 8 | 0;
        $1187 = SAFE_HEAP_LOAD($1186 | 0, 4, 0) | 0 | 0;
        $1188 = $1185 >>> 0 < $1187 >>> 0;
        if ($1188) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1185, $37);
         $1189 = SAFE_HEAP_LOAD($1184 | 0, 4, 0) | 0 | 0;
         $1190 = $1189 + 24 | 0;
         SAFE_HEAP_STORE($1184 | 0, $1190 | 0, 4);
        } else {
         $1191 = $db + 12 | 0;
         $1192 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1193 = $1185;
         $1194 = $1192;
         $1195 = $1193 - $1194 | 0;
         $1196 = ($1195 | 0) / 24 & -1;
         $1197 = $1196 + 1 | 0;
         $1198 = ($1195 | 0) < -24;
         if ($1198) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1199 = __THREW__;
          __THREW__ = 0;
          $1200 = ___cxa_find_matching_catch() | 0;
          $1201 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
          $$02 = $1200;
          $$03 = $1201;
          break L3;
         }
         $1202 = $1187;
         $1203 = $1202 - $1194 | 0;
         $1204 = ($1203 | 0) / 24 & -1;
         $1205 = $1204 >>> 0 < 1073741823;
         if ($1205) {
          $1206 = $1204 << 1;
          $1207 = $1206 >>> 0 < $1197 >>> 0;
          $1208 = $1207 ? $1197 : $1206;
          $$0$i$i$i185 = $1208;
         } else {
          $$0$i$i$i185 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i184, $$0$i$i$i185, $1196, $1191);
         $1209 = $__v$i$i184 + 8 | 0;
         $1210 = SAFE_HEAP_LOAD($1209 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1210, $37);
         $1211 = $1210 + 24 | 0;
         SAFE_HEAP_STORE($1209 | 0, $1211 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i184);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i184);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
        $1212 = $first + 2 | 0;
        $$0 = $1212;
        break L1;
        break;
       }
      case 112:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($38, 10967);
        $1213 = $db + 4 | 0;
        $1214 = SAFE_HEAP_LOAD($1213 | 0, 4, 0) | 0 | 0;
        $1215 = $db + 8 | 0;
        $1216 = SAFE_HEAP_LOAD($1215 | 0, 4, 0) | 0 | 0;
        $1217 = $1214 >>> 0 < $1216 >>> 0;
        if ($1217) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1214, $38);
         $1218 = SAFE_HEAP_LOAD($1213 | 0, 4, 0) | 0 | 0;
         $1219 = $1218 + 24 | 0;
         SAFE_HEAP_STORE($1213 | 0, $1219 | 0, 4);
        } else {
         $1220 = $db + 12 | 0;
         $1221 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1222 = $1214;
         $1223 = $1221;
         $1224 = $1222 - $1223 | 0;
         $1225 = ($1224 | 0) / 24 & -1;
         $1226 = $1225 + 1 | 0;
         $1227 = ($1224 | 0) < -24;
         if ($1227) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1228 = __THREW__;
          __THREW__ = 0;
          $1229 = ___cxa_find_matching_catch() | 0;
          $1230 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
          $$02 = $1229;
          $$03 = $1230;
          break L3;
         }
         $1231 = $1216;
         $1232 = $1231 - $1223 | 0;
         $1233 = ($1232 | 0) / 24 & -1;
         $1234 = $1233 >>> 0 < 1073741823;
         if ($1234) {
          $1235 = $1233 << 1;
          $1236 = $1235 >>> 0 < $1226 >>> 0;
          $1237 = $1236 ? $1226 : $1235;
          $$0$i$i$i190 = $1237;
         } else {
          $$0$i$i$i190 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i189, $$0$i$i$i190, $1225, $1220);
         $1238 = $__v$i$i189 + 8 | 0;
         $1239 = SAFE_HEAP_LOAD($1238 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1239, $38);
         $1240 = $1239 + 24 | 0;
         SAFE_HEAP_STORE($1238 | 0, $1240 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i189);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i189);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
        $1241 = $first + 2 | 0;
        $$0 = $1241;
        break L1;
        break;
       }
      case 115:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($39, 10946);
        $1242 = $db + 4 | 0;
        $1243 = SAFE_HEAP_LOAD($1242 | 0, 4, 0) | 0 | 0;
        $1244 = $db + 8 | 0;
        $1245 = SAFE_HEAP_LOAD($1244 | 0, 4, 0) | 0 | 0;
        $1246 = $1243 >>> 0 < $1245 >>> 0;
        if ($1246) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1243, $39);
         $1247 = SAFE_HEAP_LOAD($1242 | 0, 4, 0) | 0 | 0;
         $1248 = $1247 + 24 | 0;
         SAFE_HEAP_STORE($1242 | 0, $1248 | 0, 4);
        } else {
         $1249 = $db + 12 | 0;
         $1250 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1251 = $1243;
         $1252 = $1250;
         $1253 = $1251 - $1252 | 0;
         $1254 = ($1253 | 0) / 24 & -1;
         $1255 = $1254 + 1 | 0;
         $1256 = ($1253 | 0) < -24;
         if ($1256) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1257 = __THREW__;
          __THREW__ = 0;
          $1258 = ___cxa_find_matching_catch() | 0;
          $1259 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
          $$02 = $1258;
          $$03 = $1259;
          break L3;
         }
         $1260 = $1245;
         $1261 = $1260 - $1252 | 0;
         $1262 = ($1261 | 0) / 24 & -1;
         $1263 = $1262 >>> 0 < 1073741823;
         if ($1263) {
          $1264 = $1262 << 1;
          $1265 = $1264 >>> 0 < $1255 >>> 0;
          $1266 = $1265 ? $1255 : $1264;
          $$0$i$i$i195 = $1266;
         } else {
          $$0$i$i$i195 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i194, $$0$i$i$i195, $1254, $1249);
         $1267 = $__v$i$i194 + 8 | 0;
         $1268 = SAFE_HEAP_LOAD($1267 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1268, $39);
         $1269 = $1268 + 24 | 0;
         SAFE_HEAP_STORE($1267 | 0, $1269 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i194);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i194);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
        $1270 = $first + 2 | 0;
        $$0 = $1270;
        break L1;
        break;
       }
      case 116:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($40, 10978);
        $1271 = $db + 4 | 0;
        $1272 = SAFE_HEAP_LOAD($1271 | 0, 4, 0) | 0 | 0;
        $1273 = $db + 8 | 0;
        $1274 = SAFE_HEAP_LOAD($1273 | 0, 4, 0) | 0 | 0;
        $1275 = $1272 >>> 0 < $1274 >>> 0;
        if ($1275) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1272, $40);
         $1276 = SAFE_HEAP_LOAD($1271 | 0, 4, 0) | 0 | 0;
         $1277 = $1276 + 24 | 0;
         SAFE_HEAP_STORE($1271 | 0, $1277 | 0, 4);
        } else {
         $1278 = $db + 12 | 0;
         $1279 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1280 = $1272;
         $1281 = $1279;
         $1282 = $1280 - $1281 | 0;
         $1283 = ($1282 | 0) / 24 & -1;
         $1284 = $1283 + 1 | 0;
         $1285 = ($1282 | 0) < -24;
         if ($1285) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1286 = __THREW__;
          __THREW__ = 0;
          $1287 = ___cxa_find_matching_catch() | 0;
          $1288 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
          $$02 = $1287;
          $$03 = $1288;
          break L3;
         }
         $1289 = $1274;
         $1290 = $1289 - $1281 | 0;
         $1291 = ($1290 | 0) / 24 & -1;
         $1292 = $1291 >>> 0 < 1073741823;
         if ($1292) {
          $1293 = $1291 << 1;
          $1294 = $1293 >>> 0 < $1284 >>> 0;
          $1295 = $1294 ? $1284 : $1293;
          $$0$i$i$i200 = $1295;
         } else {
          $$0$i$i$i200 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i199, $$0$i$i$i200, $1283, $1278);
         $1296 = $__v$i$i199 + 8 | 0;
         $1297 = SAFE_HEAP_LOAD($1296 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1297, $40);
         $1298 = $1297 + 24 | 0;
         SAFE_HEAP_STORE($1296 | 0, $1298 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i199);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i199);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
        $1299 = $first + 2 | 0;
        $$0 = $1299;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 113:
     {
      $1300 = $first + 1 | 0;
      $1301 = SAFE_HEAP_LOAD($1300 >> 0 | 0, 1, 0) | 0 | 0;
      $1302 = $1301 << 24 >> 24 == 117;
      if (!$1302) {
       $$0 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($41, 10989);
      $1303 = $db + 4 | 0;
      $1304 = SAFE_HEAP_LOAD($1303 | 0, 4, 0) | 0 | 0;
      $1305 = $db + 8 | 0;
      $1306 = SAFE_HEAP_LOAD($1305 | 0, 4, 0) | 0 | 0;
      $1307 = $1304 >>> 0 < $1306 >>> 0;
      if ($1307) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1304, $41);
       $1308 = SAFE_HEAP_LOAD($1303 | 0, 4, 0) | 0 | 0;
       $1309 = $1308 + 24 | 0;
       SAFE_HEAP_STORE($1303 | 0, $1309 | 0, 4);
      } else {
       $1310 = $db + 12 | 0;
       $1311 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $1312 = $1304;
       $1313 = $1311;
       $1314 = $1312 - $1313 | 0;
       $1315 = ($1314 | 0) / 24 & -1;
       $1316 = $1315 + 1 | 0;
       $1317 = ($1314 | 0) < -24;
       if ($1317) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $1318 = __THREW__;
        __THREW__ = 0;
        $1319 = ___cxa_find_matching_catch() | 0;
        $1320 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
        $$02 = $1319;
        $$03 = $1320;
        break L3;
       }
       $1321 = $1306;
       $1322 = $1321 - $1313 | 0;
       $1323 = ($1322 | 0) / 24 & -1;
       $1324 = $1323 >>> 0 < 1073741823;
       if ($1324) {
        $1325 = $1323 << 1;
        $1326 = $1325 >>> 0 < $1316 >>> 0;
        $1327 = $1326 ? $1316 : $1325;
        $$0$i$i$i205 = $1327;
       } else {
        $$0$i$i$i205 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i204, $$0$i$i$i205, $1315, $1310);
       $1328 = $__v$i$i204 + 8 | 0;
       $1329 = SAFE_HEAP_LOAD($1328 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1329, $41);
       $1330 = $1329 + 24 | 0;
       SAFE_HEAP_STORE($1328 | 0, $1330 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i204);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i204);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
      $1331 = $first + 2 | 0;
      $$0 = $1331;
      break L1;
      break;
     }
    case 114:
     {
      $1332 = $first + 1 | 0;
      $1333 = SAFE_HEAP_LOAD($1332 >> 0 | 0, 1, 0) | 0 | 0;
      $1334 = $1333 << 24 >> 24;
      switch ($1334 | 0) {
      case 109:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($42, 10999);
        $1335 = $db + 4 | 0;
        $1336 = SAFE_HEAP_LOAD($1335 | 0, 4, 0) | 0 | 0;
        $1337 = $db + 8 | 0;
        $1338 = SAFE_HEAP_LOAD($1337 | 0, 4, 0) | 0 | 0;
        $1339 = $1336 >>> 0 < $1338 >>> 0;
        if ($1339) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1336, $42);
         $1340 = SAFE_HEAP_LOAD($1335 | 0, 4, 0) | 0 | 0;
         $1341 = $1340 + 24 | 0;
         SAFE_HEAP_STORE($1335 | 0, $1341 | 0, 4);
        } else {
         $1342 = $db + 12 | 0;
         $1343 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1344 = $1336;
         $1345 = $1343;
         $1346 = $1344 - $1345 | 0;
         $1347 = ($1346 | 0) / 24 & -1;
         $1348 = $1347 + 1 | 0;
         $1349 = ($1346 | 0) < -24;
         if ($1349) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1350 = __THREW__;
          __THREW__ = 0;
          $1351 = ___cxa_find_matching_catch() | 0;
          $1352 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
          $$02 = $1351;
          $$03 = $1352;
          break L3;
         }
         $1353 = $1338;
         $1354 = $1353 - $1345 | 0;
         $1355 = ($1354 | 0) / 24 & -1;
         $1356 = $1355 >>> 0 < 1073741823;
         if ($1356) {
          $1357 = $1355 << 1;
          $1358 = $1357 >>> 0 < $1348 >>> 0;
          $1359 = $1358 ? $1348 : $1357;
          $$0$i$i$i210 = $1359;
         } else {
          $$0$i$i$i210 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i209, $$0$i$i$i210, $1347, $1342);
         $1360 = $__v$i$i209 + 8 | 0;
         $1361 = SAFE_HEAP_LOAD($1360 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1361, $42);
         $1362 = $1361 + 24 | 0;
         SAFE_HEAP_STORE($1360 | 0, $1362 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i209);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i209);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
        $1363 = $first + 2 | 0;
        $$0 = $1363;
        break L1;
        break;
       }
      case 77:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($43, 11009);
        $1364 = $db + 4 | 0;
        $1365 = SAFE_HEAP_LOAD($1364 | 0, 4, 0) | 0 | 0;
        $1366 = $db + 8 | 0;
        $1367 = SAFE_HEAP_LOAD($1366 | 0, 4, 0) | 0 | 0;
        $1368 = $1365 >>> 0 < $1367 >>> 0;
        if ($1368) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1365, $43);
         $1369 = SAFE_HEAP_LOAD($1364 | 0, 4, 0) | 0 | 0;
         $1370 = $1369 + 24 | 0;
         SAFE_HEAP_STORE($1364 | 0, $1370 | 0, 4);
        } else {
         $1371 = $db + 12 | 0;
         $1372 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1373 = $1365;
         $1374 = $1372;
         $1375 = $1373 - $1374 | 0;
         $1376 = ($1375 | 0) / 24 & -1;
         $1377 = $1376 + 1 | 0;
         $1378 = ($1375 | 0) < -24;
         if ($1378) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1379 = __THREW__;
          __THREW__ = 0;
          $1380 = ___cxa_find_matching_catch() | 0;
          $1381 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
          $$02 = $1380;
          $$03 = $1381;
          break L3;
         }
         $1382 = $1367;
         $1383 = $1382 - $1374 | 0;
         $1384 = ($1383 | 0) / 24 & -1;
         $1385 = $1384 >>> 0 < 1073741823;
         if ($1385) {
          $1386 = $1384 << 1;
          $1387 = $1386 >>> 0 < $1377 >>> 0;
          $1388 = $1387 ? $1377 : $1386;
          $$0$i$i$i215 = $1388;
         } else {
          $$0$i$i$i215 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i214, $$0$i$i$i215, $1376, $1371);
         $1389 = $__v$i$i214 + 8 | 0;
         $1390 = SAFE_HEAP_LOAD($1389 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1390, $43);
         $1391 = $1390 + 24 | 0;
         SAFE_HEAP_STORE($1389 | 0, $1391 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i214);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i214);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
        $1392 = $first + 2 | 0;
        $$0 = $1392;
        break L1;
        break;
       }
      case 115:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($44, 11020);
        $1393 = $db + 4 | 0;
        $1394 = SAFE_HEAP_LOAD($1393 | 0, 4, 0) | 0 | 0;
        $1395 = $db + 8 | 0;
        $1396 = SAFE_HEAP_LOAD($1395 | 0, 4, 0) | 0 | 0;
        $1397 = $1394 >>> 0 < $1396 >>> 0;
        if ($1397) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1394, $44);
         $1398 = SAFE_HEAP_LOAD($1393 | 0, 4, 0) | 0 | 0;
         $1399 = $1398 + 24 | 0;
         SAFE_HEAP_STORE($1393 | 0, $1399 | 0, 4);
        } else {
         $1400 = $db + 12 | 0;
         $1401 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1402 = $1394;
         $1403 = $1401;
         $1404 = $1402 - $1403 | 0;
         $1405 = ($1404 | 0) / 24 & -1;
         $1406 = $1405 + 1 | 0;
         $1407 = ($1404 | 0) < -24;
         if ($1407) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1408 = __THREW__;
          __THREW__ = 0;
          $1409 = ___cxa_find_matching_catch() | 0;
          $1410 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
          $$02 = $1409;
          $$03 = $1410;
          break L3;
         }
         $1411 = $1396;
         $1412 = $1411 - $1403 | 0;
         $1413 = ($1412 | 0) / 24 & -1;
         $1414 = $1413 >>> 0 < 1073741823;
         if ($1414) {
          $1415 = $1413 << 1;
          $1416 = $1415 >>> 0 < $1406 >>> 0;
          $1417 = $1416 ? $1406 : $1415;
          $$0$i$i$i220 = $1417;
         } else {
          $$0$i$i$i220 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i219, $$0$i$i$i220, $1405, $1400);
         $1418 = $__v$i$i219 + 8 | 0;
         $1419 = SAFE_HEAP_LOAD($1418 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1419, $44);
         $1420 = $1419 + 24 | 0;
         SAFE_HEAP_STORE($1418 | 0, $1420 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i219);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i219);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
        $1421 = $first + 2 | 0;
        $$0 = $1421;
        break L1;
        break;
       }
      case 83:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($45, 11031);
        $1422 = $db + 4 | 0;
        $1423 = SAFE_HEAP_LOAD($1422 | 0, 4, 0) | 0 | 0;
        $1424 = $db + 8 | 0;
        $1425 = SAFE_HEAP_LOAD($1424 | 0, 4, 0) | 0 | 0;
        $1426 = $1423 >>> 0 < $1425 >>> 0;
        if ($1426) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1423, $45);
         $1427 = SAFE_HEAP_LOAD($1422 | 0, 4, 0) | 0 | 0;
         $1428 = $1427 + 24 | 0;
         SAFE_HEAP_STORE($1422 | 0, $1428 | 0, 4);
        } else {
         $1429 = $db + 12 | 0;
         $1430 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $1431 = $1423;
         $1432 = $1430;
         $1433 = $1431 - $1432 | 0;
         $1434 = ($1433 | 0) / 24 & -1;
         $1435 = $1434 + 1 | 0;
         $1436 = ($1433 | 0) < -24;
         if ($1436) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $1437 = __THREW__;
          __THREW__ = 0;
          $1438 = ___cxa_find_matching_catch() | 0;
          $1439 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
          $$02 = $1438;
          $$03 = $1439;
          break L3;
         }
         $1440 = $1425;
         $1441 = $1440 - $1432 | 0;
         $1442 = ($1441 | 0) / 24 & -1;
         $1443 = $1442 >>> 0 < 1073741823;
         if ($1443) {
          $1444 = $1442 << 1;
          $1445 = $1444 >>> 0 < $1435 >>> 0;
          $1446 = $1445 ? $1435 : $1444;
          $$0$i$i$i225 = $1446;
         } else {
          $$0$i$i$i225 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i224, $$0$i$i$i225, $1434, $1429);
         $1447 = $__v$i$i224 + 8 | 0;
         $1448 = SAFE_HEAP_LOAD($1447 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1448, $45);
         $1449 = $1448 + 24 | 0;
         SAFE_HEAP_STORE($1447 | 0, $1449 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i224);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i224);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
        $1450 = $first + 2 | 0;
        $$0 = $1450;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    case 118:
     {
      $1451 = $first + 1 | 0;
      $1452 = SAFE_HEAP_LOAD($1451 >> 0 | 0, 1, 0) | 0 | 0;
      $1453 = $1452 << 24 >> 24;
      $isdigittmp = $1453 + -48 | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      if (!$isdigit) {
       $$0 = $first;
       break L1;
      }
      $1454 = $first + 2 | 0;
      $1455 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1454, $last, $db) | 0;
      $1456 = ($1455 | 0) == ($1454 | 0);
      if ($1456) {
       $$0 = $first;
       break L1;
      }
      $1457 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $1458 = $db + 4 | 0;
      $1459 = SAFE_HEAP_LOAD($1458 | 0, 4, 0) | 0 | 0;
      $1460 = ($1457 | 0) == ($1459 | 0);
      if ($1460) {
       $$0 = $first;
       break L1;
      }
      $1461 = $1459 + -24 | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1461, 0, 10615) | 0;
      $$0 = $1455;
      break L1;
      break;
     }
    default:
     {
      $$0 = $first;
      break L1;
     }
    }
   } while (0);
   ___resumeException($$02 | 0);
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bytes >>> 0 < 245;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 2116 + ($13 << 2) | 0;
    $$sum10 = $13 + 2 | 0;
    $15 = 2116 + ($$sum10 << 2) | 0;
    $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $17 = $16 + 8 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      SAFE_HEAP_STORE(2076 | 0, $22 | 0, 4);
     } else {
      $23 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort();
      }
      $25 = $18 + 12 | 0;
      $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       SAFE_HEAP_STORE($25 | 0, $14 | 0, 4);
       SAFE_HEAP_STORE($15 | 0, $18 | 0, 4);
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    SAFE_HEAP_STORE($30 | 0, $29 | 0, 4);
    $$sum1112 = $28 | 4;
    $31 = $16 + $$sum1112 | 0;
    $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
    $33 = $32 | 1;
    SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
    $mem$0 = $17;
    return $mem$0 | 0;
   }
   $34 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
   $35 = $4 >>> 0 > $34 >>> 0;
   if ($35) {
    $36 = ($7 | 0) == 0;
    if (!$36) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = 0 - $38 | 0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = 0 - $41 | 0;
     $43 = $41 & $42;
     $44 = $43 + -1 | 0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = $62 + $63 | 0;
     $65 = $64 << 1;
     $66 = 2116 + ($65 << 2) | 0;
     $$sum4 = $65 + 2 | 0;
     $67 = 2116 + ($$sum4 << 2) | 0;
     $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
     $69 = $68 + 8 | 0;
     $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
     $71 = ($66 | 0) == ($70 | 0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       SAFE_HEAP_STORE(2076 | 0, $74 | 0, 4);
       $88 = $34;
      } else {
       $75 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $76 = $70 >>> 0 < $75 >>> 0;
       if ($76) {
        _abort();
       }
       $77 = $70 + 12 | 0;
       $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
       $79 = ($78 | 0) == ($68 | 0);
       if ($79) {
        SAFE_HEAP_STORE($77 | 0, $66 | 0, 4);
        SAFE_HEAP_STORE($67 | 0, $70 | 0, 4);
        $$pre = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
        $88 = $$pre;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $4 | 0;
     $82 = $4 | 3;
     $83 = $68 + 4 | 0;
     SAFE_HEAP_STORE($83 | 0, $82 | 0, 4);
     $84 = $68 + $4 | 0;
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = $68 + $$sum56 | 0;
     SAFE_HEAP_STORE($86 | 0, $85 | 0, 4);
     $87 = $68 + $80 | 0;
     SAFE_HEAP_STORE($87 | 0, $81 | 0, 4);
     $89 = ($88 | 0) == 0;
     if (!$89) {
      $90 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = 2116 + ($92 << 2) | 0;
      $94 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96 | 0) == 0;
      if ($97) {
       $98 = $94 | $95;
       SAFE_HEAP_STORE(2076 | 0, $98 | 0, 4);
       $$pre105 = $92 + 2 | 0;
       $$pre106 = 2116 + ($$pre105 << 2) | 0;
       $$pre$phiZ2D = $$pre106;
       $F4$0 = $93;
      } else {
       $$sum9 = $92 + 2 | 0;
       $99 = 2116 + ($$sum9 << 2) | 0;
       $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
       $101 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $102 = $100 >>> 0 < $101 >>> 0;
       if ($102) {
        _abort();
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      SAFE_HEAP_STORE($$pre$phiZ2D | 0, $90 | 0, 4);
      $103 = $F4$0 + 12 | 0;
      SAFE_HEAP_STORE($103 | 0, $90 | 0, 4);
      $104 = $90 + 8 | 0;
      SAFE_HEAP_STORE($104 | 0, $F4$0 | 0, 4);
      $105 = $90 + 12 | 0;
      SAFE_HEAP_STORE($105 | 0, $93 | 0, 4);
     }
     SAFE_HEAP_STORE(2084 | 0, $81 | 0, 4);
     SAFE_HEAP_STORE(2096 | 0, $84 | 0, 4);
     $mem$0 = $69;
     return $mem$0 | 0;
    }
    $106 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = 0 - $106 | 0;
     $109 = $106 & $108;
     $110 = $109 + -1 | 0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = $128 + $129 | 0;
     $131 = 2380 + ($130 << 2) | 0;
     $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
     $133 = $132 + 4 | 0;
     $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
     $135 = $134 & -8;
     $136 = $135 - $4 | 0;
     $rsize$0$i = $136;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $137 = $t$0$i + 16 | 0;
      $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
      $139 = ($138 | 0) == (0 | 0);
      if ($139) {
       $140 = $t$0$i + 20 | 0;
       $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
       $142 = ($141 | 0) == (0 | 0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = $144 + 4 | 0;
      $145 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
      $146 = $145 & -8;
      $147 = $146 - $4 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $$v$0$i;
     }
     $149 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $150 = $v$0$i$lcssa >>> 0 < $149 >>> 0;
     if ($150) {
      _abort();
     }
     $151 = $v$0$i$lcssa + $4 | 0;
     $152 = $v$0$i$lcssa >>> 0 < $151 >>> 0;
     if (!$152) {
      _abort();
     }
     $153 = $v$0$i$lcssa + 24 | 0;
     $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
     $155 = $v$0$i$lcssa + 12 | 0;
     $156 = SAFE_HEAP_LOAD($155 | 0, 4, 0) | 0 | 0;
     $157 = ($156 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($157) {
       $167 = $v$0$i$lcssa + 20 | 0;
       $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
       $169 = ($168 | 0) == (0 | 0);
       if ($169) {
        $170 = $v$0$i$lcssa + 16 | 0;
        $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
        $175 = ($174 | 0) == (0 | 0);
        if (!$175) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;
         $RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       $179 = $RP$0$i$lcssa >>> 0 < $149 >>> 0;
       if ($179) {
        _abort();
       } else {
        SAFE_HEAP_STORE($RP$0$i$lcssa | 0, 0 | 0, 4);
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = $v$0$i$lcssa + 8 | 0;
       $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
       $160 = $159 >>> 0 < $149 >>> 0;
       if ($160) {
        _abort();
       }
       $161 = $159 + 12 | 0;
       $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
       $163 = ($162 | 0) == ($v$0$i$lcssa | 0);
       if (!$163) {
        _abort();
       }
       $164 = $156 + 8 | 0;
       $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
       $166 = ($165 | 0) == ($v$0$i$lcssa | 0);
       if ($166) {
        SAFE_HEAP_STORE($161 | 0, $156 | 0, 4);
        SAFE_HEAP_STORE($164 | 0, $159 | 0, 4);
        $R$1$i = $156;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $180 = ($154 | 0) == (0 | 0);
     do {
      if (!$180) {
       $181 = $v$0$i$lcssa + 28 | 0;
       $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
       $183 = 2380 + ($182 << 2) | 0;
       $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
       $185 = ($v$0$i$lcssa | 0) == ($184 | 0);
       if ($185) {
        SAFE_HEAP_STORE($183 | 0, $R$1$i | 0, 4);
        $cond$i = ($R$1$i | 0) == (0 | 0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
         $189 = $188 & $187;
         SAFE_HEAP_STORE(2080 | 0, $189 | 0, 4);
         break;
        }
       } else {
        $190 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
        $191 = $154 >>> 0 < $190 >>> 0;
        if ($191) {
         _abort();
        }
        $192 = $154 + 16 | 0;
        $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
        $194 = ($193 | 0) == ($v$0$i$lcssa | 0);
        if ($194) {
         SAFE_HEAP_STORE($192 | 0, $R$1$i | 0, 4);
        } else {
         $195 = $154 + 20 | 0;
         SAFE_HEAP_STORE($195 | 0, $R$1$i | 0, 4);
        }
        $196 = ($R$1$i | 0) == (0 | 0);
        if ($196) {
         break;
        }
       }
       $197 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $198 = $R$1$i >>> 0 < $197 >>> 0;
       if ($198) {
        _abort();
       }
       $199 = $R$1$i + 24 | 0;
       SAFE_HEAP_STORE($199 | 0, $154 | 0, 4);
       $200 = $v$0$i$lcssa + 16 | 0;
       $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
       $202 = ($201 | 0) == (0 | 0);
       do {
        if (!$202) {
         $203 = $201 >>> 0 < $197 >>> 0;
         if ($203) {
          _abort();
         } else {
          $204 = $R$1$i + 16 | 0;
          SAFE_HEAP_STORE($204 | 0, $201 | 0, 4);
          $205 = $201 + 24 | 0;
          SAFE_HEAP_STORE($205 | 0, $R$1$i | 0, 4);
          break;
         }
        }
       } while (0);
       $206 = $v$0$i$lcssa + 20 | 0;
       $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
       $208 = ($207 | 0) == (0 | 0);
       if (!$208) {
        $209 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
        $210 = $207 >>> 0 < $209 >>> 0;
        if ($210) {
         _abort();
        } else {
         $211 = $R$1$i + 20 | 0;
         SAFE_HEAP_STORE($211 | 0, $207 | 0, 4);
         $212 = $207 + 24 | 0;
         SAFE_HEAP_STORE($212 | 0, $R$1$i | 0, 4);
         break;
        }
       }
      }
     } while (0);
     $213 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($213) {
      $214 = $rsize$0$i$lcssa + $4 | 0;
      $215 = $214 | 3;
      $216 = $v$0$i$lcssa + 4 | 0;
      SAFE_HEAP_STORE($216 | 0, $215 | 0, 4);
      $$sum4$i = $214 + 4 | 0;
      $217 = $v$0$i$lcssa + $$sum4$i | 0;
      $218 = SAFE_HEAP_LOAD($217 | 0, 4, 0) | 0 | 0;
      $219 = $218 | 1;
      SAFE_HEAP_STORE($217 | 0, $219 | 0, 4);
     } else {
      $220 = $4 | 3;
      $221 = $v$0$i$lcssa + 4 | 0;
      SAFE_HEAP_STORE($221 | 0, $220 | 0, 4);
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = $v$0$i$lcssa + $$sum$i35 | 0;
      SAFE_HEAP_STORE($223 | 0, $222 | 0, 4);
      $$sum1$i = $rsize$0$i$lcssa + $4 | 0;
      $224 = $v$0$i$lcssa + $$sum1$i | 0;
      SAFE_HEAP_STORE($224 | 0, $rsize$0$i$lcssa | 0, 4);
      $225 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
      $226 = ($225 | 0) == 0;
      if (!$226) {
       $227 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = 2116 + ($229 << 2) | 0;
       $231 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233 | 0) == 0;
       if ($234) {
        $235 = $231 | $232;
        SAFE_HEAP_STORE(2076 | 0, $235 | 0, 4);
        $$pre$i = $229 + 2 | 0;
        $$pre8$i = 2116 + ($$pre$i << 2) | 0;
        $$pre$phi$iZ2D = $$pre8$i;
        $F1$0$i = $230;
       } else {
        $$sum3$i = $229 + 2 | 0;
        $236 = 2116 + ($$sum3$i << 2) | 0;
        $237 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
        $238 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
        $239 = $237 >>> 0 < $238 >>> 0;
        if ($239) {
         _abort();
        } else {
         $$pre$phi$iZ2D = $236;
         $F1$0$i = $237;
        }
       }
       SAFE_HEAP_STORE($$pre$phi$iZ2D | 0, $227 | 0, 4);
       $240 = $F1$0$i + 12 | 0;
       SAFE_HEAP_STORE($240 | 0, $227 | 0, 4);
       $241 = $227 + 8 | 0;
       SAFE_HEAP_STORE($241 | 0, $F1$0$i | 0, 4);
       $242 = $227 + 12 | 0;
       SAFE_HEAP_STORE($242 | 0, $230 | 0, 4);
      }
      SAFE_HEAP_STORE(2084 | 0, $rsize$0$i$lcssa | 0, 4);
      SAFE_HEAP_STORE(2096 | 0, $151 | 0, 4);
     }
     $243 = $v$0$i$lcssa + 8 | 0;
     $mem$0 = $243;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = $bytes >>> 0 > 4294967231;
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = $bytes + 11 | 0;
    $246 = $245 & -8;
    $247 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = 0 - $246 | 0;
     $250 = $245 >>> 8;
     $251 = ($250 | 0) == 0;
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = $246 >>> 0 > 16777215;
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = $250 + 1048320 | 0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = $256 + 520192 | 0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = $261 + 245760 | 0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = 14 - $265 | 0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = $266 + $268 | 0;
       $270 = $269 << 1;
       $271 = $269 + 7 | 0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = 2380 + ($idx$0$i << 2) | 0;
     $276 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
     $277 = ($276 | 0) == (0 | 0);
     L123 : do {
      if ($277) {
       $rsize$2$i = $249;
       $t$1$i = 0;
       $v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i | 0) == 31;
       $279 = $idx$0$i >>> 1;
       $280 = 25 - $279 | 0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;
       $rst$0$i = 0;
       $sizebits$0$i = $282;
       $t$0$i14 = $276;
       $v$0$i16 = 0;
       while (1) {
        $283 = $t$0$i14 + 4 | 0;
        $284 = SAFE_HEAP_LOAD($283 | 0, 4, 0) | 0 | 0;
        $285 = $284 & -8;
        $286 = $285 - $246 | 0;
        $287 = $286 >>> 0 < $rsize$0$i15 >>> 0;
        if ($287) {
         $288 = ($285 | 0) == ($246 | 0);
         if ($288) {
          $rsize$331$i = $286;
          $t$230$i = $t$0$i14;
          $v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $289 = $t$0$i14 + 20 | 0;
        $290 = SAFE_HEAP_LOAD($289 | 0, 4, 0) | 0 | 0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ($t$0$i14 + 16 | 0) + ($291 << 2) | 0;
        $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
        $294 = ($290 | 0) == (0 | 0);
        $295 = ($290 | 0) == ($293 | 0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293 | 0) == (0 | 0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $297;
         $t$0$i14 = $293;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $298 = ($t$1$i | 0) == (0 | 0);
      $299 = ($v$2$i | 0) == (0 | 0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = 0 - $300 | 0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303 | 0) == 0;
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = 0 - $303 | 0;
       $306 = $303 & $305;
       $307 = $306 + -1 | 0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = $325 + $326 | 0;
       $328 = 2380 + ($327 << 2) | 0;
       $329 = SAFE_HEAP_LOAD($328 | 0, 4, 0) | 0 | 0;
       $t$2$ph$i = $329;
       $v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;
       $v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i | 0) == (0 | 0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;
       $v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;
       $t$230$i = $t$2$ph$i;
       $v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $331 = $t$230$i + 4 | 0;
       $332 = SAFE_HEAP_LOAD($331 | 0, 4, 0) | 0 | 0;
       $333 = $332 & -8;
       $334 = $333 - $246 | 0;
       $335 = $334 >>> 0 < $rsize$331$i >>> 0;
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = $t$230$i + 16 | 0;
       $337 = SAFE_HEAP_LOAD($336 | 0, 4, 0) | 0 | 0;
       $338 = ($337 | 0) == (0 | 0);
       if (!$338) {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $337;
        $v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = $t$230$i + 20 | 0;
       $340 = SAFE_HEAP_LOAD($339 | 0, 4, 0) | 0 | 0;
       $341 = ($340 | 0) == (0 | 0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $340;
        $v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i | 0) == (0 | 0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
      $344 = $343 - $246 | 0;
      $345 = $rsize$3$lcssa$i >>> 0 < $344 >>> 0;
      if ($345) {
       $346 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $347 = $v$3$lcssa$i >>> 0 < $346 >>> 0;
       if ($347) {
        _abort();
       }
       $348 = $v$3$lcssa$i + $246 | 0;
       $349 = $v$3$lcssa$i >>> 0 < $348 >>> 0;
       if (!$349) {
        _abort();
       }
       $350 = $v$3$lcssa$i + 24 | 0;
       $351 = SAFE_HEAP_LOAD($350 | 0, 4, 0) | 0 | 0;
       $352 = $v$3$lcssa$i + 12 | 0;
       $353 = SAFE_HEAP_LOAD($352 | 0, 4, 0) | 0 | 0;
       $354 = ($353 | 0) == ($v$3$lcssa$i | 0);
       do {
        if ($354) {
         $364 = $v$3$lcssa$i + 20 | 0;
         $365 = SAFE_HEAP_LOAD($364 | 0, 4, 0) | 0 | 0;
         $366 = ($365 | 0) == (0 | 0);
         if ($366) {
          $367 = $v$3$lcssa$i + 16 | 0;
          $368 = SAFE_HEAP_LOAD($367 | 0, 4, 0) | 0 | 0;
          $369 = ($368 | 0) == (0 | 0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;
           $RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;
          $RP$0$i17 = $364;
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0;
          $371 = SAFE_HEAP_LOAD($370 | 0, 4, 0) | 0 | 0;
          $372 = ($371 | 0) == (0 | 0);
          if (!$372) {
           $R$0$i18 = $371;
           $RP$0$i17 = $370;
           continue;
          }
          $373 = $R$0$i18 + 16 | 0;
          $374 = SAFE_HEAP_LOAD($373 | 0, 4, 0) | 0 | 0;
          $375 = ($374 | 0) == (0 | 0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;
           $RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;
           $RP$0$i17 = $373;
          }
         }
         $376 = $RP$0$i17$lcssa >>> 0 < $346 >>> 0;
         if ($376) {
          _abort();
         } else {
          SAFE_HEAP_STORE($RP$0$i17$lcssa | 0, 0 | 0, 4);
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = $v$3$lcssa$i + 8 | 0;
         $356 = SAFE_HEAP_LOAD($355 | 0, 4, 0) | 0 | 0;
         $357 = $356 >>> 0 < $346 >>> 0;
         if ($357) {
          _abort();
         }
         $358 = $356 + 12 | 0;
         $359 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
         $360 = ($359 | 0) == ($v$3$lcssa$i | 0);
         if (!$360) {
          _abort();
         }
         $361 = $353 + 8 | 0;
         $362 = SAFE_HEAP_LOAD($361 | 0, 4, 0) | 0 | 0;
         $363 = ($362 | 0) == ($v$3$lcssa$i | 0);
         if ($363) {
          SAFE_HEAP_STORE($358 | 0, $353 | 0, 4);
          SAFE_HEAP_STORE($361 | 0, $356 | 0, 4);
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $377 = ($351 | 0) == (0 | 0);
       do {
        if (!$377) {
         $378 = $v$3$lcssa$i + 28 | 0;
         $379 = SAFE_HEAP_LOAD($378 | 0, 4, 0) | 0 | 0;
         $380 = 2380 + ($379 << 2) | 0;
         $381 = SAFE_HEAP_LOAD($380 | 0, 4, 0) | 0 | 0;
         $382 = ($v$3$lcssa$i | 0) == ($381 | 0);
         if ($382) {
          SAFE_HEAP_STORE($380 | 0, $R$1$i20 | 0, 4);
          $cond$i21 = ($R$1$i20 | 0) == (0 | 0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
           $386 = $385 & $384;
           SAFE_HEAP_STORE(2080 | 0, $386 | 0, 4);
           break;
          }
         } else {
          $387 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
          $388 = $351 >>> 0 < $387 >>> 0;
          if ($388) {
           _abort();
          }
          $389 = $351 + 16 | 0;
          $390 = SAFE_HEAP_LOAD($389 | 0, 4, 0) | 0 | 0;
          $391 = ($390 | 0) == ($v$3$lcssa$i | 0);
          if ($391) {
           SAFE_HEAP_STORE($389 | 0, $R$1$i20 | 0, 4);
          } else {
           $392 = $351 + 20 | 0;
           SAFE_HEAP_STORE($392 | 0, $R$1$i20 | 0, 4);
          }
          $393 = ($R$1$i20 | 0) == (0 | 0);
          if ($393) {
           break;
          }
         }
         $394 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
         $395 = $R$1$i20 >>> 0 < $394 >>> 0;
         if ($395) {
          _abort();
         }
         $396 = $R$1$i20 + 24 | 0;
         SAFE_HEAP_STORE($396 | 0, $351 | 0, 4);
         $397 = $v$3$lcssa$i + 16 | 0;
         $398 = SAFE_HEAP_LOAD($397 | 0, 4, 0) | 0 | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort();
           } else {
            $401 = $R$1$i20 + 16 | 0;
            SAFE_HEAP_STORE($401 | 0, $398 | 0, 4);
            $402 = $398 + 24 | 0;
            SAFE_HEAP_STORE($402 | 0, $R$1$i20 | 0, 4);
            break;
           }
          }
         } while (0);
         $403 = $v$3$lcssa$i + 20 | 0;
         $404 = SAFE_HEAP_LOAD($403 | 0, 4, 0) | 0 | 0;
         $405 = ($404 | 0) == (0 | 0);
         if (!$405) {
          $406 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort();
          } else {
           $408 = $R$1$i20 + 20 | 0;
           SAFE_HEAP_STORE($408 | 0, $404 | 0, 4);
           $409 = $404 + 24 | 0;
           SAFE_HEAP_STORE($409 | 0, $R$1$i20 | 0, 4);
           break;
          }
         }
        }
       } while (0);
       $410 = $rsize$3$lcssa$i >>> 0 < 16;
       L199 : do {
        if ($410) {
         $411 = $rsize$3$lcssa$i + $246 | 0;
         $412 = $411 | 3;
         $413 = $v$3$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($413 | 0, $412 | 0, 4);
         $$sum18$i = $411 + 4 | 0;
         $414 = $v$3$lcssa$i + $$sum18$i | 0;
         $415 = SAFE_HEAP_LOAD($414 | 0, 4, 0) | 0 | 0;
         $416 = $415 | 1;
         SAFE_HEAP_STORE($414 | 0, $416 | 0, 4);
        } else {
         $417 = $246 | 3;
         $418 = $v$3$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($418 | 0, $417 | 0, 4);
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = $v$3$lcssa$i + $$sum$i2334 | 0;
         SAFE_HEAP_STORE($420 | 0, $419 | 0, 4);
         $$sum1$i24 = $rsize$3$lcssa$i + $246 | 0;
         $421 = $v$3$lcssa$i + $$sum1$i24 | 0;
         SAFE_HEAP_STORE($421 | 0, $rsize$3$lcssa$i | 0, 4);
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = $rsize$3$lcssa$i >>> 0 < 256;
         if ($423) {
          $424 = $422 << 1;
          $425 = 2116 + ($424 << 2) | 0;
          $426 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428 | 0) == 0;
          if ($429) {
           $430 = $426 | $427;
           SAFE_HEAP_STORE(2076 | 0, $430 | 0, 4);
           $$pre$i25 = $424 + 2 | 0;
           $$pre43$i = 2116 + ($$pre$i25 << 2) | 0;
           $$pre$phi$i26Z2D = $$pre43$i;
           $F5$0$i = $425;
          } else {
           $$sum17$i = $424 + 2 | 0;
           $431 = 2116 + ($$sum17$i << 2) | 0;
           $432 = SAFE_HEAP_LOAD($431 | 0, 4, 0) | 0 | 0;
           $433 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
           $434 = $432 >>> 0 < $433 >>> 0;
           if ($434) {
            _abort();
           } else {
            $$pre$phi$i26Z2D = $431;
            $F5$0$i = $432;
           }
          }
          SAFE_HEAP_STORE($$pre$phi$i26Z2D | 0, $348 | 0, 4);
          $435 = $F5$0$i + 12 | 0;
          SAFE_HEAP_STORE($435 | 0, $348 | 0, 4);
          $$sum15$i = $246 + 8 | 0;
          $436 = $v$3$lcssa$i + $$sum15$i | 0;
          SAFE_HEAP_STORE($436 | 0, $F5$0$i | 0, 4);
          $$sum16$i = $246 + 12 | 0;
          $437 = $v$3$lcssa$i + $$sum16$i | 0;
          SAFE_HEAP_STORE($437 | 0, $425 | 0, 4);
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438 | 0) == 0;
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = $rsize$3$lcssa$i >>> 0 > 16777215;
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = $438 + 1048320 | 0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = $444 + 520192 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = $449 + 245760 | 0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = 14 - $453 | 0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = $454 + $456 | 0;
           $458 = $457 << 1;
           $459 = $457 + 7 | 0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = 2380 + ($I7$0$i << 2) | 0;
         $$sum2$i = $246 + 28 | 0;
         $464 = $v$3$lcssa$i + $$sum2$i | 0;
         SAFE_HEAP_STORE($464 | 0, $I7$0$i | 0, 4);
         $$sum3$i27 = $246 + 16 | 0;
         $465 = $v$3$lcssa$i + $$sum3$i27 | 0;
         $$sum4$i28 = $246 + 20 | 0;
         $466 = $v$3$lcssa$i + $$sum4$i28 | 0;
         SAFE_HEAP_STORE($466 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($465 | 0, 0 | 0, 4);
         $467 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469 | 0) == 0;
         if ($470) {
          $471 = $467 | $468;
          SAFE_HEAP_STORE(2080 | 0, $471 | 0, 4);
          SAFE_HEAP_STORE($463 | 0, $348 | 0, 4);
          $$sum5$i = $246 + 24 | 0;
          $472 = $v$3$lcssa$i + $$sum5$i | 0;
          SAFE_HEAP_STORE($472 | 0, $463 | 0, 4);
          $$sum6$i = $246 + 12 | 0;
          $473 = $v$3$lcssa$i + $$sum6$i | 0;
          SAFE_HEAP_STORE($473 | 0, $348 | 0, 4);
          $$sum7$i = $246 + 8 | 0;
          $474 = $v$3$lcssa$i + $$sum7$i | 0;
          SAFE_HEAP_STORE($474 | 0, $348 | 0, 4);
          break;
         }
         $475 = SAFE_HEAP_LOAD($463 | 0, 4, 0) | 0 | 0;
         $476 = $475 + 4 | 0;
         $477 = SAFE_HEAP_LOAD($476 | 0, 4, 0) | 0 | 0;
         $478 = $477 & -8;
         $479 = ($478 | 0) == ($rsize$3$lcssa$i | 0);
         L217 : do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i | 0) == 31;
           $481 = $I7$0$i >>> 1;
           $482 = 25 - $481 | 0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;
           $T$028$i = $475;
           while (1) {
            $491 = $K12$029$i >>> 31;
            $492 = ($T$028$i + 16 | 0) + ($491 << 2) | 0;
            $487 = SAFE_HEAP_LOAD($492 | 0, 4, 0) | 0 | 0;
            $493 = ($487 | 0) == (0 | 0);
            if ($493) {
             $$lcssa232 = $492;
             $T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = $487 + 4 | 0;
            $488 = SAFE_HEAP_LOAD($486 | 0, 4, 0) | 0 | 0;
            $489 = $488 & -8;
            $490 = ($489 | 0) == ($rsize$3$lcssa$i | 0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;
             $T$028$i = $487;
            }
           }
           $494 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
           $495 = $$lcssa232 >>> 0 < $494 >>> 0;
           if ($495) {
            _abort();
           } else {
            SAFE_HEAP_STORE($$lcssa232 | 0, $348 | 0, 4);
            $$sum11$i = $246 + 24 | 0;
            $496 = $v$3$lcssa$i + $$sum11$i | 0;
            SAFE_HEAP_STORE($496 | 0, $T$028$i$lcssa | 0, 4);
            $$sum12$i = $246 + 12 | 0;
            $497 = $v$3$lcssa$i + $$sum12$i | 0;
            SAFE_HEAP_STORE($497 | 0, $348 | 0, 4);
            $$sum13$i = $246 + 8 | 0;
            $498 = $v$3$lcssa$i + $$sum13$i | 0;
            SAFE_HEAP_STORE($498 | 0, $348 | 0, 4);
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0;
         $500 = SAFE_HEAP_LOAD($499 | 0, 4, 0) | 0 | 0;
         $501 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
         $502 = $500 >>> 0 >= $501 >>> 0;
         $not$$i = $T$0$lcssa$i >>> 0 >= $501 >>> 0;
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = $500 + 12 | 0;
          SAFE_HEAP_STORE($504 | 0, $348 | 0, 4);
          SAFE_HEAP_STORE($499 | 0, $348 | 0, 4);
          $$sum8$i = $246 + 8 | 0;
          $505 = $v$3$lcssa$i + $$sum8$i | 0;
          SAFE_HEAP_STORE($505 | 0, $500 | 0, 4);
          $$sum9$i = $246 + 12 | 0;
          $506 = $v$3$lcssa$i + $$sum9$i | 0;
          SAFE_HEAP_STORE($506 | 0, $T$0$lcssa$i | 0, 4);
          $$sum10$i = $246 + 24 | 0;
          $507 = $v$3$lcssa$i + $$sum10$i | 0;
          SAFE_HEAP_STORE($507 | 0, 0 | 0, 4);
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $508 = $v$3$lcssa$i + 8 | 0;
       $mem$0 = $508;
       return $mem$0 | 0;
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while (0);
 $509 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   SAFE_HEAP_STORE(2096 | 0, $514 | 0, 4);
   SAFE_HEAP_STORE(2084 | 0, $511 | 0, 4);
   $515 = $511 | 1;
   $$sum2 = $nb$0 + 4 | 0;
   $516 = $512 + $$sum2 | 0;
   SAFE_HEAP_STORE($516 | 0, $515 | 0, 4);
   $517 = $512 + $509 | 0;
   SAFE_HEAP_STORE($517 | 0, $511 | 0, 4);
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   SAFE_HEAP_STORE($519 | 0, $518 | 0, 4);
  } else {
   SAFE_HEAP_STORE(2084 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(2096 | 0, 0 | 0, 4);
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   SAFE_HEAP_STORE($521 | 0, $520 | 0, 4);
   $$sum1 = $509 + 4 | 0;
   $522 = $512 + $$sum1 | 0;
   $523 = SAFE_HEAP_LOAD($522 | 0, 4, 0) | 0 | 0;
   $524 = $523 | 1;
   SAFE_HEAP_STORE($522 | 0, $524 | 0, 4);
  }
  $525 = $512 + 8 | 0;
  $mem$0 = $525;
  return $mem$0 | 0;
 }
 $526 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
 $527 = $526 >>> 0 > $nb$0 >>> 0;
 if ($527) {
  $528 = $526 - $nb$0 | 0;
  SAFE_HEAP_STORE(2088 | 0, $528 | 0, 4);
  $529 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
  $530 = $529 + $nb$0 | 0;
  SAFE_HEAP_STORE(2100 | 0, $530 | 0, 4);
  $531 = $528 | 1;
  $$sum = $nb$0 + 4 | 0;
  $532 = $529 + $$sum | 0;
  SAFE_HEAP_STORE($532 | 0, $531 | 0, 4);
  $533 = $nb$0 | 3;
  $534 = $529 + 4 | 0;
  SAFE_HEAP_STORE($534 | 0, $533 | 0, 4);
  $535 = $529 + 8 | 0;
  $mem$0 = $535;
  return $mem$0 | 0;
 }
 $536 = SAFE_HEAP_LOAD(2548 | 0, 4, 0) | 0 | 0;
 $537 = ($536 | 0) == 0;
 do {
  if ($537) {
   $538 = _sysconf(30) | 0;
   $539 = $538 + -1 | 0;
   $540 = $539 & $538;
   $541 = ($540 | 0) == 0;
   if ($541) {
    SAFE_HEAP_STORE(2556 | 0, $538 | 0, 4);
    SAFE_HEAP_STORE(2552 | 0, $538 | 0, 4);
    SAFE_HEAP_STORE(2560 | 0, -1 | 0, 4);
    SAFE_HEAP_STORE(2564 | 0, -1 | 0, 4);
    SAFE_HEAP_STORE(2568 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(2520 | 0, 0 | 0, 4);
    $542 = _time(0 | 0) | 0;
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    SAFE_HEAP_STORE(2548 | 0, $544 | 0, 4);
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = SAFE_HEAP_LOAD(2556 | 0, 4, 0) | 0 | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 $551 = $550 >>> 0 > $nb$0 >>> 0;
 if (!$551) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = SAFE_HEAP_LOAD(2516 | 0, 4, 0) | 0 | 0;
 $553 = ($552 | 0) == 0;
 if (!$553) {
  $554 = SAFE_HEAP_LOAD(2508 | 0, 4, 0) | 0 | 0;
  $555 = $554 + $550 | 0;
  $556 = $555 >>> 0 <= $554 >>> 0;
  $557 = $555 >>> 0 > $552 >>> 0;
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 $558 = SAFE_HEAP_LOAD(2520 | 0, 4, 0) | 0 | 0;
 $559 = $558 & 4;
 $560 = ($559 | 0) == 0;
 L258 : do {
  if ($560) {
   $561 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
   $562 = ($561 | 0) == (0 | 0);
   L260 : do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = 2524;
     while (1) {
      $563 = SAFE_HEAP_LOAD($sp$0$i$i | 0, 4, 0) | 0 | 0;
      $564 = $563 >>> 0 > $561 >>> 0;
      if (!$564) {
       $565 = $sp$0$i$i + 4 | 0;
       $566 = SAFE_HEAP_LOAD($565 | 0, 4, 0) | 0 | 0;
       $567 = $563 + $566 | 0;
       $568 = $567 >>> 0 > $561 >>> 0;
       if ($568) {
        $$lcssa228 = $sp$0$i$i;
        $$lcssa230 = $565;
        break;
       }
      }
      $569 = $sp$0$i$i + 8 | 0;
      $570 = SAFE_HEAP_LOAD($569 | 0, 4, 0) | 0 | 0;
      $571 = ($570 | 0) == (0 | 0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
     $595 = $548 - $594 | 0;
     $596 = $595 & $549;
     $597 = $596 >>> 0 < 2147483647;
     if ($597) {
      $598 = _sbrk($596 | 0) | 0;
      $599 = SAFE_HEAP_LOAD($$lcssa228 | 0, 4, 0) | 0 | 0;
      $600 = SAFE_HEAP_LOAD($$lcssa230 | 0, 4, 0) | 0 | 0;
      $601 = $599 + $600 | 0;
      $602 = ($598 | 0) == ($601 | 0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598 | 0) == (-1 | 0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;
        $tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;
       $ssize$1$ph$i = $596;
       $tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = _sbrk(0) | 0;
     $573 = ($572 | 0) == (-1 | 0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = SAFE_HEAP_LOAD(2552 | 0, 4, 0) | 0 | 0;
      $576 = $575 + -1 | 0;
      $577 = $576 & $574;
      $578 = ($577 | 0) == 0;
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = $576 + $574 | 0;
       $580 = 0 - $575 | 0;
       $581 = $579 & $580;
       $582 = $550 - $574 | 0;
       $583 = $582 + $581 | 0;
       $ssize$0$i = $583;
      }
      $584 = SAFE_HEAP_LOAD(2508 | 0, 4, 0) | 0 | 0;
      $585 = $584 + $ssize$0$i | 0;
      $586 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $587 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = SAFE_HEAP_LOAD(2516 | 0, 4, 0) | 0 | 0;
       $589 = ($588 | 0) == 0;
       if (!$589) {
        $590 = $585 >>> 0 <= $584 >>> 0;
        $591 = $585 >>> 0 > $588 >>> 0;
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = _sbrk($ssize$0$i | 0) | 0;
       $593 = ($592 | 0) == ($572 | 0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;
        $tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;
        $ssize$1$ph$i = $ssize$0$i;
        $tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0;
     $605 = ($br$0$ph$i | 0) != (-1 | 0);
     $606 = $ssize$1$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $606 & $605;
     $607 = $545 >>> 0 > $ssize$1$ph$i >>> 0;
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = SAFE_HEAP_LOAD(2556 | 0, 4, 0) | 0 | 0;
       $609 = $547 - $ssize$1$ph$i | 0;
       $610 = $609 + $608 | 0;
       $611 = 0 - $608 | 0;
       $612 = $610 & $611;
       $613 = $612 >>> 0 < 2147483647;
       if ($613) {
        $614 = _sbrk($612 | 0) | 0;
        $615 = ($614 | 0) == (-1 | 0);
        if ($615) {
         _sbrk($604 | 0) | 0;
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = $612 + $ssize$1$ph$i | 0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while (0);
     $617 = ($br$0$ph$i | 0) == (-1 | 0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;
      $tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while (0);
   $618 = SAFE_HEAP_LOAD(2520 | 0, 4, 0) | 0 | 0;
   $619 = $618 | 4;
   SAFE_HEAP_STORE(2520 | 0, $619 | 0, 4);
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while (0);
 if ((label | 0) == 191) {
  $620 = $550 >>> 0 < 2147483647;
  if ($620) {
   $621 = _sbrk($550 | 0) | 0;
   $622 = _sbrk(0) | 0;
   $623 = ($621 | 0) != (-1 | 0);
   $624 = ($622 | 0) != (-1 | 0);
   $or$cond3$i = $623 & $624;
   $625 = $621 >>> 0 < $622 >>> 0;
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = $626 - $627 | 0;
    $629 = $nb$0 + 40 | 0;
    $630 = $628 >>> 0 > $629 >>> 0;
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;
     $tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $631 = SAFE_HEAP_LOAD(2508 | 0, 4, 0) | 0 | 0;
  $632 = $631 + $tsize$254$i | 0;
  SAFE_HEAP_STORE(2508 | 0, $632 | 0, 4);
  $633 = SAFE_HEAP_LOAD(2512 | 0, 4, 0) | 0 | 0;
  $634 = $632 >>> 0 > $633 >>> 0;
  if ($634) {
   SAFE_HEAP_STORE(2512 | 0, $632 | 0, 4);
  }
  $635 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
  $636 = ($635 | 0) == (0 | 0);
  L299 : do {
   if ($636) {
    $637 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
    $638 = ($637 | 0) == (0 | 0);
    $639 = $tbase$255$i >>> 0 < $637 >>> 0;
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     SAFE_HEAP_STORE(2092 | 0, $tbase$255$i | 0, 4);
    }
    SAFE_HEAP_STORE(2524 | 0, $tbase$255$i | 0, 4);
    SAFE_HEAP_STORE(2528 | 0, $tsize$254$i | 0, 4);
    SAFE_HEAP_STORE(2536 | 0, 0 | 0, 4);
    $640 = SAFE_HEAP_LOAD(2548 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(2112 | 0, $640 | 0, 4);
    SAFE_HEAP_STORE(2108 | 0, -1 | 0, 4);
    $i$02$i$i = 0;
    while (1) {
     $641 = $i$02$i$i << 1;
     $642 = 2116 + ($641 << 2) | 0;
     $$sum$i$i = $641 + 3 | 0;
     $643 = 2116 + ($$sum$i$i << 2) | 0;
     SAFE_HEAP_STORE($643 | 0, $642 | 0, 4);
     $$sum1$i$i = $641 + 2 | 0;
     $644 = 2116 + ($$sum1$i$i << 2) | 0;
     SAFE_HEAP_STORE($644 | 0, $642 | 0, 4);
     $645 = $i$02$i$i + 1 | 0;
     $exitcond$i$i = ($645 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = $tsize$254$i + -40 | 0;
    $647 = $tbase$255$i + 8 | 0;
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649 | 0) == 0;
    $651 = 0 - $648 | 0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = $tbase$255$i + $653 | 0;
    $655 = $646 - $653 | 0;
    SAFE_HEAP_STORE(2100 | 0, $654 | 0, 4);
    SAFE_HEAP_STORE(2088 | 0, $655 | 0, 4);
    $656 = $655 | 1;
    $$sum$i13$i = $653 + 4 | 0;
    $657 = $tbase$255$i + $$sum$i13$i | 0;
    SAFE_HEAP_STORE($657 | 0, $656 | 0, 4);
    $$sum2$i$i = $tsize$254$i + -36 | 0;
    $658 = $tbase$255$i + $$sum2$i$i | 0;
    SAFE_HEAP_STORE($658 | 0, 40 | 0, 4);
    $659 = SAFE_HEAP_LOAD(2564 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(2104 | 0, $659 | 0, 4);
   } else {
    $sp$084$i = 2524;
    while (1) {
     $660 = SAFE_HEAP_LOAD($sp$084$i | 0, 4, 0) | 0 | 0;
     $661 = $sp$084$i + 4 | 0;
     $662 = SAFE_HEAP_LOAD($661 | 0, 4, 0) | 0 | 0;
     $663 = $660 + $662 | 0;
     $664 = ($tbase$255$i | 0) == ($663 | 0);
     if ($664) {
      $$lcssa222 = $660;
      $$lcssa224 = $661;
      $$lcssa226 = $662;
      $sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = $sp$084$i + 8 | 0;
     $666 = SAFE_HEAP_LOAD($665 | 0, 4, 0) | 0 | 0;
     $667 = ($666 | 0) == (0 | 0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label | 0) == 204) {
     $668 = $sp$084$i$lcssa + 12 | 0;
     $669 = SAFE_HEAP_LOAD($668 | 0, 4, 0) | 0 | 0;
     $670 = $669 & 8;
     $671 = ($670 | 0) == 0;
     if ($671) {
      $672 = $635 >>> 0 >= $$lcssa222 >>> 0;
      $673 = $635 >>> 0 < $tbase$255$i >>> 0;
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = $$lcssa226 + $tsize$254$i | 0;
       SAFE_HEAP_STORE($$lcssa224 | 0, $674 | 0, 4);
       $675 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
       $676 = $675 + $tsize$254$i | 0;
       $677 = $635 + 8 | 0;
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679 | 0) == 0;
       $681 = 0 - $678 | 0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = $635 + $683 | 0;
       $685 = $676 - $683 | 0;
       SAFE_HEAP_STORE(2100 | 0, $684 | 0, 4);
       SAFE_HEAP_STORE(2088 | 0, $685 | 0, 4);
       $686 = $685 | 1;
       $$sum$i17$i = $683 + 4 | 0;
       $687 = $635 + $$sum$i17$i | 0;
       SAFE_HEAP_STORE($687 | 0, $686 | 0, 4);
       $$sum2$i18$i = $676 + 4 | 0;
       $688 = $635 + $$sum2$i18$i | 0;
       SAFE_HEAP_STORE($688 | 0, 40 | 0, 4);
       $689 = SAFE_HEAP_LOAD(2564 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE(2104 | 0, $689 | 0, 4);
       break;
      }
     }
    }
    $690 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
    $691 = $tbase$255$i >>> 0 < $690 >>> 0;
    if ($691) {
     SAFE_HEAP_STORE(2092 | 0, $tbase$255$i | 0, 4);
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = $tbase$255$i + $tsize$254$i | 0;
    $sp$183$i = 2524;
    while (1) {
     $693 = SAFE_HEAP_LOAD($sp$183$i | 0, 4, 0) | 0 | 0;
     $694 = ($693 | 0) == ($692 | 0);
     if ($694) {
      $$lcssa219 = $sp$183$i;
      $sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = $sp$183$i + 8 | 0;
     $696 = SAFE_HEAP_LOAD($695 | 0, 4, 0) | 0 | 0;
     $697 = ($696 | 0) == (0 | 0);
     if ($697) {
      $sp$0$i$i$i = 2524;
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label | 0) == 212) {
     $698 = $sp$183$i$lcssa + 12 | 0;
     $699 = SAFE_HEAP_LOAD($698 | 0, 4, 0) | 0 | 0;
     $700 = $699 & 8;
     $701 = ($700 | 0) == 0;
     if ($701) {
      SAFE_HEAP_STORE($$lcssa219 | 0, $tbase$255$i | 0, 4);
      $702 = $sp$183$i$lcssa + 4 | 0;
      $703 = SAFE_HEAP_LOAD($702 | 0, 4, 0) | 0 | 0;
      $704 = $703 + $tsize$254$i | 0;
      SAFE_HEAP_STORE($702 | 0, $704 | 0, 4);
      $705 = $tbase$255$i + 8 | 0;
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707 | 0) == 0;
      $709 = 0 - $706 | 0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = $tbase$255$i + $711 | 0;
      $$sum112$i = $tsize$254$i + 8 | 0;
      $713 = $tbase$255$i + $$sum112$i | 0;
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715 | 0) == 0;
      $717 = 0 - $714 | 0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = $719 + $tsize$254$i | 0;
      $720 = $tbase$255$i + $$sum113$i | 0;
      $721 = $720;
      $722 = $712;
      $723 = $721 - $722 | 0;
      $$sum$i19$i = $711 + $nb$0 | 0;
      $724 = $tbase$255$i + $$sum$i19$i | 0;
      $725 = $723 - $nb$0 | 0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = $711 + 4 | 0;
      $727 = $tbase$255$i + $$sum1$i20$i | 0;
      SAFE_HEAP_STORE($727 | 0, $726 | 0, 4);
      $728 = ($720 | 0) == ($635 | 0);
      L324 : do {
       if ($728) {
        $729 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
        $730 = $729 + $725 | 0;
        SAFE_HEAP_STORE(2088 | 0, $730 | 0, 4);
        SAFE_HEAP_STORE(2100 | 0, $724 | 0, 4);
        $731 = $730 | 1;
        $$sum42$i$i = $$sum$i19$i + 4 | 0;
        $732 = $tbase$255$i + $$sum42$i$i | 0;
        SAFE_HEAP_STORE($732 | 0, $731 | 0, 4);
       } else {
        $733 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
        $734 = ($720 | 0) == ($733 | 0);
        if ($734) {
         $735 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
         $736 = $735 + $725 | 0;
         SAFE_HEAP_STORE(2084 | 0, $736 | 0, 4);
         SAFE_HEAP_STORE(2096 | 0, $724 | 0, 4);
         $737 = $736 | 1;
         $$sum40$i$i = $$sum$i19$i + 4 | 0;
         $738 = $tbase$255$i + $$sum40$i$i | 0;
         SAFE_HEAP_STORE($738 | 0, $737 | 0, 4);
         $$sum41$i$i = $736 + $$sum$i19$i | 0;
         $739 = $tbase$255$i + $$sum41$i$i | 0;
         SAFE_HEAP_STORE($739 | 0, $736 | 0, 4);
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0;
        $$sum114$i = $$sum2$i21$i + $719 | 0;
        $740 = $tbase$255$i + $$sum114$i | 0;
        $741 = SAFE_HEAP_LOAD($740 | 0, 4, 0) | 0 | 0;
        $742 = $741 & 3;
        $743 = ($742 | 0) == 1;
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = $741 >>> 0 < 256;
         L332 : do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = $$sum3738$i$i + $tsize$254$i | 0;
           $747 = $tbase$255$i + $$sum124$i | 0;
           $748 = SAFE_HEAP_LOAD($747 | 0, 4, 0) | 0 | 0;
           $$sum39$i$i = $tsize$254$i + 12 | 0;
           $$sum125$i = $$sum39$i$i + $719 | 0;
           $749 = $tbase$255$i + $$sum125$i | 0;
           $750 = SAFE_HEAP_LOAD($749 | 0, 4, 0) | 0 | 0;
           $751 = $745 << 1;
           $752 = 2116 + ($751 << 2) | 0;
           $753 = ($748 | 0) == ($752 | 0);
           do {
            if (!$753) {
             $754 = $748 >>> 0 < $755 >>> 0;
             if ($754) {
              _abort();
             }
             $756 = $748 + 12 | 0;
             $757 = SAFE_HEAP_LOAD($756 | 0, 4, 0) | 0 | 0;
             $758 = ($757 | 0) == ($720 | 0);
             if ($758) {
              break;
             }
             _abort();
            }
           } while (0);
           $759 = ($750 | 0) == ($748 | 0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
            $763 = $762 & $761;
            SAFE_HEAP_STORE(2076 | 0, $763 | 0, 4);
            break;
           }
           $764 = ($750 | 0) == ($752 | 0);
           do {
            if ($764) {
             $$pre57$i$i = $750 + 8 | 0;
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = $750 >>> 0 < $755 >>> 0;
             if ($765) {
              _abort();
             }
             $766 = $750 + 8 | 0;
             $767 = SAFE_HEAP_LOAD($766 | 0, 4, 0) | 0 | 0;
             $768 = ($767 | 0) == ($720 | 0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
            }
           } while (0);
           $769 = $748 + 12 | 0;
           SAFE_HEAP_STORE($769 | 0, $750 | 0, 4);
           SAFE_HEAP_STORE($$pre$phi58$i$iZ2D | 0, $748 | 0, 4);
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = $$sum34$i$i + $tsize$254$i | 0;
           $770 = $tbase$255$i + $$sum115$i | 0;
           $771 = SAFE_HEAP_LOAD($770 | 0, 4, 0) | 0 | 0;
           $$sum5$i$i = $tsize$254$i + 12 | 0;
           $$sum116$i = $$sum5$i$i + $719 | 0;
           $772 = $tbase$255$i + $$sum116$i | 0;
           $773 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
           $774 = ($773 | 0) == ($720 | 0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = $$sum2$i21$i + $$sum67$i$i | 0;
             $784 = $tbase$255$i + $$sum122$i | 0;
             $785 = SAFE_HEAP_LOAD($784 | 0, 4, 0) | 0 | 0;
             $786 = ($785 | 0) == (0 | 0);
             if ($786) {
              $$sum123$i = $$sum67$i$i + $tsize$254$i | 0;
              $787 = $tbase$255$i + $$sum123$i | 0;
              $788 = SAFE_HEAP_LOAD($787 | 0, 4, 0) | 0 | 0;
              $789 = ($788 | 0) == (0 | 0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;
               $RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;
              $RP$0$i$i = $784;
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0;
              $791 = SAFE_HEAP_LOAD($790 | 0, 4, 0) | 0 | 0;
              $792 = ($791 | 0) == (0 | 0);
              if (!$792) {
               $R$0$i$i = $791;
               $RP$0$i$i = $790;
               continue;
              }
              $793 = $R$0$i$i + 16 | 0;
              $794 = SAFE_HEAP_LOAD($793 | 0, 4, 0) | 0 | 0;
              $795 = ($794 | 0) == (0 | 0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;
               $RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;
               $RP$0$i$i = $793;
              }
             }
             $796 = $RP$0$i$i$lcssa >>> 0 < $755 >>> 0;
             if ($796) {
              _abort();
             } else {
              SAFE_HEAP_STORE($RP$0$i$i$lcssa | 0, 0 | 0, 4);
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = $$sum3536$i$i + $tsize$254$i | 0;
             $775 = $tbase$255$i + $$sum117$i | 0;
             $776 = SAFE_HEAP_LOAD($775 | 0, 4, 0) | 0 | 0;
             $777 = $776 >>> 0 < $755 >>> 0;
             if ($777) {
              _abort();
             }
             $778 = $776 + 12 | 0;
             $779 = SAFE_HEAP_LOAD($778 | 0, 4, 0) | 0 | 0;
             $780 = ($779 | 0) == ($720 | 0);
             if (!$780) {
              _abort();
             }
             $781 = $773 + 8 | 0;
             $782 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0;
             $783 = ($782 | 0) == ($720 | 0);
             if ($783) {
              SAFE_HEAP_STORE($778 | 0, $773 | 0, 4);
              SAFE_HEAP_STORE($781 | 0, $776 | 0, 4);
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $797 = ($771 | 0) == (0 | 0);
           if ($797) {
            break;
           }
           $$sum30$i$i = $tsize$254$i + 28 | 0;
           $$sum118$i = $$sum30$i$i + $719 | 0;
           $798 = $tbase$255$i + $$sum118$i | 0;
           $799 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
           $800 = 2380 + ($799 << 2) | 0;
           $801 = SAFE_HEAP_LOAD($800 | 0, 4, 0) | 0 | 0;
           $802 = ($720 | 0) == ($801 | 0);
           do {
            if ($802) {
             SAFE_HEAP_STORE($800 | 0, $R$1$i$i | 0, 4);
             $cond$i$i = ($R$1$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
             $806 = $805 & $804;
             SAFE_HEAP_STORE(2080 | 0, $806 | 0, 4);
             break L332;
            } else {
             $807 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
             $808 = $771 >>> 0 < $807 >>> 0;
             if ($808) {
              _abort();
             }
             $809 = $771 + 16 | 0;
             $810 = SAFE_HEAP_LOAD($809 | 0, 4, 0) | 0 | 0;
             $811 = ($810 | 0) == ($720 | 0);
             if ($811) {
              SAFE_HEAP_STORE($809 | 0, $R$1$i$i | 0, 4);
             } else {
              $812 = $771 + 20 | 0;
              SAFE_HEAP_STORE($812 | 0, $R$1$i$i | 0, 4);
             }
             $813 = ($R$1$i$i | 0) == (0 | 0);
             if ($813) {
              break L332;
             }
            }
           } while (0);
           $814 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
           $815 = $R$1$i$i >>> 0 < $814 >>> 0;
           if ($815) {
            _abort();
           }
           $816 = $R$1$i$i + 24 | 0;
           SAFE_HEAP_STORE($816 | 0, $771 | 0, 4);
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = $$sum3132$i$i + $tsize$254$i | 0;
           $817 = $tbase$255$i + $$sum119$i | 0;
           $818 = SAFE_HEAP_LOAD($817 | 0, 4, 0) | 0 | 0;
           $819 = ($818 | 0) == (0 | 0);
           do {
            if (!$819) {
             $820 = $818 >>> 0 < $814 >>> 0;
             if ($820) {
              _abort();
             } else {
              $821 = $R$1$i$i + 16 | 0;
              SAFE_HEAP_STORE($821 | 0, $818 | 0, 4);
              $822 = $818 + 24 | 0;
              SAFE_HEAP_STORE($822 | 0, $R$1$i$i | 0, 4);
              break;
             }
            }
           } while (0);
           $$sum120$i = $$sum2$i21$i + $$sum3132$i$i | 0;
           $823 = $tbase$255$i + $$sum120$i | 0;
           $824 = SAFE_HEAP_LOAD($823 | 0, 4, 0) | 0 | 0;
           $825 = ($824 | 0) == (0 | 0);
           if ($825) {
            break;
           }
           $826 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
           $827 = $824 >>> 0 < $826 >>> 0;
           if ($827) {
            _abort();
           } else {
            $828 = $R$1$i$i + 20 | 0;
            SAFE_HEAP_STORE($828 | 0, $824 | 0, 4);
            $829 = $824 + 24 | 0;
            SAFE_HEAP_STORE($829 | 0, $R$1$i$i | 0, 4);
            break;
           }
          }
         } while (0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = $$sum9$i$i + $tsize$254$i | 0;
         $830 = $tbase$255$i + $$sum121$i | 0;
         $831 = $744 + $725 | 0;
         $oldfirst$0$i$i = $830;
         $qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;
         $qsize$0$i$i = $725;
        }
        $832 = $oldfirst$0$i$i + 4 | 0;
        $833 = SAFE_HEAP_LOAD($832 | 0, 4, 0) | 0 | 0;
        $834 = $833 & -2;
        SAFE_HEAP_STORE($832 | 0, $834 | 0, 4);
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = $$sum$i19$i + 4 | 0;
        $836 = $tbase$255$i + $$sum10$i$i | 0;
        SAFE_HEAP_STORE($836 | 0, $835 | 0, 4);
        $$sum11$i$i = $qsize$0$i$i + $$sum$i19$i | 0;
        $837 = $tbase$255$i + $$sum11$i$i | 0;
        SAFE_HEAP_STORE($837 | 0, $qsize$0$i$i | 0, 4);
        $838 = $qsize$0$i$i >>> 3;
        $839 = $qsize$0$i$i >>> 0 < 256;
        if ($839) {
         $840 = $838 << 1;
         $841 = 2116 + ($840 << 2) | 0;
         $842 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844 | 0) == 0;
         do {
          if ($845) {
           $846 = $842 | $843;
           SAFE_HEAP_STORE(2076 | 0, $846 | 0, 4);
           $$pre$i22$i = $840 + 2 | 0;
           $$pre56$i$i = 2116 + ($$pre$i22$i << 2) | 0;
           $$pre$phi$i23$iZ2D = $$pre56$i$i;
           $F4$0$i$i = $841;
          } else {
           $$sum29$i$i = $840 + 2 | 0;
           $847 = 2116 + ($$sum29$i$i << 2) | 0;
           $848 = SAFE_HEAP_LOAD($847 | 0, 4, 0) | 0 | 0;
           $849 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
           $850 = $848 >>> 0 < $849 >>> 0;
           if (!$850) {
            $$pre$phi$i23$iZ2D = $847;
            $F4$0$i$i = $848;
            break;
           }
           _abort();
          }
         } while (0);
         SAFE_HEAP_STORE($$pre$phi$i23$iZ2D | 0, $724 | 0, 4);
         $851 = $F4$0$i$i + 12 | 0;
         SAFE_HEAP_STORE($851 | 0, $724 | 0, 4);
         $$sum27$i$i = $$sum$i19$i + 8 | 0;
         $852 = $tbase$255$i + $$sum27$i$i | 0;
         SAFE_HEAP_STORE($852 | 0, $F4$0$i$i | 0, 4);
         $$sum28$i$i = $$sum$i19$i + 12 | 0;
         $853 = $tbase$255$i + $$sum28$i$i | 0;
         SAFE_HEAP_STORE($853 | 0, $841 | 0, 4);
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854 | 0) == 0;
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = $qsize$0$i$i >>> 0 > 16777215;
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = $854 + 1048320 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = $860 + 520192 | 0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = $865 + 245760 | 0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = 14 - $869 | 0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = $870 + $872 | 0;
          $874 = $873 << 1;
          $875 = $873 + 7 | 0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while (0);
        $879 = 2380 + ($I7$0$i$i << 2) | 0;
        $$sum12$i$i = $$sum$i19$i + 28 | 0;
        $880 = $tbase$255$i + $$sum12$i$i | 0;
        SAFE_HEAP_STORE($880 | 0, $I7$0$i$i | 0, 4);
        $$sum13$i$i = $$sum$i19$i + 16 | 0;
        $881 = $tbase$255$i + $$sum13$i$i | 0;
        $$sum14$i$i = $$sum$i19$i + 20 | 0;
        $882 = $tbase$255$i + $$sum14$i$i | 0;
        SAFE_HEAP_STORE($882 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($881 | 0, 0 | 0, 4);
        $883 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885 | 0) == 0;
        if ($886) {
         $887 = $883 | $884;
         SAFE_HEAP_STORE(2080 | 0, $887 | 0, 4);
         SAFE_HEAP_STORE($879 | 0, $724 | 0, 4);
         $$sum15$i$i = $$sum$i19$i + 24 | 0;
         $888 = $tbase$255$i + $$sum15$i$i | 0;
         SAFE_HEAP_STORE($888 | 0, $879 | 0, 4);
         $$sum16$i$i = $$sum$i19$i + 12 | 0;
         $889 = $tbase$255$i + $$sum16$i$i | 0;
         SAFE_HEAP_STORE($889 | 0, $724 | 0, 4);
         $$sum17$i$i = $$sum$i19$i + 8 | 0;
         $890 = $tbase$255$i + $$sum17$i$i | 0;
         SAFE_HEAP_STORE($890 | 0, $724 | 0, 4);
         break;
        }
        $891 = SAFE_HEAP_LOAD($879 | 0, 4, 0) | 0 | 0;
        $892 = $891 + 4 | 0;
        $893 = SAFE_HEAP_LOAD($892 | 0, 4, 0) | 0 | 0;
        $894 = $893 & -8;
        $895 = ($894 | 0) == ($qsize$0$i$i | 0);
        L418 : do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i | 0) == 31;
          $897 = $I7$0$i$i >>> 1;
          $898 = 25 - $897 | 0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;
          $T$050$i$i = $891;
          while (1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = ($T$050$i$i + 16 | 0) + ($907 << 2) | 0;
           $903 = SAFE_HEAP_LOAD($908 | 0, 4, 0) | 0 | 0;
           $909 = ($903 | 0) == (0 | 0);
           if ($909) {
            $$lcssa = $908;
            $T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = $903 + 4 | 0;
           $904 = SAFE_HEAP_LOAD($902 | 0, 4, 0) | 0 | 0;
           $905 = $904 & -8;
           $906 = ($905 | 0) == ($qsize$0$i$i | 0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;
            $T$050$i$i = $903;
           }
          }
          $910 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
          $911 = $$lcssa >>> 0 < $910 >>> 0;
          if ($911) {
           _abort();
          } else {
           SAFE_HEAP_STORE($$lcssa | 0, $724 | 0, 4);
           $$sum23$i$i = $$sum$i19$i + 24 | 0;
           $912 = $tbase$255$i + $$sum23$i$i | 0;
           SAFE_HEAP_STORE($912 | 0, $T$050$i$i$lcssa | 0, 4);
           $$sum24$i$i = $$sum$i19$i + 12 | 0;
           $913 = $tbase$255$i + $$sum24$i$i | 0;
           SAFE_HEAP_STORE($913 | 0, $724 | 0, 4);
           $$sum25$i$i = $$sum$i19$i + 8 | 0;
           $914 = $tbase$255$i + $$sum25$i$i | 0;
           SAFE_HEAP_STORE($914 | 0, $724 | 0, 4);
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0;
        $916 = SAFE_HEAP_LOAD($915 | 0, 4, 0) | 0 | 0;
        $917 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
        $918 = $916 >>> 0 >= $917 >>> 0;
        $not$$i26$i = $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0;
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = $916 + 12 | 0;
         SAFE_HEAP_STORE($920 | 0, $724 | 0, 4);
         SAFE_HEAP_STORE($915 | 0, $724 | 0, 4);
         $$sum20$i$i = $$sum$i19$i + 8 | 0;
         $921 = $tbase$255$i + $$sum20$i$i | 0;
         SAFE_HEAP_STORE($921 | 0, $916 | 0, 4);
         $$sum21$i$i = $$sum$i19$i + 12 | 0;
         $922 = $tbase$255$i + $$sum21$i$i | 0;
         SAFE_HEAP_STORE($922 | 0, $T$0$lcssa$i25$i | 0, 4);
         $$sum22$i$i = $$sum$i19$i + 24 | 0;
         $923 = $tbase$255$i + $$sum22$i$i | 0;
         SAFE_HEAP_STORE($923 | 0, 0 | 0, 4);
         break;
        } else {
         _abort();
        }
       }
      } while (0);
      $$sum1819$i$i = $711 | 8;
      $924 = $tbase$255$i + $$sum1819$i$i | 0;
      $mem$0 = $924;
      return $mem$0 | 0;
     } else {
      $sp$0$i$i$i = 2524;
     }
    }
    while (1) {
     $925 = SAFE_HEAP_LOAD($sp$0$i$i$i | 0, 4, 0) | 0 | 0;
     $926 = $925 >>> 0 > $635 >>> 0;
     if (!$926) {
      $927 = $sp$0$i$i$i + 4 | 0;
      $928 = SAFE_HEAP_LOAD($927 | 0, 4, 0) | 0 | 0;
      $929 = $925 + $928 | 0;
      $930 = $929 >>> 0 > $635 >>> 0;
      if ($930) {
       $$lcssa215 = $925;
       $$lcssa216 = $928;
       $$lcssa217 = $929;
       break;
      }
     }
     $931 = $sp$0$i$i$i + 8 | 0;
     $932 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = $$lcssa216 + -47 | 0;
    $$sum1$i15$i = $$lcssa216 + -39 | 0;
    $933 = $$lcssa215 + $$sum1$i15$i | 0;
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935 | 0) == 0;
    $937 = 0 - $934 | 0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = $$sum$i14$i + $939 | 0;
    $940 = $$lcssa215 + $$sum2$i16$i | 0;
    $941 = $635 + 16 | 0;
    $942 = $940 >>> 0 < $941 >>> 0;
    $943 = $942 ? $635 : $940;
    $944 = $943 + 8 | 0;
    $945 = $tsize$254$i + -40 | 0;
    $946 = $tbase$255$i + 8 | 0;
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948 | 0) == 0;
    $950 = 0 - $947 | 0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = $tbase$255$i + $952 | 0;
    $954 = $945 - $952 | 0;
    SAFE_HEAP_STORE(2100 | 0, $953 | 0, 4);
    SAFE_HEAP_STORE(2088 | 0, $954 | 0, 4);
    $955 = $954 | 1;
    $$sum$i$i$i = $952 + 4 | 0;
    $956 = $tbase$255$i + $$sum$i$i$i | 0;
    SAFE_HEAP_STORE($956 | 0, $955 | 0, 4);
    $$sum2$i$i$i = $tsize$254$i + -36 | 0;
    $957 = $tbase$255$i + $$sum2$i$i$i | 0;
    SAFE_HEAP_STORE($957 | 0, 40 | 0, 4);
    $958 = SAFE_HEAP_LOAD(2564 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(2104 | 0, $958 | 0, 4);
    $959 = $943 + 4 | 0;
    SAFE_HEAP_STORE($959 | 0, 27 | 0, 4);
    {}
    SAFE_HEAP_STORE($944 | 0, SAFE_HEAP_LOAD(2524 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 4 | 0, SAFE_HEAP_LOAD(2524 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 8 | 0, SAFE_HEAP_LOAD(2524 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 12 | 0, SAFE_HEAP_LOAD(2524 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE(2524 | 0, $tbase$255$i | 0, 4);
    SAFE_HEAP_STORE(2528 | 0, $tsize$254$i | 0, 4);
    SAFE_HEAP_STORE(2536 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(2532 | 0, $944 | 0, 4);
    $960 = $943 + 28 | 0;
    SAFE_HEAP_STORE($960 | 0, 7 | 0, 4);
    $961 = $943 + 32 | 0;
    $962 = $961 >>> 0 < $$lcssa217 >>> 0;
    if ($962) {
     $964 = $960;
     while (1) {
      $963 = $964 + 4 | 0;
      SAFE_HEAP_STORE($963 | 0, 7 | 0, 4);
      $965 = $964 + 8 | 0;
      $966 = $965 >>> 0 < $$lcssa217 >>> 0;
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943 | 0) == ($635 | 0);
    if (!$967) {
     $968 = $943;
     $969 = $635;
     $970 = $968 - $969 | 0;
     $971 = SAFE_HEAP_LOAD($959 | 0, 4, 0) | 0 | 0;
     $972 = $971 & -2;
     SAFE_HEAP_STORE($959 | 0, $972 | 0, 4);
     $973 = $970 | 1;
     $974 = $635 + 4 | 0;
     SAFE_HEAP_STORE($974 | 0, $973 | 0, 4);
     SAFE_HEAP_STORE($943 | 0, $970 | 0, 4);
     $975 = $970 >>> 3;
     $976 = $970 >>> 0 < 256;
     if ($976) {
      $977 = $975 << 1;
      $978 = 2116 + ($977 << 2) | 0;
      $979 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981 | 0) == 0;
      if ($982) {
       $983 = $979 | $980;
       SAFE_HEAP_STORE(2076 | 0, $983 | 0, 4);
       $$pre$i$i = $977 + 2 | 0;
       $$pre14$i$i = 2116 + ($$pre$i$i << 2) | 0;
       $$pre$phi$i$iZ2D = $$pre14$i$i;
       $F$0$i$i = $978;
      } else {
       $$sum4$i$i = $977 + 2 | 0;
       $984 = 2116 + ($$sum4$i$i << 2) | 0;
       $985 = SAFE_HEAP_LOAD($984 | 0, 4, 0) | 0 | 0;
       $986 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $987 = $985 >>> 0 < $986 >>> 0;
       if ($987) {
        _abort();
       } else {
        $$pre$phi$i$iZ2D = $984;
        $F$0$i$i = $985;
       }
      }
      SAFE_HEAP_STORE($$pre$phi$i$iZ2D | 0, $635 | 0, 4);
      $988 = $F$0$i$i + 12 | 0;
      SAFE_HEAP_STORE($988 | 0, $635 | 0, 4);
      $989 = $635 + 8 | 0;
      SAFE_HEAP_STORE($989 | 0, $F$0$i$i | 0, 4);
      $990 = $635 + 12 | 0;
      SAFE_HEAP_STORE($990 | 0, $978 | 0, 4);
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991 | 0) == 0;
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = $970 >>> 0 > 16777215;
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = $991 + 1048320 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = $997 + 520192 | 0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = $1002 + 245760 | 0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = 14 - $1006 | 0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = $1007 + $1009 | 0;
       $1011 = $1010 << 1;
       $1012 = $1010 + 7 | 0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = 2380 + ($I1$0$i$i << 2) | 0;
     $1017 = $635 + 28 | 0;
     SAFE_HEAP_STORE($1017 | 0, $I1$0$i$i | 0, 4);
     $1018 = $635 + 20 | 0;
     SAFE_HEAP_STORE($1018 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($941 | 0, 0 | 0, 4);
     $1019 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021 | 0) == 0;
     if ($1022) {
      $1023 = $1019 | $1020;
      SAFE_HEAP_STORE(2080 | 0, $1023 | 0, 4);
      SAFE_HEAP_STORE($1016 | 0, $635 | 0, 4);
      $1024 = $635 + 24 | 0;
      SAFE_HEAP_STORE($1024 | 0, $1016 | 0, 4);
      $1025 = $635 + 12 | 0;
      SAFE_HEAP_STORE($1025 | 0, $635 | 0, 4);
      $1026 = $635 + 8 | 0;
      SAFE_HEAP_STORE($1026 | 0, $635 | 0, 4);
      break;
     }
     $1027 = SAFE_HEAP_LOAD($1016 | 0, 4, 0) | 0 | 0;
     $1028 = $1027 + 4 | 0;
     $1029 = SAFE_HEAP_LOAD($1028 | 0, 4, 0) | 0 | 0;
     $1030 = $1029 & -8;
     $1031 = ($1030 | 0) == ($970 | 0);
     L459 : do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i | 0) == 31;
       $1033 = $I1$0$i$i >>> 1;
       $1034 = 25 - $1033 | 0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;
       $T$06$i$i = $1027;
       while (1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = ($T$06$i$i + 16 | 0) + ($1043 << 2) | 0;
        $1039 = SAFE_HEAP_LOAD($1044 | 0, 4, 0) | 0 | 0;
        $1045 = ($1039 | 0) == (0 | 0);
        if ($1045) {
         $$lcssa211 = $1044;
         $T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = $1039 + 4 | 0;
        $1040 = SAFE_HEAP_LOAD($1038 | 0, 4, 0) | 0 | 0;
        $1041 = $1040 & -8;
        $1042 = ($1041 | 0) == ($970 | 0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;
         $T$06$i$i = $1039;
        }
       }
       $1046 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
       $1047 = $$lcssa211 >>> 0 < $1046 >>> 0;
       if ($1047) {
        _abort();
       } else {
        SAFE_HEAP_STORE($$lcssa211 | 0, $635 | 0, 4);
        $1048 = $635 + 24 | 0;
        SAFE_HEAP_STORE($1048 | 0, $T$06$i$i$lcssa | 0, 4);
        $1049 = $635 + 12 | 0;
        SAFE_HEAP_STORE($1049 | 0, $635 | 0, 4);
        $1050 = $635 + 8 | 0;
        SAFE_HEAP_STORE($1050 | 0, $635 | 0, 4);
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0;
     $1052 = SAFE_HEAP_LOAD($1051 | 0, 4, 0) | 0 | 0;
     $1053 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $1054 = $1052 >>> 0 >= $1053 >>> 0;
     $not$$i$i = $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0;
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = $1052 + 12 | 0;
      SAFE_HEAP_STORE($1056 | 0, $635 | 0, 4);
      SAFE_HEAP_STORE($1051 | 0, $635 | 0, 4);
      $1057 = $635 + 8 | 0;
      SAFE_HEAP_STORE($1057 | 0, $1052 | 0, 4);
      $1058 = $635 + 12 | 0;
      SAFE_HEAP_STORE($1058 | 0, $T$0$lcssa$i$i | 0, 4);
      $1059 = $635 + 24 | 0;
      SAFE_HEAP_STORE($1059 | 0, 0 | 0, 4);
      break;
     } else {
      _abort();
     }
    }
   }
  } while (0);
  $1060 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
  $1061 = $1060 >>> 0 > $nb$0 >>> 0;
  if ($1061) {
   $1062 = $1060 - $nb$0 | 0;
   SAFE_HEAP_STORE(2088 | 0, $1062 | 0, 4);
   $1063 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
   $1064 = $1063 + $nb$0 | 0;
   SAFE_HEAP_STORE(2100 | 0, $1064 | 0, 4);
   $1065 = $1062 | 1;
   $$sum$i32 = $nb$0 + 4 | 0;
   $1066 = $1063 + $$sum$i32 | 0;
   SAFE_HEAP_STORE($1066 | 0, $1065 | 0, 4);
   $1067 = $nb$0 | 3;
   $1068 = $1063 + 4 | 0;
   SAFE_HEAP_STORE($1068 | 0, $1067 | 0, 4);
   $1069 = $1063 + 8 | 0;
   $mem$0 = $1069;
   return $mem$0 | 0;
  }
 }
 $1070 = ___errno_location() | 0;
 SAFE_HEAP_STORE($1070 | 0, 12 | 0, 4);
 $mem$0 = 0;
 return $mem$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i16$i = 0, $$0$i$i$i23$i = 0, $$0$i$i$i33$i = 0, $$0$i$i$i42$i = 0, $$0$i$i$i52$i = 0, $$0$i10 = 0, $$0$i18 = 0, $$01 = 0, $$01$i = 0, $$01$i17 = 0, $$02 = 0, $$02$i = 0, $$07$i = 0, $$1$i = 0, $$12$i = 0;
 var $$2$i = 0, $$23$i = 0, $$3$i = 0, $$34$i = 0, $$4$i = 0, $$45$i = 0, $$5$i = 0, $$56$i = 0, $$first = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i14 = 0, $$pre$i13$i = 0, $$pre$i17$i = 0, $$pre$i27$i = 0, $$pre$i37$i = 0, $$pre$i4$i = 0, $$pre$i46$i = 0, $$pre$i56$i = 0, $$pre$i6 = 0;
 var $$pre$i6$i = 0, $$pre$i9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i15$i = 0, $__v$i$i22$i = 0, $__v$i$i32$i = 0;
 var $__v$i$i41$i = 0, $__v$i$i51$i = 0, $brmerge$i = 0, $cv$i = 0, $first$ = 0, $first$4 = 0, $first$mux$i = 0, $name$i = 0, $name$i11 = 0, $name1$i = 0, $name2$i = 0, $name2$i12 = 0, $name3$i = 0, $name4$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0;
 var $or$cond9$i = 0, $pop_subs$0$off0$i$ph$lcssa = 0, $pop_subs$0$off0$i$ph136 = 0, $t0$0$i = 0, $t0$0$i13 = 0, $t0$1$i = 0, $t0$2$i$be = 0, $t0$2$i$lcssa = 0, $t0$2$i$ph$be = 0, $t0$2$i$ph135 = 0, $t0$2$i131 = 0, $t0$2$i131$lcssa177 = 0, $t0$2$i131$lcssa178 = 0, $t0$2$i131$lcssa179 = 0, $t0$2$i131184 = 0, $tmp = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i51$i = sp + 416 | 0;
 $__v$i$i41$i = sp + 396 | 0;
 $__v$i$i32$i = sp + 376 | 0;
 $__v$i$i22$i = sp + 356 | 0;
 $__v$i$i15$i = sp + 336 | 0;
 $__v$i$i$i = sp + 316 | 0;
 $cv$i = sp + 312 | 0;
 $name$i11 = sp + 300 | 0;
 $0 = sp + 288 | 0;
 $1 = sp + 272 | 0;
 $2 = sp + 264 | 0;
 $name1$i = sp + 252 | 0;
 $3 = sp + 240 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 216 | 0;
 $name2$i12 = sp + 204 | 0;
 $6 = sp + 192 | 0;
 $7 = sp + 176 | 0;
 $8 = sp + 172 | 0;
 $name3$i = sp + 160 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 136 | 0;
 $name4$i = sp + 124 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 96 | 0;
 $13 = sp + 92 | 0;
 $name$i = sp + 80 | 0;
 $name2$i = sp + 68 | 0;
 $__v$i$i = sp + 48 | 0;
 $14 = sp + 32 | 0;
 $15 = sp + 24 | 0;
 $tmp = sp + 12 | 0;
 $tmp3 = sp;
 $16 = $last;
 $17 = $first;
 $18 = $16 - $17 | 0;
 $19 = ($18 | 0) > 1;
 L1 : do {
  if ($19) {
   $20 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $21 = $20 << 24 >> 24 == 76;
   $22 = $first + 1 | 0;
   $$first = $21 ? $22 : $first;
   $23 = SAFE_HEAP_LOAD($$first >> 0 | 0, 1, 0) | 0 | 0;
   $24 = $23 << 24 >> 24;
   switch ($24 | 0) {
   case 78:
    {
     $25 = ($$first | 0) == ($last | 0);
     L52 : do {
      if ($25) {
       $$07$i = $last;
      } else {
       $26 = $23 << 24 >> 24 == 78;
       if ($26) {
        $27 = $$first + 1 | 0;
        $28 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($27, $last, $cv$i) | 0;
        $29 = ($28 | 0) == ($last | 0);
        if ($29) {
         $$07$i = $$first;
        } else {
         $30 = $db + 52 | 0;
         SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
         $31 = SAFE_HEAP_LOAD($28 >> 0 | 0, 1, 0) | 0 | 0;
         switch ($31 << 24 >> 24) {
         case 82:
          {
           SAFE_HEAP_STORE($30 | 0, 1 | 0, 4);
           $32 = $28 + 1 | 0;
           $t0$0$i13 = $32;
           break;
          }
         case 79:
          {
           SAFE_HEAP_STORE($30 | 0, 2 | 0, 4);
           $33 = $28 + 1 | 0;
           $t0$0$i13 = $33;
           break;
          }
         default:
          {
           $t0$0$i13 = $28;
          }
         }
         $34 = $db + 4 | 0;
         $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
         $36 = $db + 8 | 0;
         $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
         $38 = $35 >>> 0 < $37 >>> 0;
         if ($38) {
          {}
          SAFE_HEAP_STORE($35 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 + 4 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 + 8 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 + 12 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 + 16 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 + 20 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($35 | 0, 0 | 0, 4);
          $39 = $35 + 4 | 0;
          SAFE_HEAP_STORE($39 | 0, 0 | 0, 4);
          $40 = $35 + 8 | 0;
          SAFE_HEAP_STORE($40 | 0, 0 | 0, 4);
          $41 = $35 + 12 | 0;
          SAFE_HEAP_STORE($41 | 0, 0 | 0, 4);
          $42 = $41 + 4 | 0;
          SAFE_HEAP_STORE($42 | 0, 0 | 0, 4);
          $43 = $41 + 8 | 0;
          SAFE_HEAP_STORE($43 | 0, 0 | 0, 4);
          $44 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
          $45 = $44 + 24 | 0;
          SAFE_HEAP_STORE($34 | 0, $45 | 0, 4);
         } else {
          $46 = $db + 12 | 0;
          $47 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $48 = $35;
          $49 = $47;
          $50 = $48 - $49 | 0;
          $51 = ($50 | 0) / 24 & -1;
          $52 = $51 + 1 | 0;
          $53 = ($50 | 0) < -24;
          if ($53) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
          }
          $54 = $37;
          $55 = $54 - $49 | 0;
          $56 = ($55 | 0) / 24 & -1;
          $57 = $56 >>> 0 < 1073741823;
          if ($57) {
           $58 = $56 << 1;
           $59 = $58 >>> 0 < $52 >>> 0;
           $60 = $59 ? $52 : $58;
           $$0$i$i$i$i = $60;
          } else {
           $$0$i$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $51, $46);
          $61 = $__v$i$i$i + 8 | 0;
          $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
          {}
          SAFE_HEAP_STORE($62 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 + 4 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 + 8 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 + 12 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 + 16 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 + 20 | 0, 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($62 | 0, 0 | 0, 4);
          $63 = $62 + 4 | 0;
          SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
          $64 = $62 + 8 | 0;
          SAFE_HEAP_STORE($64 | 0, 0 | 0, 4);
          $65 = $62 + 12 | 0;
          SAFE_HEAP_STORE($65 | 0, 0 | 0, 4);
          $66 = $65 + 4 | 0;
          SAFE_HEAP_STORE($66 | 0, 0 | 0, 4);
          $67 = $65 + 8 | 0;
          SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
          $68 = $62 + 24 | 0;
          SAFE_HEAP_STORE($61 | 0, $68 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         }
         $69 = $t0$0$i13;
         $70 = $16 - $69 | 0;
         $71 = ($70 | 0) > 1;
         if ($71) {
          $72 = SAFE_HEAP_LOAD($t0$0$i13 >> 0 | 0, 1, 0) | 0 | 0;
          $73 = $72 << 24 >> 24 == 83;
          if ($73) {
           $74 = $t0$0$i13 + 1 | 0;
           $75 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0;
           $76 = $75 << 24 >> 24 == 116;
           if ($76) {
            $77 = $t0$0$i13 + 2 | 0;
            $78 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
            $79 = $78 + -24 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($79, 10491, 3);
            $t0$1$i = $77;
           } else {
            $t0$1$i = $t0$0$i13;
           }
          } else {
           $t0$1$i = $t0$0$i13;
          }
         } else {
          $t0$1$i = $t0$0$i13;
         }
         $80 = ($t0$1$i | 0) == ($last | 0);
         if ($80) {
          $123 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
          $124 = $123 + -24 | 0;
          $126 = $123;
          while (1) {
           $125 = $126 + -24 | 0;
           SAFE_HEAP_STORE($34 | 0, $125 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125);
           $$pre$i$i14 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
           $127 = ($$pre$i$i14 | 0) == ($124 | 0);
           if ($127) {
            $$07$i = $$first;
            break L52;
           } else {
            $126 = $$pre$i$i14;
           }
          }
         }
         $81 = $name3$i + 8 | 0;
         $82 = $name3$i + 1 | 0;
         $83 = $name3$i + 4 | 0;
         $84 = $db + 12 | 0;
         $85 = $db + 16 | 0;
         $86 = $db + 20 | 0;
         $87 = $db + 24 | 0;
         $88 = $9 + 12 | 0;
         $89 = $9 + 4 | 0;
         $90 = $9 + 8 | 0;
         $91 = $db + 28 | 0;
         $92 = $__v$i$i41$i + 8 | 0;
         $93 = $12 + 12 | 0;
         $94 = $12 + 4 | 0;
         $95 = $12 + 8 | 0;
         $96 = $__v$i$i51$i + 8 | 0;
         $97 = $11 + 8 | 0;
         $98 = $11 + 1 | 0;
         $99 = $11 + 4 | 0;
         $100 = $0 + 8 | 0;
         $101 = $0 + 1 | 0;
         $102 = $0 + 4 | 0;
         $103 = $1 + 12 | 0;
         $104 = $1 + 4 | 0;
         $105 = $1 + 8 | 0;
         $106 = $__v$i$i15$i + 8 | 0;
         $107 = $4 + 12 | 0;
         $108 = $4 + 4 | 0;
         $109 = $4 + 8 | 0;
         $110 = $__v$i$i22$i + 8 | 0;
         $111 = $3 + 8 | 0;
         $112 = $3 + 1 | 0;
         $113 = $3 + 4 | 0;
         $114 = $7 + 12 | 0;
         $115 = $7 + 4 | 0;
         $116 = $7 + 8 | 0;
         $117 = $__v$i$i32$i + 8 | 0;
         $118 = $6 + 8 | 0;
         $119 = $6 + 1 | 0;
         $120 = $6 + 4 | 0;
         $121 = SAFE_HEAP_LOAD($t0$1$i >> 0 | 0, 1, 0) | 0 | 0;
         $122 = $121 << 24 >> 24 == 69;
         L80 : do {
          if ($122) {
           $pop_subs$0$off0$i$ph$lcssa = 0;
           $t0$2$i$lcssa = $t0$1$i;
          } else {
           $811 = $121;
           $pop_subs$0$off0$i$ph136 = 0;
           $t0$2$i$ph135 = $t0$1$i;
           L81 : while (1) {
            $129 = $811;
            $t0$2$i131 = $t0$2$i$ph135;
            L83 : while (1) {
             $128 = $129 << 24 >> 24;
             switch ($128 | 0) {
             case 83:
              {
               $t0$2$i131$lcssa177 = $t0$2$i131;
               label = 25;
               break L83;
               break;
              }
             case 84:
              {
               $t0$2$i131$lcssa178 = $t0$2$i131;
               label = 50;
               break L83;
               break;
              }
             case 68:
              {
               $t0$2$i131$lcssa179 = $t0$2$i131;
               label = 73;
               break L83;
               break;
              }
             case 73:
              {
               $383 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131, $last, $db) | 0;
               $384 = ($383 | 0) == ($t0$2$i131 | 0);
               $385 = ($383 | 0) == ($last | 0);
               $or$cond11$i = $384 | $385;
               if ($or$cond11$i) {
                $$07$i = $$first;
                break L52;
               }
               $386 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $387 = $386 + -24 | 0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name3$i, $387);
               $388 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $389 = $388 + -24 | 0;
               $391 = $388;
               while (1) {
                $390 = $391 + -24 | 0;
                SAFE_HEAP_STORE($34 | 0, $390 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($390);
                $$pre$i37$i = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
                $392 = ($$pre$i37$i | 0) == ($389 | 0);
                if ($392) {
                 break;
                } else {
                 $391 = $$pre$i37$i;
                }
               }
               $393 = $388 + -48 | 0;
               $394 = SAFE_HEAP_LOAD($name3$i >> 0 | 0, 1, 0) | 0 | 0;
               $395 = $394 & 1;
               $396 = $395 << 24 >> 24 == 0;
               $397 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
               $398 = $396 ? $82 : $397;
               $399 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
               $400 = $394 & 255;
               $401 = $400 >>> 1;
               $402 = $396 ? $401 : $399;
               __THREW__ = 0;
               invoke_iiii(222, $393 | 0, $398 | 0, $402 | 0) | 0;
               $403 = __THREW__;
               __THREW__ = 0;
               $404 = $403 & 1;
               if ($404) {
                label = 112;
                break L81;
               }
               $405 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $406 = $405 + -24 | 0;
               $407 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($10 | 0, $407 | 0, 4);
               __THREW__ = 0;
               invoke_viii(239, $9 | 0, $406 | 0, $10 | 0);
               $408 = __THREW__;
               __THREW__ = 0;
               $409 = $408 & 1;
               if ($409) {
                label = 112;
                break L81;
               }
               $410 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
               $411 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
               $412 = $410 >>> 0 < $411 >>> 0;
               if ($412) {
                $413 = $410 + 4 | 0;
                $414 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
                $415 = $410 + 12 | 0;
                SAFE_HEAP_STORE($415 | 0, $414 | 0, 4);
                $416 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($410 | 0, $416 | 0, 4);
                $417 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($413 | 0, $417 | 0, 4);
                $418 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
                $419 = $410 + 8 | 0;
                SAFE_HEAP_STORE($419 | 0, $418 | 0, 4);
                SAFE_HEAP_STORE($90 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($89 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
                $420 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
                $421 = $420 + 16 | 0;
                SAFE_HEAP_STORE($86 | 0, $421 | 0, 4);
               } else {
                $422 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
                $423 = $410;
                $424 = $422;
                $425 = $423 - $424 | 0;
                $426 = $425 >> 4;
                $427 = $426 + 1 | 0;
                $428 = ($425 | 0) < -16;
                if ($428) {
                 label = 106;
                 break L81;
                }
                $432 = $411;
                $433 = $432 - $424 | 0;
                $434 = $433 >> 4;
                $435 = $434 >>> 0 < 1073741823;
                if ($435) {
                 $436 = $433 >> 3;
                 $437 = $436 >>> 0 < $427 >>> 0;
                 $438 = $437 ? $427 : $436;
                 $$0$i$i$i42$i = $438;
                } else {
                 $$0$i$i$i42$i = 2147483647;
                }
                __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i41$i, $$0$i$i$i42$i, $426, $91);
                $439 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
                $440 = $439 + 4 | 0;
                $441 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
                $442 = $439 + 12 | 0;
                SAFE_HEAP_STORE($442 | 0, $441 | 0, 4);
                $443 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($439 | 0, $443 | 0, 4);
                $444 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($440 | 0, $444 | 0, 4);
                $445 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
                $446 = $439 + 8 | 0;
                SAFE_HEAP_STORE($446 | 0, $445 | 0, 4);
                SAFE_HEAP_STORE($90 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($89 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
                $447 = $439 + 16 | 0;
                SAFE_HEAP_STORE($92 | 0, $447 | 0, 4);
                __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i41$i);
                __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i41$i);
               }
               __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name3$i);
               $t0$2$i$be = $383;
               break;
              }
             case 76:
              {
               $452 = $t0$2$i131 + 1 | 0;
               $453 = ($452 | 0) == ($last | 0);
               if ($453) {
                $$07$i = $$first;
                break L52;
               } else {
                $t0$2$i$be = $452;
               }
               break;
              }
             default:
              {
               $t0$2$i131184 = $t0$2$i131;
               label = 115;
               break L83;
              }
             }
             $448 = SAFE_HEAP_LOAD($t0$2$i$be >> 0 | 0, 1, 0) | 0 | 0;
             $449 = $448 << 24 >> 24 == 69;
             if ($449) {
              $pop_subs$0$off0$i$ph$lcssa = $pop_subs$0$off0$i$ph136;
              $t0$2$i$lcssa = $t0$2$i$be;
              break L80;
             } else {
              $129 = $448;
              $t0$2$i131 = $t0$2$i$be;
             }
            }
            L103 : do {
             if ((label | 0) == 25) {
              label = 0;
              $130 = $t0$2$i131$lcssa177 + 1 | 0;
              $131 = ($130 | 0) == ($last | 0);
              if (!$131) {
               $132 = SAFE_HEAP_LOAD($130 >> 0 | 0, 1, 0) | 0 | 0;
               $133 = $132 << 24 >> 24 == 116;
               if ($133) {
                $t0$2$i131184 = $t0$2$i131$lcssa177;
                label = 115;
                break;
               }
              }
              $134 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa177, $last, $db) | 0;
              $135 = ($134 | 0) == ($t0$2$i131$lcssa177 | 0);
              $136 = ($134 | 0) == ($last | 0);
              $or$cond$i16 = $135 | $136;
              if ($or$cond$i16) {
               $$07$i = $$first;
               break L52;
              }
              $137 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $138 = $137 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i11, $138);
              $139 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $140 = $139 + -24 | 0;
              $142 = $139;
              while (1) {
               $141 = $142 + -24 | 0;
               SAFE_HEAP_STORE($34 | 0, $141 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
               $$pre$i13$i = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $143 = ($$pre$i13$i | 0) == ($140 | 0);
               if ($143) {
                break;
               } else {
                $142 = $$pre$i13$i;
               }
              }
              $144 = $139 + -48 | 0;
              $145 = SAFE_HEAP_LOAD($144 >> 0 | 0, 1, 0) | 0 | 0;
              $146 = $145 & 1;
              $147 = $146 << 24 >> 24 == 0;
              if ($147) {
               $150 = $145 & 255;
               $151 = $150 >>> 1;
               $152 = $151;
              } else {
               $148 = $139 + -44 | 0;
               $149 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
               $152 = $149;
              }
              $153 = ($152 | 0) == 0;
              __THREW__ = 0;
              if ($153) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($144, $name$i11);
               $214 = __THREW__;
               __THREW__ = 0;
               $215 = $214 & 1;
               if ($215) {
                label = 45;
                break L81;
               }
              } else {
               __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0, 10495, $name$i11);
               $154 = __THREW__;
               __THREW__ = 0;
               $155 = $154 & 1;
               if ($155) {
                label = 45;
                break L81;
               }
               $156 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
               $157 = $156 & 1;
               $158 = $157 << 24 >> 24 == 0;
               $159 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
               $160 = $158 ? $101 : $159;
               $161 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
               $162 = $156 & 255;
               $163 = $162 >>> 1;
               $164 = $158 ? $163 : $161;
               __THREW__ = 0;
               invoke_iiii(222, $144 | 0, $160 | 0, $164 | 0) | 0;
               $165 = __THREW__;
               __THREW__ = 0;
               $166 = $165 & 1;
               if ($166) {
                label = 46;
                break L81;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
               $167 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $168 = $167 + -24 | 0;
               $169 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($2 | 0, $169 | 0, 4);
               __THREW__ = 0;
               invoke_viii(239, $1 | 0, $168 | 0, $2 | 0);
               $170 = __THREW__;
               __THREW__ = 0;
               $171 = $170 & 1;
               if ($171) {
                label = 45;
                break L81;
               }
               $172 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
               $173 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
               $174 = $172 >>> 0 < $173 >>> 0;
               if ($174) {
                $175 = $172 + 4 | 0;
                $176 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
                $177 = $172 + 12 | 0;
                SAFE_HEAP_STORE($177 | 0, $176 | 0, 4);
                $178 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($172 | 0, $178 | 0, 4);
                $179 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($175 | 0, $179 | 0, 4);
                $180 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
                $181 = $172 + 8 | 0;
                SAFE_HEAP_STORE($181 | 0, $180 | 0, 4);
                SAFE_HEAP_STORE($105 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($104 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
                $182 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
                $183 = $182 + 16 | 0;
                SAFE_HEAP_STORE($86 | 0, $183 | 0, 4);
               } else {
                $184 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
                $185 = $172;
                $186 = $184;
                $187 = $185 - $186 | 0;
                $188 = $187 >> 4;
                $189 = $188 + 1 | 0;
                $190 = ($187 | 0) < -16;
                if ($190) {
                 label = 40;
                 break L81;
                }
                $194 = $173;
                $195 = $194 - $186 | 0;
                $196 = $195 >> 4;
                $197 = $196 >>> 0 < 1073741823;
                if ($197) {
                 $198 = $195 >> 3;
                 $199 = $198 >>> 0 < $189 >>> 0;
                 $200 = $199 ? $189 : $198;
                 $$0$i$i$i16$i = $200;
                } else {
                 $$0$i$i$i16$i = 2147483647;
                }
                __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i15$i, $$0$i$i$i16$i, $188, $91);
                $201 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
                $202 = $201 + 4 | 0;
                $203 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
                $204 = $201 + 12 | 0;
                SAFE_HEAP_STORE($204 | 0, $203 | 0, 4);
                $205 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($201 | 0, $205 | 0, 4);
                $206 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($202 | 0, $206 | 0, 4);
                $207 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
                $208 = $201 + 8 | 0;
                SAFE_HEAP_STORE($208 | 0, $207 | 0, 4);
                SAFE_HEAP_STORE($105 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($104 | 0, 0 | 0, 4);
                SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
                $209 = $201 + 16 | 0;
                SAFE_HEAP_STORE($106 | 0, $209 | 0, 4);
                __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i15$i);
                __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i15$i);
               }
               __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i11);
              $t0$2$i$ph$be = $134;
             } else if ((label | 0) == 50) {
              label = 0;
              $216 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa178, $last, $db) | 0;
              $217 = ($216 | 0) == ($t0$2$i131$lcssa178 | 0);
              $218 = ($216 | 0) == ($last | 0);
              $or$cond9$i = $217 | $218;
              if ($or$cond9$i) {
               $$07$i = $$first;
               break L52;
              }
              $219 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $220 = $219 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name1$i, $220);
              $221 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $222 = $221 + -24 | 0;
              $224 = $221;
              while (1) {
               $223 = $224 + -24 | 0;
               SAFE_HEAP_STORE($34 | 0, $223 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($223);
               $$pre$i17$i = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $225 = ($$pre$i17$i | 0) == ($222 | 0);
               if ($225) {
                break;
               } else {
                $224 = $$pre$i17$i;
               }
              }
              $226 = $221 + -48 | 0;
              $227 = SAFE_HEAP_LOAD($226 >> 0 | 0, 1, 0) | 0 | 0;
              $228 = $227 & 1;
              $229 = $228 << 24 >> 24 == 0;
              if ($229) {
               $232 = $227 & 255;
               $233 = $232 >>> 1;
               $234 = $233;
              } else {
               $230 = $221 + -44 | 0;
               $231 = SAFE_HEAP_LOAD($230 | 0, 4, 0) | 0 | 0;
               $234 = $231;
              }
              $235 = ($234 | 0) == 0;
              __THREW__ = 0;
              if ($235) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($226, $name1$i);
               $253 = __THREW__;
               __THREW__ = 0;
               $254 = $253 & 1;
               if ($254) {
                label = 60;
                break L81;
               }
              } else {
               __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($3, 10495, $name1$i);
               $236 = __THREW__;
               __THREW__ = 0;
               $237 = $236 & 1;
               if ($237) {
                label = 60;
                break L81;
               }
               $238 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
               $239 = $238 & 1;
               $240 = $239 << 24 >> 24 == 0;
               $241 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
               $242 = $240 ? $112 : $241;
               $243 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
               $244 = $238 & 255;
               $245 = $244 >>> 1;
               $246 = $240 ? $245 : $243;
               __THREW__ = 0;
               invoke_iiii(222, $226 | 0, $242 | 0, $246 | 0) | 0;
               $247 = __THREW__;
               __THREW__ = 0;
               $248 = $247 & 1;
               if ($248) {
                label = 61;
                break L81;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              }
              $255 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $256 = $255 + -24 | 0;
              $257 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($5 | 0, $257 | 0, 4);
              __THREW__ = 0;
              invoke_viii(239, $4 | 0, $256 | 0, $5 | 0);
              $258 = __THREW__;
              __THREW__ = 0;
              $259 = $258 & 1;
              if ($259) {
               label = 60;
               break L81;
              }
              $260 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
              $261 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
              $262 = $260 >>> 0 < $261 >>> 0;
              if ($262) {
               $263 = $260 + 4 | 0;
               $264 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
               $265 = $260 + 12 | 0;
               SAFE_HEAP_STORE($265 | 0, $264 | 0, 4);
               $266 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($260 | 0, $266 | 0, 4);
               $267 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($263 | 0, $267 | 0, 4);
               $268 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
               $269 = $260 + 8 | 0;
               SAFE_HEAP_STORE($269 | 0, $268 | 0, 4);
               SAFE_HEAP_STORE($109 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
               $270 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
               $271 = $270 + 16 | 0;
               SAFE_HEAP_STORE($86 | 0, $271 | 0, 4);
              } else {
               $272 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
               $273 = $260;
               $274 = $272;
               $275 = $273 - $274 | 0;
               $276 = $275 >> 4;
               $277 = $276 + 1 | 0;
               $278 = ($275 | 0) < -16;
               if ($278) {
                label = 67;
                break L81;
               }
               $282 = $261;
               $283 = $282 - $274 | 0;
               $284 = $283 >> 4;
               $285 = $284 >>> 0 < 1073741823;
               if ($285) {
                $286 = $283 >> 3;
                $287 = $286 >>> 0 < $277 >>> 0;
                $288 = $287 ? $277 : $286;
                $$0$i$i$i23$i = $288;
               } else {
                $$0$i$i$i23$i = 2147483647;
               }
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i22$i, $$0$i$i$i23$i, $276, $91);
               $289 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
               $290 = $289 + 4 | 0;
               $291 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
               $292 = $289 + 12 | 0;
               SAFE_HEAP_STORE($292 | 0, $291 | 0, 4);
               $293 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($289 | 0, $293 | 0, 4);
               $294 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($290 | 0, $294 | 0, 4);
               $295 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
               $296 = $289 + 8 | 0;
               SAFE_HEAP_STORE($296 | 0, $295 | 0, 4);
               SAFE_HEAP_STORE($109 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
               $297 = $289 + 16 | 0;
               SAFE_HEAP_STORE($110 | 0, $297 | 0, 4);
               __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i22$i);
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i22$i);
              }
              __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name1$i);
              $t0$2$i$ph$be = $216;
             } else if ((label | 0) == 73) {
              label = 0;
              $298 = $t0$2$i131$lcssa179 + 1 | 0;
              $299 = ($298 | 0) == ($last | 0);
              if (!$299) {
               $300 = SAFE_HEAP_LOAD($298 >> 0 | 0, 1, 0) | 0 | 0;
               switch ($300 << 24 >> 24) {
               case 84:
               case 116:
                {
                 break;
                }
               default:
                {
                 $t0$2$i131184 = $t0$2$i131$lcssa179;
                 label = 115;
                 break L103;
                }
               }
              }
              $301 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131$lcssa179, $last, $db) | 0;
              $302 = ($301 | 0) == ($t0$2$i131$lcssa179 | 0);
              $303 = ($301 | 0) == ($last | 0);
              $or$cond10$i = $302 | $303;
              if ($or$cond10$i) {
               $$07$i = $$first;
               break L52;
              }
              $304 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $305 = $304 + -24 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i12, $305);
              $306 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $307 = $306 + -24 | 0;
              $309 = $306;
              while (1) {
               $308 = $309 + -24 | 0;
               SAFE_HEAP_STORE($34 | 0, $308 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($308);
               $$pre$i27$i = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
               $310 = ($$pre$i27$i | 0) == ($307 | 0);
               if ($310) {
                break;
               } else {
                $309 = $$pre$i27$i;
               }
              }
              $311 = $306 + -48 | 0;
              $312 = SAFE_HEAP_LOAD($311 >> 0 | 0, 1, 0) | 0 | 0;
              $313 = $312 & 1;
              $314 = $313 << 24 >> 24 == 0;
              if ($314) {
               $317 = $312 & 255;
               $318 = $317 >>> 1;
               $319 = $318;
              } else {
               $315 = $306 + -44 | 0;
               $316 = SAFE_HEAP_LOAD($315 | 0, 4, 0) | 0 | 0;
               $319 = $316;
              }
              $320 = ($319 | 0) == 0;
              __THREW__ = 0;
              if ($320) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($311, $name2$i12);
               $338 = __THREW__;
               __THREW__ = 0;
               $339 = $338 & 1;
               if ($339) {
                label = 85;
                break L81;
               }
              } else {
               __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6, 10495, $name2$i12);
               $321 = __THREW__;
               __THREW__ = 0;
               $322 = $321 & 1;
               if ($322) {
                label = 85;
                break L81;
               }
               $323 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
               $324 = $323 & 1;
               $325 = $324 << 24 >> 24 == 0;
               $326 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
               $327 = $325 ? $119 : $326;
               $328 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
               $329 = $323 & 255;
               $330 = $329 >>> 1;
               $331 = $325 ? $330 : $328;
               __THREW__ = 0;
               invoke_iiii(222, $311 | 0, $327 | 0, $331 | 0) | 0;
               $332 = __THREW__;
               __THREW__ = 0;
               $333 = $332 & 1;
               if ($333) {
                label = 86;
                break L81;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              }
              $340 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $341 = $340 + -24 | 0;
              $342 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($8 | 0, $342 | 0, 4);
              __THREW__ = 0;
              invoke_viii(239, $7 | 0, $341 | 0, $8 | 0);
              $343 = __THREW__;
              __THREW__ = 0;
              $344 = $343 & 1;
              if ($344) {
               label = 85;
               break L81;
              }
              $345 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
              $346 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
              $347 = $345 >>> 0 < $346 >>> 0;
              if ($347) {
               $348 = $345 + 4 | 0;
               $349 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
               $350 = $345 + 12 | 0;
               SAFE_HEAP_STORE($350 | 0, $349 | 0, 4);
               $351 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($345 | 0, $351 | 0, 4);
               $352 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($348 | 0, $352 | 0, 4);
               $353 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
               $354 = $345 + 8 | 0;
               SAFE_HEAP_STORE($354 | 0, $353 | 0, 4);
               SAFE_HEAP_STORE($116 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($115 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
               $355 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
               $356 = $355 + 16 | 0;
               SAFE_HEAP_STORE($86 | 0, $356 | 0, 4);
              } else {
               $357 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
               $358 = $345;
               $359 = $357;
               $360 = $358 - $359 | 0;
               $361 = $360 >> 4;
               $362 = $361 + 1 | 0;
               $363 = ($360 | 0) < -16;
               if ($363) {
                label = 92;
                break L81;
               }
               $367 = $346;
               $368 = $367 - $359 | 0;
               $369 = $368 >> 4;
               $370 = $369 >>> 0 < 1073741823;
               if ($370) {
                $371 = $368 >> 3;
                $372 = $371 >>> 0 < $362 >>> 0;
                $373 = $372 ? $362 : $371;
                $$0$i$i$i33$i = $373;
               } else {
                $$0$i$i$i33$i = 2147483647;
               }
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i32$i, $$0$i$i$i33$i, $361, $91);
               $374 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
               $375 = $374 + 4 | 0;
               $376 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
               $377 = $374 + 12 | 0;
               SAFE_HEAP_STORE($377 | 0, $376 | 0, 4);
               $378 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($374 | 0, $378 | 0, 4);
               $379 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
               SAFE_HEAP_STORE($375 | 0, $379 | 0, 4);
               $380 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
               $381 = $374 + 8 | 0;
               SAFE_HEAP_STORE($381 | 0, $380 | 0, 4);
               SAFE_HEAP_STORE($116 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($115 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
               $382 = $374 + 16 | 0;
               SAFE_HEAP_STORE($117 | 0, $382 | 0, 4);
               __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i32$i);
               __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i32$i);
              }
              __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i12);
              $t0$2$i$ph$be = $301;
             }
            } while (0);
            if ((label | 0) == 115) {
             label = 0;
             $454 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i131184, $last, $db) | 0;
             $455 = ($454 | 0) == ($t0$2$i131184 | 0);
             $456 = ($454 | 0) == ($last | 0);
             $or$cond12$i = $455 | $456;
             if ($or$cond12$i) {
              $$07$i = $$first;
              break L52;
             }
             $457 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
             $458 = $457 + -24 | 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name4$i, $458);
             $459 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
             $460 = $459 + -24 | 0;
             $462 = $459;
             while (1) {
              $461 = $462 + -24 | 0;
              SAFE_HEAP_STORE($34 | 0, $461 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($461);
              $$pre$i46$i = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
              $463 = ($$pre$i46$i | 0) == ($460 | 0);
              if ($463) {
               break;
              } else {
               $462 = $$pre$i46$i;
              }
             }
             $464 = $459 + -48 | 0;
             $465 = SAFE_HEAP_LOAD($464 >> 0 | 0, 1, 0) | 0 | 0;
             $466 = $465 & 1;
             $467 = $466 << 24 >> 24 == 0;
             if ($467) {
              $470 = $465 & 255;
              $471 = $470 >>> 1;
              $472 = $471;
             } else {
              $468 = $459 + -44 | 0;
              $469 = SAFE_HEAP_LOAD($468 | 0, 4, 0) | 0 | 0;
              $472 = $469;
             }
             $473 = ($472 | 0) == 0;
             __THREW__ = 0;
             if ($473) {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($464, $name4$i);
              $491 = __THREW__;
              __THREW__ = 0;
              $492 = $491 & 1;
              if ($492) {
               label = 125;
               break;
              }
             } else {
              __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($11, 10495, $name4$i);
              $474 = __THREW__;
              __THREW__ = 0;
              $475 = $474 & 1;
              if ($475) {
               label = 125;
               break;
              }
              $476 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
              $477 = $476 & 1;
              $478 = $477 << 24 >> 24 == 0;
              $479 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
              $480 = $478 ? $98 : $479;
              $481 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
              $482 = $476 & 255;
              $483 = $482 >>> 1;
              $484 = $478 ? $483 : $481;
              __THREW__ = 0;
              invoke_iiii(222, $464 | 0, $480 | 0, $484 | 0) | 0;
              $485 = __THREW__;
              __THREW__ = 0;
              $486 = $485 & 1;
              if ($486) {
               label = 126;
               break;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
             }
             $493 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
             $494 = $493 + -24 | 0;
             $495 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
             SAFE_HEAP_STORE($13 | 0, $495 | 0, 4);
             __THREW__ = 0;
             invoke_viii(239, $12 | 0, $494 | 0, $13 | 0);
             $496 = __THREW__;
             __THREW__ = 0;
             $497 = $496 & 1;
             if ($497) {
              label = 125;
              break;
             }
             $498 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
             $499 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
             $500 = $498 >>> 0 < $499 >>> 0;
             if ($500) {
              $501 = $498 + 4 | 0;
              $502 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
              $503 = $498 + 12 | 0;
              SAFE_HEAP_STORE($503 | 0, $502 | 0, 4);
              $504 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($498 | 0, $504 | 0, 4);
              $505 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($501 | 0, $505 | 0, 4);
              $506 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
              $507 = $498 + 8 | 0;
              SAFE_HEAP_STORE($507 | 0, $506 | 0, 4);
              SAFE_HEAP_STORE($95 | 0, 0 | 0, 4);
              SAFE_HEAP_STORE($94 | 0, 0 | 0, 4);
              SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
              $508 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
              $509 = $508 + 16 | 0;
              SAFE_HEAP_STORE($86 | 0, $509 | 0, 4);
             } else {
              $510 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
              $511 = $498;
              $512 = $510;
              $513 = $511 - $512 | 0;
              $514 = $513 >> 4;
              $515 = $514 + 1 | 0;
              $516 = ($513 | 0) < -16;
              if ($516) {
               label = 132;
               break;
              }
              $520 = $499;
              $521 = $520 - $512 | 0;
              $522 = $521 >> 4;
              $523 = $522 >>> 0 < 1073741823;
              if ($523) {
               $524 = $521 >> 3;
               $525 = $524 >>> 0 < $515 >>> 0;
               $526 = $525 ? $515 : $524;
               $$0$i$i$i52$i = $526;
              } else {
               $$0$i$i$i52$i = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i51$i, $$0$i$i$i52$i, $514, $91);
              $527 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
              $528 = $527 + 4 | 0;
              $529 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
              $530 = $527 + 12 | 0;
              SAFE_HEAP_STORE($530 | 0, $529 | 0, 4);
              $531 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($527 | 0, $531 | 0, 4);
              $532 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
              SAFE_HEAP_STORE($528 | 0, $532 | 0, 4);
              $533 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
              $534 = $527 + 8 | 0;
              SAFE_HEAP_STORE($534 | 0, $533 | 0, 4);
              SAFE_HEAP_STORE($95 | 0, 0 | 0, 4);
              SAFE_HEAP_STORE($94 | 0, 0 | 0, 4);
              SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
              $535 = $527 + 16 | 0;
              SAFE_HEAP_STORE($96 | 0, $535 | 0, 4);
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($85, $__v$i$i51$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i51$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name4$i);
             $t0$2$i$ph$be = $454;
            }
            $536 = SAFE_HEAP_LOAD($t0$2$i$ph$be >> 0 | 0, 1, 0) | 0 | 0;
            $537 = $536 << 24 >> 24 == 69;
            if ($537) {
             $pop_subs$0$off0$i$ph$lcssa = 1;
             $t0$2$i$lcssa = $t0$2$i$ph$be;
             break L80;
            } else {
             $811 = $536;
             $pop_subs$0$off0$i$ph136 = 1;
             $t0$2$i$ph135 = $t0$2$i$ph$be;
            }
           }
           switch (label | 0) {
           case 40:
            {
             __THREW__ = 0;
             invoke_vi(238, $85 | 0);
             $191 = __THREW__;
             __THREW__ = 0;
             $192 = ___cxa_find_matching_catch() | 0;
             $193 = tempRet0;
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
             $$0$i18 = $193;
             $$01$i17 = $192;
             label = 49;
             break;
            }
           case 45:
            {
             $210 = ___cxa_find_matching_catch() | 0;
             $211 = tempRet0;
             $$0$i18 = $211;
             $$01$i17 = $210;
             label = 49;
             break;
            }
           case 46:
            {
             $212 = ___cxa_find_matching_catch() | 0;
             $213 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
             $$0$i18 = $213;
             $$01$i17 = $212;
             label = 49;
             break;
            }
           case 60:
            {
             $249 = ___cxa_find_matching_catch() | 0;
             $250 = tempRet0;
             $$1$i = $250;
             $$12$i = $249;
             label = 72;
             break;
            }
           case 61:
            {
             $251 = ___cxa_find_matching_catch() | 0;
             $252 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$1$i = $252;
             $$12$i = $251;
             label = 72;
             break;
            }
           case 67:
            {
             __THREW__ = 0;
             invoke_vi(238, $85 | 0);
             $279 = __THREW__;
             __THREW__ = 0;
             $280 = ___cxa_find_matching_catch() | 0;
             $281 = tempRet0;
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
             $$1$i = $281;
             $$12$i = $280;
             label = 72;
             break;
            }
           case 85:
            {
             $334 = ___cxa_find_matching_catch() | 0;
             $335 = tempRet0;
             $$2$i = $335;
             $$23$i = $334;
             label = 97;
             break;
            }
           case 86:
            {
             $336 = ___cxa_find_matching_catch() | 0;
             $337 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             $$2$i = $337;
             $$23$i = $336;
             label = 97;
             break;
            }
           case 92:
            {
             __THREW__ = 0;
             invoke_vi(238, $85 | 0);
             $364 = __THREW__;
             __THREW__ = 0;
             $365 = ___cxa_find_matching_catch() | 0;
             $366 = tempRet0;
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
             $$2$i = $366;
             $$23$i = $365;
             label = 97;
             break;
            }
           case 106:
            {
             __THREW__ = 0;
             invoke_vi(238, $85 | 0);
             $429 = __THREW__;
             __THREW__ = 0;
             $430 = ___cxa_find_matching_catch() | 0;
             $431 = tempRet0;
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
             $$3$i = $431;
             $$34$i = $430;
             label = 113;
             break;
            }
           case 112:
            {
             $450 = ___cxa_find_matching_catch() | 0;
             $451 = tempRet0;
             $$3$i = $451;
             $$34$i = $450;
             label = 113;
             break;
            }
           case 125:
            {
             $487 = ___cxa_find_matching_catch() | 0;
             $488 = tempRet0;
             $$4$i = $488;
             $$45$i = $487;
             label = 139;
             break;
            }
           case 126:
            {
             $489 = ___cxa_find_matching_catch() | 0;
             $490 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
             $$4$i = $490;
             $$45$i = $489;
             label = 139;
             break;
            }
           case 132:
            {
             __THREW__ = 0;
             invoke_vi(238, $85 | 0);
             $517 = __THREW__;
             __THREW__ = 0;
             $518 = ___cxa_find_matching_catch() | 0;
             $519 = tempRet0;
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
             $$4$i = $519;
             $$45$i = $518;
             label = 139;
             break;
            }
           }
           if ((label | 0) == 49) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i11);
            $$5$i = $$0$i18;
            $$56$i = $$01$i17;
           } else if ((label | 0) == 72) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name1$i);
            $$5$i = $$1$i;
            $$56$i = $$12$i;
           } else if ((label | 0) == 97) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i12);
            $$5$i = $$2$i;
            $$56$i = $$23$i;
           } else if ((label | 0) == 113) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name3$i);
            $$5$i = $$3$i;
            $$56$i = $$34$i;
           } else if ((label | 0) == 139) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name4$i);
            $$5$i = $$4$i;
            $$56$i = $$45$i;
           }
           ___resumeException($$56$i | 0);
          }
         } while (0);
         $538 = $t0$2$i$lcssa + 1 | 0;
         $539 = SAFE_HEAP_LOAD($cv$i | 0, 4, 0) | 0 | 0;
         $540 = $db + 48 | 0;
         SAFE_HEAP_STORE($540 | 0, $539 | 0, 4);
         if ($pop_subs$0$off0$i$ph$lcssa) {
          $541 = $db + 16 | 0;
          $542 = SAFE_HEAP_LOAD($541 | 0, 4, 0) | 0 | 0;
          $543 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
          $544 = ($542 | 0) == ($543 | 0);
          if ($544) {
           $$07$i = $538;
          } else {
           $545 = $543 + -16 | 0;
           $547 = $543;
           while (1) {
            $546 = $547 + -16 | 0;
            SAFE_HEAP_STORE($86 | 0, $546 | 0, 4);
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($546);
            $$pre$i56$i = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
            $548 = ($$pre$i56$i | 0) == ($545 | 0);
            if ($548) {
             $$07$i = $538;
             break;
            } else {
             $547 = $$pre$i56$i;
            }
           }
          }
         } else {
          $$07$i = $538;
         }
        }
       } else {
        $$07$i = $$first;
       }
      }
     } while (0);
     $549 = ($$07$i | 0) == ($$first | 0);
     $first$ = $549 ? $first : $$07$i;
     $$02 = $first$;
     break L1;
     break;
    }
   case 90:
    {
     $550 = ($$first | 0) == ($last | 0);
     L237 : do {
      if ($550) {
       $$0$i10 = $last;
      } else {
       $551 = $23 << 24 >> 24 == 90;
       if ($551) {
        $552 = $$first + 1 | 0;
        $553 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($552, $last, $db) | 0;
        $554 = ($553 | 0) == ($552 | 0);
        $555 = ($553 | 0) == ($last | 0);
        $or$cond$i = $554 | $555;
        if ($or$cond$i) {
         $$0$i10 = $$first;
        } else {
         $556 = SAFE_HEAP_LOAD($553 >> 0 | 0, 1, 0) | 0 | 0;
         $557 = $556 << 24 >> 24 == 69;
         if ($557) {
          $558 = $553 + 1 | 0;
          $559 = ($558 | 0) == ($last | 0);
          if ($559) {
           $$0$i10 = $$first;
          } else {
           $560 = SAFE_HEAP_LOAD($558 >> 0 | 0, 1, 0) | 0 | 0;
           $561 = $560 << 24 >> 24;
           switch ($561 | 0) {
           case 115:
            {
             $562 = $553 + 2 | 0;
             $563 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($562, $last) | 0;
             $564 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $565 = $db + 4 | 0;
             $566 = SAFE_HEAP_LOAD($565 | 0, 4, 0) | 0 | 0;
             $567 = ($564 | 0) == ($566 | 0);
             if ($567) {
              $$0$i10 = $563;
              break L237;
             }
             $568 = $566 + -24 | 0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($568, 10498) | 0;
             $$0$i10 = $563;
             break L237;
             break;
            }
           case 100:
            {
             $569 = $553 + 2 | 0;
             $570 = ($569 | 0) == ($last | 0);
             if ($570) {
              $$0$i10 = $$first;
              break L237;
             }
             $571 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($569, $last) | 0;
             $572 = ($571 | 0) == ($last | 0);
             if ($572) {
              $$0$i10 = $$first;
              break L237;
             }
             $573 = SAFE_HEAP_LOAD($571 >> 0 | 0, 1, 0) | 0 | 0;
             $574 = $573 << 24 >> 24 == 95;
             if (!$574) {
              $$0$i10 = $$first;
              break L237;
             }
             $575 = $571 + 1 | 0;
             $576 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($575, $last, $db) | 0;
             $577 = ($576 | 0) == ($575 | 0);
             $578 = $db + 4 | 0;
             $579 = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
             if ($577) {
              $613 = $579 + -24 | 0;
              $615 = $579;
              while (1) {
               $614 = $615 + -24 | 0;
               SAFE_HEAP_STORE($578 | 0, $614 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($614);
               $$pre$i4$i = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
               $616 = ($$pre$i4$i | 0) == ($613 | 0);
               if ($616) {
                $$0$i10 = $$first;
                break L237;
               } else {
                $615 = $$pre$i4$i;
               }
              }
             }
             $580 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $581 = $579;
             $582 = $580;
             $583 = $581 - $582 | 0;
             $584 = ($583 | 0) / 24 & -1;
             $585 = $584 >>> 0 < 2;
             if ($585) {
              $$0$i10 = $$first;
              break L237;
             }
             $586 = $579 + -24 | 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i, $586);
             $587 = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
             $588 = $587 + -24 | 0;
             $590 = $587;
             while (1) {
              $589 = $590 + -24 | 0;
              SAFE_HEAP_STORE($578 | 0, $589 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($589);
              $$pre$i$i = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
              $591 = ($$pre$i$i | 0) == ($588 | 0);
              if ($591) {
               break;
              } else {
               $590 = $$pre$i$i;
              }
             }
             $592 = $587 + -48 | 0;
             __THREW__ = 0;
             invoke_iii(228, $592 | 0, 10495 | 0) | 0;
             $593 = __THREW__;
             __THREW__ = 0;
             $594 = $593 & 1;
             if (!$594) {
              $595 = SAFE_HEAP_LOAD($578 | 0, 4, 0) | 0 | 0;
              $596 = $595 + -24 | 0;
              $597 = SAFE_HEAP_LOAD($name$i >> 0 | 0, 1, 0) | 0 | 0;
              $598 = $597 & 1;
              $599 = $598 << 24 >> 24 == 0;
              $600 = $name$i + 8 | 0;
              $601 = SAFE_HEAP_LOAD($600 | 0, 4, 0) | 0 | 0;
              $602 = $name$i + 1 | 0;
              $603 = $599 ? $602 : $601;
              $604 = $name$i + 4 | 0;
              $605 = SAFE_HEAP_LOAD($604 | 0, 4, 0) | 0 | 0;
              $606 = $597 & 255;
              $607 = $606 >>> 1;
              $608 = $599 ? $607 : $605;
              __THREW__ = 0;
              invoke_iiii(222, $596 | 0, $603 | 0, $608 | 0) | 0;
              $609 = __THREW__;
              __THREW__ = 0;
              $610 = $609 & 1;
              if (!$610) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
               $$0$i10 = $576;
               break L237;
              }
             }
             $611 = ___cxa_find_matching_catch() | 0;
             $612 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
             $$01$i = $612;
             $$02$i = $611;
             break;
            }
           default:
            {
             $617 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($558, $last, $db) | 0;
             $618 = ($617 | 0) == ($558 | 0);
             if ($618) {
              $655 = $db + 4 | 0;
              $656 = SAFE_HEAP_LOAD($655 | 0, 4, 0) | 0 | 0;
              $657 = $656 + -24 | 0;
              $659 = $656;
              while (1) {
               $658 = $659 + -24 | 0;
               SAFE_HEAP_STORE($655 | 0, $658 | 0, 4);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($658);
               $$pre$i9$i = SAFE_HEAP_LOAD($655 | 0, 4, 0) | 0 | 0;
               $660 = ($$pre$i9$i | 0) == ($657 | 0);
               if ($660) {
                $$0$i10 = $$first;
                break L237;
               } else {
                $659 = $$pre$i9$i;
               }
              }
             }
             $619 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($617, $last) | 0;
             $620 = $db + 4 | 0;
             $621 = SAFE_HEAP_LOAD($620 | 0, 4, 0) | 0 | 0;
             $622 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
             $623 = $621;
             $624 = $622;
             $625 = $623 - $624 | 0;
             $626 = ($625 | 0) / 24 & -1;
             $627 = $626 >>> 0 < 2;
             if ($627) {
              $$0$i10 = $619;
              break L237;
             }
             $628 = $621 + -24 | 0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i, $628);
             $629 = SAFE_HEAP_LOAD($620 | 0, 4, 0) | 0 | 0;
             $630 = $629 + -24 | 0;
             $632 = $629;
             while (1) {
              $631 = $632 + -24 | 0;
              SAFE_HEAP_STORE($620 | 0, $631 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($631);
              $$pre$i6$i = SAFE_HEAP_LOAD($620 | 0, 4, 0) | 0 | 0;
              $633 = ($$pre$i6$i | 0) == ($630 | 0);
              if ($633) {
               break;
              } else {
               $632 = $$pre$i6$i;
              }
             }
             $634 = $629 + -48 | 0;
             __THREW__ = 0;
             invoke_iii(228, $634 | 0, 10495 | 0) | 0;
             $635 = __THREW__;
             __THREW__ = 0;
             $636 = $635 & 1;
             if (!$636) {
              $637 = SAFE_HEAP_LOAD($620 | 0, 4, 0) | 0 | 0;
              $638 = $637 + -24 | 0;
              $639 = SAFE_HEAP_LOAD($name2$i >> 0 | 0, 1, 0) | 0 | 0;
              $640 = $639 & 1;
              $641 = $640 << 24 >> 24 == 0;
              $642 = $name2$i + 8 | 0;
              $643 = SAFE_HEAP_LOAD($642 | 0, 4, 0) | 0 | 0;
              $644 = $name2$i + 1 | 0;
              $645 = $641 ? $644 : $643;
              $646 = $name2$i + 4 | 0;
              $647 = SAFE_HEAP_LOAD($646 | 0, 4, 0) | 0 | 0;
              $648 = $639 & 255;
              $649 = $648 >>> 1;
              $650 = $641 ? $649 : $647;
              __THREW__ = 0;
              invoke_iiii(222, $638 | 0, $645 | 0, $650 | 0) | 0;
              $651 = __THREW__;
              __THREW__ = 0;
              $652 = $651 & 1;
              if (!$652) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i);
               $$0$i10 = $619;
               break L237;
              }
             }
             $653 = ___cxa_find_matching_catch() | 0;
             $654 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i);
             $$01$i = $654;
             $$02$i = $653;
            }
           }
           ___resumeException($$02$i | 0);
          }
         } else {
          $$0$i10 = $$first;
         }
        }
       } else {
        $$0$i10 = $$first;
       }
      }
     } while (0);
     $661 = ($$0$i10 | 0) == ($$first | 0);
     $first$4 = $661 ? $first : $$0$i10;
     STACKTOP = sp;
     return $first$4 | 0;
     break;
    }
   default:
    {
     $662 = $$first;
     $663 = $16 - $662 | 0;
     $664 = ($663 | 0) > 1;
     do {
      if ($664) {
       $665 = $23 << 24 >> 24 == 83;
       if ($665) {
        $666 = $$first + 1 | 0;
        $667 = SAFE_HEAP_LOAD($666 >> 0 | 0, 1, 0) | 0 | 0;
        $668 = $667 << 24 >> 24 == 116;
        if ($668) {
         $669 = $$first + 2 | 0;
         $670 = ($669 | 0) == ($last | 0);
         if ($670) {
          $St$0$off0$i = 0;
          $t0$0$i = $last;
         } else {
          $671 = SAFE_HEAP_LOAD($669 >> 0 | 0, 1, 0) | 0 | 0;
          $672 = $671 << 24 >> 24 == 76;
          $673 = $$first + 3 | 0;
          $$$i = $672 ? $673 : $669;
          $St$0$off0$i = 0;
          $t0$0$i = $$$i;
         }
        } else {
         $St$0$off0$i = 1;
         $t0$0$i = $$first;
        }
       } else {
        $St$0$off0$i = 1;
        $t0$0$i = $$first;
       }
       $674 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i, $last, $db) | 0;
       $675 = ($674 | 0) == ($t0$0$i | 0);
       $brmerge$i = $St$0$off0$i | $675;
       $first$mux$i = $675 ? $$first : $674;
       if ($brmerge$i) {
        $$0$i = $first$mux$i;
       } else {
        $676 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $677 = $db + 4 | 0;
        $678 = SAFE_HEAP_LOAD($677 | 0, 4, 0) | 0 | 0;
        $679 = ($676 | 0) == ($678 | 0);
        if ($679) {
         label = 205;
         break;
        }
        $680 = $678 + -24 | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($680, 0, 10515) | 0;
        $$0$i = $674;
       }
       $681 = ($$0$i | 0) == ($$first | 0);
       if ($681) {
        label = 205;
       } else {
        $682 = ($$0$i | 0) == ($last | 0);
        if ($682) {
         $$02 = $last;
         break L1;
        }
        $683 = SAFE_HEAP_LOAD($$0$i >> 0 | 0, 1, 0) | 0 | 0;
        $684 = $683 << 24 >> 24 == 73;
        if (!$684) {
         $$02 = $$0$i;
         break L1;
        }
        $685 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $686 = $db + 4 | 0;
        $687 = SAFE_HEAP_LOAD($686 | 0, 4, 0) | 0 | 0;
        $688 = ($685 | 0) == ($687 | 0);
        if ($688) {
         $$02 = $first;
         break L1;
        }
        $689 = $db + 16 | 0;
        $690 = $687 + -24 | 0;
        $691 = $db + 12 | 0;
        $692 = SAFE_HEAP_LOAD($691 | 0, 4, 0) | 0 | 0;
        SAFE_HEAP_STORE($15 | 0, $692 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14, $690, $15);
        $693 = $db + 20 | 0;
        $694 = SAFE_HEAP_LOAD($693 | 0, 4, 0) | 0 | 0;
        $695 = $db + 24 | 0;
        $696 = SAFE_HEAP_LOAD($695 | 0, 4, 0) | 0 | 0;
        $697 = $694 >>> 0 < $696 >>> 0;
        if ($697) {
         $698 = $14 + 12 | 0;
         $699 = $694 + 4 | 0;
         $700 = SAFE_HEAP_LOAD($698 | 0, 4, 0) | 0 | 0;
         $701 = $694 + 12 | 0;
         SAFE_HEAP_STORE($701 | 0, $700 | 0, 4);
         $702 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($694 | 0, $702 | 0, 4);
         $703 = $14 + 4 | 0;
         $704 = SAFE_HEAP_LOAD($703 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($699 | 0, $704 | 0, 4);
         $705 = $14 + 8 | 0;
         $706 = SAFE_HEAP_LOAD($705 | 0, 4, 0) | 0 | 0;
         $707 = $694 + 8 | 0;
         SAFE_HEAP_STORE($707 | 0, $706 | 0, 4);
         SAFE_HEAP_STORE($705 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($703 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
         $708 = SAFE_HEAP_LOAD($693 | 0, 4, 0) | 0 | 0;
         $709 = $708 + 16 | 0;
         SAFE_HEAP_STORE($693 | 0, $709 | 0, 4);
        } else {
         $710 = $db + 28 | 0;
         $711 = SAFE_HEAP_LOAD($689 | 0, 4, 0) | 0 | 0;
         $712 = $694;
         $713 = $711;
         $714 = $712 - $713 | 0;
         $715 = $714 >> 4;
         $716 = $715 + 1 | 0;
         $717 = ($714 | 0) < -16;
         if ($717) {
          __THREW__ = 0;
          invoke_vi(238, $689 | 0);
          $718 = __THREW__;
          __THREW__ = 0;
          $719 = ___cxa_find_matching_catch() | 0;
          $720 = tempRet0;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
          $$0 = $720;
          $$01 = $719;
          break;
         }
         $721 = $696;
         $722 = $721 - $713 | 0;
         $723 = $722 >> 4;
         $724 = $723 >>> 0 < 1073741823;
         if ($724) {
          $725 = $722 >> 3;
          $726 = $725 >>> 0 < $716 >>> 0;
          $727 = $726 ? $716 : $725;
          $$0$i$i$i = $727;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i, $$0$i$i$i, $715, $710);
         $728 = $__v$i$i + 8 | 0;
         $729 = SAFE_HEAP_LOAD($728 | 0, 4, 0) | 0 | 0;
         $730 = $14 + 12 | 0;
         $731 = $729 + 4 | 0;
         $732 = SAFE_HEAP_LOAD($730 | 0, 4, 0) | 0 | 0;
         $733 = $729 + 12 | 0;
         SAFE_HEAP_STORE($733 | 0, $732 | 0, 4);
         $734 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($729 | 0, $734 | 0, 4);
         $735 = $14 + 4 | 0;
         $736 = SAFE_HEAP_LOAD($735 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($731 | 0, $736 | 0, 4);
         $737 = $14 + 8 | 0;
         $738 = SAFE_HEAP_LOAD($737 | 0, 4, 0) | 0 | 0;
         $739 = $729 + 8 | 0;
         SAFE_HEAP_STORE($739 | 0, $738 | 0, 4);
         SAFE_HEAP_STORE($737 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($735 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
         $740 = $729 + 16 | 0;
         SAFE_HEAP_STORE($728 | 0, $740 | 0, 4);
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($689, $__v$i$i);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
        $741 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$0$i, $last, $db) | 0;
        $742 = ($741 | 0) == ($$0$i | 0);
        if ($742) {
         $$02 = $first;
         break L1;
        }
        $743 = SAFE_HEAP_LOAD($686 | 0, 4, 0) | 0 | 0;
        $744 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $745 = $743;
        $746 = $744;
        $747 = $745 - $746 | 0;
        $748 = ($747 | 0) / 24 & -1;
        $749 = $748 >>> 0 < 2;
        if ($749) {
         $$02 = $first;
         break L1;
        }
        $750 = $743 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp, $750);
        $751 = SAFE_HEAP_LOAD($686 | 0, 4, 0) | 0 | 0;
        $752 = $751 + -24 | 0;
        $754 = $751;
        while (1) {
         $753 = $754 + -24 | 0;
         SAFE_HEAP_STORE($686 | 0, $753 | 0, 4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($753);
         $$pre$i = SAFE_HEAP_LOAD($686 | 0, 4, 0) | 0 | 0;
         $755 = ($$pre$i | 0) == ($752 | 0);
         if ($755) {
          break;
         } else {
          $754 = $$pre$i;
         }
        }
        $756 = $751 + -48 | 0;
        $757 = SAFE_HEAP_LOAD($tmp >> 0 | 0, 1, 0) | 0 | 0;
        $758 = $757 & 1;
        $759 = $758 << 24 >> 24 == 0;
        $760 = $tmp + 8 | 0;
        $761 = SAFE_HEAP_LOAD($760 | 0, 4, 0) | 0 | 0;
        $762 = $tmp + 1 | 0;
        $763 = $759 ? $762 : $761;
        $764 = $tmp + 4 | 0;
        $765 = SAFE_HEAP_LOAD($764 | 0, 4, 0) | 0 | 0;
        $766 = $757 & 255;
        $767 = $766 >>> 1;
        $768 = $759 ? $767 : $765;
        __THREW__ = 0;
        invoke_iiii(222, $756 | 0, $763 | 0, $768 | 0) | 0;
        $769 = __THREW__;
        __THREW__ = 0;
        $770 = $769 & 1;
        if ($770) {
         $771 = ___cxa_find_matching_catch() | 0;
         $772 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
         $$0 = $772;
         $$01 = $771;
         break;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
         $$02 = $741;
         break L1;
        }
       }
      } else {
       label = 205;
      }
     } while (0);
     do {
      if ((label | 0) == 205) {
       $773 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first, $last, $db) | 0;
       $774 = ($773 | 0) == ($$first | 0);
       $775 = ($773 | 0) == ($last | 0);
       $or$cond = $774 | $775;
       if ($or$cond) {
        $$02 = $first;
        break L1;
       }
       $776 = SAFE_HEAP_LOAD($773 >> 0 | 0, 1, 0) | 0 | 0;
       $777 = $776 << 24 >> 24 == 73;
       if (!$777) {
        $$02 = $first;
        break L1;
       }
       $778 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($773, $last, $db) | 0;
       $779 = ($778 | 0) == ($773 | 0);
       if ($779) {
        $$02 = $first;
        break L1;
       }
       $780 = $db + 4 | 0;
       $781 = SAFE_HEAP_LOAD($780 | 0, 4, 0) | 0 | 0;
       $782 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $783 = $781;
       $784 = $782;
       $785 = $783 - $784 | 0;
       $786 = ($785 | 0) / 24 & -1;
       $787 = $786 >>> 0 < 2;
       if ($787) {
        $$02 = $first;
        break L1;
       }
       $788 = $781 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp3, $788);
       $789 = SAFE_HEAP_LOAD($780 | 0, 4, 0) | 0 | 0;
       $790 = $789 + -24 | 0;
       $792 = $789;
       while (1) {
        $791 = $792 + -24 | 0;
        SAFE_HEAP_STORE($780 | 0, $791 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($791);
        $$pre$i6 = SAFE_HEAP_LOAD($780 | 0, 4, 0) | 0 | 0;
        $793 = ($$pre$i6 | 0) == ($790 | 0);
        if ($793) {
         break;
        } else {
         $792 = $$pre$i6;
        }
       }
       $794 = $789 + -48 | 0;
       $795 = SAFE_HEAP_LOAD($tmp3 >> 0 | 0, 1, 0) | 0 | 0;
       $796 = $795 & 1;
       $797 = $796 << 24 >> 24 == 0;
       $798 = $tmp3 + 8 | 0;
       $799 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
       $800 = $tmp3 + 1 | 0;
       $801 = $797 ? $800 : $799;
       $802 = $tmp3 + 4 | 0;
       $803 = SAFE_HEAP_LOAD($802 | 0, 4, 0) | 0 | 0;
       $804 = $795 & 255;
       $805 = $804 >>> 1;
       $806 = $797 ? $805 : $803;
       __THREW__ = 0;
       invoke_iiii(222, $794 | 0, $801 | 0, $806 | 0) | 0;
       $807 = __THREW__;
       __THREW__ = 0;
       $808 = $807 & 1;
       if ($808) {
        $809 = ___cxa_find_matching_catch() | 0;
        $810 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp3);
        $$0 = $810;
        $$01 = $809;
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp3);
        $$02 = $778;
        break L1;
       }
      }
     } while (0);
     ___resumeException($$01 | 0);
    }
   }
  } else {
   $$02 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$02 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i14 = 0, $$0$i$i$i143 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i4 = 0, $$0$i$i$i44 = 0, $$0$i$i$i49 = 0;
 var $$0$i$i$i54 = 0, $$0$i$i$i59 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i88 = 0, $$0$i$i$i9 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i102 = 0, $__v$i$i107 = 0, $__v$i$i112 = 0, $__v$i$i117 = 0, $__v$i$i122 = 0, $__v$i$i127 = 0, $__v$i$i13 = 0, $__v$i$i132 = 0, $__v$i$i137 = 0, $__v$i$i142 = 0;
 var $__v$i$i18 = 0, $__v$i$i23 = 0, $__v$i$i28 = 0, $__v$i$i3 = 0, $__v$i$i33 = 0, $__v$i$i38 = 0, $__v$i$i43 = 0, $__v$i$i48 = 0, $__v$i$i53 = 0, $__v$i$i58 = 0, $__v$i$i65 = 0, $__v$i$i70 = 0, $__v$i$i75 = 0, $__v$i$i8 = 0, $__v$i$i80 = 0, $__v$i$i87 = 0, $__v$i$i92 = 0, $__v$i$i97 = 0, $first$ = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i142 = sp + 1256 | 0;
 $__v$i$i137 = sp + 1236 | 0;
 $__v$i$i132 = sp + 1216 | 0;
 $__v$i$i127 = sp + 1196 | 0;
 $__v$i$i122 = sp + 1176 | 0;
 $__v$i$i117 = sp + 1156 | 0;
 $__v$i$i112 = sp + 1136 | 0;
 $__v$i$i107 = sp + 1116 | 0;
 $__v$i$i102 = sp + 1096 | 0;
 $__v$i$i97 = sp + 1076 | 0;
 $__v$i$i92 = sp + 1056 | 0;
 $__v$i$i87 = sp + 1036 | 0;
 $__v$i$i80 = sp + 1016 | 0;
 $__v$i$i75 = sp + 996 | 0;
 $__v$i$i70 = sp + 976 | 0;
 $__v$i$i65 = sp + 956 | 0;
 $__v$i$i58 = sp + 936 | 0;
 $__v$i$i53 = sp + 916 | 0;
 $__v$i$i48 = sp + 896 | 0;
 $__v$i$i43 = sp + 876 | 0;
 $__v$i$i38 = sp + 856 | 0;
 $__v$i$i33 = sp + 836 | 0;
 $__v$i$i28 = sp + 816 | 0;
 $__v$i$i23 = sp + 796 | 0;
 $__v$i$i18 = sp + 776 | 0;
 $__v$i$i13 = sp + 756 | 0;
 $__v$i$i8 = sp + 736 | 0;
 $__v$i$i3 = sp + 716 | 0;
 $__v$i$i = sp + 696 | 0;
 $0 = sp + 672 | 0;
 $1 = sp + 648 | 0;
 $2 = sp + 624 | 0;
 $3 = sp + 600 | 0;
 $4 = sp + 576 | 0;
 $5 = sp + 552 | 0;
 $6 = sp + 528 | 0;
 $7 = sp + 504 | 0;
 $8 = sp + 480 | 0;
 $9 = sp + 456 | 0;
 $10 = sp + 432 | 0;
 $11 = sp + 408 | 0;
 $12 = sp + 384 | 0;
 $13 = sp + 360 | 0;
 $14 = sp + 336 | 0;
 $15 = sp + 312 | 0;
 $16 = sp + 288 | 0;
 $17 = sp + 264 | 0;
 $18 = sp + 240 | 0;
 $19 = sp + 216 | 0;
 $20 = sp + 192 | 0;
 $21 = sp + 168 | 0;
 $22 = sp + 144 | 0;
 $23 = sp + 120 | 0;
 $24 = sp + 96 | 0;
 $25 = sp + 72 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 24 | 0;
 $28 = sp;
 $29 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($29) {
   $$0 = $first;
  } else {
   $30 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $31 = $30 << 24 >> 24;
   L3 : do {
    switch ($31 | 0) {
    case 118:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0, 11860);
      $32 = $db + 4 | 0;
      $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
      $34 = $db + 8 | 0;
      $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
      $36 = $33 >>> 0 < $35 >>> 0;
      if ($36) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($33, $0);
       $37 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
       $38 = $37 + 24 | 0;
       SAFE_HEAP_STORE($32 | 0, $38 | 0, 4);
      } else {
       $39 = $db + 12 | 0;
       $40 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $41 = $33;
       $42 = $40;
       $43 = $41 - $42 | 0;
       $44 = ($43 | 0) / 24 & -1;
       $45 = $44 + 1 | 0;
       $46 = ($43 | 0) < -24;
       if ($46) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $47 = __THREW__;
        __THREW__ = 0;
        $48 = ___cxa_find_matching_catch() | 0;
        $49 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        $$01 = $49;
        $$02 = $48;
        break L3;
       }
       $50 = $35;
       $51 = $50 - $42 | 0;
       $52 = ($51 | 0) / 24 & -1;
       $53 = $52 >>> 0 < 1073741823;
       if ($53) {
        $54 = $52 << 1;
        $55 = $54 >>> 0 < $45 >>> 0;
        $56 = $55 ? $45 : $54;
        $$0$i$i$i = $56;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $44, $39);
       $57 = $__v$i$i + 8 | 0;
       $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($58, $0);
       $59 = $58 + 24 | 0;
       SAFE_HEAP_STORE($57 | 0, $59 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $60 = $first + 1 | 0;
      $$0 = $60;
      break L1;
      break;
     }
    case 119:
     {
      SAFE_HEAP_STORE($1 >> 0 | 0, 14 | 0, 1);
      $61 = $1 + 1 | 0;
      {}
      SAFE_HEAP_STORE($61 >> 0 | 0, SAFE_HEAP_LOAD(11357 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 1 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 2 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 3 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 4 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 5 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($61 + 6 >> 0 | 0, SAFE_HEAP_LOAD(11357 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      $62 = $1 + 8 | 0;
      SAFE_HEAP_STORE($62 >> 0 | 0, 0 | 0, 1);
      $63 = $1 + 12 | 0;
      SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
      $64 = $63 + 4 | 0;
      SAFE_HEAP_STORE($64 | 0, 0 | 0, 4);
      $65 = $63 + 8 | 0;
      SAFE_HEAP_STORE($65 | 0, 0 | 0, 4);
      $66 = $db + 4 | 0;
      $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
      $68 = $db + 8 | 0;
      $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
      $70 = $67 >>> 0 < $69 >>> 0;
      if ($70) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($67, $1);
       $71 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
       $72 = $71 + 24 | 0;
       SAFE_HEAP_STORE($66 | 0, $72 | 0, 4);
      } else {
       $73 = $db + 12 | 0;
       $74 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $75 = $67;
       $76 = $74;
       $77 = $75 - $76 | 0;
       $78 = ($77 | 0) / 24 & -1;
       $79 = $78 + 1 | 0;
       $80 = ($77 | 0) < -24;
       if ($80) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $81 = __THREW__;
        __THREW__ = 0;
        $82 = ___cxa_find_matching_catch() | 0;
        $83 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        $$01 = $83;
        $$02 = $82;
        break L3;
       }
       $84 = $69;
       $85 = $84 - $76 | 0;
       $86 = ($85 | 0) / 24 & -1;
       $87 = $86 >>> 0 < 1073741823;
       if ($87) {
        $88 = $86 << 1;
        $89 = $88 >>> 0 < $79 >>> 0;
        $90 = $89 ? $79 : $88;
        $$0$i$i$i4 = $90;
       } else {
        $$0$i$i$i4 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i3, $$0$i$i$i4, $78, $73);
       $91 = $__v$i$i3 + 8 | 0;
       $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92, $1);
       $93 = $92 + 24 | 0;
       SAFE_HEAP_STORE($91 | 0, $93 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i3);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i3);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $94 = $first + 1 | 0;
      $$0 = $94;
      break L1;
      break;
     }
    case 98:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($2, 11865);
      $95 = $db + 4 | 0;
      $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
      $97 = $db + 8 | 0;
      $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
      $99 = $96 >>> 0 < $98 >>> 0;
      if ($99) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96, $2);
       $100 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
       $101 = $100 + 24 | 0;
       SAFE_HEAP_STORE($95 | 0, $101 | 0, 4);
      } else {
       $102 = $db + 12 | 0;
       $103 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $104 = $96;
       $105 = $103;
       $106 = $104 - $105 | 0;
       $107 = ($106 | 0) / 24 & -1;
       $108 = $107 + 1 | 0;
       $109 = ($106 | 0) < -24;
       if ($109) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $110 = __THREW__;
        __THREW__ = 0;
        $111 = ___cxa_find_matching_catch() | 0;
        $112 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        $$01 = $112;
        $$02 = $111;
        break L3;
       }
       $113 = $98;
       $114 = $113 - $105 | 0;
       $115 = ($114 | 0) / 24 & -1;
       $116 = $115 >>> 0 < 1073741823;
       if ($116) {
        $117 = $115 << 1;
        $118 = $117 >>> 0 < $108 >>> 0;
        $119 = $118 ? $108 : $117;
        $$0$i$i$i9 = $119;
       } else {
        $$0$i$i$i9 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i8, $$0$i$i$i9, $107, $102);
       $120 = $__v$i$i8 + 8 | 0;
       $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($121, $2);
       $122 = $121 + 24 | 0;
       SAFE_HEAP_STORE($120 | 0, $122 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i8);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i8);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $123 = $first + 1 | 0;
      $$0 = $123;
      break L1;
      break;
     }
    case 99:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3, 11376);
      $124 = $db + 4 | 0;
      $125 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
      $126 = $db + 8 | 0;
      $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
      $128 = $125 >>> 0 < $127 >>> 0;
      if ($128) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($125, $3);
       $129 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
       $130 = $129 + 24 | 0;
       SAFE_HEAP_STORE($124 | 0, $130 | 0, 4);
      } else {
       $131 = $db + 12 | 0;
       $132 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $133 = $125;
       $134 = $132;
       $135 = $133 - $134 | 0;
       $136 = ($135 | 0) / 24 & -1;
       $137 = $136 + 1 | 0;
       $138 = ($135 | 0) < -24;
       if ($138) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $139 = __THREW__;
        __THREW__ = 0;
        $140 = ___cxa_find_matching_catch() | 0;
        $141 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $$01 = $141;
        $$02 = $140;
        break L3;
       }
       $142 = $127;
       $143 = $142 - $134 | 0;
       $144 = ($143 | 0) / 24 & -1;
       $145 = $144 >>> 0 < 1073741823;
       if ($145) {
        $146 = $144 << 1;
        $147 = $146 >>> 0 < $137 >>> 0;
        $148 = $147 ? $137 : $146;
        $$0$i$i$i14 = $148;
       } else {
        $$0$i$i$i14 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13, $$0$i$i$i14, $136, $131);
       $149 = $__v$i$i13 + 8 | 0;
       $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($150, $3);
       $151 = $150 + 24 | 0;
       SAFE_HEAP_STORE($149 | 0, $151 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i13);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $152 = $first + 1 | 0;
      $$0 = $152;
      break L1;
      break;
     }
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($4, 11381);
      $153 = $db + 4 | 0;
      $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
      $155 = $db + 8 | 0;
      $156 = SAFE_HEAP_LOAD($155 | 0, 4, 0) | 0 | 0;
      $157 = $154 >>> 0 < $156 >>> 0;
      if ($157) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($154, $4);
       $158 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
       $159 = $158 + 24 | 0;
       SAFE_HEAP_STORE($153 | 0, $159 | 0, 4);
      } else {
       $160 = $db + 12 | 0;
       $161 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $162 = $154;
       $163 = $161;
       $164 = $162 - $163 | 0;
       $165 = ($164 | 0) / 24 & -1;
       $166 = $165 + 1 | 0;
       $167 = ($164 | 0) < -24;
       if ($167) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $168 = __THREW__;
        __THREW__ = 0;
        $169 = ___cxa_find_matching_catch() | 0;
        $170 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $$01 = $170;
        $$02 = $169;
        break L3;
       }
       $171 = $156;
       $172 = $171 - $163 | 0;
       $173 = ($172 | 0) / 24 & -1;
       $174 = $173 >>> 0 < 1073741823;
       if ($174) {
        $175 = $173 << 1;
        $176 = $175 >>> 0 < $166 >>> 0;
        $177 = $176 ? $166 : $175;
        $$0$i$i$i19 = $177;
       } else {
        $$0$i$i$i19 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18, $$0$i$i$i19, $165, $160);
       $178 = $__v$i$i18 + 8 | 0;
       $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($179, $4);
       $180 = $179 + 24 | 0;
       SAFE_HEAP_STORE($178 | 0, $180 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i18);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $181 = $first + 1 | 0;
      $$0 = $181;
      break L1;
      break;
     }
    case 104:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5, 11393);
      $182 = $db + 4 | 0;
      $183 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
      $184 = $db + 8 | 0;
      $185 = SAFE_HEAP_LOAD($184 | 0, 4, 0) | 0 | 0;
      $186 = $183 >>> 0 < $185 >>> 0;
      if ($186) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($183, $5);
       $187 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
       $188 = $187 + 24 | 0;
       SAFE_HEAP_STORE($182 | 0, $188 | 0, 4);
      } else {
       $189 = $db + 12 | 0;
       $190 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $191 = $183;
       $192 = $190;
       $193 = $191 - $192 | 0;
       $194 = ($193 | 0) / 24 & -1;
       $195 = $194 + 1 | 0;
       $196 = ($193 | 0) < -24;
       if ($196) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $197 = __THREW__;
        __THREW__ = 0;
        $198 = ___cxa_find_matching_catch() | 0;
        $199 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$01 = $199;
        $$02 = $198;
        break L3;
       }
       $200 = $185;
       $201 = $200 - $192 | 0;
       $202 = ($201 | 0) / 24 & -1;
       $203 = $202 >>> 0 < 1073741823;
       if ($203) {
        $204 = $202 << 1;
        $205 = $204 >>> 0 < $195 >>> 0;
        $206 = $205 ? $195 : $204;
        $$0$i$i$i24 = $206;
       } else {
        $$0$i$i$i24 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23, $$0$i$i$i24, $194, $189);
       $207 = $__v$i$i23 + 8 | 0;
       $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($208, $5);
       $209 = $208 + 24 | 0;
       SAFE_HEAP_STORE($207 | 0, $209 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i23);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $210 = $first + 1 | 0;
      $$0 = $210;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($6, 11407);
      $211 = $db + 4 | 0;
      $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
      $213 = $db + 8 | 0;
      $214 = SAFE_HEAP_LOAD($213 | 0, 4, 0) | 0 | 0;
      $215 = $212 >>> 0 < $214 >>> 0;
      if ($215) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($212, $6);
       $216 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
       $217 = $216 + 24 | 0;
       SAFE_HEAP_STORE($211 | 0, $217 | 0, 4);
      } else {
       $218 = $db + 12 | 0;
       $219 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $220 = $212;
       $221 = $219;
       $222 = $220 - $221 | 0;
       $223 = ($222 | 0) / 24 & -1;
       $224 = $223 + 1 | 0;
       $225 = ($222 | 0) < -24;
       if ($225) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $226 = __THREW__;
        __THREW__ = 0;
        $227 = ___cxa_find_matching_catch() | 0;
        $228 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
        $$01 = $228;
        $$02 = $227;
        break L3;
       }
       $229 = $214;
       $230 = $229 - $221 | 0;
       $231 = ($230 | 0) / 24 & -1;
       $232 = $231 >>> 0 < 1073741823;
       if ($232) {
        $233 = $231 << 1;
        $234 = $233 >>> 0 < $224 >>> 0;
        $235 = $234 ? $224 : $233;
        $$0$i$i$i29 = $235;
       } else {
        $$0$i$i$i29 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i28, $$0$i$i$i29, $223, $218);
       $236 = $__v$i$i28 + 8 | 0;
       $237 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($237, $6);
       $238 = $237 + 24 | 0;
       SAFE_HEAP_STORE($236 | 0, $238 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i28);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i28);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $239 = $first + 1 | 0;
      $$0 = $239;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($7, 11413);
      $240 = $db + 4 | 0;
      $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
      $242 = $db + 8 | 0;
      $243 = SAFE_HEAP_LOAD($242 | 0, 4, 0) | 0 | 0;
      $244 = $241 >>> 0 < $243 >>> 0;
      if ($244) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($241, $7);
       $245 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
       $246 = $245 + 24 | 0;
       SAFE_HEAP_STORE($240 | 0, $246 | 0, 4);
      } else {
       $247 = $db + 12 | 0;
       $248 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $249 = $241;
       $250 = $248;
       $251 = $249 - $250 | 0;
       $252 = ($251 | 0) / 24 & -1;
       $253 = $252 + 1 | 0;
       $254 = ($251 | 0) < -24;
       if ($254) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $255 = __THREW__;
        __THREW__ = 0;
        $256 = ___cxa_find_matching_catch() | 0;
        $257 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        $$01 = $257;
        $$02 = $256;
        break L3;
       }
       $258 = $243;
       $259 = $258 - $250 | 0;
       $260 = ($259 | 0) / 24 & -1;
       $261 = $260 >>> 0 < 1073741823;
       if ($261) {
        $262 = $260 << 1;
        $263 = $262 >>> 0 < $253 >>> 0;
        $264 = $263 ? $253 : $262;
        $$0$i$i$i34 = $264;
       } else {
        $$0$i$i$i34 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i33, $$0$i$i$i34, $252, $247);
       $265 = $__v$i$i33 + 8 | 0;
       $266 = SAFE_HEAP_LOAD($265 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($266, $7);
       $267 = $266 + 24 | 0;
       SAFE_HEAP_STORE($265 | 0, $267 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i33);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i33);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $268 = $first + 1 | 0;
      $$0 = $268;
      break L1;
      break;
     }
    case 105:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($8, 11870);
      $269 = $db + 4 | 0;
      $270 = SAFE_HEAP_LOAD($269 | 0, 4, 0) | 0 | 0;
      $271 = $db + 8 | 0;
      $272 = SAFE_HEAP_LOAD($271 | 0, 4, 0) | 0 | 0;
      $273 = $270 >>> 0 < $272 >>> 0;
      if ($273) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($270, $8);
       $274 = SAFE_HEAP_LOAD($269 | 0, 4, 0) | 0 | 0;
       $275 = $274 + 24 | 0;
       SAFE_HEAP_STORE($269 | 0, $275 | 0, 4);
      } else {
       $276 = $db + 12 | 0;
       $277 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $278 = $270;
       $279 = $277;
       $280 = $278 - $279 | 0;
       $281 = ($280 | 0) / 24 & -1;
       $282 = $281 + 1 | 0;
       $283 = ($280 | 0) < -24;
       if ($283) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $284 = __THREW__;
        __THREW__ = 0;
        $285 = ___cxa_find_matching_catch() | 0;
        $286 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        $$01 = $286;
        $$02 = $285;
        break L3;
       }
       $287 = $272;
       $288 = $287 - $279 | 0;
       $289 = ($288 | 0) / 24 & -1;
       $290 = $289 >>> 0 < 1073741823;
       if ($290) {
        $291 = $289 << 1;
        $292 = $291 >>> 0 < $282 >>> 0;
        $293 = $292 ? $282 : $291;
        $$0$i$i$i39 = $293;
       } else {
        $$0$i$i$i39 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38, $$0$i$i$i39, $281, $276);
       $294 = $__v$i$i38 + 8 | 0;
       $295 = SAFE_HEAP_LOAD($294 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($295, $8);
       $296 = $295 + 24 | 0;
       SAFE_HEAP_STORE($294 | 0, $296 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i38);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $297 = $first + 1 | 0;
      $$0 = $297;
      break L1;
      break;
     }
    case 106:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($9, 11874);
      $298 = $db + 4 | 0;
      $299 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
      $300 = $db + 8 | 0;
      $301 = SAFE_HEAP_LOAD($300 | 0, 4, 0) | 0 | 0;
      $302 = $299 >>> 0 < $301 >>> 0;
      if ($302) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($299, $9);
       $303 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
       $304 = $303 + 24 | 0;
       SAFE_HEAP_STORE($298 | 0, $304 | 0, 4);
      } else {
       $305 = $db + 12 | 0;
       $306 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $307 = $299;
       $308 = $306;
       $309 = $307 - $308 | 0;
       $310 = ($309 | 0) / 24 & -1;
       $311 = $310 + 1 | 0;
       $312 = ($309 | 0) < -24;
       if ($312) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $313 = __THREW__;
        __THREW__ = 0;
        $314 = ___cxa_find_matching_catch() | 0;
        $315 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
        $$01 = $315;
        $$02 = $314;
        break L3;
       }
       $316 = $301;
       $317 = $316 - $308 | 0;
       $318 = ($317 | 0) / 24 & -1;
       $319 = $318 >>> 0 < 1073741823;
       if ($319) {
        $320 = $318 << 1;
        $321 = $320 >>> 0 < $311 >>> 0;
        $322 = $321 ? $311 : $320;
        $$0$i$i$i44 = $322;
       } else {
        $$0$i$i$i44 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i43, $$0$i$i$i44, $310, $305);
       $323 = $__v$i$i43 + 8 | 0;
       $324 = SAFE_HEAP_LOAD($323 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($324, $9);
       $325 = $324 + 24 | 0;
       SAFE_HEAP_STORE($323 | 0, $325 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i43);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i43);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $326 = $first + 1 | 0;
      $$0 = $326;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($10, 11887);
      $327 = $db + 4 | 0;
      $328 = SAFE_HEAP_LOAD($327 | 0, 4, 0) | 0 | 0;
      $329 = $db + 8 | 0;
      $330 = SAFE_HEAP_LOAD($329 | 0, 4, 0) | 0 | 0;
      $331 = $328 >>> 0 < $330 >>> 0;
      if ($331) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($328, $10);
       $332 = SAFE_HEAP_LOAD($327 | 0, 4, 0) | 0 | 0;
       $333 = $332 + 24 | 0;
       SAFE_HEAP_STORE($327 | 0, $333 | 0, 4);
      } else {
       $334 = $db + 12 | 0;
       $335 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $336 = $328;
       $337 = $335;
       $338 = $336 - $337 | 0;
       $339 = ($338 | 0) / 24 & -1;
       $340 = $339 + 1 | 0;
       $341 = ($338 | 0) < -24;
       if ($341) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $342 = __THREW__;
        __THREW__ = 0;
        $343 = ___cxa_find_matching_catch() | 0;
        $344 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
        $$01 = $344;
        $$02 = $343;
        break L3;
       }
       $345 = $330;
       $346 = $345 - $337 | 0;
       $347 = ($346 | 0) / 24 & -1;
       $348 = $347 >>> 0 < 1073741823;
       if ($348) {
        $349 = $347 << 1;
        $350 = $349 >>> 0 < $340 >>> 0;
        $351 = $350 ? $340 : $349;
        $$0$i$i$i49 = $351;
       } else {
        $$0$i$i$i49 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i48, $$0$i$i$i49, $339, $334);
       $352 = $__v$i$i48 + 8 | 0;
       $353 = SAFE_HEAP_LOAD($352 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($353, $10);
       $354 = $353 + 24 | 0;
       SAFE_HEAP_STORE($352 | 0, $354 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i48);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i48);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $355 = $first + 1 | 0;
      $$0 = $355;
      break L1;
      break;
     }
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($11, 11892);
      $356 = $db + 4 | 0;
      $357 = SAFE_HEAP_LOAD($356 | 0, 4, 0) | 0 | 0;
      $358 = $db + 8 | 0;
      $359 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
      $360 = $357 >>> 0 < $359 >>> 0;
      if ($360) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($357, $11);
       $361 = SAFE_HEAP_LOAD($356 | 0, 4, 0) | 0 | 0;
       $362 = $361 + 24 | 0;
       SAFE_HEAP_STORE($356 | 0, $362 | 0, 4);
      } else {
       $363 = $db + 12 | 0;
       $364 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $365 = $357;
       $366 = $364;
       $367 = $365 - $366 | 0;
       $368 = ($367 | 0) / 24 & -1;
       $369 = $368 + 1 | 0;
       $370 = ($367 | 0) < -24;
       if ($370) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $371 = __THREW__;
        __THREW__ = 0;
        $372 = ___cxa_find_matching_catch() | 0;
        $373 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        $$01 = $373;
        $$02 = $372;
        break L3;
       }
       $374 = $359;
       $375 = $374 - $366 | 0;
       $376 = ($375 | 0) / 24 & -1;
       $377 = $376 >>> 0 < 1073741823;
       if ($377) {
        $378 = $376 << 1;
        $379 = $378 >>> 0 < $369 >>> 0;
        $380 = $379 ? $369 : $378;
        $$0$i$i$i54 = $380;
       } else {
        $$0$i$i$i54 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i53, $$0$i$i$i54, $368, $363);
       $381 = $__v$i$i53 + 8 | 0;
       $382 = SAFE_HEAP_LOAD($381 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($382, $11);
       $383 = $382 + 24 | 0;
       SAFE_HEAP_STORE($381 | 0, $383 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i53);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i53);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $384 = $first + 1 | 0;
      $$0 = $384;
      break L1;
      break;
     }
    case 120:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12, 11906);
      $385 = $db + 4 | 0;
      $386 = SAFE_HEAP_LOAD($385 | 0, 4, 0) | 0 | 0;
      $387 = $db + 8 | 0;
      $388 = SAFE_HEAP_LOAD($387 | 0, 4, 0) | 0 | 0;
      $389 = $386 >>> 0 < $388 >>> 0;
      if ($389) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($386, $12);
       $390 = SAFE_HEAP_LOAD($385 | 0, 4, 0) | 0 | 0;
       $391 = $390 + 24 | 0;
       SAFE_HEAP_STORE($385 | 0, $391 | 0, 4);
      } else {
       $392 = $db + 12 | 0;
       $393 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $394 = $386;
       $395 = $393;
       $396 = $394 - $395 | 0;
       $397 = ($396 | 0) / 24 & -1;
       $398 = $397 + 1 | 0;
       $399 = ($396 | 0) < -24;
       if ($399) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $400 = __THREW__;
        __THREW__ = 0;
        $401 = ___cxa_find_matching_catch() | 0;
        $402 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        $$01 = $402;
        $$02 = $401;
        break L3;
       }
       $403 = $388;
       $404 = $403 - $395 | 0;
       $405 = ($404 | 0) / 24 & -1;
       $406 = $405 >>> 0 < 1073741823;
       if ($406) {
        $407 = $405 << 1;
        $408 = $407 >>> 0 < $398 >>> 0;
        $409 = $408 ? $398 : $407;
        $$0$i$i$i59 = $409;
       } else {
        $$0$i$i$i59 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i58, $$0$i$i$i59, $397, $392);
       $410 = $__v$i$i58 + 8 | 0;
       $411 = SAFE_HEAP_LOAD($410 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($411, $12);
       $412 = $411 + 24 | 0;
       SAFE_HEAP_STORE($410 | 0, $412 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i58);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i58);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $413 = $first + 1 | 0;
      $$0 = $413;
      break L1;
      break;
     }
    case 121:
     {
      $414 = _malloc(32) | 0;
      $415 = $13 + 8 | 0;
      SAFE_HEAP_STORE($415 | 0, $414 | 0, 4);
      SAFE_HEAP_STORE($13 | 0, 33 | 0, 4);
      $416 = $13 + 4 | 0;
      SAFE_HEAP_STORE($416 | 0, 18 | 0, 4);
      dest = $414;
      src = 11916;
      stop = dest + 18 | 0;
      do {
       SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       dest = dest + 1 | 0;
       src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      $417 = $414 + 18 | 0;
      SAFE_HEAP_STORE($417 >> 0 | 0, 0 | 0, 1);
      $418 = $13 + 12 | 0;
      SAFE_HEAP_STORE($418 | 0, 0 | 0, 4);
      $419 = $418 + 4 | 0;
      SAFE_HEAP_STORE($419 | 0, 0 | 0, 4);
      $420 = $418 + 8 | 0;
      SAFE_HEAP_STORE($420 | 0, 0 | 0, 4);
      $421 = $db + 4 | 0;
      $422 = SAFE_HEAP_LOAD($421 | 0, 4, 0) | 0 | 0;
      $423 = $db + 8 | 0;
      $424 = SAFE_HEAP_LOAD($423 | 0, 4, 0) | 0 | 0;
      $425 = $422 >>> 0 < $424 >>> 0;
      if ($425) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($422, $13);
       $426 = SAFE_HEAP_LOAD($421 | 0, 4, 0) | 0 | 0;
       $427 = $426 + 24 | 0;
       SAFE_HEAP_STORE($421 | 0, $427 | 0, 4);
      } else {
       $428 = $db + 12 | 0;
       $429 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $430 = $422;
       $431 = $429;
       $432 = $430 - $431 | 0;
       $433 = ($432 | 0) / 24 & -1;
       $434 = $433 + 1 | 0;
       $435 = ($432 | 0) < -24;
       if ($435) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $436 = __THREW__;
        __THREW__ = 0;
        $437 = ___cxa_find_matching_catch() | 0;
        $438 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
        $$01 = $438;
        $$02 = $437;
        break L3;
       }
       $439 = $424;
       $440 = $439 - $431 | 0;
       $441 = ($440 | 0) / 24 & -1;
       $442 = $441 >>> 0 < 1073741823;
       if ($442) {
        $443 = $441 << 1;
        $444 = $443 >>> 0 < $434 >>> 0;
        $445 = $444 ? $434 : $443;
        $$0$i$i$i66 = $445;
       } else {
        $$0$i$i$i66 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i65, $$0$i$i$i66, $433, $428);
       $446 = $__v$i$i65 + 8 | 0;
       $447 = SAFE_HEAP_LOAD($446 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($447, $13);
       $448 = $447 + 24 | 0;
       SAFE_HEAP_STORE($446 | 0, $448 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i65);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i65);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $449 = $first + 1 | 0;
      $$0 = $449;
      break L1;
      break;
     }
    case 110:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($14, 11443);
      $450 = $db + 4 | 0;
      $451 = SAFE_HEAP_LOAD($450 | 0, 4, 0) | 0 | 0;
      $452 = $db + 8 | 0;
      $453 = SAFE_HEAP_LOAD($452 | 0, 4, 0) | 0 | 0;
      $454 = $451 >>> 0 < $453 >>> 0;
      if ($454) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($451, $14);
       $455 = SAFE_HEAP_LOAD($450 | 0, 4, 0) | 0 | 0;
       $456 = $455 + 24 | 0;
       SAFE_HEAP_STORE($450 | 0, $456 | 0, 4);
      } else {
       $457 = $db + 12 | 0;
       $458 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $459 = $451;
       $460 = $458;
       $461 = $459 - $460 | 0;
       $462 = ($461 | 0) / 24 & -1;
       $463 = $462 + 1 | 0;
       $464 = ($461 | 0) < -24;
       if ($464) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $465 = __THREW__;
        __THREW__ = 0;
        $466 = ___cxa_find_matching_catch() | 0;
        $467 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
        $$01 = $467;
        $$02 = $466;
        break L3;
       }
       $468 = $453;
       $469 = $468 - $460 | 0;
       $470 = ($469 | 0) / 24 & -1;
       $471 = $470 >>> 0 < 1073741823;
       if ($471) {
        $472 = $470 << 1;
        $473 = $472 >>> 0 < $463 >>> 0;
        $474 = $473 ? $463 : $472;
        $$0$i$i$i71 = $474;
       } else {
        $$0$i$i$i71 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i70, $$0$i$i$i71, $462, $457);
       $475 = $__v$i$i70 + 8 | 0;
       $476 = SAFE_HEAP_LOAD($475 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($476, $14);
       $477 = $476 + 24 | 0;
       SAFE_HEAP_STORE($475 | 0, $477 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i70);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i70);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $478 = $first + 1 | 0;
      $$0 = $478;
      break L1;
      break;
     }
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($15, 11452);
      $479 = $db + 4 | 0;
      $480 = SAFE_HEAP_LOAD($479 | 0, 4, 0) | 0 | 0;
      $481 = $db + 8 | 0;
      $482 = SAFE_HEAP_LOAD($481 | 0, 4, 0) | 0 | 0;
      $483 = $480 >>> 0 < $482 >>> 0;
      if ($483) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($480, $15);
       $484 = SAFE_HEAP_LOAD($479 | 0, 4, 0) | 0 | 0;
       $485 = $484 + 24 | 0;
       SAFE_HEAP_STORE($479 | 0, $485 | 0, 4);
      } else {
       $486 = $db + 12 | 0;
       $487 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $488 = $480;
       $489 = $487;
       $490 = $488 - $489 | 0;
       $491 = ($490 | 0) / 24 & -1;
       $492 = $491 + 1 | 0;
       $493 = ($490 | 0) < -24;
       if ($493) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $494 = __THREW__;
        __THREW__ = 0;
        $495 = ___cxa_find_matching_catch() | 0;
        $496 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
        $$01 = $496;
        $$02 = $495;
        break L3;
       }
       $497 = $482;
       $498 = $497 - $489 | 0;
       $499 = ($498 | 0) / 24 & -1;
       $500 = $499 >>> 0 < 1073741823;
       if ($500) {
        $501 = $499 << 1;
        $502 = $501 >>> 0 < $492 >>> 0;
        $503 = $502 ? $492 : $501;
        $$0$i$i$i76 = $503;
       } else {
        $$0$i$i$i76 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i75, $$0$i$i$i76, $491, $486);
       $504 = $__v$i$i75 + 8 | 0;
       $505 = SAFE_HEAP_LOAD($504 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($505, $15);
       $506 = $505 + 24 | 0;
       SAFE_HEAP_STORE($504 | 0, $506 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i75);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i75);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $507 = $first + 1 | 0;
      $$0 = $507;
      break L1;
      break;
     }
    case 102:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($16, 11935);
      $508 = $db + 4 | 0;
      $509 = SAFE_HEAP_LOAD($508 | 0, 4, 0) | 0 | 0;
      $510 = $db + 8 | 0;
      $511 = SAFE_HEAP_LOAD($510 | 0, 4, 0) | 0 | 0;
      $512 = $509 >>> 0 < $511 >>> 0;
      if ($512) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($509, $16);
       $513 = SAFE_HEAP_LOAD($508 | 0, 4, 0) | 0 | 0;
       $514 = $513 + 24 | 0;
       SAFE_HEAP_STORE($508 | 0, $514 | 0, 4);
      } else {
       $515 = $db + 12 | 0;
       $516 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $517 = $509;
       $518 = $516;
       $519 = $517 - $518 | 0;
       $520 = ($519 | 0) / 24 & -1;
       $521 = $520 + 1 | 0;
       $522 = ($519 | 0) < -24;
       if ($522) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $523 = __THREW__;
        __THREW__ = 0;
        $524 = ___cxa_find_matching_catch() | 0;
        $525 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
        $$01 = $525;
        $$02 = $524;
        break L3;
       }
       $526 = $511;
       $527 = $526 - $518 | 0;
       $528 = ($527 | 0) / 24 & -1;
       $529 = $528 >>> 0 < 1073741823;
       if ($529) {
        $530 = $528 << 1;
        $531 = $530 >>> 0 < $521 >>> 0;
        $532 = $531 ? $521 : $530;
        $$0$i$i$i81 = $532;
       } else {
        $$0$i$i$i81 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i80, $$0$i$i$i81, $520, $515);
       $533 = $__v$i$i80 + 8 | 0;
       $534 = SAFE_HEAP_LOAD($533 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($534, $16);
       $535 = $534 + 24 | 0;
       SAFE_HEAP_STORE($533 | 0, $535 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i80);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i80);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $536 = $first + 1 | 0;
      $$0 = $536;
      break L1;
      break;
     }
    case 100:
     {
      SAFE_HEAP_STORE($17 >> 0 | 0, 12 | 0, 1);
      $537 = $17 + 1 | 0;
      {}
      SAFE_HEAP_STORE($537 >> 0 | 0, SAFE_HEAP_LOAD(11941 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($537 + 1 >> 0 | 0, SAFE_HEAP_LOAD(11941 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($537 + 2 >> 0 | 0, SAFE_HEAP_LOAD(11941 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($537 + 3 >> 0 | 0, SAFE_HEAP_LOAD(11941 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($537 + 4 >> 0 | 0, SAFE_HEAP_LOAD(11941 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      SAFE_HEAP_STORE($537 + 5 >> 0 | 0, SAFE_HEAP_LOAD(11941 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
      $538 = $17 + 7 | 0;
      SAFE_HEAP_STORE($538 >> 0 | 0, 0 | 0, 1);
      $539 = $17 + 12 | 0;
      SAFE_HEAP_STORE($539 | 0, 0 | 0, 4);
      $540 = $539 + 4 | 0;
      SAFE_HEAP_STORE($540 | 0, 0 | 0, 4);
      $541 = $539 + 8 | 0;
      SAFE_HEAP_STORE($541 | 0, 0 | 0, 4);
      $542 = $db + 4 | 0;
      $543 = SAFE_HEAP_LOAD($542 | 0, 4, 0) | 0 | 0;
      $544 = $db + 8 | 0;
      $545 = SAFE_HEAP_LOAD($544 | 0, 4, 0) | 0 | 0;
      $546 = $543 >>> 0 < $545 >>> 0;
      if ($546) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($543, $17);
       $547 = SAFE_HEAP_LOAD($542 | 0, 4, 0) | 0 | 0;
       $548 = $547 + 24 | 0;
       SAFE_HEAP_STORE($542 | 0, $548 | 0, 4);
      } else {
       $549 = $db + 12 | 0;
       $550 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $551 = $543;
       $552 = $550;
       $553 = $551 - $552 | 0;
       $554 = ($553 | 0) / 24 & -1;
       $555 = $554 + 1 | 0;
       $556 = ($553 | 0) < -24;
       if ($556) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $557 = __THREW__;
        __THREW__ = 0;
        $558 = ___cxa_find_matching_catch() | 0;
        $559 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
        $$01 = $559;
        $$02 = $558;
        break L3;
       }
       $560 = $545;
       $561 = $560 - $552 | 0;
       $562 = ($561 | 0) / 24 & -1;
       $563 = $562 >>> 0 < 1073741823;
       if ($563) {
        $564 = $562 << 1;
        $565 = $564 >>> 0 < $555 >>> 0;
        $566 = $565 ? $555 : $564;
        $$0$i$i$i88 = $566;
       } else {
        $$0$i$i$i88 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i87, $$0$i$i$i88, $554, $549);
       $567 = $__v$i$i87 + 8 | 0;
       $568 = SAFE_HEAP_LOAD($567 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($568, $17);
       $569 = $568 + 24 | 0;
       SAFE_HEAP_STORE($567 | 0, $569 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i87);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i87);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
      $570 = $first + 1 | 0;
      $$0 = $570;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($18, 11948);
      $571 = $db + 4 | 0;
      $572 = SAFE_HEAP_LOAD($571 | 0, 4, 0) | 0 | 0;
      $573 = $db + 8 | 0;
      $574 = SAFE_HEAP_LOAD($573 | 0, 4, 0) | 0 | 0;
      $575 = $572 >>> 0 < $574 >>> 0;
      if ($575) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($572, $18);
       $576 = SAFE_HEAP_LOAD($571 | 0, 4, 0) | 0 | 0;
       $577 = $576 + 24 | 0;
       SAFE_HEAP_STORE($571 | 0, $577 | 0, 4);
      } else {
       $578 = $db + 12 | 0;
       $579 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $580 = $572;
       $581 = $579;
       $582 = $580 - $581 | 0;
       $583 = ($582 | 0) / 24 & -1;
       $584 = $583 + 1 | 0;
       $585 = ($582 | 0) < -24;
       if ($585) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $586 = __THREW__;
        __THREW__ = 0;
        $587 = ___cxa_find_matching_catch() | 0;
        $588 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
        $$01 = $588;
        $$02 = $587;
        break L3;
       }
       $589 = $574;
       $590 = $589 - $581 | 0;
       $591 = ($590 | 0) / 24 & -1;
       $592 = $591 >>> 0 < 1073741823;
       if ($592) {
        $593 = $591 << 1;
        $594 = $593 >>> 0 < $584 >>> 0;
        $595 = $594 ? $584 : $593;
        $$0$i$i$i93 = $595;
       } else {
        $$0$i$i$i93 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i92, $$0$i$i$i93, $583, $578);
       $596 = $__v$i$i92 + 8 | 0;
       $597 = SAFE_HEAP_LOAD($596 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($597, $18);
       $598 = $597 + 24 | 0;
       SAFE_HEAP_STORE($596 | 0, $598 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i92);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i92);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $599 = $first + 1 | 0;
      $$0 = $599;
      break L1;
      break;
     }
    case 103:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19, 11960);
      $600 = $db + 4 | 0;
      $601 = SAFE_HEAP_LOAD($600 | 0, 4, 0) | 0 | 0;
      $602 = $db + 8 | 0;
      $603 = SAFE_HEAP_LOAD($602 | 0, 4, 0) | 0 | 0;
      $604 = $601 >>> 0 < $603 >>> 0;
      if ($604) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($601, $19);
       $605 = SAFE_HEAP_LOAD($600 | 0, 4, 0) | 0 | 0;
       $606 = $605 + 24 | 0;
       SAFE_HEAP_STORE($600 | 0, $606 | 0, 4);
      } else {
       $607 = $db + 12 | 0;
       $608 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $609 = $601;
       $610 = $608;
       $611 = $609 - $610 | 0;
       $612 = ($611 | 0) / 24 & -1;
       $613 = $612 + 1 | 0;
       $614 = ($611 | 0) < -24;
       if ($614) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $615 = __THREW__;
        __THREW__ = 0;
        $616 = ___cxa_find_matching_catch() | 0;
        $617 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
        $$01 = $617;
        $$02 = $616;
        break L3;
       }
       $618 = $603;
       $619 = $618 - $610 | 0;
       $620 = ($619 | 0) / 24 & -1;
       $621 = $620 >>> 0 < 1073741823;
       if ($621) {
        $622 = $620 << 1;
        $623 = $622 >>> 0 < $613 >>> 0;
        $624 = $623 ? $613 : $622;
        $$0$i$i$i98 = $624;
       } else {
        $$0$i$i$i98 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i97, $$0$i$i$i98, $612, $607);
       $625 = $__v$i$i97 + 8 | 0;
       $626 = SAFE_HEAP_LOAD($625 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($626, $19);
       $627 = $626 + 24 | 0;
       SAFE_HEAP_STORE($625 | 0, $627 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i97);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i97);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $628 = $first + 1 | 0;
      $$0 = $628;
      break L1;
      break;
     }
    case 122:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($20, 11971);
      $629 = $db + 4 | 0;
      $630 = SAFE_HEAP_LOAD($629 | 0, 4, 0) | 0 | 0;
      $631 = $db + 8 | 0;
      $632 = SAFE_HEAP_LOAD($631 | 0, 4, 0) | 0 | 0;
      $633 = $630 >>> 0 < $632 >>> 0;
      if ($633) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($630, $20);
       $634 = SAFE_HEAP_LOAD($629 | 0, 4, 0) | 0 | 0;
       $635 = $634 + 24 | 0;
       SAFE_HEAP_STORE($629 | 0, $635 | 0, 4);
      } else {
       $636 = $db + 12 | 0;
       $637 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $638 = $630;
       $639 = $637;
       $640 = $638 - $639 | 0;
       $641 = ($640 | 0) / 24 & -1;
       $642 = $641 + 1 | 0;
       $643 = ($640 | 0) < -24;
       if ($643) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $644 = __THREW__;
        __THREW__ = 0;
        $645 = ___cxa_find_matching_catch() | 0;
        $646 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
        $$01 = $646;
        $$02 = $645;
        break L3;
       }
       $647 = $632;
       $648 = $647 - $639 | 0;
       $649 = ($648 | 0) / 24 & -1;
       $650 = $649 >>> 0 < 1073741823;
       if ($650) {
        $651 = $649 << 1;
        $652 = $651 >>> 0 < $642 >>> 0;
        $653 = $652 ? $642 : $651;
        $$0$i$i$i103 = $653;
       } else {
        $$0$i$i$i103 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i102, $$0$i$i$i103, $641, $636);
       $654 = $__v$i$i102 + 8 | 0;
       $655 = SAFE_HEAP_LOAD($654 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($655, $20);
       $656 = $655 + 24 | 0;
       SAFE_HEAP_STORE($654 | 0, $656 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i102);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i102);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
      $657 = $first + 1 | 0;
      $$0 = $657;
      break L1;
      break;
     }
    case 117:
     {
      $658 = $first + 1 | 0;
      $659 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($658, $last, $db) | 0;
      $660 = ($659 | 0) == ($658 | 0);
      $first$ = $660 ? $first : $659;
      STACKTOP = sp;
      return $first$ | 0;
      break;
     }
    case 68:
     {
      $661 = $first + 1 | 0;
      $662 = ($661 | 0) == ($last | 0);
      if ($662) {
       $$0 = $first;
       break L1;
      }
      $663 = SAFE_HEAP_LOAD($661 >> 0 | 0, 1, 0) | 0 | 0;
      $664 = $663 << 24 >> 24;
      switch ($664 | 0) {
      case 100:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21, 11975);
        $665 = $db + 4 | 0;
        $666 = SAFE_HEAP_LOAD($665 | 0, 4, 0) | 0 | 0;
        $667 = $db + 8 | 0;
        $668 = SAFE_HEAP_LOAD($667 | 0, 4, 0) | 0 | 0;
        $669 = $666 >>> 0 < $668 >>> 0;
        if ($669) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($666, $21);
         $670 = SAFE_HEAP_LOAD($665 | 0, 4, 0) | 0 | 0;
         $671 = $670 + 24 | 0;
         SAFE_HEAP_STORE($665 | 0, $671 | 0, 4);
        } else {
         $672 = $db + 12 | 0;
         $673 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $674 = $666;
         $675 = $673;
         $676 = $674 - $675 | 0;
         $677 = ($676 | 0) / 24 & -1;
         $678 = $677 + 1 | 0;
         $679 = ($676 | 0) < -24;
         if ($679) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $680 = __THREW__;
          __THREW__ = 0;
          $681 = ___cxa_find_matching_catch() | 0;
          $682 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
          $$01 = $682;
          $$02 = $681;
          break L3;
         }
         $683 = $668;
         $684 = $683 - $675 | 0;
         $685 = ($684 | 0) / 24 & -1;
         $686 = $685 >>> 0 < 1073741823;
         if ($686) {
          $687 = $685 << 1;
          $688 = $687 >>> 0 < $678 >>> 0;
          $689 = $688 ? $678 : $687;
          $$0$i$i$i108 = $689;
         } else {
          $$0$i$i$i108 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i107, $$0$i$i$i108, $677, $672);
         $690 = $__v$i$i107 + 8 | 0;
         $691 = SAFE_HEAP_LOAD($690 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($691, $21);
         $692 = $691 + 24 | 0;
         SAFE_HEAP_STORE($690 | 0, $692 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i107);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i107);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
        $693 = $first + 2 | 0;
        $$0 = $693;
        break L1;
        break;
       }
      case 101:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22, 11985);
        $694 = $db + 4 | 0;
        $695 = SAFE_HEAP_LOAD($694 | 0, 4, 0) | 0 | 0;
        $696 = $db + 8 | 0;
        $697 = SAFE_HEAP_LOAD($696 | 0, 4, 0) | 0 | 0;
        $698 = $695 >>> 0 < $697 >>> 0;
        if ($698) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($695, $22);
         $699 = SAFE_HEAP_LOAD($694 | 0, 4, 0) | 0 | 0;
         $700 = $699 + 24 | 0;
         SAFE_HEAP_STORE($694 | 0, $700 | 0, 4);
        } else {
         $701 = $db + 12 | 0;
         $702 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $703 = $695;
         $704 = $702;
         $705 = $703 - $704 | 0;
         $706 = ($705 | 0) / 24 & -1;
         $707 = $706 + 1 | 0;
         $708 = ($705 | 0) < -24;
         if ($708) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $709 = __THREW__;
          __THREW__ = 0;
          $710 = ___cxa_find_matching_catch() | 0;
          $711 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
          $$01 = $711;
          $$02 = $710;
          break L3;
         }
         $712 = $697;
         $713 = $712 - $704 | 0;
         $714 = ($713 | 0) / 24 & -1;
         $715 = $714 >>> 0 < 1073741823;
         if ($715) {
          $716 = $714 << 1;
          $717 = $716 >>> 0 < $707 >>> 0;
          $718 = $717 ? $707 : $716;
          $$0$i$i$i113 = $718;
         } else {
          $$0$i$i$i113 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i112, $$0$i$i$i113, $706, $701);
         $719 = $__v$i$i112 + 8 | 0;
         $720 = SAFE_HEAP_LOAD($719 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($720, $22);
         $721 = $720 + 24 | 0;
         SAFE_HEAP_STORE($719 | 0, $721 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i112);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i112);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
        $722 = $first + 2 | 0;
        $$0 = $722;
        break L1;
        break;
       }
      case 102:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($23, 11996);
        $723 = $db + 4 | 0;
        $724 = SAFE_HEAP_LOAD($723 | 0, 4, 0) | 0 | 0;
        $725 = $db + 8 | 0;
        $726 = SAFE_HEAP_LOAD($725 | 0, 4, 0) | 0 | 0;
        $727 = $724 >>> 0 < $726 >>> 0;
        if ($727) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($724, $23);
         $728 = SAFE_HEAP_LOAD($723 | 0, 4, 0) | 0 | 0;
         $729 = $728 + 24 | 0;
         SAFE_HEAP_STORE($723 | 0, $729 | 0, 4);
        } else {
         $730 = $db + 12 | 0;
         $731 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $732 = $724;
         $733 = $731;
         $734 = $732 - $733 | 0;
         $735 = ($734 | 0) / 24 & -1;
         $736 = $735 + 1 | 0;
         $737 = ($734 | 0) < -24;
         if ($737) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $738 = __THREW__;
          __THREW__ = 0;
          $739 = ___cxa_find_matching_catch() | 0;
          $740 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
          $$01 = $740;
          $$02 = $739;
          break L3;
         }
         $741 = $726;
         $742 = $741 - $733 | 0;
         $743 = ($742 | 0) / 24 & -1;
         $744 = $743 >>> 0 < 1073741823;
         if ($744) {
          $745 = $743 << 1;
          $746 = $745 >>> 0 < $736 >>> 0;
          $747 = $746 ? $736 : $745;
          $$0$i$i$i118 = $747;
         } else {
          $$0$i$i$i118 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i117, $$0$i$i$i118, $735, $730);
         $748 = $__v$i$i117 + 8 | 0;
         $749 = SAFE_HEAP_LOAD($748 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($749, $23);
         $750 = $749 + 24 | 0;
         SAFE_HEAP_STORE($748 | 0, $750 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i117);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i117);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
        $751 = $first + 2 | 0;
        $$0 = $751;
        break L1;
        break;
       }
      case 104:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24, 12006);
        $752 = $db + 4 | 0;
        $753 = SAFE_HEAP_LOAD($752 | 0, 4, 0) | 0 | 0;
        $754 = $db + 8 | 0;
        $755 = SAFE_HEAP_LOAD($754 | 0, 4, 0) | 0 | 0;
        $756 = $753 >>> 0 < $755 >>> 0;
        if ($756) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($753, $24);
         $757 = SAFE_HEAP_LOAD($752 | 0, 4, 0) | 0 | 0;
         $758 = $757 + 24 | 0;
         SAFE_HEAP_STORE($752 | 0, $758 | 0, 4);
        } else {
         $759 = $db + 12 | 0;
         $760 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $761 = $753;
         $762 = $760;
         $763 = $761 - $762 | 0;
         $764 = ($763 | 0) / 24 & -1;
         $765 = $764 + 1 | 0;
         $766 = ($763 | 0) < -24;
         if ($766) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $767 = __THREW__;
          __THREW__ = 0;
          $768 = ___cxa_find_matching_catch() | 0;
          $769 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
          $$01 = $769;
          $$02 = $768;
          break L3;
         }
         $770 = $755;
         $771 = $770 - $762 | 0;
         $772 = ($771 | 0) / 24 & -1;
         $773 = $772 >>> 0 < 1073741823;
         if ($773) {
          $774 = $772 << 1;
          $775 = $774 >>> 0 < $765 >>> 0;
          $776 = $775 ? $765 : $774;
          $$0$i$i$i123 = $776;
         } else {
          $$0$i$i$i123 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i122, $$0$i$i$i123, $764, $759);
         $777 = $__v$i$i122 + 8 | 0;
         $778 = SAFE_HEAP_LOAD($777 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($778, $24);
         $779 = $778 + 24 | 0;
         SAFE_HEAP_STORE($777 | 0, $779 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i122);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i122);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $780 = $first + 2 | 0;
        $$0 = $780;
        break L1;
        break;
       }
      case 105:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($25, 12016);
        $781 = $db + 4 | 0;
        $782 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0;
        $783 = $db + 8 | 0;
        $784 = SAFE_HEAP_LOAD($783 | 0, 4, 0) | 0 | 0;
        $785 = $782 >>> 0 < $784 >>> 0;
        if ($785) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($782, $25);
         $786 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0;
         $787 = $786 + 24 | 0;
         SAFE_HEAP_STORE($781 | 0, $787 | 0, 4);
        } else {
         $788 = $db + 12 | 0;
         $789 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $790 = $782;
         $791 = $789;
         $792 = $790 - $791 | 0;
         $793 = ($792 | 0) / 24 & -1;
         $794 = $793 + 1 | 0;
         $795 = ($792 | 0) < -24;
         if ($795) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $796 = __THREW__;
          __THREW__ = 0;
          $797 = ___cxa_find_matching_catch() | 0;
          $798 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
          $$01 = $798;
          $$02 = $797;
          break L3;
         }
         $799 = $784;
         $800 = $799 - $791 | 0;
         $801 = ($800 | 0) / 24 & -1;
         $802 = $801 >>> 0 < 1073741823;
         if ($802) {
          $803 = $801 << 1;
          $804 = $803 >>> 0 < $794 >>> 0;
          $805 = $804 ? $794 : $803;
          $$0$i$i$i128 = $805;
         } else {
          $$0$i$i$i128 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i127, $$0$i$i$i128, $793, $788);
         $806 = $__v$i$i127 + 8 | 0;
         $807 = SAFE_HEAP_LOAD($806 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($807, $25);
         $808 = $807 + 24 | 0;
         SAFE_HEAP_STORE($806 | 0, $808 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i127);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i127);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $809 = $first + 2 | 0;
        $$0 = $809;
        break L1;
        break;
       }
      case 115:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($26, 12025);
        $810 = $db + 4 | 0;
        $811 = SAFE_HEAP_LOAD($810 | 0, 4, 0) | 0 | 0;
        $812 = $db + 8 | 0;
        $813 = SAFE_HEAP_LOAD($812 | 0, 4, 0) | 0 | 0;
        $814 = $811 >>> 0 < $813 >>> 0;
        if ($814) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($811, $26);
         $815 = SAFE_HEAP_LOAD($810 | 0, 4, 0) | 0 | 0;
         $816 = $815 + 24 | 0;
         SAFE_HEAP_STORE($810 | 0, $816 | 0, 4);
        } else {
         $817 = $db + 12 | 0;
         $818 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $819 = $811;
         $820 = $818;
         $821 = $819 - $820 | 0;
         $822 = ($821 | 0) / 24 & -1;
         $823 = $822 + 1 | 0;
         $824 = ($821 | 0) < -24;
         if ($824) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $825 = __THREW__;
          __THREW__ = 0;
          $826 = ___cxa_find_matching_catch() | 0;
          $827 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
          $$01 = $827;
          $$02 = $826;
          break L3;
         }
         $828 = $813;
         $829 = $828 - $820 | 0;
         $830 = ($829 | 0) / 24 & -1;
         $831 = $830 >>> 0 < 1073741823;
         if ($831) {
          $832 = $830 << 1;
          $833 = $832 >>> 0 < $823 >>> 0;
          $834 = $833 ? $823 : $832;
          $$0$i$i$i133 = $834;
         } else {
          $$0$i$i$i133 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i132, $$0$i$i$i133, $822, $817);
         $835 = $__v$i$i132 + 8 | 0;
         $836 = SAFE_HEAP_LOAD($835 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($836, $26);
         $837 = $836 + 24 | 0;
         SAFE_HEAP_STORE($835 | 0, $837 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i132);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i132);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $838 = $first + 2 | 0;
        $$0 = $838;
        break L1;
        break;
       }
      case 97:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($27, 12034);
        $839 = $db + 4 | 0;
        $840 = SAFE_HEAP_LOAD($839 | 0, 4, 0) | 0 | 0;
        $841 = $db + 8 | 0;
        $842 = SAFE_HEAP_LOAD($841 | 0, 4, 0) | 0 | 0;
        $843 = $840 >>> 0 < $842 >>> 0;
        if ($843) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($840, $27);
         $844 = SAFE_HEAP_LOAD($839 | 0, 4, 0) | 0 | 0;
         $845 = $844 + 24 | 0;
         SAFE_HEAP_STORE($839 | 0, $845 | 0, 4);
        } else {
         $846 = $db + 12 | 0;
         $847 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $848 = $840;
         $849 = $847;
         $850 = $848 - $849 | 0;
         $851 = ($850 | 0) / 24 & -1;
         $852 = $851 + 1 | 0;
         $853 = ($850 | 0) < -24;
         if ($853) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $854 = __THREW__;
          __THREW__ = 0;
          $855 = ___cxa_find_matching_catch() | 0;
          $856 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
          $$01 = $856;
          $$02 = $855;
          break L3;
         }
         $857 = $842;
         $858 = $857 - $849 | 0;
         $859 = ($858 | 0) / 24 & -1;
         $860 = $859 >>> 0 < 1073741823;
         if ($860) {
          $861 = $859 << 1;
          $862 = $861 >>> 0 < $852 >>> 0;
          $863 = $862 ? $852 : $861;
          $$0$i$i$i138 = $863;
         } else {
          $$0$i$i$i138 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i137, $$0$i$i$i138, $851, $846);
         $864 = $__v$i$i137 + 8 | 0;
         $865 = SAFE_HEAP_LOAD($864 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($865, $27);
         $866 = $865 + 24 | 0;
         SAFE_HEAP_STORE($864 | 0, $866 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i137);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i137);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $867 = $first + 2 | 0;
        $$0 = $867;
        break L1;
        break;
       }
      case 110:
       {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($28, 12039);
        $868 = $db + 4 | 0;
        $869 = SAFE_HEAP_LOAD($868 | 0, 4, 0) | 0 | 0;
        $870 = $db + 8 | 0;
        $871 = SAFE_HEAP_LOAD($870 | 0, 4, 0) | 0 | 0;
        $872 = $869 >>> 0 < $871 >>> 0;
        if ($872) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($869, $28);
         $873 = SAFE_HEAP_LOAD($868 | 0, 4, 0) | 0 | 0;
         $874 = $873 + 24 | 0;
         SAFE_HEAP_STORE($868 | 0, $874 | 0, 4);
        } else {
         $875 = $db + 12 | 0;
         $876 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $877 = $869;
         $878 = $876;
         $879 = $877 - $878 | 0;
         $880 = ($879 | 0) / 24 & -1;
         $881 = $880 + 1 | 0;
         $882 = ($879 | 0) < -24;
         if ($882) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $883 = __THREW__;
          __THREW__ = 0;
          $884 = ___cxa_find_matching_catch() | 0;
          $885 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
          $$01 = $885;
          $$02 = $884;
          break L3;
         }
         $886 = $871;
         $887 = $886 - $878 | 0;
         $888 = ($887 | 0) / 24 & -1;
         $889 = $888 >>> 0 < 1073741823;
         if ($889) {
          $890 = $888 << 1;
          $891 = $890 >>> 0 < $881 >>> 0;
          $892 = $891 ? $881 : $890;
          $$0$i$i$i143 = $892;
         } else {
          $$0$i$i$i143 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142, $$0$i$i$i143, $880, $875);
         $893 = $__v$i$i142 + 8 | 0;
         $894 = SAFE_HEAP_LOAD($893 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($894, $28);
         $895 = $894 + 24 | 0;
         SAFE_HEAP_STORE($893 | 0, $895 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i142);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $896 = $first + 2 | 0;
        $$0 = $896;
        break L1;
        break;
       }
      default:
       {
        $$0 = $first;
        break L1;
       }
      }
      break;
     }
    default:
     {
      $$0 = $first;
      break L1;
     }
    }
   } while (0);
   ___resumeException($$02 | 0);
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != (0 | 0);
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $ebuf0$i + 12 | 0;
 $6 = $ebuf0$i + 11 | 0;
 $7 = $buf$i;
 $8 = $5;
 $9 = $8 - $7 | 0;
 $10 = -2 - $7 | 0;
 $11 = $8 + 2 | 0;
 $12 = $big$i + 288 | 0;
 $13 = $buf$i + 9 | 0;
 $14 = $13;
 $15 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $fmt41 = $fmt;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  $16 = ($cnt$0 | 0) > -1;
  do {
   if ($16) {
    $17 = 2147483647 - $cnt$0 | 0;
    $18 = ($l$0 | 0) > ($17 | 0);
    if ($18) {
     $19 = ___errno_location() | 0;
     SAFE_HEAP_STORE($19 | 0, 75 | 0, 4);
     $cnt$1 = -1;
     break;
    } else {
     $20 = $l$0 + $cnt$0 | 0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while (0);
  $21 = SAFE_HEAP_LOAD($fmt41 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 << 24 >> 24 == 0;
  if ($22) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;
   $fmt40 = $fmt41;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $fmt39101 = $fmt40;
     $z$0102 = $fmt40;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $fmt39$lcssa = $fmt40;
     $z$0$lcssa = $fmt40;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $fmt40 + 1 | 0;
   $$pre = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
   $23 = $$pre;
   $fmt40 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     $25 = $fmt39101 + 1 | 0;
     $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
     $27 = $26 << 24 >> 24 == 37;
     if (!$27) {
      $fmt39$lcssa = $fmt39101;
      $z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = $z$0102 + 1 | 0;
     $29 = $fmt39101 + 2 | 0;
     $30 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
     $31 = $30 << 24 >> 24 == 37;
     if ($31) {
      $fmt39101 = $29;
      $z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;
      $z$0$lcssa = $28;
      break;
     }
    }
   }
  } while (0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = $32 - $33 | 0;
  if ($0) {
   $35 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
   $36 = $35 & 32;
   $37 = ($36 | 0) == 0;
   if ($37) {
    ___fwritex($fmt41, $34, $f) | 0;
   }
  }
  $38 = ($z$0$lcssa | 0) == ($fmt41 | 0);
  if (!$38) {
   $l10n$0$phi = $l10n$0;
   $cnt$0 = $cnt$1;
   $fmt41 = $fmt39$lcssa;
   $l$0 = $34;
   $l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = $fmt39$lcssa + 1 | 0;
  $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = $41 + -48 | 0;
  $isdigit = $isdigittmp >>> 0 < 10;
  if ($isdigit) {
   $42 = $fmt39$lcssa + 2 | 0;
   $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
   $44 = $43 << 24 >> 24 == 36;
   $45 = $fmt39$lcssa + 3 | 0;
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = SAFE_HEAP_LOAD($$51 >> 0 | 0, 1, 0) | 0 | 0;
   $47 = $$pre193;
   $argpos$0 = $isdigittmp$;
   $l10n$1 = $$l10n$0;
   $storemerge = $$51;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48 | 0) == 32;
  L25 : do {
   if ($49) {
    $51 = $46;
    $56 = $47;
    $fl$0109 = 0;
    $storemerge8108 = $storemerge;
    while (1) {
     $50 = $51 + -32 | 0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53 | 0) == 0;
     if ($54) {
      $65 = $56;
      $fl$062 = $fl$0109;
      $storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = $55 + -32 | 0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = $storemerge8108 + 1 | 0;
     $61 = SAFE_HEAP_LOAD($60 >> 0 | 0, 1, 0) | 0 | 0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63 | 0) == 32;
     if ($64) {
      $51 = $62;
      $56 = $61;
      $fl$0109 = $59;
      $storemerge8108 = $60;
     } else {
      $65 = $61;
      $fl$062 = $59;
      $storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;
    $fl$062 = 0;
    $storemerge860 = $storemerge;
   }
  } while (0);
  $66 = $65 << 24 >> 24 == 42;
  do {
   if ($66) {
    $67 = $storemerge860 + 1 | 0;
    $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = $69 + -48 | 0;
    $isdigit12 = $isdigittmp11 >>> 0 < 10;
    if ($isdigit12) {
     $70 = $storemerge860 + 2 | 0;
     $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
     $72 = $71 << 24 >> 24 == 36;
     if ($72) {
      $73 = $nl_type + ($isdigittmp11 << 2) | 0;
      SAFE_HEAP_STORE($73 | 0, 10 | 0, 4);
      $74 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
      $75 = $74 << 24 >> 24;
      $76 = $75 + -48 | 0;
      $77 = $nl_arg + ($76 << 3) | 0;
      $78 = $77;
      $79 = $78;
      $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
      $81 = $78 + 4 | 0;
      $82 = $81;
      $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
      $84 = $storemerge860 + 3 | 0;
      $l10n$2 = 1;
      $storemerge13 = $84;
      $w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label | 0) == 24) {
     label = 0;
     $85 = ($l10n$1 | 0) == 0;
     if (!$85) {
      $$0 = -1;
      break L1;
     }
     if (!$0) {
      $fl$1 = $fl$062;
      $fmt42 = $67;
      $l10n$3 = 0;
      $w$1 = 0;
      break;
     }
     $arglist_current = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
     $86 = $arglist_current;
     $87 = 0 + 4 | 0;
     $expanded4 = $87;
     $expanded = $expanded4 - 1 | 0;
     $88 = $86 + $expanded | 0;
     $89 = 0 + 4 | 0;
     $expanded8 = $89;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
     $arglist_next = $91 + 4 | 0;
     SAFE_HEAP_STORE($ap | 0, $arglist_next | 0, 4);
     $l10n$2 = 0;
     $storemerge13 = $67;
     $w$0 = $92;
    }
    $93 = ($w$0 | 0) < 0;
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = 0 - $w$0 | 0;
     $fl$1 = $94;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $95;
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = $96 + -48 | 0;
    $isdigit2$i = $isdigittmp1$i >>> 0 < 10;
    if ($isdigit2$i) {
     $100 = $storemerge860;
     $i$03$i = 0;
     $isdigittmp4$i = $isdigittmp1$i;
     while (1) {
      $97 = $i$03$i * 10 | 0;
      $98 = $97 + $isdigittmp4$i | 0;
      $99 = $100 + 1 | 0;
      $101 = SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = $102 + -48 | 0;
      $isdigit$i = $isdigittmp$i >>> 0 < 10;
      if ($isdigit$i) {
       $100 = $99;
       $i$03$i = $98;
       $isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;
       $$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa | 0) < 0;
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;
      $fmt42 = $$lcssa318;
      $l10n$3 = $l10n$1;
      $w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge860;
     $l10n$3 = $l10n$1;
     $w$1 = 0;
    }
   }
  } while (0);
  $104 = SAFE_HEAP_LOAD($fmt42 >> 0 | 0, 1, 0) | 0 | 0;
  $105 = $104 << 24 >> 24 == 46;
  L46 : do {
   if ($105) {
    $106 = $fmt42 + 1 | 0;
    $107 = SAFE_HEAP_LOAD($106 >> 0 | 0, 1, 0) | 0 | 0;
    $108 = $107 << 24 >> 24 == 42;
    if (!$108) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = $135 + -48 | 0;
     $isdigit2$i23 = $isdigittmp1$i22 >>> 0 < 10;
     if ($isdigit2$i23) {
      $139 = $106;
      $i$03$i25 = 0;
      $isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;
      $p$0 = 0;
      break;
     }
     while (1) {
      $136 = $i$03$i25 * 10 | 0;
      $137 = $136 + $isdigittmp4$i24 | 0;
      $138 = $139 + 1 | 0;
      $140 = SAFE_HEAP_LOAD($138 >> 0 | 0, 1, 0) | 0 | 0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = $141 + -48 | 0;
      $isdigit$i27 = $isdigittmp$i26 >>> 0 < 10;
      if ($isdigit$i27) {
       $139 = $138;
       $i$03$i25 = $137;
       $isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;
       $p$0 = $137;
       break L46;
      }
     }
    }
    $109 = $fmt42 + 2 | 0;
    $110 = SAFE_HEAP_LOAD($109 >> 0 | 0, 1, 0) | 0 | 0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = $111 + -48 | 0;
    $isdigit10 = $isdigittmp9 >>> 0 < 10;
    if ($isdigit10) {
     $112 = $fmt42 + 3 | 0;
     $113 = SAFE_HEAP_LOAD($112 >> 0 | 0, 1, 0) | 0 | 0;
     $114 = $113 << 24 >> 24 == 36;
     if ($114) {
      $115 = $nl_type + ($isdigittmp9 << 2) | 0;
      SAFE_HEAP_STORE($115 | 0, 10 | 0, 4);
      $116 = SAFE_HEAP_LOAD($109 >> 0 | 0, 1, 0) | 0 | 0;
      $117 = $116 << 24 >> 24;
      $118 = $117 + -48 | 0;
      $119 = $nl_arg + ($118 << 3) | 0;
      $120 = $119;
      $121 = $120;
      $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
      $123 = $120 + 4 | 0;
      $124 = $123;
      $125 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
      $126 = $fmt42 + 4 | 0;
      $fmt45 = $126;
      $p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3 | 0) == 0;
    if (!$127) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
     $128 = $arglist_current2;
     $129 = 0 + 4 | 0;
     $expanded11 = $129;
     $expanded10 = $expanded11 - 1 | 0;
     $130 = $128 + $expanded10 | 0;
     $131 = 0 + 4 | 0;
     $expanded15 = $131;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
     $arglist_next3 = $133 + 4 | 0;
     SAFE_HEAP_STORE($ap | 0, $arglist_next3 | 0, 4);
     $fmt45 = $109;
     $p$0 = $134;
    } else {
     $fmt45 = $109;
     $p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;
    $p$0 = -1;
   }
  } while (0);
  $fmt44 = $fmt45;
  $st$0 = 0;
  while (1) {
   $142 = SAFE_HEAP_LOAD($fmt44 >> 0 | 0, 1, 0) | 0 | 0;
   $143 = $142 << 24 >> 24;
   $144 = $143 + -65 | 0;
   $145 = $144 >>> 0 > 57;
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = $fmt44 + 1 | 0;
   $147 = (15327 + ($st$0 * 58 | 0) | 0) + $144 | 0;
   $148 = SAFE_HEAP_LOAD($147 >> 0 | 0, 1, 0) | 0 | 0;
   $149 = $148 & 255;
   $150 = $149 + -1 | 0;
   $151 = $150 >>> 0 < 8;
   if ($151) {
    $fmt44 = $146;
    $st$0 = $149;
   } else {
    $$lcssa323 = $146;
    $$lcssa324 = $148;
    $$lcssa325 = $149;
    $fmt44$lcssa321 = $fmt44;
    $st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = $$lcssa324 << 24 >> 24 == 0;
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = $$lcssa324 << 24 >> 24 == 19;
  $154 = ($argpos$0 | 0) > -1;
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = $nl_type + ($argpos$0 << 2) | 0;
     SAFE_HEAP_STORE($155 | 0, $$lcssa325 | 0, 4);
     $156 = $nl_arg + ($argpos$0 << 3) | 0;
     $157 = $156;
     $158 = $157;
     $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
     $160 = $157 + 4 | 0;
     $161 = $160;
     $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
     $163 = $arg;
     $164 = $163;
     SAFE_HEAP_STORE($164 | 0, $159 | 0, 4);
     $165 = $163 + 4 | 0;
     $166 = $165;
     SAFE_HEAP_STORE($166 | 0, $162 | 0, 4);
     label = 52;
     break;
    }
    if (!$0) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg, $$lcssa325, $ap);
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $fmt41 = $$lcssa323;
    $l$0 = $34;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = SAFE_HEAP_LOAD($fmt44$lcssa321 >> 0 | 0, 1, 0) | 0 | 0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322 | 0) != 0;
  $170 = $168 & 15;
  $171 = ($170 | 0) == 3;
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173 | 0) == 0;
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75 : do {
   switch ($t$0 | 0) {
   case 110:
    {
     switch ($st$0$lcssa322 | 0) {
     case 0:
      {
       $182 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($182 | 0, $cnt$1 | 0, 4);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 1:
      {
       $183 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($183 | 0, $cnt$1 | 0, 4);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 2:
      {
       $184 = ($cnt$1 | 0) < 0;
       $185 = $184 << 31 >> 31;
       $186 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       $187 = $186;
       $188 = $187;
       SAFE_HEAP_STORE($188 | 0, $cnt$1 | 0, 4);
       $189 = $187 + 4 | 0;
       $190 = $189;
       SAFE_HEAP_STORE($190 | 0, $185 | 0, 4);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 3:
      {
       $191 = $cnt$1 & 65535;
       $192 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($192 | 0, $191 | 0, 2);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 4:
      {
       $193 = $cnt$1 & 255;
       $194 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($194 >> 0 | 0, $193 | 0, 1);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 6:
      {
       $195 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($195 | 0, $cnt$1 | 0, 4);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 7:
      {
       $196 = ($cnt$1 | 0) < 0;
       $197 = $196 << 31 >> 31;
       $198 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
       $199 = $198;
       $200 = $199;
       SAFE_HEAP_STORE($200 | 0, $cnt$1 | 0, 4);
       $201 = $199 + 4 | 0;
       $202 = $201;
       SAFE_HEAP_STORE($202 | 0, $197 | 0, 4);
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     default:
      {
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $203 = $p$0 >>> 0 > 8;
     $204 = $203 ? $p$0 : 8;
     $205 = $fl$1$ | 8;
     $fl$3 = $205;
     $p$1 = $204;
     $t$1 = 120;
     label = 64;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 64;
     break;
    }
   case 111:
    {
     $243 = $arg;
     $244 = $243;
     $245 = SAFE_HEAP_LOAD($244 | 0, 4, 0) | 0 | 0;
     $246 = $243 + 4 | 0;
     $247 = $246;
     $248 = SAFE_HEAP_LOAD($247 | 0, 4, 0) | 0 | 0;
     $249 = ($245 | 0) == 0;
     $250 = ($248 | 0) == 0;
     $251 = $249 & $250;
     if ($251) {
      $$0$lcssa$i = $1;
     } else {
      $$03$i33 = $1;
      $253 = $245;
      $257 = $248;
      while (1) {
       $252 = $253 & 7;
       $254 = $252 | 48;
       $255 = $254 & 255;
       $256 = $$03$i33 + -1 | 0;
       SAFE_HEAP_STORE($256 >> 0 | 0, $255 | 0, 1);
       $258 = _bitshift64Lshr($253 | 0, $257 | 0, 3) | 0;
       $259 = tempRet0;
       $260 = ($258 | 0) == 0;
       $261 = ($259 | 0) == 0;
       $262 = $260 & $261;
       if ($262) {
        $$0$lcssa$i = $256;
        break;
       } else {
        $$03$i33 = $256;
        $253 = $258;
        $257 = $259;
       }
      }
     }
     $263 = $fl$1$ & 8;
     $264 = ($263 | 0) == 0;
     if ($264) {
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = 0;
      $prefix$1 = 15807;
      label = 77;
     } else {
      $265 = $$0$lcssa$i;
      $266 = $2 - $265 | 0;
      $267 = $266 + 1 | 0;
      $268 = ($p$0 | 0) < ($267 | 0);
      $$p$0 = $268 ? $267 : $p$0;
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $$p$0;
      $pl$1 = 0;
      $prefix$1 = 15807;
      label = 77;
     }
     break;
    }
   case 105:
   case 100:
    {
     $269 = $arg;
     $270 = $269;
     $271 = SAFE_HEAP_LOAD($270 | 0, 4, 0) | 0 | 0;
     $272 = $269 + 4 | 0;
     $273 = $272;
     $274 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0;
     $275 = ($274 | 0) < 0;
     if ($275) {
      $276 = _i64Subtract(0, 0, $271 | 0, $274 | 0) | 0;
      $277 = tempRet0;
      $278 = $arg;
      $279 = $278;
      SAFE_HEAP_STORE($279 | 0, $276 | 0, 4);
      $280 = $278 + 4 | 0;
      $281 = $280;
      SAFE_HEAP_STORE($281 | 0, $277 | 0, 4);
      $286 = $276;
      $287 = $277;
      $pl$0 = 1;
      $prefix$0 = 15807;
      label = 76;
      break L75;
     }
     $282 = $fl$1$ & 2048;
     $283 = ($282 | 0) == 0;
     if ($283) {
      $284 = $fl$1$ & 1;
      $285 = ($284 | 0) == 0;
      $$ = $285 ? 15807 : 15809;
      $286 = $271;
      $287 = $274;
      $pl$0 = $284;
      $prefix$0 = $$;
      label = 76;
     } else {
      $286 = $271;
      $287 = $274;
      $pl$0 = 1;
      $prefix$0 = 15808;
      label = 76;
     }
     break;
    }
   case 117:
    {
     $176 = $arg;
     $177 = $176;
     $178 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0;
     $179 = $176 + 4 | 0;
     $180 = $179;
     $181 = SAFE_HEAP_LOAD($180 | 0, 4, 0) | 0 | 0;
     $286 = $178;
     $287 = $181;
     $pl$0 = 0;
     $prefix$0 = 15807;
     label = 76;
     break;
    }
   case 99:
    {
     $307 = $arg;
     $308 = $307;
     $309 = SAFE_HEAP_LOAD($308 | 0, 4, 0) | 0 | 0;
     $310 = $307 + 4 | 0;
     $311 = $310;
     $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
     $313 = $309 & 255;
     SAFE_HEAP_STORE($3 >> 0 | 0, $313 | 0, 1);
     $a$2 = $3;
     $fl$6 = $175;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 15807;
     $z$2 = $1;
     break;
    }
   case 109:
    {
     $314 = ___errno_location() | 0;
     $315 = SAFE_HEAP_LOAD($314 | 0, 4, 0) | 0 | 0;
     $316 = _strerror($315) | 0;
     $a$1 = $316;
     label = 82;
     break;
    }
   case 115:
    {
     $317 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
     $318 = ($317 | 0) != (0 | 0);
     $319 = $318 ? $317 : 15817;
     $a$1 = $319;
     label = 82;
     break;
    }
   case 67:
    {
     $326 = $arg;
     $327 = $326;
     $328 = SAFE_HEAP_LOAD($327 | 0, 4, 0) | 0 | 0;
     $329 = $326 + 4 | 0;
     $330 = $329;
     $331 = SAFE_HEAP_LOAD($330 | 0, 4, 0) | 0 | 0;
     SAFE_HEAP_STORE($wc | 0, $328 | 0, 4);
     SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($arg | 0, $wc | 0, 4);
     $p$4198 = -1;
     label = 86;
     break;
    }
   case 83:
    {
     $332 = ($p$0 | 0) == 0;
     if ($332) {
      _pad($f, 32, $w$1, 0, $fl$1$);
      $i$0$lcssa200 = 0;
      label = 98;
     } else {
      $p$4198 = $p$0;
      label = 86;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $359 = +(+SAFE_HEAP_LOAD_D($arg | 0, 8));
     SAFE_HEAP_STORE($e2$i | 0, 0 | 0, 4);
     SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$359, 8);
     $360 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0;
     $361 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0;
     $362 = ($361 | 0) < 0;
     if ($362) {
      $363 = -$359;
      $$07$i = $363;
      $pl$0$i = 1;
      $prefix$0$i = 15824;
     } else {
      $364 = $fl$1$ & 2048;
      $365 = ($364 | 0) == 0;
      if ($365) {
       $366 = $fl$1$ & 1;
       $367 = ($366 | 0) == 0;
       $$$i = $367 ? 15825 : 15830;
       $$07$i = $359;
       $pl$0$i = $366;
       $prefix$0$i = $$$i;
      } else {
       $$07$i = $359;
       $pl$0$i = 1;
       $prefix$0$i = 15827;
      }
     }
     SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$$07$i, 8);
     $368 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0;
     $369 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0;
     $370 = $369 & 2146435072;
     $371 = $370 >>> 0 < 2146435072;
     $372 = 0 < 0;
     $373 = ($370 | 0) == 2146435072;
     $374 = $373 & $372;
     $375 = $371 | $374;
     do {
      if ($375) {
       $391 = +_frexpl($$07$i, $e2$i);
       $392 = $391 * 2.0;
       $393 = $392 != 0.0;
       if ($393) {
        $394 = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
        $395 = $394 + -1 | 0;
        SAFE_HEAP_STORE($e2$i | 0, $395 | 0, 4);
       }
       $396 = $t$0 | 32;
       $397 = ($396 | 0) == 97;
       if ($397) {
        $398 = $t$0 & 32;
        $399 = ($398 | 0) == 0;
        $400 = $prefix$0$i + 9 | 0;
        $prefix$0$$i = $399 ? $prefix$0$i : $400;
        $401 = $pl$0$i | 2;
        $402 = $p$0 >>> 0 > 11;
        $403 = 12 - $p$0 | 0;
        $404 = ($403 | 0) == 0;
        $405 = $402 | $404;
        do {
         if ($405) {
          $$1$i = $392;
         } else {
          $re$169$i = $403;
          $round$068$i = 8.0;
          while (1) {
           $406 = $re$169$i + -1 | 0;
           $407 = $round$068$i * 16.0;
           $408 = ($406 | 0) == 0;
           if ($408) {
            $$lcssa342 = $407;
            break;
           } else {
            $re$169$i = $406;
            $round$068$i = $407;
           }
          }
          $409 = SAFE_HEAP_LOAD($prefix$0$$i >> 0 | 0, 1, 0) | 0 | 0;
          $410 = $409 << 24 >> 24 == 45;
          if ($410) {
           $411 = -$392;
           $412 = $411 - $$lcssa342;
           $413 = $$lcssa342 + $412;
           $414 = -$413;
           $$1$i = $414;
           break;
          } else {
           $415 = $392 + $$lcssa342;
           $416 = $415 - $$lcssa342;
           $$1$i = $416;
           break;
          }
         }
        } while (0);
        $417 = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
        $418 = ($417 | 0) < 0;
        $419 = 0 - $417 | 0;
        $420 = $418 ? $419 : $417;
        $421 = ($420 | 0) < 0;
        $422 = $421 << 31 >> 31;
        $423 = _fmt_u($420, $422, $5) | 0;
        $424 = ($423 | 0) == ($5 | 0);
        if ($424) {
         SAFE_HEAP_STORE($6 >> 0 | 0, 48 | 0, 1);
         $estr$0$i = $6;
        } else {
         $estr$0$i = $423;
        }
        $425 = $417 >> 31;
        $426 = $425 & 2;
        $427 = $426 + 43 | 0;
        $428 = $427 & 255;
        $429 = $estr$0$i + -1 | 0;
        SAFE_HEAP_STORE($429 >> 0 | 0, $428 | 0, 1);
        $430 = $t$0 + 15 | 0;
        $431 = $430 & 255;
        $432 = $estr$0$i + -2 | 0;
        SAFE_HEAP_STORE($432 >> 0 | 0, $431 | 0, 1);
        $notrhs$i = ($p$0 | 0) < 1;
        $433 = $fl$1$ & 8;
        $434 = ($433 | 0) == 0;
        $$2$i = $$1$i;
        $s$0$i = $buf$i;
        while (1) {
         $435 = ~~$$2$i;
         $436 = 15791 + $435 | 0;
         $437 = SAFE_HEAP_LOAD($436 >> 0 | 0, 1, 0) | 0 | 0;
         $438 = $437 & 255;
         $439 = $438 | $398;
         $440 = $439 & 255;
         $441 = $s$0$i + 1 | 0;
         SAFE_HEAP_STORE($s$0$i >> 0 | 0, $440 | 0, 1);
         $442 = +($435 | 0);
         $443 = $$2$i - $442;
         $444 = $443 * 16.0;
         $445 = $441;
         $446 = $445 - $7 | 0;
         $447 = ($446 | 0) == 1;
         do {
          if ($447) {
           $notlhs$i = $444 == 0.0;
           $or$cond3$not$i = $notrhs$i & $notlhs$i;
           $or$cond$i = $434 & $or$cond3$not$i;
           if ($or$cond$i) {
            $s$1$i = $441;
            break;
           }
           $448 = $s$0$i + 2 | 0;
           SAFE_HEAP_STORE($441 >> 0 | 0, 46 | 0, 1);
           $s$1$i = $448;
          } else {
           $s$1$i = $441;
          }
         } while (0);
         $449 = $444 != 0.0;
         if ($449) {
          $$2$i = $444;
          $s$0$i = $s$1$i;
         } else {
          $s$1$i$lcssa = $s$1$i;
          break;
         }
        }
        $450 = ($p$0 | 0) != 0;
        $$pre182$i = $s$1$i$lcssa;
        $451 = $10 + $$pre182$i | 0;
        $452 = ($451 | 0) < ($p$0 | 0);
        $or$cond240 = $450 & $452;
        $453 = $432;
        $454 = $11 + $p$0 | 0;
        $455 = $454 - $453 | 0;
        $456 = $432;
        $457 = $9 - $456 | 0;
        $458 = $457 + $$pre182$i | 0;
        $l$0$i = $or$cond240 ? $455 : $458;
        $459 = $l$0$i + $401 | 0;
        _pad($f, 32, $w$1, $459, $fl$1$);
        $460 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
        $461 = $460 & 32;
        $462 = ($461 | 0) == 0;
        if ($462) {
         ___fwritex($prefix$0$$i, $401, $f) | 0;
        }
        $463 = $fl$1$ ^ 65536;
        _pad($f, 48, $w$1, $459, $463);
        $464 = $$pre182$i - $7 | 0;
        $465 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
        $466 = $465 & 32;
        $467 = ($466 | 0) == 0;
        if ($467) {
         ___fwritex($buf$i, $464, $f) | 0;
        }
        $468 = $432;
        $469 = $8 - $468 | 0;
        $sum = $464 + $469 | 0;
        $470 = $l$0$i - $sum | 0;
        _pad($f, 48, $470, 0, 0);
        $471 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
        $472 = $471 & 32;
        $473 = ($472 | 0) == 0;
        if ($473) {
         ___fwritex($432, $469, $f) | 0;
        }
        $474 = $fl$1$ ^ 8192;
        _pad($f, 32, $w$1, $459, $474);
        $475 = ($459 | 0) < ($w$1 | 0);
        $w$$i = $475 ? $w$1 : $459;
        $$0$i = $w$$i;
        break;
       }
       $476 = ($p$0 | 0) < 0;
       $$p$i = $476 ? 6 : $p$0;
       if ($393) {
        $477 = $392 * 268435456.0;
        $478 = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
        $479 = $478 + -28 | 0;
        SAFE_HEAP_STORE($e2$i | 0, $479 | 0, 4);
        $$3$i = $477;
        $480 = $479;
       } else {
        $$pre179$i = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
        $$3$i = $392;
        $480 = $$pre179$i;
       }
       $481 = ($480 | 0) < 0;
       $$31$i = $481 ? $big$i : $12;
       $482 = $$31$i;
       $$4$i = $$3$i;
       $z$0$i = $$31$i;
       while (1) {
        $483 = ~~$$4$i >>> 0;
        SAFE_HEAP_STORE($z$0$i | 0, $483 | 0, 4);
        $484 = $z$0$i + 4 | 0;
        $485 = +($483 >>> 0);
        $486 = $$4$i - $485;
        $487 = $486 * 1.0e9;
        $488 = $487 != 0.0;
        if ($488) {
         $$4$i = $487;
         $z$0$i = $484;
        } else {
         $$lcssa326 = $484;
         break;
        }
       }
       $$pr$i = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
       $489 = ($$pr$i | 0) > 0;
       if ($489) {
        $490 = $$pr$i;
        $a$1147$i = $$31$i;
        $z$1146$i = $$lcssa326;
        while (1) {
         $491 = ($490 | 0) > 29;
         $492 = $491 ? 29 : $490;
         $d$0139$i = $z$1146$i + -4 | 0;
         $493 = $d$0139$i >>> 0 < $a$1147$i >>> 0;
         do {
          if ($493) {
           $a$2$ph$i = $a$1147$i;
          } else {
           $carry$0140$i = 0;
           $d$0141$i = $d$0139$i;
           while (1) {
            $494 = SAFE_HEAP_LOAD($d$0141$i | 0, 4, 0) | 0 | 0;
            $495 = _bitshift64Shl($494 | 0, 0, $492 | 0) | 0;
            $496 = tempRet0;
            $497 = _i64Add($495 | 0, $496 | 0, $carry$0140$i | 0, 0) | 0;
            $498 = tempRet0;
            $499 = ___uremdi3($497 | 0, $498 | 0, 1e9, 0) | 0;
            $500 = tempRet0;
            SAFE_HEAP_STORE($d$0141$i | 0, $499 | 0, 4);
            $501 = ___udivdi3($497 | 0, $498 | 0, 1e9, 0) | 0;
            $502 = tempRet0;
            $d$0$i = $d$0141$i + -4 | 0;
            $503 = $d$0$i >>> 0 < $a$1147$i >>> 0;
            if ($503) {
             $$lcssa327 = $501;
             break;
            } else {
             $carry$0140$i = $501;
             $d$0141$i = $d$0$i;
            }
           }
           $504 = ($$lcssa327 | 0) == 0;
           if ($504) {
            $a$2$ph$i = $a$1147$i;
            break;
           }
           $505 = $a$1147$i + -4 | 0;
           SAFE_HEAP_STORE($505 | 0, $$lcssa327 | 0, 4);
           $a$2$ph$i = $505;
          }
         } while (0);
         $z$2$i = $z$1146$i;
         while (1) {
          $506 = $z$2$i >>> 0 > $a$2$ph$i >>> 0;
          if (!$506) {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
          $507 = $z$2$i + -4 | 0;
          $508 = SAFE_HEAP_LOAD($507 | 0, 4, 0) | 0 | 0;
          $509 = ($508 | 0) == 0;
          if ($509) {
           $z$2$i = $507;
          } else {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
         }
         $510 = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
         $511 = $510 - $492 | 0;
         SAFE_HEAP_STORE($e2$i | 0, $511 | 0, 4);
         $512 = ($511 | 0) > 0;
         if ($512) {
          $490 = $511;
          $a$1147$i = $a$2$ph$i;
          $z$1146$i = $z$2$i$lcssa;
         } else {
          $$pr47$i = $511;
          $a$1$lcssa$i = $a$2$ph$i;
          $z$1$lcssa$i = $z$2$i$lcssa;
          break;
         }
        }
       } else {
        $$pr47$i = $$pr$i;
        $a$1$lcssa$i = $$31$i;
        $z$1$lcssa$i = $$lcssa326;
       }
       $513 = ($$pr47$i | 0) < 0;
       if ($513) {
        $514 = $$p$i + 25 | 0;
        $515 = ($514 | 0) / 9 & -1;
        $516 = $515 + 1 | 0;
        $517 = ($396 | 0) == 102;
        $519 = $$pr47$i;
        $a$3134$i = $a$1$lcssa$i;
        $z$3133$i = $z$1$lcssa$i;
        while (1) {
         $518 = 0 - $519 | 0;
         $520 = ($518 | 0) > 9;
         $521 = $520 ? 9 : $518;
         $522 = $a$3134$i >>> 0 < $z$3133$i >>> 0;
         do {
          if ($522) {
           $526 = 1 << $521;
           $527 = $526 + -1 | 0;
           $528 = 1e9 >>> $521;
           $carry3$0128$i = 0;
           $d$1127$i = $a$3134$i;
           while (1) {
            $529 = SAFE_HEAP_LOAD($d$1127$i | 0, 4, 0) | 0 | 0;
            $530 = $529 & $527;
            $531 = $529 >>> $521;
            $532 = $531 + $carry3$0128$i | 0;
            SAFE_HEAP_STORE($d$1127$i | 0, $532 | 0, 4);
            $533 = Math_imul($530, $528) | 0;
            $534 = $d$1127$i + 4 | 0;
            $535 = $534 >>> 0 < $z$3133$i >>> 0;
            if ($535) {
             $carry3$0128$i = $533;
             $d$1127$i = $534;
            } else {
             $$lcssa329 = $533;
             break;
            }
           }
           $536 = SAFE_HEAP_LOAD($a$3134$i | 0, 4, 0) | 0 | 0;
           $537 = ($536 | 0) == 0;
           $538 = $a$3134$i + 4 | 0;
           $$a$3$i = $537 ? $538 : $a$3134$i;
           $539 = ($$lcssa329 | 0) == 0;
           if ($539) {
            $$a$3186$i = $$a$3$i;
            $z$4$i = $z$3133$i;
            break;
           }
           $540 = $z$3133$i + 4 | 0;
           SAFE_HEAP_STORE($z$3133$i | 0, $$lcssa329 | 0, 4);
           $$a$3186$i = $$a$3$i;
           $z$4$i = $540;
          } else {
           $523 = SAFE_HEAP_LOAD($a$3134$i | 0, 4, 0) | 0 | 0;
           $524 = ($523 | 0) == 0;
           $525 = $a$3134$i + 4 | 0;
           $$a$3185$i = $524 ? $525 : $a$3134$i;
           $$a$3186$i = $$a$3185$i;
           $z$4$i = $z$3133$i;
          }
         } while (0);
         $541 = $517 ? $$31$i : $$a$3186$i;
         $542 = $z$4$i;
         $543 = $541;
         $544 = $542 - $543 | 0;
         $545 = $544 >> 2;
         $546 = ($545 | 0) > ($516 | 0);
         $547 = $541 + ($516 << 2) | 0;
         $$z$4$i = $546 ? $547 : $z$4$i;
         $548 = SAFE_HEAP_LOAD($e2$i | 0, 4, 0) | 0 | 0;
         $549 = $548 + $521 | 0;
         SAFE_HEAP_STORE($e2$i | 0, $549 | 0, 4);
         $550 = ($549 | 0) < 0;
         if ($550) {
          $519 = $549;
          $a$3134$i = $$a$3186$i;
          $z$3133$i = $$z$4$i;
         } else {
          $a$3$lcssa$i = $$a$3186$i;
          $z$3$lcssa$i = $$z$4$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;
        $z$3$lcssa$i = $z$1$lcssa$i;
       }
       $551 = $a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0;
       do {
        if ($551) {
         $552 = $a$3$lcssa$i;
         $553 = $482 - $552 | 0;
         $554 = $553 >> 2;
         $555 = $554 * 9 | 0;
         $556 = SAFE_HEAP_LOAD($a$3$lcssa$i | 0, 4, 0) | 0 | 0;
         $557 = $556 >>> 0 < 10;
         if ($557) {
          $e$1$i = $555;
          break;
         } else {
          $e$0123$i = $555;
          $i$0122$i = 10;
         }
         while (1) {
          $558 = $i$0122$i * 10 | 0;
          $559 = $e$0123$i + 1 | 0;
          $560 = $556 >>> 0 < $558 >>> 0;
          if ($560) {
           $e$1$i = $559;
           break;
          } else {
           $e$0123$i = $559;
           $i$0122$i = $558;
          }
         }
        } else {
         $e$1$i = 0;
        }
       } while (0);
       $561 = ($396 | 0) != 102;
       $562 = $561 ? $e$1$i : 0;
       $563 = $$p$i - $562 | 0;
       $564 = ($396 | 0) == 103;
       $565 = ($$p$i | 0) != 0;
       $566 = $565 & $564;
       $$neg52$i = $566 << 31 >> 31;
       $567 = $563 + $$neg52$i | 0;
       $568 = $z$3$lcssa$i;
       $569 = $568 - $482 | 0;
       $570 = $569 >> 2;
       $571 = $570 * 9 | 0;
       $572 = $571 + -9 | 0;
       $573 = ($567 | 0) < ($572 | 0);
       if ($573) {
        $574 = $567 + 9216 | 0;
        $575 = ($574 | 0) / 9 & -1;
        $$sum$i = $575 + -1023 | 0;
        $576 = $$31$i + ($$sum$i << 2) | 0;
        $577 = ($574 | 0) % 9 & -1;
        $j$0115$i = $577 + 1 | 0;
        $578 = ($j$0115$i | 0) < 9;
        if ($578) {
         $i$1116$i = 10;
         $j$0117$i = $j$0115$i;
         while (1) {
          $579 = $i$1116$i * 10 | 0;
          $j$0$i = $j$0117$i + 1 | 0;
          $exitcond$i = ($j$0$i | 0) == 9;
          if ($exitcond$i) {
           $i$1$lcssa$i = $579;
           break;
          } else {
           $i$1116$i = $579;
           $j$0117$i = $j$0$i;
          }
         }
        } else {
         $i$1$lcssa$i = 10;
        }
        $580 = SAFE_HEAP_LOAD($576 | 0, 4, 0) | 0 | 0;
        $581 = ($580 >>> 0) % ($i$1$lcssa$i >>> 0) & -1;
        $582 = ($581 | 0) == 0;
        if ($582) {
         $$sum15$i = $575 + -1022 | 0;
         $583 = $$31$i + ($$sum15$i << 2) | 0;
         $584 = ($583 | 0) == ($z$3$lcssa$i | 0);
         if ($584) {
          $a$7$i = $a$3$lcssa$i;
          $d$3$i = $576;
          $e$3$i = $e$1$i;
         } else {
          label = 163;
         }
        } else {
         label = 163;
        }
        do {
         if ((label | 0) == 163) {
          label = 0;
          $585 = ($580 >>> 0) / ($i$1$lcssa$i >>> 0) & -1;
          $586 = $585 & 1;
          $587 = ($586 | 0) == 0;
          $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
          $588 = ($i$1$lcssa$i | 0) / 2 & -1;
          $589 = $581 >>> 0 < $588 >>> 0;
          do {
           if ($589) {
            $small$0$i = .5;
           } else {
            $590 = ($581 | 0) == ($588 | 0);
            if ($590) {
             $$sum16$i = $575 + -1022 | 0;
             $591 = $$31$i + ($$sum16$i << 2) | 0;
             $592 = ($591 | 0) == ($z$3$lcssa$i | 0);
             if ($592) {
              $small$0$i = 1.0;
              break;
             }
            }
            $small$0$i = 1.5;
           }
          } while (0);
          $593 = ($pl$0$i | 0) == 0;
          do {
           if ($593) {
            $round6$1$i = $$20$i;
            $small$1$i = $small$0$i;
           } else {
            $594 = SAFE_HEAP_LOAD($prefix$0$i >> 0 | 0, 1, 0) | 0 | 0;
            $595 = $594 << 24 >> 24 == 45;
            if (!$595) {
             $round6$1$i = $$20$i;
             $small$1$i = $small$0$i;
             break;
            }
            $596 = -$$20$i;
            $597 = -$small$0$i;
            $round6$1$i = $596;
            $small$1$i = $597;
           }
          } while (0);
          $598 = $580 - $581 | 0;
          SAFE_HEAP_STORE($576 | 0, $598 | 0, 4);
          $599 = $round6$1$i + $small$1$i;
          $600 = $599 != $round6$1$i;
          if (!$600) {
           $a$7$i = $a$3$lcssa$i;
           $d$3$i = $576;
           $e$3$i = $e$1$i;
           break;
          }
          $601 = $598 + $i$1$lcssa$i | 0;
          SAFE_HEAP_STORE($576 | 0, $601 | 0, 4);
          $602 = $601 >>> 0 > 999999999;
          if ($602) {
           $a$5109$i = $a$3$lcssa$i;
           $d$2108$i = $576;
           while (1) {
            $603 = $d$2108$i + -4 | 0;
            SAFE_HEAP_STORE($d$2108$i | 0, 0 | 0, 4);
            $604 = $603 >>> 0 < $a$5109$i >>> 0;
            if ($604) {
             $605 = $a$5109$i + -4 | 0;
             SAFE_HEAP_STORE($605 | 0, 0 | 0, 4);
             $a$6$i = $605;
            } else {
             $a$6$i = $a$5109$i;
            }
            $606 = SAFE_HEAP_LOAD($603 | 0, 4, 0) | 0 | 0;
            $607 = $606 + 1 | 0;
            SAFE_HEAP_STORE($603 | 0, $607 | 0, 4);
            $608 = $607 >>> 0 > 999999999;
            if ($608) {
             $a$5109$i = $a$6$i;
             $d$2108$i = $603;
            } else {
             $a$5$lcssa$i = $a$6$i;
             $d$2$lcssa$i = $603;
             break;
            }
           }
          } else {
           $a$5$lcssa$i = $a$3$lcssa$i;
           $d$2$lcssa$i = $576;
          }
          $609 = $a$5$lcssa$i;
          $610 = $482 - $609 | 0;
          $611 = $610 >> 2;
          $612 = $611 * 9 | 0;
          $613 = SAFE_HEAP_LOAD($a$5$lcssa$i | 0, 4, 0) | 0 | 0;
          $614 = $613 >>> 0 < 10;
          if ($614) {
           $a$7$i = $a$5$lcssa$i;
           $d$3$i = $d$2$lcssa$i;
           $e$3$i = $612;
           break;
          } else {
           $e$2104$i = $612;
           $i$2103$i = 10;
          }
          while (1) {
           $615 = $i$2103$i * 10 | 0;
           $616 = $e$2104$i + 1 | 0;
           $617 = $613 >>> 0 < $615 >>> 0;
           if ($617) {
            $a$7$i = $a$5$lcssa$i;
            $d$3$i = $d$2$lcssa$i;
            $e$3$i = $616;
            break;
           } else {
            $e$2104$i = $616;
            $i$2103$i = $615;
           }
          }
         }
        } while (0);
        $618 = $d$3$i + 4 | 0;
        $619 = $z$3$lcssa$i >>> 0 > $618 >>> 0;
        $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
        $a$8$ph$i = $a$7$i;
        $e$4$ph$i = $e$3$i;
        $z$6$ph$i = $$z$3$i;
       } else {
        $a$8$ph$i = $a$3$lcssa$i;
        $e$4$ph$i = $e$1$i;
        $z$6$ph$i = $z$3$lcssa$i;
       }
       $620 = 0 - $e$4$ph$i | 0;
       $z$6$i = $z$6$ph$i;
       while (1) {
        $621 = $z$6$i >>> 0 > $a$8$ph$i >>> 0;
        if (!$621) {
         $$lcssa159$i = 0;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
        $622 = $z$6$i + -4 | 0;
        $623 = SAFE_HEAP_LOAD($622 | 0, 4, 0) | 0 | 0;
        $624 = ($623 | 0) == 0;
        if ($624) {
         $z$6$i = $622;
        } else {
         $$lcssa159$i = 1;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
       }
       do {
        if ($564) {
         $625 = $565 & 1;
         $626 = $625 ^ 1;
         $$p$$i = $626 + $$p$i | 0;
         $627 = ($$p$$i | 0) > ($e$4$ph$i | 0);
         $628 = ($e$4$ph$i | 0) > -5;
         $or$cond6$i = $627 & $628;
         if ($or$cond6$i) {
          $629 = $t$0 + -1 | 0;
          $$neg53$i = $$p$$i + -1 | 0;
          $630 = $$neg53$i - $e$4$ph$i | 0;
          $$013$i = $629;
          $$210$i = $630;
         } else {
          $631 = $t$0 + -2 | 0;
          $632 = $$p$$i + -1 | 0;
          $$013$i = $631;
          $$210$i = $632;
         }
         $633 = $fl$1$ & 8;
         $634 = ($633 | 0) == 0;
         if (!$634) {
          $$114$i = $$013$i;
          $$311$i = $$210$i;
          $$pre$phi184$iZ2D = $633;
          break;
         }
         do {
          if ($$lcssa159$i) {
           $635 = $z$6$i$lcssa + -4 | 0;
           $636 = SAFE_HEAP_LOAD($635 | 0, 4, 0) | 0 | 0;
           $637 = ($636 | 0) == 0;
           if ($637) {
            $j$2$i = 9;
            break;
           }
           $638 = ($636 >>> 0) % 10 & -1;
           $639 = ($638 | 0) == 0;
           if ($639) {
            $i$399$i = 10;
            $j$1100$i = 0;
           } else {
            $j$2$i = 0;
            break;
           }
           while (1) {
            $640 = $i$399$i * 10 | 0;
            $641 = $j$1100$i + 1 | 0;
            $642 = ($636 >>> 0) % ($640 >>> 0) & -1;
            $643 = ($642 | 0) == 0;
            if ($643) {
             $i$399$i = $640;
             $j$1100$i = $641;
            } else {
             $j$2$i = $641;
             break;
            }
           }
          } else {
           $j$2$i = 9;
          }
         } while (0);
         $644 = $$013$i | 32;
         $645 = ($644 | 0) == 102;
         $646 = $z$6$i$lcssa;
         $647 = $646 - $482 | 0;
         $648 = $647 >> 2;
         $649 = $648 * 9 | 0;
         $650 = $649 + -9 | 0;
         if ($645) {
          $651 = $650 - $j$2$i | 0;
          $652 = ($651 | 0) < 0;
          $$21$i = $652 ? 0 : $651;
          $653 = ($$210$i | 0) < ($$21$i | 0);
          $$210$$22$i = $653 ? $$210$i : $$21$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$22$i;
          $$pre$phi184$iZ2D = 0;
          break;
         } else {
          $654 = $650 + $e$4$ph$i | 0;
          $655 = $654 - $j$2$i | 0;
          $656 = ($655 | 0) < 0;
          $$23$i = $656 ? 0 : $655;
          $657 = ($$210$i | 0) < ($$23$i | 0);
          $$210$$24$i = $657 ? $$210$i : $$23$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$24$i;
          $$pre$phi184$iZ2D = 0;
          break;
         }
        } else {
         $$pre183$i = $fl$1$ & 8;
         $$114$i = $t$0;
         $$311$i = $$p$i;
         $$pre$phi184$iZ2D = $$pre183$i;
        }
       } while (0);
       $658 = $$311$i | $$pre$phi184$iZ2D;
       $659 = ($658 | 0) != 0;
       $660 = $659 & 1;
       $661 = $$114$i | 32;
       $662 = ($661 | 0) == 102;
       if ($662) {
        $663 = ($e$4$ph$i | 0) > 0;
        $664 = $663 ? $e$4$ph$i : 0;
        $$pn$i = $664;
        $estr$2$i = 0;
       } else {
        $665 = ($e$4$ph$i | 0) < 0;
        $666 = $665 ? $620 : $e$4$ph$i;
        $667 = ($666 | 0) < 0;
        $668 = $667 << 31 >> 31;
        $669 = _fmt_u($666, $668, $5) | 0;
        $670 = $669;
        $671 = $8 - $670 | 0;
        $672 = ($671 | 0) < 2;
        if ($672) {
         $estr$193$i = $669;
         while (1) {
          $673 = $estr$193$i + -1 | 0;
          SAFE_HEAP_STORE($673 >> 0 | 0, 48 | 0, 1);
          $674 = $673;
          $675 = $8 - $674 | 0;
          $676 = ($675 | 0) < 2;
          if ($676) {
           $estr$193$i = $673;
          } else {
           $estr$1$lcssa$i = $673;
           break;
          }
         }
        } else {
         $estr$1$lcssa$i = $669;
        }
        $677 = $e$4$ph$i >> 31;
        $678 = $677 & 2;
        $679 = $678 + 43 | 0;
        $680 = $679 & 255;
        $681 = $estr$1$lcssa$i + -1 | 0;
        SAFE_HEAP_STORE($681 >> 0 | 0, $680 | 0, 1);
        $682 = $$114$i & 255;
        $683 = $estr$1$lcssa$i + -2 | 0;
        SAFE_HEAP_STORE($683 >> 0 | 0, $682 | 0, 1);
        $684 = $683;
        $685 = $8 - $684 | 0;
        $$pn$i = $685;
        $estr$2$i = $683;
       }
       $686 = $pl$0$i + 1 | 0;
       $687 = $686 + $$311$i | 0;
       $l$1$i = $687 + $660 | 0;
       $688 = $l$1$i + $$pn$i | 0;
       _pad($f, 32, $w$1, $688, $fl$1$);
       $689 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
       $690 = $689 & 32;
       $691 = ($690 | 0) == 0;
       if ($691) {
        ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
       }
       $692 = $fl$1$ ^ 65536;
       _pad($f, 48, $w$1, $688, $692);
       do {
        if ($662) {
         $693 = $a$8$ph$i >>> 0 > $$31$i >>> 0;
         $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
         $d$482$i = $r$0$a$8$i;
         while (1) {
          $694 = SAFE_HEAP_LOAD($d$482$i | 0, 4, 0) | 0 | 0;
          $695 = _fmt_u($694, 0, $13) | 0;
          $696 = ($d$482$i | 0) == ($r$0$a$8$i | 0);
          do {
           if ($696) {
            $700 = ($695 | 0) == ($13 | 0);
            if (!$700) {
             $s7$1$i = $695;
             break;
            }
            SAFE_HEAP_STORE($15 >> 0 | 0, 48 | 0, 1);
            $s7$1$i = $15;
           } else {
            $697 = $695 >>> 0 > $buf$i >>> 0;
            if ($697) {
             $s7$079$i = $695;
            } else {
             $s7$1$i = $695;
             break;
            }
            while (1) {
             $698 = $s7$079$i + -1 | 0;
             SAFE_HEAP_STORE($698 >> 0 | 0, 48 | 0, 1);
             $699 = $698 >>> 0 > $buf$i >>> 0;
             if ($699) {
              $s7$079$i = $698;
             } else {
              $s7$1$i = $698;
              break;
             }
            }
           }
          } while (0);
          $701 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
          $702 = $701 & 32;
          $703 = ($702 | 0) == 0;
          if ($703) {
           $704 = $s7$1$i;
           $705 = $14 - $704 | 0;
           ___fwritex($s7$1$i, $705, $f) | 0;
          }
          $706 = $d$482$i + 4 | 0;
          $707 = $706 >>> 0 > $$31$i >>> 0;
          if ($707) {
           $$lcssa339 = $706;
           break;
          } else {
           $d$482$i = $706;
          }
         }
         $708 = ($658 | 0) == 0;
         do {
          if (!$708) {
           $709 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
           $710 = $709 & 32;
           $711 = ($710 | 0) == 0;
           if (!$711) {
            break;
           }
           ___fwritex(15859, 1, $f) | 0;
          }
         } while (0);
         $712 = $$lcssa339 >>> 0 < $z$6$i$lcssa >>> 0;
         $713 = ($$311$i | 0) > 0;
         $714 = $713 & $712;
         if ($714) {
          $$41276$i = $$311$i;
          $d$575$i = $$lcssa339;
          while (1) {
           $715 = SAFE_HEAP_LOAD($d$575$i | 0, 4, 0) | 0 | 0;
           $716 = _fmt_u($715, 0, $13) | 0;
           $717 = $716 >>> 0 > $buf$i >>> 0;
           if ($717) {
            $s8$070$i = $716;
            while (1) {
             $718 = $s8$070$i + -1 | 0;
             SAFE_HEAP_STORE($718 >> 0 | 0, 48 | 0, 1);
             $719 = $718 >>> 0 > $buf$i >>> 0;
             if ($719) {
              $s8$070$i = $718;
             } else {
              $s8$0$lcssa$i = $718;
              break;
             }
            }
           } else {
            $s8$0$lcssa$i = $716;
           }
           $720 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
           $721 = $720 & 32;
           $722 = ($721 | 0) == 0;
           if ($722) {
            $723 = ($$41276$i | 0) > 9;
            $724 = $723 ? 9 : $$41276$i;
            ___fwritex($s8$0$lcssa$i, $724, $f) | 0;
           }
           $725 = $d$575$i + 4 | 0;
           $726 = $$41276$i + -9 | 0;
           $727 = $725 >>> 0 < $z$6$i$lcssa >>> 0;
           $728 = ($$41276$i | 0) > 9;
           $729 = $728 & $727;
           if ($729) {
            $$41276$i = $726;
            $d$575$i = $725;
           } else {
            $$412$lcssa$i = $726;
            break;
           }
          }
         } else {
          $$412$lcssa$i = $$311$i;
         }
         $730 = $$412$lcssa$i + 9 | 0;
         _pad($f, 48, $730, 9, 0);
        } else {
         $731 = $a$8$ph$i + 4 | 0;
         $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
         $732 = ($$311$i | 0) > -1;
         if ($732) {
          $733 = ($$pre$phi184$iZ2D | 0) == 0;
          $$587$i = $$311$i;
          $d$686$i = $a$8$ph$i;
          while (1) {
           $734 = SAFE_HEAP_LOAD($d$686$i | 0, 4, 0) | 0 | 0;
           $735 = _fmt_u($734, 0, $13) | 0;
           $736 = ($735 | 0) == ($13 | 0);
           if ($736) {
            SAFE_HEAP_STORE($15 >> 0 | 0, 48 | 0, 1);
            $s9$0$i = $15;
           } else {
            $s9$0$i = $735;
           }
           $737 = ($d$686$i | 0) == ($a$8$ph$i | 0);
           do {
            if ($737) {
             $741 = $s9$0$i + 1 | 0;
             $742 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
             $743 = $742 & 32;
             $744 = ($743 | 0) == 0;
             if ($744) {
              ___fwritex($s9$0$i, 1, $f) | 0;
             }
             $745 = ($$587$i | 0) < 1;
             $or$cond29$i = $733 & $745;
             if ($or$cond29$i) {
              $s9$2$i = $741;
              break;
             }
             $746 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
             $747 = $746 & 32;
             $748 = ($747 | 0) == 0;
             if (!$748) {
              $s9$2$i = $741;
              break;
             }
             ___fwritex(15859, 1, $f) | 0;
             $s9$2$i = $741;
            } else {
             $738 = $s9$0$i >>> 0 > $buf$i >>> 0;
             if ($738) {
              $s9$183$i = $s9$0$i;
             } else {
              $s9$2$i = $s9$0$i;
              break;
             }
             while (1) {
              $739 = $s9$183$i + -1 | 0;
              SAFE_HEAP_STORE($739 >> 0 | 0, 48 | 0, 1);
              $740 = $739 >>> 0 > $buf$i >>> 0;
              if ($740) {
               $s9$183$i = $739;
              } else {
               $s9$2$i = $739;
               break;
              }
             }
            }
           } while (0);
           $749 = $s9$2$i;
           $750 = $14 - $749 | 0;
           $751 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
           $752 = $751 & 32;
           $753 = ($752 | 0) == 0;
           if ($753) {
            $754 = ($$587$i | 0) > ($750 | 0);
            $755 = $754 ? $750 : $$587$i;
            ___fwritex($s9$2$i, $755, $f) | 0;
           }
           $756 = $$587$i - $750 | 0;
           $757 = $d$686$i + 4 | 0;
           $758 = $757 >>> 0 < $z$6$$i >>> 0;
           $759 = ($756 | 0) > -1;
           $760 = $758 & $759;
           if ($760) {
            $$587$i = $756;
            $d$686$i = $757;
           } else {
            $$5$lcssa$i = $756;
            break;
           }
          }
         } else {
          $$5$lcssa$i = $$311$i;
         }
         $761 = $$5$lcssa$i + 18 | 0;
         _pad($f, 48, $761, 18, 0);
         $762 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
         $763 = $762 & 32;
         $764 = ($763 | 0) == 0;
         if (!$764) {
          break;
         }
         $765 = $estr$2$i;
         $766 = $8 - $765 | 0;
         ___fwritex($estr$2$i, $766, $f) | 0;
        }
       } while (0);
       $767 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $688, $767);
       $768 = ($688 | 0) < ($w$1 | 0);
       $w$30$i = $768 ? $w$1 : $688;
       $$0$i = $w$30$i;
      } else {
       $376 = $t$0 & 32;
       $377 = ($376 | 0) != 0;
       $378 = $377 ? 15843 : 15847;
       $379 = $$07$i != $$07$i | 0.0 != 0.0;
       $380 = $377 ? 15851 : 15855;
       $pl$1$i = $379 ? 0 : $pl$0$i;
       $s1$0$i = $379 ? $380 : $378;
       $381 = $pl$1$i + 3 | 0;
       _pad($f, 32, $w$1, $381, $175);
       $382 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
       $383 = $382 & 32;
       $384 = ($383 | 0) == 0;
       if ($384) {
        ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
        $$pre$i = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
        $386 = $$pre$i;
       } else {
        $386 = $382;
       }
       $385 = $386 & 32;
       $387 = ($385 | 0) == 0;
       if ($387) {
        ___fwritex($s1$0$i, 3, $f) | 0;
       }
       $388 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $381, $388);
       $389 = ($381 | 0) < ($w$1 | 0);
       $390 = $389 ? $w$1 : $381;
       $$0$i = $390;
      }
     } while (0);
     $cnt$0 = $cnt$1;
     $fmt41 = $$lcssa323;
     $l$0 = $$0$i;
     $l10n$0 = $l10n$3;
     continue L1;
     break;
    }
   default:
    {
     $a$2 = $fmt41;
     $fl$6 = $fl$1$;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 15807;
     $z$2 = $1;
    }
   }
  } while (0);
  L313 : do {
   if ((label | 0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
    $209 = $206 + 4 | 0;
    $210 = $209;
    $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
    $212 = $t$1 & 32;
    $213 = ($208 | 0) == 0;
    $214 = ($211 | 0) == 0;
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 15807;
     label = 77;
    } else {
     $$012$i = $1;
     $217 = $208;
     $224 = $211;
     while (1) {
      $216 = $217 & 15;
      $218 = 15791 + $216 | 0;
      $219 = SAFE_HEAP_LOAD($218 >> 0 | 0, 1, 0) | 0 | 0;
      $220 = $219 & 255;
      $221 = $220 | $212;
      $222 = $221 & 255;
      $223 = $$012$i + -1 | 0;
      SAFE_HEAP_STORE($223 >> 0 | 0, $222 | 0, 1);
      $225 = _bitshift64Lshr($217 | 0, $224 | 0, 4) | 0;
      $226 = tempRet0;
      $227 = ($225 | 0) == 0;
      $228 = ($226 | 0) == 0;
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;
       $217 = $225;
       $224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
     $233 = $230 + 4 | 0;
     $234 = $233;
     $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
     $236 = ($232 | 0) == 0;
     $237 = ($235 | 0) == 0;
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239 | 0) == 0;
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 0;
      $prefix$1 = 15807;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = 15807 + $241 | 0;
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 2;
      $prefix$1 = $242;
      label = 77;
     }
    }
   } else if ((label | 0) == 76) {
    label = 0;
    $288 = _fmt_u($286, $287, $1) | 0;
    $a$0 = $288;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 77;
   } else if ((label | 0) == 82) {
    label = 0;
    $320 = _memchr($a$1, 0, $p$0) | 0;
    $321 = ($320 | 0) == (0 | 0);
    $322 = $320;
    $323 = $a$1;
    $324 = $322 - $323 | 0;
    $325 = $a$1 + $p$0 | 0;
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;
    $fl$6 = $175;
    $p$5 = $p$3;
    $pl$2 = 0;
    $prefix$2 = 15807;
    $z$2 = $z$1;
   } else if ((label | 0) == 86) {
    label = 0;
    $333 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
    $i$0114 = 0;
    $l$1113 = 0;
    $ws$0115 = $333;
    while (1) {
     $334 = SAFE_HEAP_LOAD($ws$0115 | 0, 4, 0) | 0 | 0;
     $335 = ($334 | 0) == 0;
     if ($335) {
      $i$0$lcssa = $i$0114;
      $l$2 = $l$1113;
      break;
     }
     $336 = _wctomb($mb, $334) | 0;
     $337 = ($336 | 0) < 0;
     $338 = $p$4198 - $i$0114 | 0;
     $339 = $336 >>> 0 > $338 >>> 0;
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;
      $l$2 = $336;
      break;
     }
     $340 = $ws$0115 + 4 | 0;
     $341 = $336 + $i$0114 | 0;
     $342 = $p$4198 >>> 0 > $341 >>> 0;
     if ($342) {
      $i$0114 = $341;
      $l$1113 = $336;
      $ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;
      $l$2 = $336;
      break;
     }
    }
    $343 = ($l$2 | 0) < 0;
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
    $344 = ($i$0$lcssa | 0) == 0;
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = SAFE_HEAP_LOAD($arg | 0, 4, 0) | 0 | 0;
     $i$1125 = 0;
     $ws$1126 = $345;
     while (1) {
      $346 = SAFE_HEAP_LOAD($ws$1126 | 0, 4, 0) | 0 | 0;
      $347 = ($346 | 0) == 0;
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = $ws$1126 + 4 | 0;
      $349 = _wctomb($mb, $346) | 0;
      $350 = $349 + $i$1125 | 0;
      $351 = ($350 | 0) > ($i$0$lcssa | 0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
      $353 = $352 & 32;
      $354 = ($353 | 0) == 0;
      if ($354) {
       ___fwritex($mb, $349, $f) | 0;
      }
      $355 = $350 >>> 0 < $i$0$lcssa >>> 0;
      if ($355) {
       $i$1125 = $350;
       $ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f, 32, $w$1, $i$0$lcssa200, $356);
   $357 = ($w$1 | 0) > ($i$0$lcssa200 | 0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;
   $fmt41 = $$lcssa323;
   $l$0 = $358;
   $l10n$0 = $l10n$3;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $289 = ($p$2 | 0) > -1;
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
   $294 = $291 + 4 | 0;
   $295 = $294;
   $296 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
   $297 = ($293 | 0) != 0;
   $298 = ($296 | 0) != 0;
   $299 = $297 | $298;
   $300 = ($p$2 | 0) != 0;
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = $2 - $301 | 0;
    $303 = $299 & 1;
    $304 = $303 ^ 1;
    $305 = $304 + $302 | 0;
    $306 = ($p$2 | 0) > ($305 | 0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = $p$2$;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = $769 - $770 | 0;
  $772 = ($p$5 | 0) < ($771 | 0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = $pl$2 + $$p$5 | 0;
  $774 = ($w$1 | 0) < ($773 | 0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f, 32, $w$2, $773, $fl$6);
  $775 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $776 = $775 & 32;
  $777 = ($776 | 0) == 0;
  if ($777) {
   ___fwritex($prefix$2, $pl$2, $f) | 0;
  }
  $778 = $fl$6 ^ 65536;
  _pad($f, 48, $w$2, $773, $778);
  _pad($f, 48, $$p$5, $771, 0);
  $779 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $780 = $779 & 32;
  $781 = ($780 | 0) == 0;
  if ($781) {
   ___fwritex($a$2, $771, $f) | 0;
  }
  $782 = $fl$6 ^ 8192;
  _pad($f, 32, $w$2, $773, $782);
  $cnt$0 = $cnt$1;
  $fmt41 = $$lcssa323;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 L348 : do {
  if ((label | 0) == 245) {
   $783 = ($f | 0) == (0 | 0);
   if ($783) {
    $784 = ($l10n$0$lcssa | 0) == 0;
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while (1) {
      $785 = $nl_type + ($i$2100 << 2) | 0;
      $786 = SAFE_HEAP_LOAD($785 | 0, 4, 0) | 0 | 0;
      $787 = ($786 | 0) == 0;
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = $nl_arg + ($i$2100 << 3) | 0;
      _pop_arg($789, $786, $ap);
      $790 = $i$2100 + 1 | 0;
      $791 = ($790 | 0) < 10;
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa | 0) < 10;
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while (1) {
       $794 = $nl_type + ($i$398 << 2) | 0;
       $795 = SAFE_HEAP_LOAD($794 | 0, 4, 0) | 0 | 0;
       $796 = ($795 | 0) == 0;
       $792 = $i$398 + 1 | 0;
       if (!$796) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792 | 0) < 10;
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i = 0, $$012 = 0, $$06 = 0, $$1$i = 0, $$113 = 0, $$13$i = 0, $$17 = 0, $$2$i = 0, $$214 = 0, $$24$i = 0, $$24$ph = 0, $$28 = 0, $$3$i = 0, $$35$i = 0, $$7 = 0, $$in = 0, $$in109 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$lcssa156 = 0;
 var $$ph96 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i27 = 0, $$pre86 = 0, $$pre87 = 0, $$pre88 = 0, $$pre89 = 0, $$pre90 = 0, $$pre91 = 0, $$pre92 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$0121 = 0, $k2$0122 = 0, $left$i = 0, $lpad$phi$index = 0, $lpad$phi$index12 = 0, $lpad$phi72$index = 0, $lpad$phi72$index7 = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0;
 var $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $ret1 = 0, $ret2 = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$2 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $left$i = sp + 96 | 0;
 $0 = sp + 84 | 0;
 $1 = sp + 72 | 0;
 $2 = sp + 60 | 0;
 $3 = sp + 48 | 0;
 $ret2 = sp + 36 | 0;
 $ret1 = sp + 24 | 0;
 $tmp = sp + 12 | 0;
 $4 = sp;
 $5 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($5) {
   $$7 = $first;
  } else {
   $6 = $db + 56 | 0;
   $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $8 = $7 + 1 | 0;
   SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
   $9 = $db + 61 | 0;
   $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $8 >>> 0 > 1;
   if ($11) {
    SAFE_HEAP_STORE($9 >> 0 | 0, 1 | 0, 1);
   }
   $12 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $13 = $12 << 24 >> 24;
   L6 : do {
    switch ($13 | 0) {
    case 84:
    case 71:
     {
      $14 = $last;
      $15 = $first;
      $16 = $14 - $15 | 0;
      $17 = ($16 | 0) > 2;
      L133 : do {
       if ($17) {
        switch ($13 | 0) {
        case 84:
         {
          break;
         }
        case 71:
         {
          $220 = $first + 1 | 0;
          $221 = SAFE_HEAP_LOAD($220 >> 0 | 0, 1, 0) | 0 | 0;
          $222 = $221 << 24 >> 24;
          switch ($222 | 0) {
          case 86:
           {
            $223 = $first + 2 | 0;
            __THREW__ = 0;
            $224 = invoke_iiii(233, $223 | 0, $last | 0, $db | 0) | 0;
            $225 = __THREW__;
            __THREW__ = 0;
            $226 = $225 & 1;
            if ($226) {
             label = 87;
             break L6;
            }
            $227 = ($224 | 0) == ($223 | 0);
            if ($227) {
             $$0$i = $first;
             break L133;
            }
            $228 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $229 = $db + 4 | 0;
            $230 = SAFE_HEAP_LOAD($229 | 0, 4, 0) | 0 | 0;
            $231 = ($228 | 0) == ($230 | 0);
            if ($231) {
             $$0$i = $first;
             break L133;
            }
            $232 = $230 + -24 | 0;
            __THREW__ = 0;
            invoke_iiii(227, $232 | 0, 0, 12205 | 0) | 0;
            $233 = __THREW__;
            __THREW__ = 0;
            $234 = $233 & 1;
            if ($234) {
             label = 87;
             break L6;
            } else {
             $$0$i = $224;
             break L133;
            }
            break;
           }
          case 82:
           {
            $235 = $first + 2 | 0;
            __THREW__ = 0;
            $236 = invoke_iiii(233, $235 | 0, $last | 0, $db | 0) | 0;
            $237 = __THREW__;
            __THREW__ = 0;
            $238 = $237 & 1;
            if ($238) {
             label = 87;
             break L6;
            }
            $239 = ($236 | 0) == ($235 | 0);
            if ($239) {
             $$0$i = $first;
             break L133;
            }
            $240 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $241 = $db + 4 | 0;
            $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
            $243 = ($240 | 0) == ($242 | 0);
            if ($243) {
             $$0$i = $first;
             break L133;
            }
            $244 = $242 + -24 | 0;
            __THREW__ = 0;
            invoke_iiii(227, $244 | 0, 0, 12225 | 0) | 0;
            $245 = __THREW__;
            __THREW__ = 0;
            $246 = $245 & 1;
            if ($246) {
             label = 87;
             break L6;
            } else {
             $$0$i = $236;
             break L133;
            }
            break;
           }
          default:
           {
            $$0$i = $first;
            break L133;
           }
          }
          break;
         }
        default:
         {
          $$0$i = $first;
          break L133;
         }
        }
        $18 = $first + 1 | 0;
        $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
        $20 = $19 << 24 >> 24;
        switch ($20 | 0) {
        case 86:
         {
          $21 = $first + 2 | 0;
          __THREW__ = 0;
          $22 = invoke_iiii(230, $21 | 0, $last | 0, $db | 0) | 0;
          $23 = __THREW__;
          __THREW__ = 0;
          $24 = $23 & 1;
          if ($24) {
           label = 87;
           break L6;
          }
          $25 = ($22 | 0) == ($21 | 0);
          if ($25) {
           $$0$i = $first;
           break L133;
          }
          $26 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $27 = $db + 4 | 0;
          $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
          $29 = ($26 | 0) == ($28 | 0);
          if ($29) {
           $$0$i = $first;
           break L133;
          }
          $30 = $28 + -24 | 0;
          __THREW__ = 0;
          invoke_iiii(227, $30 | 0, 0, 12054 | 0) | 0;
          $31 = __THREW__;
          __THREW__ = 0;
          $32 = $31 & 1;
          if ($32) {
           label = 87;
           break L6;
          } else {
           $$0$i = $22;
           break L133;
          }
          break;
         }
        case 84:
         {
          $33 = $first + 2 | 0;
          __THREW__ = 0;
          $34 = invoke_iiii(230, $33 | 0, $last | 0, $db | 0) | 0;
          $35 = __THREW__;
          __THREW__ = 0;
          $36 = $35 & 1;
          if ($36) {
           label = 87;
           break L6;
          }
          $37 = ($34 | 0) == ($33 | 0);
          if ($37) {
           $$0$i = $first;
           break L133;
          }
          $38 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $39 = $db + 4 | 0;
          $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
          $41 = ($38 | 0) == ($40 | 0);
          if ($41) {
           $$0$i = $first;
           break L133;
          }
          $42 = $40 + -24 | 0;
          __THREW__ = 0;
          invoke_iiii(227, $42 | 0, 0, 12066 | 0) | 0;
          $43 = __THREW__;
          __THREW__ = 0;
          $44 = $43 & 1;
          if ($44) {
           label = 87;
           break L6;
          } else {
           $$0$i = $34;
           break L133;
          }
          break;
         }
        case 73:
         {
          $45 = $first + 2 | 0;
          __THREW__ = 0;
          $46 = invoke_iiii(230, $45 | 0, $last | 0, $db | 0) | 0;
          $47 = __THREW__;
          __THREW__ = 0;
          $48 = $47 & 1;
          if ($48) {
           label = 87;
           break L6;
          }
          $49 = ($46 | 0) == ($45 | 0);
          if ($49) {
           $$0$i = $first;
           break L133;
          }
          $50 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $51 = $db + 4 | 0;
          $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
          $53 = ($50 | 0) == ($52 | 0);
          if ($53) {
           $$0$i = $first;
           break L133;
          }
          $54 = $52 + -24 | 0;
          __THREW__ = 0;
          invoke_iiii(227, $54 | 0, 0, 12075 | 0) | 0;
          $55 = __THREW__;
          __THREW__ = 0;
          $56 = $55 & 1;
          if ($56) {
           label = 87;
           break L6;
          } else {
           $$0$i = $46;
           break L133;
          }
          break;
         }
        case 83:
         {
          $57 = $first + 2 | 0;
          __THREW__ = 0;
          $58 = invoke_iiii(230, $57 | 0, $last | 0, $db | 0) | 0;
          $59 = __THREW__;
          __THREW__ = 0;
          $60 = $59 & 1;
          if ($60) {
           label = 87;
           break L6;
          }
          $61 = ($58 | 0) == ($57 | 0);
          if ($61) {
           $$0$i = $first;
           break L133;
          }
          $62 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $63 = $db + 4 | 0;
          $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
          $65 = ($62 | 0) == ($64 | 0);
          if ($65) {
           $$0$i = $first;
           break L133;
          }
          $66 = $64 + -24 | 0;
          __THREW__ = 0;
          invoke_iiii(227, $66 | 0, 0, 12089 | 0) | 0;
          $67 = __THREW__;
          __THREW__ = 0;
          $68 = $67 & 1;
          if ($68) {
           label = 87;
           break L6;
          } else {
           $$0$i = $58;
           break L133;
          }
          break;
         }
        case 99:
         {
          $69 = $first + 2 | 0;
          $70 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($69, $last) | 0;
          $71 = ($70 | 0) == ($69 | 0);
          if ($71) {
           $$0$i = $first;
           break L133;
          }
          $72 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($70, $last) | 0;
          $73 = ($72 | 0) == ($70 | 0);
          if ($73) {
           $$0$i = $first;
           break L133;
          }
          __THREW__ = 0;
          $74 = invoke_iiii(231, $72 | 0, $last | 0, $db | 0) | 0;
          $75 = __THREW__;
          __THREW__ = 0;
          $76 = $75 & 1;
          if ($76) {
           label = 87;
           break L6;
          }
          $77 = ($74 | 0) == ($72 | 0);
          if ($77) {
           $$0$i = $first;
           break L133;
          }
          $78 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $79 = $db + 4 | 0;
          $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
          $81 = ($78 | 0) == ($80 | 0);
          if ($81) {
           $$0$i = $first;
           break L133;
          }
          $82 = $80 + -24 | 0;
          __THREW__ = 0;
          invoke_iiii(227, $82 | 0, 0, 12108 | 0) | 0;
          $83 = __THREW__;
          __THREW__ = 0;
          $84 = $83 & 1;
          if ($84) {
           label = 87;
           break L6;
          } else {
           $$0$i = $74;
           break L133;
          }
          break;
         }
        case 67:
         {
          $85 = $first + 2 | 0;
          __THREW__ = 0;
          $86 = invoke_iiii(230, $85 | 0, $last | 0, $db | 0) | 0;
          $87 = __THREW__;
          __THREW__ = 0;
          $88 = $87 & 1;
          if ($88) {
           label = 87;
           break L6;
          }
          $89 = ($86 | 0) == ($85 | 0);
          if ($89) {
           $$0$i = $first;
           break L133;
          }
          $90 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($86, $last) | 0;
          $91 = ($90 | 0) == ($86 | 0);
          $92 = ($90 | 0) == ($last | 0);
          $or$cond$i = $91 | $92;
          if ($or$cond$i) {
           $$0$i = $first;
           break L133;
          }
          $93 = SAFE_HEAP_LOAD($90 >> 0 | 0, 1, 0) | 0 | 0;
          $94 = $93 << 24 >> 24 == 95;
          if (!$94) {
           $$0$i = $first;
           break L133;
          }
          $95 = $90 + 1 | 0;
          __THREW__ = 0;
          $96 = invoke_iiii(230, $95 | 0, $last | 0, $db | 0) | 0;
          $97 = __THREW__;
          __THREW__ = 0;
          $98 = $97 & 1;
          if ($98) {
           label = 87;
           break L6;
          }
          $99 = ($96 | 0) == ($95 | 0);
          if ($99) {
           $$0$i = $first;
           break L133;
          }
          $100 = $db + 4 | 0;
          $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
          $102 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $103 = $101;
          $104 = $102;
          $105 = $103 - $104 | 0;
          $106 = ($105 | 0) / 24 & -1;
          $107 = $106 >>> 0 < 2;
          if ($107) {
           $$0$i = $first;
           break L133;
          }
          $108 = $101 + -24 | 0;
          __THREW__ = 0;
          invoke_vii(232, $left$i | 0, $108 | 0);
          $109 = __THREW__;
          __THREW__ = 0;
          $110 = $109 & 1;
          if ($110) {
           label = 87;
           break L6;
          }
          $111 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
          $112 = $111 + -24 | 0;
          $114 = $111;
          while (1) {
           $113 = $114 + -24 | 0;
           SAFE_HEAP_STORE($100 | 0, $113 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($113);
           $$pre$i$i = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
           $115 = ($$pre$i$i | 0) == ($112 | 0);
           if ($115) {
            break;
           } else {
            $114 = $$pre$i$i;
           }
          }
          $116 = $111 + -48 | 0;
          __THREW__ = 0;
          $117 = invoke_iiii(227, $left$i | 0, 0, 12135 | 0) | 0;
          $118 = __THREW__;
          __THREW__ = 0;
          $119 = $118 & 1;
          if ($119) {
           $194 = ___cxa_find_matching_catch() | 0;
           $195 = tempRet0;
           $$3$i = $195;
           $$35$i = $194;
          } else {
           {}
           SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($117 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($117 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($117 | 0, 0 | 0, 4);
           $120 = $117 + 4 | 0;
           SAFE_HEAP_STORE($120 | 0, 0 | 0, 4);
           $121 = $117 + 8 | 0;
           SAFE_HEAP_STORE($121 | 0, 0 | 0, 4);
           __THREW__ = 0;
           $122 = invoke_iii(228, $2 | 0, 12160 | 0) | 0;
           $123 = __THREW__;
           __THREW__ = 0;
           $124 = $123 & 1;
           if ($124) {
            $196 = ___cxa_find_matching_catch() | 0;
            $197 = tempRet0;
            $$2$i = $197;
            $$24$i = $196;
           } else {
            {}
            SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($122 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($122 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($122 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($122 | 0, 0 | 0, 4);
            $125 = $122 + 4 | 0;
            SAFE_HEAP_STORE($125 | 0, 0 | 0, 4);
            $126 = $122 + 8 | 0;
            SAFE_HEAP_STORE($126 | 0, 0 | 0, 4);
            $127 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
            $128 = $127 + -24 | 0;
            __THREW__ = 0;
            invoke_vii(232, $3 | 0, $128 | 0);
            $129 = __THREW__;
            __THREW__ = 0;
            $130 = $129 & 1;
            do {
             if ($130) {
              $198 = ___cxa_find_matching_catch() | 0;
              $199 = tempRet0;
              $$1$i = $199;
              $$13$i = $198;
             } else {
              $131 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
              $132 = $131 & 1;
              $133 = $132 << 24 >> 24 == 0;
              $134 = $3 + 8 | 0;
              $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
              $136 = $3 + 1 | 0;
              $137 = $133 ? $136 : $135;
              $138 = $3 + 4 | 0;
              $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
              $140 = $131 & 255;
              $141 = $140 >>> 1;
              $142 = $133 ? $141 : $139;
              __THREW__ = 0;
              $143 = invoke_iiii(222, $1 | 0, $137 | 0, $142 | 0) | 0;
              $144 = __THREW__;
              __THREW__ = 0;
              $145 = $144 & 1;
              if ($145) {
               $200 = ___cxa_find_matching_catch() | 0;
               $201 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
               $$1$i = $201;
               $$13$i = $200;
               break;
              }
              {}
              SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($143 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($143 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($143 | 0, 0 | 0, 4);
              $146 = $143 + 4 | 0;
              SAFE_HEAP_STORE($146 | 0, 0 | 0, 4);
              $147 = $143 + 8 | 0;
              SAFE_HEAP_STORE($147 | 0, 0 | 0, 4);
              $148 = SAFE_HEAP_LOAD($116 >> 0 | 0, 1, 0) | 0 | 0;
              $149 = $148 & 1;
              $150 = $149 << 24 >> 24 == 0;
              do {
               if ($150) {
                $151 = $116 + 1 | 0;
                SAFE_HEAP_STORE($151 >> 0 | 0, 0 | 0, 1);
                SAFE_HEAP_STORE($116 >> 0 | 0, 0 | 0, 1);
               } else {
                $152 = $111 + -40 | 0;
                $153 = SAFE_HEAP_LOAD($152 | 0, 4, 0) | 0 | 0;
                SAFE_HEAP_STORE($153 >> 0 | 0, 0 | 0, 1);
                $154 = $111 + -44 | 0;
                SAFE_HEAP_STORE($154 | 0, 0 | 0, 4);
                $$pre$i$i$i$i = SAFE_HEAP_LOAD($116 >> 0 | 0, 1, 0) | 0 | 0;
                $155 = $$pre$i$i$i$i & 1;
                $156 = $155 << 24 >> 24 == 0;
                if ($156) {
                 $161 = $$pre$i$i$i$i;
                 $170 = 10;
                } else {
                 $157 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
                 $158 = $157 & -2;
                 $phitmp$i$i$i$i$i$i$i = $158 + -1 | 0;
                 $159 = $157 & 255;
                 $161 = $159;
                 $170 = $phitmp$i$i$i$i$i$i$i;
                }
                $160 = $161 & 1;
                $162 = $160 << 24 >> 24 == 0;
                do {
                 if ($162) {
                  $163 = $161 & 255;
                  $164 = $163 >>> 1;
                  $165 = ($161 & 255) < 22;
                  if ($165) {
                   $168 = 10;
                   $189 = $164;
                   $552 = 1;
                   break;
                  }
                  $166 = $164 + 16 | 0;
                  $167 = $166 & 240;
                  $phitmp$i2$i$i$i$i$i$i = $167 + -1 | 0;
                  $168 = $phitmp$i2$i$i$i$i$i$i;
                  $189 = $164;
                  $552 = 1;
                 } else {
                  $168 = 10;
                  $189 = 0;
                  $552 = 0;
                 }
                } while (0);
                $169 = ($168 | 0) == ($170 | 0);
                if ($169) {
                 break;
                }
                $171 = ($168 | 0) == 10;
                if ($171) {
                 $176 = $116 + 1 | 0;
                 $177 = SAFE_HEAP_LOAD($152 | 0, 4, 0) | 0 | 0;
                 if ($552) {
                  $178 = $161 & 255;
                  $179 = $178 >>> 1;
                  $180 = $179 + 1 | 0;
                  _memcpy($176 | 0, $177 | 0, $180 | 0) | 0;
                  _free($177);
                 } else {
                  $185 = SAFE_HEAP_LOAD($177 >> 0 | 0, 1, 0) | 0 | 0;
                  SAFE_HEAP_STORE($176 >> 0 | 0, $185 | 0, 1);
                  _free($177);
                 }
                 $190 = $189 << 1;
                 $191 = $190 & 255;
                 SAFE_HEAP_STORE($116 >> 0 | 0, $191 | 0, 1);
                 break;
                }
                $172 = $168 >>> 0 <= $170 >>> 0;
                $173 = $168 + 1 | 0;
                $174 = _malloc($173) | 0;
                $175 = ($174 | 0) == (0 | 0);
                $or$cond$i$i$i$i$i$i = $172 & $175;
                if ($or$cond$i$i$i$i$i$i) {
                 break;
                }
                if ($552) {
                 $181 = $116 + 1 | 0;
                 $182 = $161 & 255;
                 $183 = $182 >>> 1;
                 $184 = $183 + 1 | 0;
                 _memcpy($174 | 0, $181 | 0, $184 | 0) | 0;
                } else {
                 $186 = SAFE_HEAP_LOAD($152 | 0, 4, 0) | 0 | 0;
                 $187 = SAFE_HEAP_LOAD($186 >> 0 | 0, 1, 0) | 0 | 0;
                 SAFE_HEAP_STORE($174 >> 0 | 0, $187 | 0, 1);
                 _free($186);
                }
                $188 = $173 | 1;
                SAFE_HEAP_STORE($116 | 0, $188 | 0, 4);
                SAFE_HEAP_STORE($154 | 0, $189 | 0, 4);
                SAFE_HEAP_STORE($152 | 0, $174 | 0, 4);
               }
              } while (0);
              {}
              SAFE_HEAP_STORE($116 | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($116 + 4 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($116 + 8 | 0, SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
              $192 = $0 + 4 | 0;
              SAFE_HEAP_STORE($192 | 0, 0 | 0, 4);
              $193 = $0 + 8 | 0;
              SAFE_HEAP_STORE($193 | 0, 0 | 0, 4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
              $$0$i = $96;
              break L133;
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$2$i = $$1$i;
            $$24$i = $$13$i;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$3$i = $$2$i;
           $$35$i = $$24$i;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
          $eh$lpad$body$index2Z2D = $$3$i;
          $eh$lpad$body$indexZ2D = $$35$i;
          label = 88;
          break L6;
          break;
         }
        default:
         {
          $202 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($18, $last) | 0;
          $203 = ($202 | 0) == ($18 | 0);
          if ($203) {
           $$0$i = $first;
           break L133;
          }
          __THREW__ = 0;
          $204 = invoke_iiii(231, $202 | 0, $last | 0, $db | 0) | 0;
          $205 = __THREW__;
          __THREW__ = 0;
          $206 = $205 & 1;
          if ($206) {
           label = 87;
           break L6;
          }
          $207 = ($204 | 0) == ($202 | 0);
          if ($207) {
           $$0$i = $first;
           break L133;
          }
          $208 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $209 = $db + 4 | 0;
          $210 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
          $211 = ($208 | 0) == ($210 | 0);
          if ($211) {
           $$0$i = $first;
           break L133;
          }
          $212 = $first + 2 | 0;
          $213 = SAFE_HEAP_LOAD($212 >> 0 | 0, 1, 0) | 0 | 0;
          $214 = $213 << 24 >> 24 == 118;
          $215 = $210 + -24 | 0;
          __THREW__ = 0;
          if ($214) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($215, 0, 12165) | 0;
           $216 = __THREW__;
           __THREW__ = 0;
           $217 = $216 & 1;
           if ($217) {
            label = 87;
            break L6;
           } else {
            $$0$i = $204;
            break L133;
           }
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($215, 0, 12183) | 0;
           $218 = __THREW__;
           __THREW__ = 0;
           $219 = $218 & 1;
           if ($219) {
            label = 87;
            break L6;
           } else {
            $$0$i = $204;
            break L133;
           }
          }
         }
        }
       } else {
        $$0$i = $first;
       }
      } while (0);
      $$24$ph = $$0$i;
      label = 180;
      break;
     }
    default:
     {
      __THREW__ = 0;
      $249 = invoke_iiii(233, $first | 0, $last | 0, $db | 0) | 0;
      $250 = __THREW__;
      __THREW__ = 0;
      $251 = $250 & 1;
      if ($251) {
       label = 87;
      } else {
       $252 = $db + 48 | 0;
       $253 = SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0;
       $254 = $db + 52 | 0;
       $255 = SAFE_HEAP_LOAD($254 | 0, 4, 0) | 0 | 0;
       $256 = ($249 | 0) == ($first | 0);
       if ($256) {
        $$24$ph = $first;
        label = 180;
       } else {
        $257 = ($249 | 0) == ($last | 0);
        if ($257) {
         $$24$ph = $last;
         label = 180;
        } else {
         $258 = SAFE_HEAP_LOAD($249 >> 0 | 0, 1, 0) | 0 | 0;
         switch ($258 << 24 >> 24) {
         case 46:
         case 69:
          {
           $$24$ph = $249;
           label = 180;
           break L6;
           break;
          }
         default:
          {}
         }
         $259 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
         SAFE_HEAP_STORE($9 >> 0 | 0, 0 | 0, 1);
         SAFE_HEAP_STORE($ret2 | 0, 0 | 0, 4);
         $260 = $ret2 + 4 | 0;
         SAFE_HEAP_STORE($260 | 0, 0 | 0, 4);
         $261 = $ret2 + 8 | 0;
         SAFE_HEAP_STORE($261 | 0, 0 | 0, 4);
         $262 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $263 = $db + 4 | 0;
         $264 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
         $265 = ($262 | 0) == ($264 | 0);
         L12 : do {
          if (!$265) {
           $266 = $264 + -24 | 0;
           $267 = SAFE_HEAP_LOAD($266 >> 0 | 0, 1, 0) | 0 | 0;
           $268 = $267 & 1;
           $269 = $268 << 24 >> 24 == 0;
           if ($269) {
            $272 = $267 & 255;
            $273 = $272 >>> 1;
            $274 = $273;
           } else {
            $270 = $264 + -20 | 0;
            $271 = SAFE_HEAP_LOAD($270 | 0, 4, 0) | 0 | 0;
            $274 = $271;
           }
           $275 = ($274 | 0) == 0;
           if (!$275) {
            $280 = $db + 60 | 0;
            $281 = SAFE_HEAP_LOAD($280 >> 0 | 0, 1, 0) | 0 | 0;
            $282 = $281 << 24 >> 24 == 0;
            L19 : do {
             if ($282) {
              if ($269) {
               $287 = $266 + 1 | 0;
               $288 = $267 & 255;
               $289 = $288 >>> 1;
               $290 = $289;
               $292 = $287;
              } else {
               $283 = $264 + -16 | 0;
               $284 = SAFE_HEAP_LOAD($283 | 0, 4, 0) | 0 | 0;
               $285 = $264 + -20 | 0;
               $286 = SAFE_HEAP_LOAD($285 | 0, 4, 0) | 0 | 0;
               $290 = $286;
               $292 = $284;
              }
              $$sum$i = $290 + -1 | 0;
              $291 = $292 + $$sum$i | 0;
              $293 = SAFE_HEAP_LOAD($291 >> 0 | 0, 1, 0) | 0 | 0;
              $294 = $293 << 24 >> 24 == 62;
              if ($294) {
               if ($269) {
                $299 = $267 & 255;
                $300 = $299 >>> 1;
                $301 = $266 + 1 | 0;
                $$in = $300;
                $304 = $301;
               } else {
                $295 = $264 + -20 | 0;
                $296 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
                $297 = $264 + -16 | 0;
                $298 = SAFE_HEAP_LOAD($297 | 0, 4, 0) | 0 | 0;
                $$in = $296;
                $304 = $298;
               }
               $302 = $$in + -2 | 0;
               $303 = $304 + $302 | 0;
               $305 = SAFE_HEAP_LOAD($303 >> 0 | 0, 1, 0) | 0 | 0;
               $306 = $305 << 24 >> 24 == 45;
               if ($306) {
                $403 = $264;
                $t$0 = $249;
                label = 134;
               } else {
                if ($269) {
                 $311 = $267 & 255;
                 $312 = $311 >>> 1;
                 $313 = $266 + 1 | 0;
                 $$in109 = $312;
                 $316 = $313;
                } else {
                 $307 = $264 + -20 | 0;
                 $308 = SAFE_HEAP_LOAD($307 | 0, 4, 0) | 0 | 0;
                 $309 = $264 + -16 | 0;
                 $310 = SAFE_HEAP_LOAD($309 | 0, 4, 0) | 0 | 0;
                 $$in109 = $308;
                 $316 = $310;
                }
                $314 = $$in109 + -2 | 0;
                $315 = $316 + $314 | 0;
                $317 = SAFE_HEAP_LOAD($315 >> 0 | 0, 1, 0) | 0 | 0;
                $318 = $317 << 24 >> 24 == 62;
                if ($318) {
                 $403 = $264;
                 $t$0 = $249;
                 label = 134;
                } else {
                 __THREW__ = 0;
                 $319 = invoke_iiii(230, $249 | 0, $last | 0, $db | 0) | 0;
                 $320 = __THREW__;
                 __THREW__ = 0;
                 $321 = $320 & 1;
                 if ($321) {
                  label = 99;
                 } else {
                  $322 = ($319 | 0) == ($249 | 0);
                  if ($322) {
                   break L12;
                  }
                  $323 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                  $324 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $325 = $323;
                  $326 = $324;
                  $327 = $325 - $326 | 0;
                  $328 = ($327 | 0) / 24 & -1;
                  $329 = $328 >>> 0 < 2;
                  if ($329) {
                   break L12;
                  }
                  $330 = $323 + -24 | 0;
                  {}
                  SAFE_HEAP_STORE($ret1 | 0, SAFE_HEAP_LOAD($330 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($ret1 + 4 | 0, SAFE_HEAP_LOAD($330 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($ret1 + 8 | 0, SAFE_HEAP_LOAD($330 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($330 | 0, 0 | 0, 4);
                  $331 = $330 + 4 | 0;
                  SAFE_HEAP_STORE($331 | 0, 0 | 0, 4);
                  $332 = $330 + 8 | 0;
                  SAFE_HEAP_STORE($332 | 0, 0 | 0, 4);
                  $333 = $323 + -12 | 0;
                  $334 = SAFE_HEAP_LOAD($ret2 >> 0 | 0, 1, 0) | 0 | 0;
                  $335 = $334 & 1;
                  $336 = $335 << 24 >> 24 == 0;
                  L39 : do {
                   if ($336) {
                    $337 = $ret2 + 1 | 0;
                    SAFE_HEAP_STORE($337 >> 0 | 0, 0 | 0, 1);
                    SAFE_HEAP_STORE($ret2 >> 0 | 0, 0 | 0, 1);
                   } else {
                    $338 = $ret2 + 8 | 0;
                    $339 = SAFE_HEAP_LOAD($338 | 0, 4, 0) | 0 | 0;
                    SAFE_HEAP_STORE($339 >> 0 | 0, 0 | 0, 1);
                    $340 = $ret2 + 4 | 0;
                    SAFE_HEAP_STORE($340 | 0, 0 | 0, 4);
                    $341 = SAFE_HEAP_LOAD($ret2 | 0, 4, 0) | 0 | 0;
                    $342 = $341 & -2;
                    $phitmp$i$i$i$i$i$i = $342 + -1 | 0;
                    $343 = $341 & 255;
                    $344 = $343 & 1;
                    $345 = $344 << 24 >> 24 == 0;
                    do {
                     if ($345) {
                      $346 = $341 >>> 1;
                      $347 = $346 & 127;
                      $348 = ($343 & 255) < 22;
                      if ($348) {
                       $355 = $ret2 + 1 | 0;
                       $356 = $341 >>> 1;
                       $357 = $356 & 127;
                       $358 = $357 + 1 | 0;
                       _memcpy($355 | 0, $339 | 0, $358 | 0) | 0;
                       _free($339);
                       $$ph96 = $347;
                       break;
                      }
                      $349 = $347 + 16 | 0;
                      $350 = $349 & 240;
                      $phitmp$i2$i$i$i$i$i = $350 + -1 | 0;
                      $351 = ($phitmp$i2$i$i$i$i$i | 0) == ($phitmp$i$i$i$i$i$i | 0);
                      if ($351) {
                       break L39;
                      }
                      $352 = $phitmp$i2$i$i$i$i$i >>> 0 <= $phitmp$i$i$i$i$i$i >>> 0;
                      $353 = _malloc($350) | 0;
                      $354 = ($353 | 0) == (0 | 0);
                      $or$cond$i$i$i$i$i = $352 & $354;
                      if ($or$cond$i$i$i$i$i) {
                       break L39;
                      }
                      $360 = $ret2 + 1 | 0;
                      $361 = $341 >>> 1;
                      $362 = $361 & 127;
                      $363 = $362 + 1 | 0;
                      _memcpy($353 | 0, $360 | 0, $363 | 0) | 0;
                      $364 = $350 | 1;
                      SAFE_HEAP_STORE($ret2 | 0, $364 | 0, 4);
                      SAFE_HEAP_STORE($340 | 0, $347 | 0, 4);
                      SAFE_HEAP_STORE($338 | 0, $353 | 0, 4);
                      break L39;
                     } else {
                      $359 = $ret2 + 1 | 0;
                      SAFE_HEAP_STORE($359 >> 0 | 0, 0 | 0, 1);
                      _free($339);
                      $$ph96 = 0;
                     }
                    } while (0);
                    $365 = $$ph96 << 1;
                    $366 = $365 & 255;
                    SAFE_HEAP_STORE($ret2 >> 0 | 0, $366 | 0, 1);
                   }
                  } while (0);
                  {}
                  SAFE_HEAP_STORE($ret2 | 0, SAFE_HEAP_LOAD($333 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($ret2 + 4 | 0, SAFE_HEAP_LOAD($333 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($ret2 + 8 | 0, SAFE_HEAP_LOAD($333 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
                  SAFE_HEAP_STORE($333 | 0, 0 | 0, 4);
                  $367 = $333 + 4 | 0;
                  SAFE_HEAP_STORE($367 | 0, 0 | 0, 4);
                  $368 = $333 + 8 | 0;
                  SAFE_HEAP_STORE($368 | 0, 0 | 0, 4);
                  $369 = SAFE_HEAP_LOAD($ret2 >> 0 | 0, 1, 0) | 0 | 0;
                  $370 = $369 & 1;
                  $371 = $370 << 24 >> 24 == 0;
                  $372 = $ret2 + 4 | 0;
                  $373 = SAFE_HEAP_LOAD($372 | 0, 4, 0) | 0 | 0;
                  $374 = $369 & 255;
                  $375 = $374 >>> 1;
                  $376 = $371 ? $375 : $373;
                  $377 = ($376 | 0) == 0;
                  if ($377) {
                   __THREW__ = 0;
                   invoke_vii(234, $ret1 | 0, 32);
                   $378 = __THREW__;
                   __THREW__ = 0;
                   $379 = $378 & 1;
                   if (!$379) {
                    label = 130;
                   }
                  } else {
                   label = 130;
                  }
                  do {
                   if ((label | 0) == 130) {
                    $382 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                    $383 = $382 + -24 | 0;
                    $385 = $382;
                    while (1) {
                     $384 = $385 + -24 | 0;
                     SAFE_HEAP_STORE($263 | 0, $384 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($384);
                     $$pre$i27 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                     $386 = ($$pre$i27 | 0) == ($383 | 0);
                     if ($386) {
                      break;
                     } else {
                      $385 = $$pre$i27;
                     }
                    }
                    $387 = $382 + -48 | 0;
                    $388 = SAFE_HEAP_LOAD($ret1 >> 0 | 0, 1, 0) | 0 | 0;
                    $389 = $388 & 1;
                    $390 = $389 << 24 >> 24 == 0;
                    $391 = $ret1 + 8 | 0;
                    $392 = SAFE_HEAP_LOAD($391 | 0, 4, 0) | 0 | 0;
                    $393 = $ret1 + 1 | 0;
                    $394 = $390 ? $393 : $392;
                    $395 = $ret1 + 4 | 0;
                    $396 = SAFE_HEAP_LOAD($395 | 0, 4, 0) | 0 | 0;
                    $397 = $388 & 255;
                    $398 = $397 >>> 1;
                    $399 = $390 ? $398 : $396;
                    __THREW__ = 0;
                    invoke_iiiii(235, $387 | 0, 0, $394 | 0, $399 | 0) | 0;
                    $400 = __THREW__;
                    __THREW__ = 0;
                    $401 = $400 & 1;
                    if ($401) {
                     break;
                    }
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
                    $$pre = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                    $403 = $$pre;
                    $t$0 = $319;
                    label = 134;
                    break L19;
                   }
                  } while (0);
                  $380 = ___cxa_find_matching_catch() | 0;
                  $381 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
                  $$113 = $381;
                  $$17 = $380;
                 }
                }
               }
              } else {
               $403 = $264;
               $t$0 = $249;
               label = 134;
              }
             } else {
              $403 = $264;
              $t$0 = $249;
              label = 134;
             }
            } while (0);
            L61 : do {
             if ((label | 0) == 134) {
              $402 = $403 + -24 | 0;
              __THREW__ = 0;
              invoke_vii(234, $402 | 0, 40);
              $404 = __THREW__;
              __THREW__ = 0;
              $405 = $404 & 1;
              if ($405) {
               label = 99;
              } else {
               $406 = ($t$0 | 0) == ($last | 0);
               if ($406) {
                label = 137;
               } else {
                $407 = SAFE_HEAP_LOAD($t$0 >> 0 | 0, 1, 0) | 0 | 0;
                $408 = $407 << 24 >> 24 == 118;
                if ($408) {
                 $417 = $t$0 + 1 | 0;
                 $$pre91 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                 $$pre92 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                 $504 = $$pre91;
                 $506 = $$pre92;
                 $t$2 = $417;
                } else {
                 label = 137;
                }
               }
               L67 : do {
                if ((label | 0) == 137) {
                 $409 = $tmp + 4 | 0;
                 $410 = $4 + 8 | 0;
                 $411 = $4 + 1 | 0;
                 $412 = $4 + 4 | 0;
                 $413 = $tmp + 8 | 0;
                 $414 = $tmp + 1 | 0;
                 $415 = $tmp + 4 | 0;
                 $416 = $tmp + 8 | 0;
                 $first_arg$0$off0$ph = 1;
                 $t$1$ph = $t$0;
                 L69 : while (1) {
                  $$pre86 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                  $$pre87 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                  $418 = $$pre86;
                  $420 = $$pre87;
                  $t$1 = $t$1$ph;
                  while (1) {
                   $419 = $418;
                   $421 = $420;
                   $422 = $419 - $421 | 0;
                   $423 = ($422 | 0) / 24 & -1;
                   __THREW__ = 0;
                   $424 = invoke_iiii(230, $t$1 | 0, $last | 0, $db | 0) | 0;
                   $425 = __THREW__;
                   __THREW__ = 0;
                   $426 = $425 & 1;
                   if ($426) {
                    label = 98;
                    break L69;
                   }
                   $427 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                   $428 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                   $429 = $427;
                   $430 = $428;
                   $431 = $429 - $430 | 0;
                   $432 = ($431 | 0) / 24 & -1;
                   $433 = ($424 | 0) == ($t$1 | 0);
                   if ($433) {
                    $504 = $428;
                    $506 = $427;
                    $t$2 = $t$1;
                    break L67;
                   }
                   $434 = $432 >>> 0 > $423 >>> 0;
                   if ($434) {
                    $$lcssa150 = $423;
                    $$lcssa151 = $424;
                    $$lcssa156 = $432;
                    break;
                   } else {
                    $418 = $427;
                    $420 = $428;
                    $t$1 = $424;
                   }
                  }
                  SAFE_HEAP_STORE($tmp | 0, 0 | 0, 4);
                  SAFE_HEAP_STORE($415 | 0, 0 | 0, 4);
                  SAFE_HEAP_STORE($416 | 0, 0 | 0, 4);
                  $435 = $$lcssa150 >>> 0 < $$lcssa156 >>> 0;
                  if ($435) {
                   $k$0121 = $$lcssa150;
                   while (1) {
                    $437 = SAFE_HEAP_LOAD($tmp >> 0 | 0, 1, 0) | 0 | 0;
                    $438 = $437 & 1;
                    $439 = $438 << 24 >> 24 == 0;
                    $440 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
                    $441 = $437 & 255;
                    $442 = $441 >>> 1;
                    $443 = $439 ? $442 : $440;
                    $444 = ($443 | 0) == 0;
                    if (!$444) {
                     __THREW__ = 0;
                     invoke_iii(228, $tmp | 0, 10309 | 0) | 0;
                     $445 = __THREW__;
                     __THREW__ = 0;
                     $446 = $445 & 1;
                     if ($446) {
                      label = 146;
                      break L69;
                     }
                    }
                    $451 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                    $452 = $451 + ($k$0121 * 24 | 0) | 0;
                    __THREW__ = 0;
                    invoke_vii(232, $4 | 0, $452 | 0);
                    $453 = __THREW__;
                    __THREW__ = 0;
                    $454 = $453 & 1;
                    if ($454) {
                     label = 146;
                     break L69;
                    }
                    $455 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
                    $456 = $455 & 1;
                    $457 = $456 << 24 >> 24 == 0;
                    $458 = SAFE_HEAP_LOAD($410 | 0, 4, 0) | 0 | 0;
                    $459 = $457 ? $411 : $458;
                    $460 = SAFE_HEAP_LOAD($412 | 0, 4, 0) | 0 | 0;
                    $461 = $455 & 255;
                    $462 = $461 >>> 1;
                    $463 = $457 ? $462 : $460;
                    __THREW__ = 0;
                    invoke_iiii(222, $tmp | 0, $459 | 0, $463 | 0) | 0;
                    $464 = __THREW__;
                    __THREW__ = 0;
                    $465 = $464 & 1;
                    if ($465) {
                     label = 152;
                     break L69;
                    }
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                    $466 = $k$0121 + 1 | 0;
                    $467 = $466 >>> 0 < $$lcssa156 >>> 0;
                    if ($467) {
                     $k$0121 = $466;
                    } else {
                     break;
                    }
                   }
                  }
                  $436 = $$lcssa150 >>> 0 < $$lcssa156 >>> 0;
                  if ($436) {
                   $k2$0122 = $$lcssa150;
                   while (1) {
                    $470 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                    $471 = $470 + -24 | 0;
                    $473 = $470;
                    while (1) {
                     $472 = $473 + -24 | 0;
                     SAFE_HEAP_STORE($263 | 0, $472 | 0, 4);
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($472);
                     $$pre$i = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                     $474 = ($$pre$i | 0) == ($471 | 0);
                     if ($474) {
                      break;
                     } else {
                      $473 = $$pre$i;
                     }
                    }
                    $475 = $k2$0122 + 1 | 0;
                    $476 = $475 >>> 0 < $$lcssa156 >>> 0;
                    if ($476) {
                     $k2$0122 = $475;
                    } else {
                     break;
                    }
                   }
                  }
                  $477 = SAFE_HEAP_LOAD($tmp >> 0 | 0, 1, 0) | 0 | 0;
                  $478 = $477 & 1;
                  $479 = $478 << 24 >> 24 == 0;
                  $480 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
                  $481 = $477 & 255;
                  $482 = $481 >>> 1;
                  $483 = $479 ? $482 : $480;
                  $484 = ($483 | 0) == 0;
                  if ($484) {
                   $first_arg$3$off0$ph = $first_arg$0$off0$ph;
                  } else {
                   $485 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
                   $486 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                   $487 = ($485 | 0) == ($486 | 0);
                   if ($487) {
                    label = 158;
                    break;
                   }
                   if ($first_arg$0$off0$ph) {
                    $492 = $486;
                    $494 = $477;
                    $500 = $480;
                   } else {
                    $488 = $486 + -24 | 0;
                    __THREW__ = 0;
                    invoke_iii(228, $488 | 0, 10309 | 0) | 0;
                    $489 = __THREW__;
                    __THREW__ = 0;
                    $490 = $489 & 1;
                    if ($490) {
                     label = 147;
                     break;
                    }
                    $$pre88 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                    $$pre89 = SAFE_HEAP_LOAD($tmp >> 0 | 0, 1, 0) | 0 | 0;
                    $$pre90 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
                    $492 = $$pre88;
                    $494 = $$pre89;
                    $500 = $$pre90;
                   }
                   $491 = $492 + -24 | 0;
                   $493 = $494 & 1;
                   $495 = $493 << 24 >> 24 == 0;
                   $496 = SAFE_HEAP_LOAD($413 | 0, 4, 0) | 0 | 0;
                   $497 = $495 ? $414 : $496;
                   $498 = $494 & 255;
                   $499 = $498 >>> 1;
                   $501 = $495 ? $499 : $500;
                   __THREW__ = 0;
                   invoke_iiii(222, $491 | 0, $497 | 0, $501 | 0) | 0;
                   $502 = __THREW__;
                   __THREW__ = 0;
                   $503 = $502 & 1;
                   if ($503) {
                    label = 147;
                    break;
                   } else {
                    $first_arg$3$off0$ph = 0;
                   }
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                  $first_arg$0$off0$ph = $first_arg$3$off0$ph;
                  $t$1$ph = $$lcssa151;
                 }
                 if ((label | 0) == 98) {
                  $276 = ___cxa_find_matching_catch() | 0;
                  $277 = tempRet0;
                  $lpad$phi72$index = $276;
                  $lpad$phi72$index7 = $277;
                  label = 100;
                  break L61;
                 } else if ((label | 0) == 146) {
                  $447 = ___cxa_find_matching_catch() | 0;
                  $448 = tempRet0;
                  $lpad$phi$index = $447;
                  $lpad$phi$index12 = $448;
                  label = 148;
                 } else if ((label | 0) == 147) {
                  $449 = ___cxa_find_matching_catch() | 0;
                  $450 = tempRet0;
                  $lpad$phi$index = $449;
                  $lpad$phi$index12 = $450;
                  label = 148;
                 } else if ((label | 0) == 152) {
                  $468 = ___cxa_find_matching_catch() | 0;
                  $469 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                  $$012 = $469;
                  $$06 = $468;
                 } else if ((label | 0) == 158) {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                  break L12;
                 }
                 if ((label | 0) == 148) {
                  $$012 = $lpad$phi$index12;
                  $$06 = $lpad$phi$index;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                 $$113 = $$012;
                 $$17 = $$06;
                 break L61;
                }
               } while (0);
               $505 = ($504 | 0) == ($506 | 0);
               if ($505) {
                break L12;
               }
               $507 = $506 + -24 | 0;
               __THREW__ = 0;
               invoke_vii(234, $507 | 0, 41);
               $508 = __THREW__;
               __THREW__ = 0;
               $509 = $508 & 1;
               if ($509) {
                label = 99;
               } else {
                $510 = $253 & 1;
                $511 = ($510 | 0) == 0;
                if (!$511) {
                 $512 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                 $513 = $512 + -24 | 0;
                 __THREW__ = 0;
                 invoke_iii(228, $513 | 0, 10262 | 0) | 0;
                 $514 = __THREW__;
                 __THREW__ = 0;
                 $515 = $514 & 1;
                 if ($515) {
                  label = 99;
                  break;
                 }
                }
                $516 = $253 & 2;
                $517 = ($516 | 0) == 0;
                if (!$517) {
                 $518 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                 $519 = $518 + -24 | 0;
                 __THREW__ = 0;
                 invoke_iii(228, $519 | 0, 10269 | 0) | 0;
                 $520 = __THREW__;
                 __THREW__ = 0;
                 $521 = $520 & 1;
                 if ($521) {
                  label = 99;
                  break;
                 }
                }
                $522 = $253 & 4;
                $523 = ($522 | 0) == 0;
                if (!$523) {
                 $524 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                 $525 = $524 + -24 | 0;
                 __THREW__ = 0;
                 invoke_iii(228, $525 | 0, 10279 | 0) | 0;
                 $526 = __THREW__;
                 __THREW__ = 0;
                 $527 = $526 & 1;
                 if ($527) {
                  label = 99;
                  break;
                 }
                }
                switch ($255 | 0) {
                case 1:
                 {
                  $528 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                  $529 = $528 + -24 | 0;
                  __THREW__ = 0;
                  invoke_iii(228, $529 | 0, 10312 | 0) | 0;
                  $530 = __THREW__;
                  __THREW__ = 0;
                  $531 = $530 & 1;
                  if ($531) {
                   label = 99;
                   break L61;
                  }
                  break;
                 }
                case 2:
                 {
                  $532 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                  $533 = $532 + -24 | 0;
                  __THREW__ = 0;
                  invoke_iii(228, $533 | 0, 10315 | 0) | 0;
                  $534 = __THREW__;
                  __THREW__ = 0;
                  $535 = $534 & 1;
                  if ($535) {
                   label = 99;
                   break L61;
                  }
                  break;
                 }
                default:
                 {}
                }
                $536 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
                $537 = $536 + -24 | 0;
                $538 = SAFE_HEAP_LOAD($ret2 >> 0 | 0, 1, 0) | 0 | 0;
                $539 = $538 & 1;
                $540 = $539 << 24 >> 24 == 0;
                $541 = $ret2 + 8 | 0;
                $542 = SAFE_HEAP_LOAD($541 | 0, 4, 0) | 0 | 0;
                $543 = $ret2 + 1 | 0;
                $544 = $540 ? $543 : $542;
                $545 = $ret2 + 4 | 0;
                $546 = SAFE_HEAP_LOAD($545 | 0, 4, 0) | 0 | 0;
                $547 = $538 & 255;
                $548 = $547 >>> 1;
                $549 = $540 ? $548 : $546;
                __THREW__ = 0;
                invoke_iiii(222, $537 | 0, $544 | 0, $549 | 0) | 0;
                $550 = __THREW__;
                __THREW__ = 0;
                $551 = $550 & 1;
                if ($551) {
                 label = 99;
                 break;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
                SAFE_HEAP_STORE($9 >> 0 | 0, $259 | 0, 1);
                $$24$ph = $t$2;
                label = 180;
                break L6;
               }
              }
             }
            } while (0);
            if ((label | 0) == 99) {
             $278 = ___cxa_find_matching_catch() | 0;
             $279 = tempRet0;
             $lpad$phi72$index = $278;
             $lpad$phi72$index7 = $279;
             label = 100;
            }
            if ((label | 0) == 100) {
             $$113 = $lpad$phi72$index7;
             $$17 = $lpad$phi72$index;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
            SAFE_HEAP_STORE($9 >> 0 | 0, $259 | 0, 1);
            $$214 = $$113;
            $$28 = $$17;
            break L6;
           }
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
         SAFE_HEAP_STORE($9 >> 0 | 0, $10 | 0, 1);
         SAFE_HEAP_STORE($6 | 0, $7 | 0, 4);
         $$7 = $first;
         break L1;
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 87) {
    $247 = ___cxa_find_matching_catch() | 0;
    $248 = tempRet0;
    $eh$lpad$body$index2Z2D = $248;
    $eh$lpad$body$indexZ2D = $247;
    label = 88;
   } else if ((label | 0) == 180) {
    SAFE_HEAP_STORE($9 >> 0 | 0, $10 | 0, 1);
    SAFE_HEAP_STORE($6 | 0, $7 | 0, 4);
    $$7 = $$24$ph;
    break;
   }
   if ((label | 0) == 88) {
    $$214 = $eh$lpad$body$index2Z2D;
    $$28 = $eh$lpad$body$indexZ2D;
   }
   SAFE_HEAP_STORE($9 >> 0 | 0, $10 | 0, 1);
   SAFE_HEAP_STORE($6 | 0, $7 | 0, 4);
   ___resumeException($$28 | 0);
  }
 } while (0);
 STACKTOP = sp;
 return $$7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i46 = 0, $$0$i$i$i$i62 = 0, $$0$i$i$i26 = 0, $$0$i$i117 = 0, $$0$i49 = 0, $$01$i$i$i122 = 0, $$01$i$i$i41126 = 0, $$01$i$i$i57130 = 0, $$1 = 0, $$1$i = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0;
 var $$47 = 0, $$first = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$lcssa160 = 0, $$lcssa161 = 0, $$v$i = 0, $$v$i37 = 0, $$v$i56 = 0, $$v4$i = 0, $$v4$i40 = 0, $$v6$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $216$phi = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $285$phi = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $353$phi = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i116 = 0, $__p$0$ph$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i31 = 0, $__v$i$i$i50 = 0, $__v$i$i25 = 0, $e$0$i124 = 0, $e$0$i124$lcssa153 = 0, $e$0$i33128 = 0, $e$0$i33128$lcssa156 = 0;
 var $e$0$i52132 = 0, $e$0$i52132$lcssa159 = 0, $first$ = 0, $first$10 = 0, $first$11 = 0, $first$12 = 0, $first$13 = 0, $first$14 = 0, $first$15 = 0, $first$16 = 0, $first$17 = 0, $first$18 = 0, $first$19 = 0, $first$20 = 0, $first$21 = 0, $first$22 = 0, $first$23 = 0, $first$8 = 0, $first$9 = 0, $isdigit = 0;
 var $isdigit$i = 0, $isdigit$i36 = 0, $isdigit$i55 = 0, $isdigit3$i = 0, $isdigit3$i39 = 0, $isdigit5$i = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i35 = 0, $isdigittmp$i54 = 0, $isdigittmp2$i = 0, $isdigittmp2$i38 = 0, $isdigittmp4$i = 0, $n$0120 = 0, $n$0120$lcssa = 0, $num$i = 0, $num$i32 = 0, $num$i51 = 0, $or$cond = 0, $or$cond104 = 0;
 var $or$cond134 = 0, $or$cond135 = 0, $or$cond136 = 0, $or$cond24 = 0, $scevgep2$i$i = 0, $t$0$i125 = 0, $t$0$i34129 = 0, $t$0$i53133 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer4 = sp + 32 | 0;
 $vararg_buffer1 = sp + 24 | 0;
 $vararg_buffer = sp + 16 | 0;
 $__v$i$i$i50 = sp + 544 | 0;
 $0 = sp + 8 | 0;
 $num$i51 = sp + 624 | 0;
 $1 = sp + 520 | 0;
 $2 = sp + 508 | 0;
 $__v$i$i$i31 = sp + 488 | 0;
 $3 = sp;
 $num$i32 = sp + 592 | 0;
 $4 = sp + 464 | 0;
 $5 = sp + 448 | 0;
 $__v$i$i$i = sp + 428 | 0;
 $6 = sp + 424 | 0;
 $num$i = sp + 568 | 0;
 $7 = sp + 400 | 0;
 $8 = sp + 388 | 0;
 $__v$i$i25 = sp + 368 | 0;
 $__v$i$i = sp + 348 | 0;
 $9 = sp + 336 | 0;
 $10 = sp + 312 | 0;
 $11 = sp + 288 | 0;
 $12 = sp + 272 | 0;
 $13 = sp + 260 | 0;
 $14 = sp + 248 | 0;
 $15 = sp + 236 | 0;
 $16 = sp + 224 | 0;
 $17 = sp + 212 | 0;
 $18 = sp + 200 | 0;
 $19 = sp + 188 | 0;
 $20 = sp + 176 | 0;
 $21 = sp + 164 | 0;
 $22 = sp + 152 | 0;
 $23 = sp + 140 | 0;
 $24 = sp + 128 | 0;
 $25 = sp + 104 | 0;
 $26 = sp + 88 | 0;
 $27 = sp + 76 | 0;
 $28 = sp + 64 | 0;
 $29 = sp + 52 | 0;
 $30 = sp + 40 | 0;
 $31 = $last;
 $32 = $first;
 $33 = $31 - $32 | 0;
 $34 = ($33 | 0) > 3;
 L1 : do {
  if ($34) {
   $35 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $36 = $35 << 24 >> 24 == 76;
   if ($36) {
    $37 = $first + 1 | 0;
    $38 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
    $39 = $38 << 24 >> 24;
    L4 : do {
     switch ($39 | 0) {
     case 84:
      {
       $$0 = $first;
       break L1;
       break;
      }
     case 119:
      {
       $40 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9, 11357, 7);
       __THREW__ = 0;
       $41 = invoke_iiiii(249, $40 | 0, $last | 0, $9 | 0, $db | 0) | 0;
       $42 = __THREW__;
       __THREW__ = 0;
       $43 = $42 & 1;
       if ($43) {
        $45 = ___cxa_find_matching_catch() | 0;
        $46 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $$4 = $45;
        $$47 = $46;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $44 = ($41 | 0) == ($40 | 0);
        $first$ = $44 ? $first : $41;
        $$0 = $first$;
        break L1;
       }
       break;
      }
     case 98:
      {
       $47 = $first + 3 | 0;
       $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
       $49 = $48 << 24 >> 24 == 69;
       if (!$49) {
        $$0 = $first;
        break L1;
       }
       $50 = $first + 2 | 0;
       $51 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0;
       $52 = $51 << 24 >> 24;
       switch ($52 | 0) {
       case 48:
        {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($10, 11365);
         $53 = $db + 4 | 0;
         $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
         $55 = $db + 8 | 0;
         $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
         $57 = $54 >>> 0 < $56 >>> 0;
         if ($57) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $10);
          $58 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
          $59 = $58 + 24 | 0;
          SAFE_HEAP_STORE($53 | 0, $59 | 0, 4);
         } else {
          $60 = $db + 12 | 0;
          $61 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $62 = $54;
          $63 = $61;
          $64 = $62 - $63 | 0;
          $65 = ($64 | 0) / 24 & -1;
          $66 = $65 + 1 | 0;
          $67 = ($64 | 0) < -24;
          if ($67) {
           __THREW__ = 0;
           invoke_vi(238, $db | 0);
           $68 = __THREW__;
           __THREW__ = 0;
           $69 = ___cxa_find_matching_catch() | 0;
           $70 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
           $$4 = $69;
           $$47 = $70;
           break L4;
          }
          $71 = $56;
          $72 = $71 - $63 | 0;
          $73 = ($72 | 0) / 24 & -1;
          $74 = $73 >>> 0 < 1073741823;
          if ($74) {
           $75 = $73 << 1;
           $76 = $75 >>> 0 < $66 >>> 0;
           $77 = $76 ? $66 : $75;
           $$0$i$i$i = $77;
          } else {
           $$0$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $65, $60);
          $78 = $__v$i$i + 8 | 0;
          $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($79, $10);
          $80 = $79 + 24 | 0;
          SAFE_HEAP_STORE($78 | 0, $80 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
         $81 = $first + 4 | 0;
         $$0 = $81;
         break L1;
         break;
        }
       case 49:
        {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($11, 11371);
         $82 = $db + 4 | 0;
         $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
         $84 = $db + 8 | 0;
         $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
         $86 = $83 >>> 0 < $85 >>> 0;
         if ($86) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($83, $11);
          $87 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
          $88 = $87 + 24 | 0;
          SAFE_HEAP_STORE($82 | 0, $88 | 0, 4);
         } else {
          $89 = $db + 12 | 0;
          $90 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $91 = $83;
          $92 = $90;
          $93 = $91 - $92 | 0;
          $94 = ($93 | 0) / 24 & -1;
          $95 = $94 + 1 | 0;
          $96 = ($93 | 0) < -24;
          if ($96) {
           __THREW__ = 0;
           invoke_vi(238, $db | 0);
           $97 = __THREW__;
           __THREW__ = 0;
           $98 = ___cxa_find_matching_catch() | 0;
           $99 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
           $$4 = $98;
           $$47 = $99;
           break L4;
          }
          $100 = $85;
          $101 = $100 - $92 | 0;
          $102 = ($101 | 0) / 24 & -1;
          $103 = $102 >>> 0 < 1073741823;
          if ($103) {
           $104 = $102 << 1;
           $105 = $104 >>> 0 < $95 >>> 0;
           $106 = $105 ? $95 : $104;
           $$0$i$i$i26 = $106;
          } else {
           $$0$i$i$i26 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i25, $$0$i$i$i26, $94, $89);
          $107 = $__v$i$i25 + 8 | 0;
          $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108, $11);
          $109 = $108 + 24 | 0;
          SAFE_HEAP_STORE($107 | 0, $109 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i25);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i25);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
         $110 = $first + 4 | 0;
         $$0 = $110;
         break L1;
         break;
        }
       default:
        {
         $$0 = $first;
         break L1;
        }
       }
       break;
      }
     case 99:
      {
       $111 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12, 11376, 4);
       __THREW__ = 0;
       $112 = invoke_iiiii(249, $111 | 0, $last | 0, $12 | 0, $db | 0) | 0;
       $113 = __THREW__;
       __THREW__ = 0;
       $114 = $113 & 1;
       if ($114) {
        $116 = ___cxa_find_matching_catch() | 0;
        $117 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
        $$4 = $116;
        $$47 = $117;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
        $115 = ($112 | 0) == ($111 | 0);
        $first$8 = $115 ? $first : $112;
        $$0 = $first$8;
        break L1;
       }
       break;
      }
     case 97:
      {
       $118 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13, 11381, 11);
       __THREW__ = 0;
       $119 = invoke_iiiii(249, $118 | 0, $last | 0, $13 | 0, $db | 0) | 0;
       $120 = __THREW__;
       __THREW__ = 0;
       $121 = $120 & 1;
       if ($121) {
        $123 = ___cxa_find_matching_catch() | 0;
        $124 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $$4 = $123;
        $$47 = $124;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $122 = ($119 | 0) == ($118 | 0);
        $first$9 = $122 ? $first : $119;
        $$0 = $first$9;
        break L1;
       }
       break;
      }
     case 104:
      {
       $125 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14, 11393, 13);
       __THREW__ = 0;
       $126 = invoke_iiiii(249, $125 | 0, $last | 0, $14 | 0, $db | 0) | 0;
       $127 = __THREW__;
       __THREW__ = 0;
       $128 = $127 & 1;
       if ($128) {
        $130 = ___cxa_find_matching_catch() | 0;
        $131 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
        $$4 = $130;
        $$47 = $131;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
        $129 = ($126 | 0) == ($125 | 0);
        $first$10 = $129 ? $first : $126;
        $$0 = $first$10;
        break L1;
       }
       break;
      }
     case 115:
      {
       $132 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15, 11407, 5);
       __THREW__ = 0;
       $133 = invoke_iiiii(249, $132 | 0, $last | 0, $15 | 0, $db | 0) | 0;
       $134 = __THREW__;
       __THREW__ = 0;
       $135 = $134 & 1;
       if ($135) {
        $137 = ___cxa_find_matching_catch() | 0;
        $138 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
        $$4 = $137;
        $$47 = $138;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
        $136 = ($133 | 0) == ($132 | 0);
        $first$11 = $136 ? $first : $133;
        $$0 = $first$11;
        break L1;
       }
       break;
      }
     case 116:
      {
       $139 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16, 11413, 14);
       __THREW__ = 0;
       $140 = invoke_iiiii(249, $139 | 0, $last | 0, $16 | 0, $db | 0) | 0;
       $141 = __THREW__;
       __THREW__ = 0;
       $142 = $141 & 1;
       if ($142) {
        $144 = ___cxa_find_matching_catch() | 0;
        $145 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
        $$4 = $144;
        $$47 = $145;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
        $143 = ($140 | 0) == ($139 | 0);
        $first$12 = $143 ? $first : $140;
        $$0 = $first$12;
        break L1;
       }
       break;
      }
     case 105:
      {
       $146 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17, 11428, 0);
       __THREW__ = 0;
       $147 = invoke_iiiii(249, $146 | 0, $last | 0, $17 | 0, $db | 0) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       $149 = $148 & 1;
       if ($149) {
        $151 = ___cxa_find_matching_catch() | 0;
        $152 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
        $$4 = $151;
        $$47 = $152;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
        $150 = ($147 | 0) == ($146 | 0);
        $first$13 = $150 ? $first : $147;
        $$0 = $first$13;
        break L1;
       }
       break;
      }
     case 106:
      {
       $153 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18, 11429, 1);
       __THREW__ = 0;
       $154 = invoke_iiiii(249, $153 | 0, $last | 0, $18 | 0, $db | 0) | 0;
       $155 = __THREW__;
       __THREW__ = 0;
       $156 = $155 & 1;
       if ($156) {
        $158 = ___cxa_find_matching_catch() | 0;
        $159 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
        $$4 = $158;
        $$47 = $159;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
        $157 = ($154 | 0) == ($153 | 0);
        $first$14 = $157 ? $first : $154;
        $$0 = $first$14;
        break L1;
       }
       break;
      }
     case 108:
      {
       $160 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($19, 11431, 1);
       __THREW__ = 0;
       $161 = invoke_iiiii(249, $160 | 0, $last | 0, $19 | 0, $db | 0) | 0;
       $162 = __THREW__;
       __THREW__ = 0;
       $163 = $162 & 1;
       if ($163) {
        $165 = ___cxa_find_matching_catch() | 0;
        $166 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        $$4 = $165;
        $$47 = $166;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        $164 = ($161 | 0) == ($160 | 0);
        $first$15 = $164 ? $first : $161;
        $$0 = $first$15;
        break L1;
       }
       break;
      }
     case 109:
      {
       $167 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($20, 11433, 2);
       __THREW__ = 0;
       $168 = invoke_iiiii(249, $167 | 0, $last | 0, $20 | 0, $db | 0) | 0;
       $169 = __THREW__;
       __THREW__ = 0;
       $170 = $169 & 1;
       if ($170) {
        $172 = ___cxa_find_matching_catch() | 0;
        $173 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
        $$4 = $172;
        $$47 = $173;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
        $171 = ($168 | 0) == ($167 | 0);
        $first$16 = $171 ? $first : $168;
        $$0 = $first$16;
        break L1;
       }
       break;
      }
     case 120:
      {
       $174 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21, 11436, 2);
       __THREW__ = 0;
       $175 = invoke_iiiii(249, $174 | 0, $last | 0, $21 | 0, $db | 0) | 0;
       $176 = __THREW__;
       __THREW__ = 0;
       $177 = $176 & 1;
       if ($177) {
        $179 = ___cxa_find_matching_catch() | 0;
        $180 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
        $$4 = $179;
        $$47 = $180;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
        $178 = ($175 | 0) == ($174 | 0);
        $first$17 = $178 ? $first : $175;
        $$0 = $first$17;
        break L1;
       }
       break;
      }
     case 121:
      {
       $181 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22, 11439, 3);
       __THREW__ = 0;
       $182 = invoke_iiiii(249, $181 | 0, $last | 0, $22 | 0, $db | 0) | 0;
       $183 = __THREW__;
       __THREW__ = 0;
       $184 = $183 & 1;
       if ($184) {
        $186 = ___cxa_find_matching_catch() | 0;
        $187 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
        $$4 = $186;
        $$47 = $187;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
        $185 = ($182 | 0) == ($181 | 0);
        $first$18 = $185 ? $first : $182;
        $$0 = $first$18;
        break L1;
       }
       break;
      }
     case 110:
      {
       $188 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($23, 11443, 8);
       __THREW__ = 0;
       $189 = invoke_iiiii(249, $188 | 0, $last | 0, $23 | 0, $db | 0) | 0;
       $190 = __THREW__;
       __THREW__ = 0;
       $191 = $190 & 1;
       if ($191) {
        $193 = ___cxa_find_matching_catch() | 0;
        $194 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
        $$4 = $193;
        $$47 = $194;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
        $192 = ($189 | 0) == ($188 | 0);
        $first$19 = $192 ? $first : $189;
        $$0 = $first$19;
        break L1;
       }
       break;
      }
     case 111:
      {
       $195 = $first + 2 | 0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24, 11452, 17);
       __THREW__ = 0;
       $196 = invoke_iiiii(249, $195 | 0, $last | 0, $24 | 0, $db | 0) | 0;
       $197 = __THREW__;
       __THREW__ = 0;
       $198 = $197 & 1;
       if ($198) {
        $200 = ___cxa_find_matching_catch() | 0;
        $201 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
        $$4 = $200;
        $$47 = $201;
        break L4;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
        $199 = ($196 | 0) == ($195 | 0);
        $first$20 = $199 ? $first : $196;
        $$0 = $first$20;
        break L1;
       }
       break;
      }
     case 102:
      {
       $202 = $first + 2 | 0;
       $203 = $202;
       $204 = $31 - $203 | 0;
       $205 = $204 >>> 0 > 8;
       L121 : do {
        if ($205) {
         $206 = $first + 10 | 0;
         $207 = SAFE_HEAP_LOAD($202 >> 0 | 0, 1, 0) | 0 | 0;
         $209 = $207;
         $216 = $first;
         $e$0$i124 = $6;
         $t$0$i125 = $202;
         while (1) {
          $208 = $209 << 24 >> 24;
          $210 = _isxdigit($208) | 0;
          $211 = ($210 | 0) == 0;
          if ($211) {
           $$0$i = $202;
           break L121;
          }
          $212 = SAFE_HEAP_LOAD($t$0$i125 >> 0 | 0, 1, 0) | 0 | 0;
          $213 = $212 << 24 >> 24;
          $isdigittmp$i = $213 + -48 | 0;
          $isdigit$i = $isdigittmp$i >>> 0 < 10;
          $$v$i = $isdigit$i ? 0 : 9;
          $214 = $$v$i + $213 | 0;
          $215 = $216 + 3 | 0;
          $217 = SAFE_HEAP_LOAD($215 >> 0 | 0, 1, 0) | 0 | 0;
          $218 = $217 << 24 >> 24;
          $isdigittmp2$i = $218 + -48 | 0;
          $isdigit3$i = $isdigittmp2$i >>> 0 < 10;
          $219 = $217 & 255;
          $$v4$i = $isdigit3$i ? 208 : 169;
          $220 = $$v4$i + $219 | 0;
          $221 = $214 << 4;
          $222 = $220 + $221 | 0;
          $223 = $222 & 255;
          SAFE_HEAP_STORE($e$0$i124 >> 0 | 0, $223 | 0, 1);
          $224 = $t$0$i125 + 2 | 0;
          $225 = $e$0$i124 + 1 | 0;
          $226 = ($224 | 0) == ($206 | 0);
          $227 = SAFE_HEAP_LOAD($224 >> 0 | 0, 1, 0) | 0 | 0;
          if ($226) {
           $$lcssa154 = $225;
           $$lcssa155 = $227;
           $e$0$i124$lcssa153 = $e$0$i124;
           break;
          } else {
           $216$phi = $t$0$i125;
           $209 = $227;
           $e$0$i124 = $225;
           $t$0$i125 = $224;
           $216 = $216$phi;
          }
         }
         $228 = $$lcssa155 << 24 >> 24 == 69;
         if ($228) {
          $229 = ($6 | 0) != ($$lcssa154 | 0);
          $230 = $6 >>> 0 < $e$0$i124$lcssa153 >>> 0;
          $or$cond134 = $229 & $230;
          if ($or$cond134) {
           $$01$i$i$i122 = $6;
           $233 = $e$0$i124$lcssa153;
           while (1) {
            $231 = SAFE_HEAP_LOAD($$01$i$i$i122 >> 0 | 0, 1, 0) | 0 | 0;
            $232 = SAFE_HEAP_LOAD($233 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($$01$i$i$i122 >> 0 | 0, $232 | 0, 1);
            SAFE_HEAP_STORE($233 >> 0 | 0, $231 | 0, 1);
            $234 = $$01$i$i$i122 + 1 | 0;
            $235 = $233 + -1 | 0;
            $236 = $234 >>> 0 < $235 >>> 0;
            if ($236) {
             $$01$i$i$i122 = $234;
             $233 = $235;
            } else {
             break;
            }
           }
          }
          dest = $num$i;
          stop = dest + 24 | 0;
          do {
           SAFE_HEAP_STORE(dest >> 0 | 0, 0 | 0 | 0, 1);
           dest = dest + 1 | 0;
          } while ((dest | 0) < (stop | 0));
          $237 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
          $238 = $237;
          SAFE_HEAP_STORE_D($vararg_buffer | 0, +$238, 8);
          $239 = _snprintf($num$i, 24, 11470, $vararg_buffer) | 0;
          $240 = $239 >>> 0 > 23;
          if ($240) {
           $$0$i = $202;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8, $num$i, $239);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7, $8);
           $241 = $db + 4 | 0;
           $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
           $243 = $db + 8 | 0;
           $244 = SAFE_HEAP_LOAD($243 | 0, 4, 0) | 0 | 0;
           $245 = $242 >>> 0 < $244 >>> 0;
           if ($245) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($242, $7);
            $246 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
            $247 = $246 + 24 | 0;
            SAFE_HEAP_STORE($241 | 0, $247 | 0, 4);
           } else {
            $248 = $db + 12 | 0;
            $249 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $250 = $242;
            $251 = $249;
            $252 = $250 - $251 | 0;
            $253 = ($252 | 0) / 24 & -1;
            $254 = $253 + 1 | 0;
            $255 = ($252 | 0) < -24;
            if ($255) {
             __THREW__ = 0;
             invoke_vi(238, $db | 0);
             $256 = __THREW__;
             __THREW__ = 0;
             $257 = ___cxa_find_matching_catch() | 0;
             $258 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             ___resumeException($257 | 0);
            }
            $259 = $244;
            $260 = $259 - $251 | 0;
            $261 = ($260 | 0) / 24 & -1;
            $262 = $261 >>> 0 < 1073741823;
            if ($262) {
             $263 = $261 << 1;
             $264 = $263 >>> 0 < $254 >>> 0;
             $265 = $264 ? $254 : $263;
             $$0$i$i$i$i = $265;
            } else {
             $$0$i$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $253, $248);
            $266 = $__v$i$i$i + 8 | 0;
            $267 = SAFE_HEAP_LOAD($266 | 0, 4, 0) | 0 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($267, $7);
            $268 = $267 + 24 | 0;
            SAFE_HEAP_STORE($266 | 0, $268 | 0, 4);
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $269 = $first + 11 | 0;
           $$0$i = $269;
          }
         } else {
          $$0$i = $202;
         }
        } else {
         $$0$i = $202;
        }
       } while (0);
       $270 = ($$0$i | 0) == ($202 | 0);
       $first$21 = $270 ? $first : $$0$i;
       $$0 = $first$21;
       break L1;
       break;
      }
     case 100:
      {
       $271 = $first + 2 | 0;
       $272 = $271;
       $273 = $31 - $272 | 0;
       $274 = $273 >>> 0 > 16;
       L145 : do {
        if ($274) {
         $275 = $first + 18 | 0;
         $276 = SAFE_HEAP_LOAD($271 >> 0 | 0, 1, 0) | 0 | 0;
         $278 = $276;
         $285 = $first;
         $e$0$i33128 = $3;
         $t$0$i34129 = $271;
         while (1) {
          $277 = $278 << 24 >> 24;
          $279 = _isxdigit($277) | 0;
          $280 = ($279 | 0) == 0;
          if ($280) {
           $$0$i49 = $271;
           break L145;
          }
          $281 = SAFE_HEAP_LOAD($t$0$i34129 >> 0 | 0, 1, 0) | 0 | 0;
          $282 = $281 << 24 >> 24;
          $isdigittmp$i35 = $282 + -48 | 0;
          $isdigit$i36 = $isdigittmp$i35 >>> 0 < 10;
          $$v$i37 = $isdigit$i36 ? 0 : 9;
          $283 = $$v$i37 + $282 | 0;
          $284 = $285 + 3 | 0;
          $286 = SAFE_HEAP_LOAD($284 >> 0 | 0, 1, 0) | 0 | 0;
          $287 = $286 << 24 >> 24;
          $isdigittmp2$i38 = $287 + -48 | 0;
          $isdigit3$i39 = $isdigittmp2$i38 >>> 0 < 10;
          $288 = $286 & 255;
          $$v4$i40 = $isdigit3$i39 ? 208 : 169;
          $289 = $$v4$i40 + $288 | 0;
          $290 = $283 << 4;
          $291 = $289 + $290 | 0;
          $292 = $291 & 255;
          SAFE_HEAP_STORE($e$0$i33128 >> 0 | 0, $292 | 0, 1);
          $293 = $t$0$i34129 + 2 | 0;
          $294 = $e$0$i33128 + 1 | 0;
          $295 = ($293 | 0) == ($275 | 0);
          $296 = SAFE_HEAP_LOAD($293 >> 0 | 0, 1, 0) | 0 | 0;
          if ($295) {
           $$lcssa157 = $294;
           $$lcssa158 = $296;
           $e$0$i33128$lcssa156 = $e$0$i33128;
           break;
          } else {
           $285$phi = $t$0$i34129;
           $278 = $296;
           $e$0$i33128 = $294;
           $t$0$i34129 = $293;
           $285 = $285$phi;
          }
         }
         $297 = $$lcssa158 << 24 >> 24 == 69;
         if ($297) {
          $298 = ($3 | 0) != ($$lcssa157 | 0);
          $299 = $3 >>> 0 < $e$0$i33128$lcssa156 >>> 0;
          $or$cond135 = $298 & $299;
          if ($or$cond135) {
           $$01$i$i$i41126 = $3;
           $302 = $e$0$i33128$lcssa156;
           while (1) {
            $300 = SAFE_HEAP_LOAD($$01$i$i$i41126 >> 0 | 0, 1, 0) | 0 | 0;
            $301 = SAFE_HEAP_LOAD($302 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($$01$i$i$i41126 >> 0 | 0, $301 | 0, 1);
            SAFE_HEAP_STORE($302 >> 0 | 0, $300 | 0, 1);
            $303 = $$01$i$i$i41126 + 1 | 0;
            $304 = $302 + -1 | 0;
            $305 = $303 >>> 0 < $304 >>> 0;
            if ($305) {
             $$01$i$i$i41126 = $303;
             $302 = $304;
            } else {
             break;
            }
           }
          }
          dest = $num$i32;
          stop = dest + 32 | 0;
          do {
           SAFE_HEAP_STORE(dest >> 0 | 0, 0 | 0 | 0, 1);
           dest = dest + 1 | 0;
          } while ((dest | 0) < (stop | 0));
          $306 = +(+SAFE_HEAP_LOAD_D($3 | 0, 8));
          SAFE_HEAP_STORE_D($vararg_buffer1 | 0, +$306, 8);
          $307 = _snprintf($num$i32, 32, 11474, $vararg_buffer1) | 0;
          $308 = $307 >>> 0 > 31;
          if ($308) {
           $$0$i49 = $271;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5, $num$i32, $307);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4, $5);
           $309 = $db + 4 | 0;
           $310 = SAFE_HEAP_LOAD($309 | 0, 4, 0) | 0 | 0;
           $311 = $db + 8 | 0;
           $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
           $313 = $310 >>> 0 < $312 >>> 0;
           if ($313) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($310, $4);
            $314 = SAFE_HEAP_LOAD($309 | 0, 4, 0) | 0 | 0;
            $315 = $314 + 24 | 0;
            SAFE_HEAP_STORE($309 | 0, $315 | 0, 4);
           } else {
            $316 = $db + 12 | 0;
            $317 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $318 = $310;
            $319 = $317;
            $320 = $318 - $319 | 0;
            $321 = ($320 | 0) / 24 & -1;
            $322 = $321 + 1 | 0;
            $323 = ($320 | 0) < -24;
            if ($323) {
             __THREW__ = 0;
             invoke_vi(238, $db | 0);
             $324 = __THREW__;
             __THREW__ = 0;
             $325 = ___cxa_find_matching_catch() | 0;
             $326 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             ___resumeException($325 | 0);
            }
            $327 = $312;
            $328 = $327 - $319 | 0;
            $329 = ($328 | 0) / 24 & -1;
            $330 = $329 >>> 0 < 1073741823;
            if ($330) {
             $331 = $329 << 1;
             $332 = $331 >>> 0 < $322 >>> 0;
             $333 = $332 ? $322 : $331;
             $$0$i$i$i$i46 = $333;
            } else {
             $$0$i$i$i$i46 = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i31, $$0$i$i$i$i46, $321, $316);
            $334 = $__v$i$i$i31 + 8 | 0;
            $335 = SAFE_HEAP_LOAD($334 | 0, 4, 0) | 0 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($335, $4);
            $336 = $335 + 24 | 0;
            SAFE_HEAP_STORE($334 | 0, $336 | 0, 4);
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i31);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i31);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           $337 = $first + 19 | 0;
           $$0$i49 = $337;
          }
         } else {
          $$0$i49 = $271;
         }
        } else {
         $$0$i49 = $271;
        }
       } while (0);
       $338 = ($$0$i49 | 0) == ($271 | 0);
       $first$22 = $338 ? $first : $$0$i49;
       $$0 = $first$22;
       break L1;
       break;
      }
     case 101:
      {
       $339 = $first + 2 | 0;
       $340 = $339;
       $341 = $31 - $340 | 0;
       $342 = $341 >>> 0 > 20;
       L169 : do {
        if ($342) {
         $343 = $first + 22 | 0;
         $344 = SAFE_HEAP_LOAD($339 >> 0 | 0, 1, 0) | 0 | 0;
         $346 = $344;
         $353 = $first;
         $e$0$i52132 = $0;
         $t$0$i53133 = $339;
         while (1) {
          $345 = $346 << 24 >> 24;
          $347 = _isxdigit($345) | 0;
          $348 = ($347 | 0) == 0;
          if ($348) {
           $$1$i = $339;
           break L169;
          }
          $349 = SAFE_HEAP_LOAD($t$0$i53133 >> 0 | 0, 1, 0) | 0 | 0;
          $350 = $349 << 24 >> 24;
          $isdigittmp$i54 = $350 + -48 | 0;
          $isdigit$i55 = $isdigittmp$i54 >>> 0 < 10;
          $$v$i56 = $isdigit$i55 ? 0 : 9;
          $351 = $$v$i56 + $350 | 0;
          $352 = $353 + 3 | 0;
          $354 = SAFE_HEAP_LOAD($352 >> 0 | 0, 1, 0) | 0 | 0;
          $355 = $354 << 24 >> 24;
          $isdigittmp4$i = $355 + -48 | 0;
          $isdigit5$i = $isdigittmp4$i >>> 0 < 10;
          $356 = $354 & 255;
          $$v6$i = $isdigit5$i ? 208 : 169;
          $357 = $$v6$i + $356 | 0;
          $358 = $351 << 4;
          $359 = $357 + $358 | 0;
          $360 = $359 & 255;
          SAFE_HEAP_STORE($e$0$i52132 >> 0 | 0, $360 | 0, 1);
          $361 = $t$0$i53133 + 2 | 0;
          $362 = $e$0$i52132 + 1 | 0;
          $363 = ($361 | 0) == ($343 | 0);
          $364 = SAFE_HEAP_LOAD($361 >> 0 | 0, 1, 0) | 0 | 0;
          if ($363) {
           $$lcssa160 = $362;
           $$lcssa161 = $364;
           $e$0$i52132$lcssa159 = $e$0$i52132;
           break;
          } else {
           $353$phi = $t$0$i53133;
           $346 = $364;
           $e$0$i52132 = $362;
           $t$0$i53133 = $361;
           $353 = $353$phi;
          }
         }
         $365 = $$lcssa161 << 24 >> 24 == 69;
         if ($365) {
          $366 = ($0 | 0) != ($$lcssa160 | 0);
          $367 = $0 >>> 0 < $e$0$i52132$lcssa159 >>> 0;
          $or$cond136 = $366 & $367;
          if ($or$cond136) {
           $$01$i$i$i57130 = $0;
           $370 = $e$0$i52132$lcssa159;
           while (1) {
            $368 = SAFE_HEAP_LOAD($$01$i$i$i57130 >> 0 | 0, 1, 0) | 0 | 0;
            $369 = SAFE_HEAP_LOAD($370 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($$01$i$i$i57130 >> 0 | 0, $369 | 0, 1);
            SAFE_HEAP_STORE($370 >> 0 | 0, $368 | 0, 1);
            $371 = $$01$i$i$i57130 + 1 | 0;
            $372 = $370 + -1 | 0;
            $373 = $371 >>> 0 < $372 >>> 0;
            if ($373) {
             $$01$i$i$i57130 = $371;
             $370 = $372;
            } else {
             break;
            }
           }
          }
          dest = $num$i51;
          stop = dest + 40 | 0;
          do {
           SAFE_HEAP_STORE(dest >> 0 | 0, 0 | 0 | 0, 1);
           dest = dest + 1 | 0;
          } while ((dest | 0) < (stop | 0));
          $374 = +(+SAFE_HEAP_LOAD_D($0 | 0, 8));
          SAFE_HEAP_STORE_D($vararg_buffer4 | 0, +$374, 8);
          $375 = _snprintf($num$i51, 40, 11477, $vararg_buffer4) | 0;
          $376 = $375 >>> 0 > 39;
          if ($376) {
           $$1$i = $339;
           break;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2, $num$i51, $375);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
          $377 = $db + 4 | 0;
          $378 = SAFE_HEAP_LOAD($377 | 0, 4, 0) | 0 | 0;
          $379 = $db + 8 | 0;
          $380 = SAFE_HEAP_LOAD($379 | 0, 4, 0) | 0 | 0;
          $381 = $378 >>> 0 < $380 >>> 0;
          if ($381) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($378, $1);
           $382 = SAFE_HEAP_LOAD($377 | 0, 4, 0) | 0 | 0;
           $383 = $382 + 24 | 0;
           SAFE_HEAP_STORE($377 | 0, $383 | 0, 4);
          } else {
           $384 = $db + 12 | 0;
           $385 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $386 = $378;
           $387 = $385;
           $388 = $386 - $387 | 0;
           $389 = ($388 | 0) / 24 & -1;
           $390 = $389 + 1 | 0;
           $391 = ($388 | 0) < -24;
           if ($391) {
            __THREW__ = 0;
            invoke_vi(238, $db | 0);
            $392 = __THREW__;
            __THREW__ = 0;
            $393 = ___cxa_find_matching_catch() | 0;
            $394 = tempRet0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            ___resumeException($393 | 0);
           }
           $395 = $380;
           $396 = $395 - $387 | 0;
           $397 = ($396 | 0) / 24 & -1;
           $398 = $397 >>> 0 < 1073741823;
           if ($398) {
            $399 = $397 << 1;
            $400 = $399 >>> 0 < $390 >>> 0;
            $401 = $400 ? $390 : $399;
            $$0$i$i$i$i62 = $401;
           } else {
            $$0$i$i$i$i62 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i50, $$0$i$i$i$i62, $389, $384);
           $402 = $__v$i$i$i50 + 8 | 0;
           $403 = SAFE_HEAP_LOAD($402 | 0, 4, 0) | 0 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($403, $1);
           $404 = $403 + 24 | 0;
           SAFE_HEAP_STORE($402 | 0, $404 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i50);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i50);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $405 = $first + 23 | 0;
          $$1$i = $405;
         } else {
          $$1$i = $339;
         }
        } else {
         $$1$i = $339;
        }
       } while (0);
       $406 = ($$1$i | 0) == ($339 | 0);
       $first$23 = $406 ? $first : $$1$i;
       $$0 = $first$23;
       break L1;
       break;
      }
     case 95:
      {
       $407 = $first + 2 | 0;
       $408 = SAFE_HEAP_LOAD($407 >> 0 | 0, 1, 0) | 0 | 0;
       $409 = $408 << 24 >> 24 == 90;
       if (!$409) {
        $$0 = $first;
        break L1;
       }
       $410 = $first + 3 | 0;
       $411 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($410, $last, $db) | 0;
       $412 = ($411 | 0) == ($410 | 0);
       $413 = ($411 | 0) == ($last | 0);
       $or$cond = $412 | $413;
       if ($or$cond) {
        $$0 = $first;
        break L1;
       }
       $414 = SAFE_HEAP_LOAD($411 >> 0 | 0, 1, 0) | 0 | 0;
       $415 = $414 << 24 >> 24 == 69;
       $416 = $411 + 1 | 0;
       $$first = $415 ? $416 : $first;
       STACKTOP = sp;
       return $$first | 0;
       break;
      }
     default:
      {
       $417 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($37, $last, $db) | 0;
       $418 = ($417 | 0) == ($37 | 0);
       $419 = ($417 | 0) == ($last | 0);
       $or$cond24 = $418 | $419;
       if ($or$cond24) {
        $$0 = $first;
        break L1;
       }
       $420 = SAFE_HEAP_LOAD($417 >> 0 | 0, 1, 0) | 0 | 0;
       $421 = $420 << 24 >> 24 == 69;
       if ($421) {
        $490 = $417 + 1 | 0;
        $$0 = $490;
        break L1;
       }
       $422 = ($417 | 0) == ($last | 0);
       if ($422) {
        $$0 = $first;
        break L1;
       } else {
        $n$0120 = $417;
       }
       while (1) {
        $423 = SAFE_HEAP_LOAD($n$0120 >> 0 | 0, 1, 0) | 0 | 0;
        $424 = $423 << 24 >> 24;
        $isdigittmp = $424 + -48 | 0;
        $isdigit = $isdigittmp >>> 0 < 10;
        if (!$isdigit) {
         $$lcssa = $423;
         $n$0120$lcssa = $n$0120;
         break;
        }
        $425 = $n$0120 + 1 | 0;
        $426 = ($425 | 0) == ($last | 0);
        if ($426) {
         $$0 = $first;
         break L1;
        } else {
         $n$0120 = $425;
        }
       }
       $427 = ($n$0120$lcssa | 0) != ($417 | 0);
       $428 = $$lcssa << 24 >> 24 == 69;
       $or$cond104 = $427 & $428;
       if (!$or$cond104) {
        $$0 = $first;
        break L1;
       }
       $429 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $430 = $db + 4 | 0;
       $431 = SAFE_HEAP_LOAD($430 | 0, 4, 0) | 0 | 0;
       $432 = ($429 | 0) == ($431 | 0);
       if ($432) {
        $$0 = $first;
        break L1;
       }
       $433 = $431 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($29, $433);
       __THREW__ = 0;
       $434 = invoke_iiii(227, $29 | 0, 0, 10307 | 0) | 0;
       $435 = __THREW__;
       __THREW__ = 0;
       $436 = $435 & 1;
       if ($436) {
        $484 = ___cxa_find_matching_catch() | 0;
        $485 = tempRet0;
        $$3 = $484;
        $$36 = $485;
       } else {
        {}
        SAFE_HEAP_STORE($28 | 0, SAFE_HEAP_LOAD($434 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($28 + 4 | 0, SAFE_HEAP_LOAD($434 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($28 + 8 | 0, SAFE_HEAP_LOAD($434 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($434 | 0, 0 | 0, 4);
        $437 = $434 + 4 | 0;
        SAFE_HEAP_STORE($437 | 0, 0 | 0, 4);
        $438 = $434 + 8 | 0;
        SAFE_HEAP_STORE($438 | 0, 0 | 0, 4);
        __THREW__ = 0;
        $439 = invoke_iii(228, $28 | 0, 10212 | 0) | 0;
        $440 = __THREW__;
        __THREW__ = 0;
        $441 = $440 & 1;
        if ($441) {
         $486 = ___cxa_find_matching_catch() | 0;
         $487 = tempRet0;
         $$2 = $486;
         $$25 = $487;
        } else {
         {}
         SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($439 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($439 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($27 + 8 | 0, SAFE_HEAP_LOAD($439 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($439 | 0, 0 | 0, 4);
         $442 = $439 + 4 | 0;
         SAFE_HEAP_STORE($442 | 0, 0 | 0, 4);
         $443 = $439 + 8 | 0;
         SAFE_HEAP_STORE($443 | 0, 0 | 0, 4);
         $444 = $417;
         $445 = $n$0120$lcssa;
         $446 = $445 - $444 | 0;
         $447 = $446 >>> 0 > 4294967279;
         do {
          if ($447) {
           __THREW__ = 0;
           invoke_vi(250, $30 | 0);
           $448 = __THREW__;
           __THREW__ = 0;
           $449 = ___cxa_find_matching_catch() | 0;
           $450 = tempRet0;
           $$1 = $449;
           $$14 = $450;
          } else {
           $451 = $446 >>> 0 < 11;
           if ($451) {
            $452 = $446 << 1;
            $453 = $452 & 255;
            SAFE_HEAP_STORE($30 >> 0 | 0, $453 | 0, 1);
            $454 = $30 + 1 | 0;
            $__p$0$ph$i$i = $454;
           } else {
            $455 = $446 + 16 | 0;
            $456 = $455 & -16;
            $457 = _malloc($456) | 0;
            $458 = $30 + 8 | 0;
            SAFE_HEAP_STORE($458 | 0, $457 | 0, 4);
            $459 = $456 | 1;
            SAFE_HEAP_STORE($30 | 0, $459 | 0, 4);
            $460 = $30 + 4 | 0;
            SAFE_HEAP_STORE($460 | 0, $446 | 0, 4);
            $__p$0$ph$i$i = $457;
           }
           $461 = ($417 | 0) == ($n$0120$lcssa | 0);
           if (!$461) {
            $$0$i$i117 = $417;
            $__p$0$i$i116 = $__p$0$ph$i$i;
            while (1) {
             $462 = SAFE_HEAP_LOAD($$0$i$i117 >> 0 | 0, 1, 0) | 0 | 0;
             SAFE_HEAP_STORE($__p$0$i$i116 >> 0 | 0, $462 | 0, 1);
             $463 = $$0$i$i117 + 1 | 0;
             $464 = $__p$0$i$i116 + 1 | 0;
             $465 = ($463 | 0) == ($n$0120$lcssa | 0);
             if ($465) {
              break;
             } else {
              $$0$i$i117 = $463;
              $__p$0$i$i116 = $464;
             }
            }
           }
           $scevgep2$i$i = $__p$0$ph$i$i + $446 | 0;
           SAFE_HEAP_STORE($scevgep2$i$i >> 0 | 0, 0 | 0, 1);
           $466 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
           $467 = $466 & 1;
           $468 = $467 << 24 >> 24 == 0;
           $469 = $30 + 8 | 0;
           $470 = SAFE_HEAP_LOAD($469 | 0, 4, 0) | 0 | 0;
           $471 = $30 + 1 | 0;
           $472 = $468 ? $471 : $470;
           $473 = $30 + 4 | 0;
           $474 = SAFE_HEAP_LOAD($473 | 0, 4, 0) | 0 | 0;
           $475 = $466 & 255;
           $476 = $475 >>> 1;
           $477 = $468 ? $476 : $474;
           __THREW__ = 0;
           $478 = invoke_iiii(222, $27 | 0, $472 | 0, $477 | 0) | 0;
           $479 = __THREW__;
           __THREW__ = 0;
           $480 = $479 & 1;
           if ($480) {
            $488 = ___cxa_find_matching_catch() | 0;
            $489 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
            $$1 = $488;
            $$14 = $489;
            break;
           } else {
            {}
            SAFE_HEAP_STORE($26 | 0, SAFE_HEAP_LOAD($478 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($26 + 4 | 0, SAFE_HEAP_LOAD($478 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($26 + 8 | 0, SAFE_HEAP_LOAD($478 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($478 | 0, 0 | 0, 4);
            $481 = $478 + 4 | 0;
            SAFE_HEAP_STORE($481 | 0, 0 | 0, 4);
            $482 = $478 + 8 | 0;
            SAFE_HEAP_STORE($482 | 0, 0 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($25, $26);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($433, $25);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
            $483 = $n$0120$lcssa + 1 | 0;
            $$0 = $483;
            break L1;
           }
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
         $$2 = $$1;
         $$25 = $$14;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
        $$3 = $$2;
        $$36 = $$25;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
       $$4 = $$3;
       $$47 = $$36;
      }
     }
    } while (0);
    ___resumeException($$4 | 0);
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($this, $manifold, $edgeA, $xfA, $polygonB, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $polygonB = $polygonB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0.0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bestIndex = 0, $bestValue = 0.0, $clipPoints1 = 0, $clipPoints2 = 0, $convex1 = 0, $convex2 = 0, $cp = 0, $edge0 = 0, $edge1 = 0, $edge2 = 0, $edgeAxis = 0, $hasVertex0 = 0, $hasVertex3 = 0, $i = 0, $i1 = 0, $i12 = 0, $i2 = 0, $i3 = 0, $ie = 0, $k_absoluteTol = 0.0;
 var $k_relativeTol = 0.0, $np = 0, $offset0 = 0.0, $offset1 = 0.0, $offset2 = 0.0, $or$cond = 0, $or$cond3 = 0, $pointCount = 0, $polygonAxis = 0, $primaryAxis = 0, $rf = 0, $separation = 0.0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $6 = sp + 568 | 0;
 $7 = sp + 560 | 0;
 $edge1 = sp + 552 | 0;
 $8 = sp + 536 | 0;
 $edge0 = sp + 520 | 0;
 $9 = sp + 512 | 0;
 $edge2 = sp + 504 | 0;
 $10 = sp + 496 | 0;
 $11 = sp + 488 | 0;
 $12 = sp + 480 | 0;
 $13 = sp + 472 | 0;
 $14 = sp + 464 | 0;
 $15 = sp + 456 | 0;
 $16 = sp + 448 | 0;
 $17 = sp + 440 | 0;
 $18 = sp + 432 | 0;
 $19 = sp + 424 | 0;
 $20 = sp + 416 | 0;
 $21 = sp + 408 | 0;
 $22 = sp + 400 | 0;
 $23 = sp + 392 | 0;
 $24 = sp + 384 | 0;
 $25 = sp + 376 | 0;
 $26 = sp + 368 | 0;
 $27 = sp + 360 | 0;
 $28 = sp + 352 | 0;
 $29 = sp + 344 | 0;
 $30 = sp + 336 | 0;
 $31 = sp + 328 | 0;
 $32 = sp + 320 | 0;
 $33 = sp + 312 | 0;
 $34 = sp + 304 | 0;
 $35 = sp + 296 | 0;
 $36 = sp + 288 | 0;
 $37 = sp + 280 | 0;
 $38 = sp + 264 | 0;
 $39 = sp + 256 | 0;
 $edgeAxis = sp + 240 | 0;
 $polygonAxis = sp + 228 | 0;
 $primaryAxis = sp + 208 | 0;
 $ie = sp + 184 | 0;
 $rf = sp + 128 | 0;
 $40 = sp + 96 | 0;
 $41 = sp + 88 | 0;
 $clipPoints1 = sp + 64 | 0;
 $clipPoints2 = sp + 40 | 0;
 $42 = sp + 16 | 0;
 $43 = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $edgeA;
 $3 = $xfA;
 $4 = $polygonB;
 $5 = $xfB;
 $44 = $0;
 $45 = $44 + 132 | 0;
 $46 = $3;
 $47 = $5;
 __Z6b2MulTRK11b2TransformS1_($6, $46, $47);
 {}
 SAFE_HEAP_STORE($45 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($45 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($45 + 8 | 0, SAFE_HEAP_LOAD($6 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($45 + 12 | 0, SAFE_HEAP_LOAD($6 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $48 = $44 + 148 | 0;
 $49 = $44 + 132 | 0;
 $50 = $4;
 $51 = $50 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($7, $49, $51);
 {}
 SAFE_HEAP_STORE($48 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($48 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $52 = $44 + 156 | 0;
 $53 = $2;
 $54 = $53 + 28 | 0;
 {}
 SAFE_HEAP_STORE($52 | 0, SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($52 + 4 | 0, SAFE_HEAP_LOAD($54 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $55 = $44 + 164 | 0;
 $56 = $2;
 $57 = $56 + 12 | 0;
 {}
 SAFE_HEAP_STORE($55 | 0, SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($55 + 4 | 0, SAFE_HEAP_LOAD($57 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $58 = $44 + 172 | 0;
 $59 = $2;
 $60 = $59 + 20 | 0;
 {}
 SAFE_HEAP_STORE($58 | 0, SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($58 + 4 | 0, SAFE_HEAP_LOAD($60 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $61 = $44 + 180 | 0;
 $62 = $2;
 $63 = $62 + 36 | 0;
 {}
 SAFE_HEAP_STORE($61 | 0, SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($61 + 4 | 0, SAFE_HEAP_LOAD($63 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $64 = $2;
 $65 = $64 + 44 | 0;
 $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
 $67 = $66 & 1;
 $68 = $67 & 1;
 $hasVertex0 = $68;
 $69 = $2;
 $70 = $69 + 45 | 0;
 $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
 $72 = $71 & 1;
 $73 = $72 & 1;
 $hasVertex3 = $73;
 $74 = $44 + 172 | 0;
 $75 = $44 + 164 | 0;
 __ZmiRK6b2Vec2S1_($edge1, $74, $75);
 +__ZN6b2Vec29NormalizeEv($edge1);
 $76 = $44 + 196 | 0;
 $77 = $edge1 + 4 | 0;
 $78 = +(+SAFE_HEAP_LOAD_D($77 | 0, 4));
 $79 = +(+SAFE_HEAP_LOAD_D($edge1 | 0, 4));
 $80 = -$79;
 __ZN6b2Vec23SetEff($76, $78, $80);
 $81 = $44 + 196 | 0;
 $82 = $44 + 148 | 0;
 $83 = $44 + 164 | 0;
 __ZmiRK6b2Vec2S1_($8, $82, $83);
 $84 = +__Z5b2DotRK6b2Vec2S1_($81, $8);
 $offset1 = $84;
 $offset0 = 0.0;
 $offset2 = 0.0;
 $convex1 = 0;
 $convex2 = 0;
 $85 = $hasVertex0;
 $86 = $85 & 1;
 if ($86) {
  $87 = $44 + 164 | 0;
  $88 = $44 + 156 | 0;
  __ZmiRK6b2Vec2S1_($edge0, $87, $88);
  +__ZN6b2Vec29NormalizeEv($edge0);
  $89 = $44 + 188 | 0;
  $90 = $edge0 + 4 | 0;
  $91 = +(+SAFE_HEAP_LOAD_D($90 | 0, 4));
  $92 = +(+SAFE_HEAP_LOAD_D($edge0 | 0, 4));
  $93 = -$92;
  __ZN6b2Vec23SetEff($89, $91, $93);
  $94 = +__Z7b2CrossRK6b2Vec2S1_($edge0, $edge1);
  $95 = $94 >= 0.0;
  $96 = $95 & 1;
  $convex1 = $96;
  $97 = $44 + 188 | 0;
  $98 = $44 + 148 | 0;
  $99 = $44 + 156 | 0;
  __ZmiRK6b2Vec2S1_($9, $98, $99);
  $100 = +__Z5b2DotRK6b2Vec2S1_($97, $9);
  $offset0 = $100;
 }
 $101 = $hasVertex3;
 $102 = $101 & 1;
 if ($102) {
  $103 = $44 + 180 | 0;
  $104 = $44 + 172 | 0;
  __ZmiRK6b2Vec2S1_($edge2, $103, $104);
  +__ZN6b2Vec29NormalizeEv($edge2);
  $105 = $44 + 204 | 0;
  $106 = $edge2 + 4 | 0;
  $107 = +(+SAFE_HEAP_LOAD_D($106 | 0, 4));
  $108 = +(+SAFE_HEAP_LOAD_D($edge2 | 0, 4));
  $109 = -$108;
  __ZN6b2Vec23SetEff($105, $107, $109);
  $110 = +__Z7b2CrossRK6b2Vec2S1_($edge1, $edge2);
  $111 = $110 > 0.0;
  $112 = $111 & 1;
  $convex2 = $112;
  $113 = $44 + 204 | 0;
  $114 = $44 + 148 | 0;
  $115 = $44 + 172 | 0;
  __ZmiRK6b2Vec2S1_($10, $114, $115);
  $116 = +__Z5b2DotRK6b2Vec2S1_($113, $10);
  $offset2 = $116;
 }
 $117 = $hasVertex0;
 $118 = $117 & 1;
 do {
  if ($118) {
   $119 = $hasVertex3;
   $120 = $119 & 1;
   if ($120) {
    $121 = $convex1;
    $122 = $121 & 1;
    if ($122) {
     $123 = $convex2;
     $124 = $123 & 1;
     if ($124) {
      $125 = $offset0;
      $126 = $125 >= 0.0;
      $127 = $offset1;
      $128 = $127 >= 0.0;
      $or$cond = $126 | $128;
      if ($or$cond) {
       $133 = 1;
      } else {
       $129 = $offset2;
       $130 = $129 >= 0.0;
       $133 = $130;
      }
      $131 = $44 + 248 | 0;
      $132 = $133 & 1;
      SAFE_HEAP_STORE($131 >> 0 | 0, $132 | 0, 1);
      $134 = $44 + 248 | 0;
      $135 = SAFE_HEAP_LOAD($134 >> 0 | 0, 1, 0) | 0 | 0;
      $136 = $135 & 1;
      $137 = $44 + 212 | 0;
      $138 = $44 + 196 | 0;
      if ($136) {
       {}
       SAFE_HEAP_STORE($137 | 0, SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($137 + 4 | 0, SAFE_HEAP_LOAD($138 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       $139 = $44 + 228 | 0;
       $140 = $44 + 188 | 0;
       {}
       SAFE_HEAP_STORE($139 | 0, SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($139 + 4 | 0, SAFE_HEAP_LOAD($140 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       $141 = $44 + 236 | 0;
       $142 = $44 + 204 | 0;
       {}
       SAFE_HEAP_STORE($141 | 0, SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($141 + 4 | 0, SAFE_HEAP_LOAD($142 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       break;
      } else {
       __ZNK6b2Vec2ngEv($11, $138);
       {}
       SAFE_HEAP_STORE($137 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($137 + 4 | 0, SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       $143 = $44 + 228 | 0;
       $144 = $44 + 196 | 0;
       __ZNK6b2Vec2ngEv($12, $144);
       {}
       SAFE_HEAP_STORE($143 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($143 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       $145 = $44 + 236 | 0;
       $146 = $44 + 196 | 0;
       __ZNK6b2Vec2ngEv($13, $146);
       {}
       SAFE_HEAP_STORE($145 | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($145 + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       break;
      }
     }
    }
    $147 = $convex1;
    $148 = $147 & 1;
    if ($148) {
     $149 = $offset0;
     $150 = $149 >= 0.0;
     if ($150) {
      $158 = 1;
     } else {
      $151 = $offset1;
      $152 = $151 >= 0.0;
      $153 = $offset2;
      $154 = $153 >= 0.0;
      $155 = $152 ? $154 : 0;
      $158 = $155;
     }
     $156 = $44 + 248 | 0;
     $157 = $158 & 1;
     SAFE_HEAP_STORE($156 >> 0 | 0, $157 | 0, 1);
     $159 = $44 + 248 | 0;
     $160 = SAFE_HEAP_LOAD($159 >> 0 | 0, 1, 0) | 0 | 0;
     $161 = $160 & 1;
     $162 = $44 + 212 | 0;
     $163 = $44 + 196 | 0;
     if ($161) {
      {}
      SAFE_HEAP_STORE($162 | 0, SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($162 + 4 | 0, SAFE_HEAP_LOAD($163 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $164 = $44 + 228 | 0;
      $165 = $44 + 188 | 0;
      {}
      SAFE_HEAP_STORE($164 | 0, SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($164 + 4 | 0, SAFE_HEAP_LOAD($165 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $166 = $44 + 236 | 0;
      $167 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($166 | 0, SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($166 + 4 | 0, SAFE_HEAP_LOAD($167 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      __ZNK6b2Vec2ngEv($14, $163);
      {}
      SAFE_HEAP_STORE($162 | 0, SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($162 + 4 | 0, SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $168 = $44 + 228 | 0;
      $169 = $44 + 204 | 0;
      __ZNK6b2Vec2ngEv($15, $169);
      {}
      SAFE_HEAP_STORE($168 | 0, SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($168 + 4 | 0, SAFE_HEAP_LOAD($15 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $170 = $44 + 236 | 0;
      $171 = $44 + 196 | 0;
      __ZNK6b2Vec2ngEv($16, $171);
      {}
      SAFE_HEAP_STORE($170 | 0, SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($170 + 4 | 0, SAFE_HEAP_LOAD($16 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     }
    }
    $172 = $convex2;
    $173 = $172 & 1;
    if ($173) {
     $174 = $offset2;
     $175 = $174 >= 0.0;
     if ($175) {
      $183 = 1;
     } else {
      $176 = $offset0;
      $177 = $176 >= 0.0;
      $178 = $offset1;
      $179 = $178 >= 0.0;
      $180 = $177 ? $179 : 0;
      $183 = $180;
     }
     $181 = $44 + 248 | 0;
     $182 = $183 & 1;
     SAFE_HEAP_STORE($181 >> 0 | 0, $182 | 0, 1);
     $184 = $44 + 248 | 0;
     $185 = SAFE_HEAP_LOAD($184 >> 0 | 0, 1, 0) | 0 | 0;
     $186 = $185 & 1;
     $187 = $44 + 212 | 0;
     $188 = $44 + 196 | 0;
     if ($186) {
      {}
      SAFE_HEAP_STORE($187 | 0, SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($187 + 4 | 0, SAFE_HEAP_LOAD($188 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $189 = $44 + 228 | 0;
      $190 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($189 | 0, SAFE_HEAP_LOAD($190 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($189 + 4 | 0, SAFE_HEAP_LOAD($190 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $191 = $44 + 236 | 0;
      $192 = $44 + 204 | 0;
      {}
      SAFE_HEAP_STORE($191 | 0, SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($191 + 4 | 0, SAFE_HEAP_LOAD($192 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      __ZNK6b2Vec2ngEv($17, $188);
      {}
      SAFE_HEAP_STORE($187 | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($187 + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $193 = $44 + 228 | 0;
      $194 = $44 + 196 | 0;
      __ZNK6b2Vec2ngEv($18, $194);
      {}
      SAFE_HEAP_STORE($193 | 0, SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($193 + 4 | 0, SAFE_HEAP_LOAD($18 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $195 = $44 + 236 | 0;
      $196 = $44 + 188 | 0;
      __ZNK6b2Vec2ngEv($19, $196);
      {}
      SAFE_HEAP_STORE($195 | 0, SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($195 + 4 | 0, SAFE_HEAP_LOAD($19 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     }
    } else {
     $197 = $offset0;
     $198 = $197 >= 0.0;
     $199 = $offset1;
     $200 = $199 >= 0.0;
     $or$cond3 = $198 & $200;
     if ($or$cond3) {
      $201 = $offset2;
      $202 = $201 >= 0.0;
      $205 = $202;
     } else {
      $205 = 0;
     }
     $203 = $44 + 248 | 0;
     $204 = $205 & 1;
     SAFE_HEAP_STORE($203 >> 0 | 0, $204 | 0, 1);
     $206 = $44 + 248 | 0;
     $207 = SAFE_HEAP_LOAD($206 >> 0 | 0, 1, 0) | 0 | 0;
     $208 = $207 & 1;
     $209 = $44 + 212 | 0;
     $210 = $44 + 196 | 0;
     if ($208) {
      {}
      SAFE_HEAP_STORE($209 | 0, SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($209 + 4 | 0, SAFE_HEAP_LOAD($210 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $211 = $44 + 228 | 0;
      $212 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($211 | 0, SAFE_HEAP_LOAD($212 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($211 + 4 | 0, SAFE_HEAP_LOAD($212 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $213 = $44 + 236 | 0;
      $214 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($213 | 0, SAFE_HEAP_LOAD($214 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($213 + 4 | 0, SAFE_HEAP_LOAD($214 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      __ZNK6b2Vec2ngEv($20, $210);
      {}
      SAFE_HEAP_STORE($209 | 0, SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($209 + 4 | 0, SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $215 = $44 + 228 | 0;
      $216 = $44 + 204 | 0;
      __ZNK6b2Vec2ngEv($21, $216);
      {}
      SAFE_HEAP_STORE($215 | 0, SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($215 + 4 | 0, SAFE_HEAP_LOAD($21 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $217 = $44 + 236 | 0;
      $218 = $44 + 188 | 0;
      __ZNK6b2Vec2ngEv($22, $218);
      {}
      SAFE_HEAP_STORE($217 | 0, SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($217 + 4 | 0, SAFE_HEAP_LOAD($22 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     }
    }
   } else {
    label = 31;
   }
  } else {
   label = 31;
  }
 } while (0);
 do {
  if ((label | 0) == 31) {
   $219 = $hasVertex0;
   $220 = $219 & 1;
   if ($220) {
    $221 = $convex1;
    $222 = $221 & 1;
    $223 = $offset0;
    $224 = $223 >= 0.0;
    $225 = $offset1;
    $226 = $225 >= 0.0;
    if ($222) {
     $227 = $224 ? 1 : $226;
     $228 = $44 + 248 | 0;
     $229 = $227 & 1;
     SAFE_HEAP_STORE($228 >> 0 | 0, $229 | 0, 1);
     $230 = $44 + 248 | 0;
     $231 = SAFE_HEAP_LOAD($230 >> 0 | 0, 1, 0) | 0 | 0;
     $232 = $231 & 1;
     $233 = $44 + 212 | 0;
     $234 = $44 + 196 | 0;
     if ($232) {
      {}
      SAFE_HEAP_STORE($233 | 0, SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($233 + 4 | 0, SAFE_HEAP_LOAD($234 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $235 = $44 + 228 | 0;
      $236 = $44 + 188 | 0;
      {}
      SAFE_HEAP_STORE($235 | 0, SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($235 + 4 | 0, SAFE_HEAP_LOAD($236 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $237 = $44 + 236 | 0;
      $238 = $44 + 196 | 0;
      __ZNK6b2Vec2ngEv($23, $238);
      {}
      SAFE_HEAP_STORE($237 | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($237 + 4 | 0, SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      __ZNK6b2Vec2ngEv($24, $234);
      {}
      SAFE_HEAP_STORE($233 | 0, SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($233 + 4 | 0, SAFE_HEAP_LOAD($24 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $239 = $44 + 228 | 0;
      $240 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($239 | 0, SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($239 + 4 | 0, SAFE_HEAP_LOAD($240 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $241 = $44 + 236 | 0;
      $242 = $44 + 196 | 0;
      __ZNK6b2Vec2ngEv($25, $242);
      {}
      SAFE_HEAP_STORE($241 | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($241 + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     }
    } else {
     $243 = $224 ? $226 : 0;
     $244 = $44 + 248 | 0;
     $245 = $243 & 1;
     SAFE_HEAP_STORE($244 >> 0 | 0, $245 | 0, 1);
     $246 = $44 + 248 | 0;
     $247 = SAFE_HEAP_LOAD($246 >> 0 | 0, 1, 0) | 0 | 0;
     $248 = $247 & 1;
     $249 = $44 + 212 | 0;
     $250 = $44 + 196 | 0;
     if ($248) {
      {}
      SAFE_HEAP_STORE($249 | 0, SAFE_HEAP_LOAD($250 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($249 + 4 | 0, SAFE_HEAP_LOAD($250 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $251 = $44 + 228 | 0;
      $252 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($251 | 0, SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($251 + 4 | 0, SAFE_HEAP_LOAD($252 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $253 = $44 + 236 | 0;
      $254 = $44 + 196 | 0;
      __ZNK6b2Vec2ngEv($26, $254);
      {}
      SAFE_HEAP_STORE($253 | 0, SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($253 + 4 | 0, SAFE_HEAP_LOAD($26 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      __ZNK6b2Vec2ngEv($27, $250);
      {}
      SAFE_HEAP_STORE($249 | 0, SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($249 + 4 | 0, SAFE_HEAP_LOAD($27 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $255 = $44 + 228 | 0;
      $256 = $44 + 196 | 0;
      {}
      SAFE_HEAP_STORE($255 | 0, SAFE_HEAP_LOAD($256 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($255 + 4 | 0, SAFE_HEAP_LOAD($256 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $257 = $44 + 236 | 0;
      $258 = $44 + 188 | 0;
      __ZNK6b2Vec2ngEv($28, $258);
      {}
      SAFE_HEAP_STORE($257 | 0, SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($257 + 4 | 0, SAFE_HEAP_LOAD($28 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     }
    }
   }
   $259 = $hasVertex3;
   $260 = $259 & 1;
   if (!$260) {
    $299 = $offset1;
    $300 = $299 >= 0.0;
    $301 = $44 + 248 | 0;
    $302 = $300 & 1;
    SAFE_HEAP_STORE($301 >> 0 | 0, $302 | 0, 1);
    $303 = $44 + 248 | 0;
    $304 = SAFE_HEAP_LOAD($303 >> 0 | 0, 1, 0) | 0 | 0;
    $305 = $304 & 1;
    $306 = $44 + 212 | 0;
    $307 = $44 + 196 | 0;
    if ($305) {
     {}
     SAFE_HEAP_STORE($306 | 0, SAFE_HEAP_LOAD($307 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($306 + 4 | 0, SAFE_HEAP_LOAD($307 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $308 = $44 + 228 | 0;
     $309 = $44 + 196 | 0;
     __ZNK6b2Vec2ngEv($35, $309);
     {}
     SAFE_HEAP_STORE($308 | 0, SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($308 + 4 | 0, SAFE_HEAP_LOAD($35 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $310 = $44 + 236 | 0;
     $311 = $44 + 196 | 0;
     __ZNK6b2Vec2ngEv($36, $311);
     {}
     SAFE_HEAP_STORE($310 | 0, SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($310 + 4 | 0, SAFE_HEAP_LOAD($36 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    } else {
     __ZNK6b2Vec2ngEv($37, $307);
     {}
     SAFE_HEAP_STORE($306 | 0, SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($306 + 4 | 0, SAFE_HEAP_LOAD($37 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $312 = $44 + 228 | 0;
     $313 = $44 + 196 | 0;
     {}
     SAFE_HEAP_STORE($312 | 0, SAFE_HEAP_LOAD($313 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($312 + 4 | 0, SAFE_HEAP_LOAD($313 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $314 = $44 + 236 | 0;
     $315 = $44 + 196 | 0;
     {}
     SAFE_HEAP_STORE($314 | 0, SAFE_HEAP_LOAD($315 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($314 + 4 | 0, SAFE_HEAP_LOAD($315 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    }
   }
   $261 = $convex2;
   $262 = $261 & 1;
   $263 = $offset1;
   $264 = $263 >= 0.0;
   $265 = $offset2;
   $266 = $265 >= 0.0;
   if ($262) {
    $267 = $264 ? 1 : $266;
    $268 = $44 + 248 | 0;
    $269 = $267 & 1;
    SAFE_HEAP_STORE($268 >> 0 | 0, $269 | 0, 1);
    $270 = $44 + 248 | 0;
    $271 = SAFE_HEAP_LOAD($270 >> 0 | 0, 1, 0) | 0 | 0;
    $272 = $271 & 1;
    $273 = $44 + 212 | 0;
    $274 = $44 + 196 | 0;
    if ($272) {
     {}
     SAFE_HEAP_STORE($273 | 0, SAFE_HEAP_LOAD($274 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($273 + 4 | 0, SAFE_HEAP_LOAD($274 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $275 = $44 + 228 | 0;
     $276 = $44 + 196 | 0;
     __ZNK6b2Vec2ngEv($29, $276);
     {}
     SAFE_HEAP_STORE($275 | 0, SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($275 + 4 | 0, SAFE_HEAP_LOAD($29 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $277 = $44 + 236 | 0;
     $278 = $44 + 204 | 0;
     {}
     SAFE_HEAP_STORE($277 | 0, SAFE_HEAP_LOAD($278 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($277 + 4 | 0, SAFE_HEAP_LOAD($278 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    } else {
     __ZNK6b2Vec2ngEv($30, $274);
     {}
     SAFE_HEAP_STORE($273 | 0, SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($273 + 4 | 0, SAFE_HEAP_LOAD($30 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $279 = $44 + 228 | 0;
     $280 = $44 + 196 | 0;
     __ZNK6b2Vec2ngEv($31, $280);
     {}
     SAFE_HEAP_STORE($279 | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($279 + 4 | 0, SAFE_HEAP_LOAD($31 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $281 = $44 + 236 | 0;
     $282 = $44 + 196 | 0;
     {}
     SAFE_HEAP_STORE($281 | 0, SAFE_HEAP_LOAD($282 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($281 + 4 | 0, SAFE_HEAP_LOAD($282 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    }
   } else {
    $283 = $264 ? $266 : 0;
    $284 = $44 + 248 | 0;
    $285 = $283 & 1;
    SAFE_HEAP_STORE($284 >> 0 | 0, $285 | 0, 1);
    $286 = $44 + 248 | 0;
    $287 = SAFE_HEAP_LOAD($286 >> 0 | 0, 1, 0) | 0 | 0;
    $288 = $287 & 1;
    $289 = $44 + 212 | 0;
    $290 = $44 + 196 | 0;
    if ($288) {
     {}
     SAFE_HEAP_STORE($289 | 0, SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($289 + 4 | 0, SAFE_HEAP_LOAD($290 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $291 = $44 + 228 | 0;
     $292 = $44 + 196 | 0;
     __ZNK6b2Vec2ngEv($32, $292);
     {}
     SAFE_HEAP_STORE($291 | 0, SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($291 + 4 | 0, SAFE_HEAP_LOAD($32 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $293 = $44 + 236 | 0;
     $294 = $44 + 196 | 0;
     {}
     SAFE_HEAP_STORE($293 | 0, SAFE_HEAP_LOAD($294 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($293 + 4 | 0, SAFE_HEAP_LOAD($294 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    } else {
     __ZNK6b2Vec2ngEv($33, $290);
     {}
     SAFE_HEAP_STORE($289 | 0, SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($289 + 4 | 0, SAFE_HEAP_LOAD($33 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $295 = $44 + 228 | 0;
     $296 = $44 + 204 | 0;
     __ZNK6b2Vec2ngEv($34, $296);
     {}
     SAFE_HEAP_STORE($295 | 0, SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($295 + 4 | 0, SAFE_HEAP_LOAD($34 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $297 = $44 + 236 | 0;
     $298 = $44 + 196 | 0;
     {}
     SAFE_HEAP_STORE($297 | 0, SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($297 + 4 | 0, SAFE_HEAP_LOAD($298 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    }
   }
  }
 } while (0);
 $316 = $4;
 $317 = $316 + 148 | 0;
 $318 = SAFE_HEAP_LOAD($317 | 0, 4, 0) | 0 | 0;
 $319 = $44 + 128 | 0;
 SAFE_HEAP_STORE($319 | 0, $318 | 0, 4);
 $i = 0;
 while (1) {
  $320 = $i;
  $321 = $4;
  $322 = $321 + 148 | 0;
  $323 = SAFE_HEAP_LOAD($322 | 0, 4, 0) | 0 | 0;
  $324 = ($320 | 0) < ($323 | 0);
  if (!$324) {
   break;
  }
  $325 = $i;
  $326 = $44 + ($325 << 3) | 0;
  $327 = $44 + 132 | 0;
  $328 = $i;
  $329 = $4;
  $330 = $329 + 20 | 0;
  $331 = $330 + ($328 << 3) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($38, $327, $331);
  {}
  SAFE_HEAP_STORE($326 | 0, SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($326 + 4 | 0, SAFE_HEAP_LOAD($38 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $332 = $i;
  $333 = $44 + 64 | 0;
  $334 = $333 + ($332 << 3) | 0;
  $335 = $44 + 132 | 0;
  $336 = $335 + 8 | 0;
  $337 = $i;
  $338 = $4;
  $339 = $338 + 84 | 0;
  $340 = $339 + ($337 << 3) | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($39, $336, $340);
  {}
  SAFE_HEAP_STORE($334 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($334 + 4 | 0, SAFE_HEAP_LOAD($39 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $341 = $i;
  $342 = $341 + 1 | 0;
  $i = $342;
 }
 $343 = $44 + 244 | 0;
 SAFE_HEAP_STORE_D($343 | 0, +(.019999999552965164), 4);
 $344 = $1;
 $345 = $344 + 60 | 0;
 SAFE_HEAP_STORE($345 | 0, 0 | 0, 4);
 __ZN12b2EPCollider21ComputeEdgeSeparationEv($edgeAxis, $44);
 $346 = SAFE_HEAP_LOAD($edgeAxis | 0, 4, 0) | 0 | 0;
 $347 = ($346 | 0) == 0;
 if ($347) {
  STACKTOP = sp;
  return;
 }
 $348 = $edgeAxis + 8 | 0;
 $349 = +(+SAFE_HEAP_LOAD_D($348 | 0, 4));
 $350 = $44 + 244 | 0;
 $351 = +(+SAFE_HEAP_LOAD_D($350 | 0, 4));
 $352 = $349 > $351;
 if ($352) {
  STACKTOP = sp;
  return;
 }
 __ZN12b2EPCollider24ComputePolygonSeparationEv($polygonAxis, $44);
 $353 = SAFE_HEAP_LOAD($polygonAxis | 0, 4, 0) | 0 | 0;
 $354 = ($353 | 0) != 0;
 if ($354) {
  $355 = $polygonAxis + 8 | 0;
  $356 = +(+SAFE_HEAP_LOAD_D($355 | 0, 4));
  $357 = $44 + 244 | 0;
  $358 = +(+SAFE_HEAP_LOAD_D($357 | 0, 4));
  $359 = $356 > $358;
  if ($359) {
   STACKTOP = sp;
   return;
  }
 }
 $k_relativeTol = .9800000190734863;
 $k_absoluteTol = 1.0000000474974513e-003;
 $360 = SAFE_HEAP_LOAD($polygonAxis | 0, 4, 0) | 0 | 0;
 $361 = ($360 | 0) == 0;
 do {
  if ($361) {
   {}
   SAFE_HEAP_STORE($primaryAxis | 0, SAFE_HEAP_LOAD($edgeAxis | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($primaryAxis + 4 | 0, SAFE_HEAP_LOAD($edgeAxis + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($primaryAxis + 8 | 0, SAFE_HEAP_LOAD($edgeAxis + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  } else {
   $362 = $polygonAxis + 8 | 0;
   $363 = +(+SAFE_HEAP_LOAD_D($362 | 0, 4));
   $364 = $edgeAxis + 8 | 0;
   $365 = +(+SAFE_HEAP_LOAD_D($364 | 0, 4));
   $366 = .9800000190734863 * $365;
   $367 = $366 + 1.0000000474974513e-003;
   $368 = $363 > $367;
   if ($368) {
    {}
    SAFE_HEAP_STORE($primaryAxis | 0, SAFE_HEAP_LOAD($polygonAxis | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($primaryAxis + 4 | 0, SAFE_HEAP_LOAD($polygonAxis + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($primaryAxis + 8 | 0, SAFE_HEAP_LOAD($polygonAxis + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
    break;
   } else {
    {}
    SAFE_HEAP_STORE($primaryAxis | 0, SAFE_HEAP_LOAD($edgeAxis | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($primaryAxis + 4 | 0, SAFE_HEAP_LOAD($edgeAxis + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($primaryAxis + 8 | 0, SAFE_HEAP_LOAD($edgeAxis + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
    break;
   }
  }
 } while (0);
 $369 = $ie + 24 | 0;
 $370 = $ie;
 while (1) {
  __ZN12b2ClipVertexC2Ev($370);
  $371 = $370 + 12 | 0;
  $372 = ($371 | 0) == ($369 | 0);
  if ($372) {
   break;
  } else {
   $370 = $371;
  }
 }
 __ZN15b2ReferenceFaceC2Ev($rf);
 $373 = SAFE_HEAP_LOAD($primaryAxis | 0, 4, 0) | 0 | 0;
 $374 = ($373 | 0) == 1;
 $375 = $1;
 $376 = $375 + 56 | 0;
 do {
  if ($374) {
   SAFE_HEAP_STORE($376 | 0, 1 | 0, 4);
   $bestIndex = 0;
   $377 = $44 + 212 | 0;
   $378 = $44 + 64 | 0;
   $379 = +__Z5b2DotRK6b2Vec2S1_($377, $378);
   $bestValue = $379;
   $i1 = 1;
   while (1) {
    $380 = $i1;
    $381 = $44 + 128 | 0;
    $382 = SAFE_HEAP_LOAD($381 | 0, 4, 0) | 0 | 0;
    $383 = ($380 | 0) < ($382 | 0);
    if (!$383) {
     break;
    }
    $384 = $44 + 212 | 0;
    $385 = $i1;
    $386 = $44 + 64 | 0;
    $387 = $386 + ($385 << 3) | 0;
    $388 = +__Z5b2DotRK6b2Vec2S1_($384, $387);
    $value = $388;
    $389 = $value;
    $390 = $bestValue;
    $391 = $389 < $390;
    if ($391) {
     $392 = $value;
     $bestValue = $392;
     $393 = $i1;
     $bestIndex = $393;
    }
    $394 = $i1;
    $395 = $394 + 1 | 0;
    $i1 = $395;
   }
   $396 = $bestIndex;
   $i12 = $396;
   $397 = $i12;
   $398 = $397 + 1 | 0;
   $399 = $44 + 128 | 0;
   $400 = SAFE_HEAP_LOAD($399 | 0, 4, 0) | 0 | 0;
   $401 = ($398 | 0) < ($400 | 0);
   $402 = $i12;
   $403 = $402 + 1 | 0;
   $404 = $401 ? $403 : 0;
   $i2 = $404;
   $405 = $i12;
   $406 = $44 + ($405 << 3) | 0;
   {}
   SAFE_HEAP_STORE($ie | 0, SAFE_HEAP_LOAD($406 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($ie + 4 | 0, SAFE_HEAP_LOAD($406 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $407 = $ie + 8 | 0;
   SAFE_HEAP_STORE($407 >> 0 | 0, 0 | 0, 1);
   $408 = $i12;
   $409 = $408 & 255;
   $410 = $ie + 8 | 0;
   $411 = $410 + 1 | 0;
   SAFE_HEAP_STORE($411 >> 0 | 0, $409 | 0, 1);
   $412 = $ie + 8 | 0;
   $413 = $412 + 2 | 0;
   SAFE_HEAP_STORE($413 >> 0 | 0, 1 | 0, 1);
   $414 = $ie + 8 | 0;
   $415 = $414 + 3 | 0;
   SAFE_HEAP_STORE($415 >> 0 | 0, 0 | 0, 1);
   $416 = $ie + 12 | 0;
   $417 = $i2;
   $418 = $44 + ($417 << 3) | 0;
   {}
   SAFE_HEAP_STORE($416 | 0, SAFE_HEAP_LOAD($418 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($416 + 4 | 0, SAFE_HEAP_LOAD($418 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $419 = $ie + 12 | 0;
   $420 = $419 + 8 | 0;
   SAFE_HEAP_STORE($420 >> 0 | 0, 0 | 0, 1);
   $421 = $i2;
   $422 = $421 & 255;
   $423 = $ie + 12 | 0;
   $424 = $423 + 8 | 0;
   $425 = $424 + 1 | 0;
   SAFE_HEAP_STORE($425 >> 0 | 0, $422 | 0, 1);
   $426 = $ie + 12 | 0;
   $427 = $426 + 8 | 0;
   $428 = $427 + 2 | 0;
   SAFE_HEAP_STORE($428 >> 0 | 0, 1 | 0, 1);
   $429 = $ie + 12 | 0;
   $430 = $429 + 8 | 0;
   $431 = $430 + 3 | 0;
   SAFE_HEAP_STORE($431 >> 0 | 0, 0 | 0, 1);
   $432 = $44 + 248 | 0;
   $433 = SAFE_HEAP_LOAD($432 >> 0 | 0, 1, 0) | 0 | 0;
   $434 = $433 & 1;
   if ($434) {
    SAFE_HEAP_STORE($rf | 0, 0 | 0, 4);
    $435 = $rf + 4 | 0;
    SAFE_HEAP_STORE($435 | 0, 1 | 0, 4);
    $436 = $rf + 8 | 0;
    $437 = $44 + 164 | 0;
    {}
    SAFE_HEAP_STORE($436 | 0, SAFE_HEAP_LOAD($437 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($436 + 4 | 0, SAFE_HEAP_LOAD($437 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $438 = $rf + 16 | 0;
    $439 = $44 + 172 | 0;
    {}
    SAFE_HEAP_STORE($438 | 0, SAFE_HEAP_LOAD($439 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($438 + 4 | 0, SAFE_HEAP_LOAD($439 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $440 = $rf + 24 | 0;
    $441 = $44 + 196 | 0;
    {}
    SAFE_HEAP_STORE($440 | 0, SAFE_HEAP_LOAD($441 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($440 + 4 | 0, SAFE_HEAP_LOAD($441 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    break;
   } else {
    SAFE_HEAP_STORE($rf | 0, 1 | 0, 4);
    $442 = $rf + 4 | 0;
    SAFE_HEAP_STORE($442 | 0, 0 | 0, 4);
    $443 = $rf + 8 | 0;
    $444 = $44 + 172 | 0;
    {}
    SAFE_HEAP_STORE($443 | 0, SAFE_HEAP_LOAD($444 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($443 + 4 | 0, SAFE_HEAP_LOAD($444 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $445 = $rf + 16 | 0;
    $446 = $44 + 164 | 0;
    {}
    SAFE_HEAP_STORE($445 | 0, SAFE_HEAP_LOAD($446 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($445 + 4 | 0, SAFE_HEAP_LOAD($446 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $447 = $rf + 24 | 0;
    $448 = $44 + 196 | 0;
    __ZNK6b2Vec2ngEv($40, $448);
    {}
    SAFE_HEAP_STORE($447 | 0, SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($447 + 4 | 0, SAFE_HEAP_LOAD($40 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    break;
   }
  } else {
   SAFE_HEAP_STORE($376 | 0, 2 | 0, 4);
   $449 = $44 + 164 | 0;
   {}
   SAFE_HEAP_STORE($ie | 0, SAFE_HEAP_LOAD($449 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($ie + 4 | 0, SAFE_HEAP_LOAD($449 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $450 = $ie + 8 | 0;
   SAFE_HEAP_STORE($450 >> 0 | 0, 0 | 0, 1);
   $451 = $primaryAxis + 4 | 0;
   $452 = SAFE_HEAP_LOAD($451 | 0, 4, 0) | 0 | 0;
   $453 = $452 & 255;
   $454 = $ie + 8 | 0;
   $455 = $454 + 1 | 0;
   SAFE_HEAP_STORE($455 >> 0 | 0, $453 | 0, 1);
   $456 = $ie + 8 | 0;
   $457 = $456 + 2 | 0;
   SAFE_HEAP_STORE($457 >> 0 | 0, 0 | 0, 1);
   $458 = $ie + 8 | 0;
   $459 = $458 + 3 | 0;
   SAFE_HEAP_STORE($459 >> 0 | 0, 1 | 0, 1);
   $460 = $ie + 12 | 0;
   $461 = $44 + 172 | 0;
   {}
   SAFE_HEAP_STORE($460 | 0, SAFE_HEAP_LOAD($461 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($460 + 4 | 0, SAFE_HEAP_LOAD($461 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $462 = $ie + 12 | 0;
   $463 = $462 + 8 | 0;
   SAFE_HEAP_STORE($463 >> 0 | 0, 0 | 0, 1);
   $464 = $primaryAxis + 4 | 0;
   $465 = SAFE_HEAP_LOAD($464 | 0, 4, 0) | 0 | 0;
   $466 = $465 & 255;
   $467 = $ie + 12 | 0;
   $468 = $467 + 8 | 0;
   $469 = $468 + 1 | 0;
   SAFE_HEAP_STORE($469 >> 0 | 0, $466 | 0, 1);
   $470 = $ie + 12 | 0;
   $471 = $470 + 8 | 0;
   $472 = $471 + 2 | 0;
   SAFE_HEAP_STORE($472 >> 0 | 0, 0 | 0, 1);
   $473 = $ie + 12 | 0;
   $474 = $473 + 8 | 0;
   $475 = $474 + 3 | 0;
   SAFE_HEAP_STORE($475 >> 0 | 0, 1 | 0, 1);
   $476 = $primaryAxis + 4 | 0;
   $477 = SAFE_HEAP_LOAD($476 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($rf | 0, $477 | 0, 4);
   $478 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
   $479 = $478 + 1 | 0;
   $480 = $44 + 128 | 0;
   $481 = SAFE_HEAP_LOAD($480 | 0, 4, 0) | 0 | 0;
   $482 = ($479 | 0) < ($481 | 0);
   $483 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
   $484 = $483 + 1 | 0;
   $485 = $482 ? $484 : 0;
   $486 = $rf + 4 | 0;
   SAFE_HEAP_STORE($486 | 0, $485 | 0, 4);
   $487 = $rf + 8 | 0;
   $488 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
   $489 = $44 + ($488 << 3) | 0;
   {}
   SAFE_HEAP_STORE($487 | 0, SAFE_HEAP_LOAD($489 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($487 + 4 | 0, SAFE_HEAP_LOAD($489 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $490 = $rf + 16 | 0;
   $491 = $rf + 4 | 0;
   $492 = SAFE_HEAP_LOAD($491 | 0, 4, 0) | 0 | 0;
   $493 = $44 + ($492 << 3) | 0;
   {}
   SAFE_HEAP_STORE($490 | 0, SAFE_HEAP_LOAD($493 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($490 + 4 | 0, SAFE_HEAP_LOAD($493 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $494 = $rf + 24 | 0;
   $495 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
   $496 = $44 + 64 | 0;
   $497 = $496 + ($495 << 3) | 0;
   {}
   SAFE_HEAP_STORE($494 | 0, SAFE_HEAP_LOAD($497 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($494 + 4 | 0, SAFE_HEAP_LOAD($497 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  }
 } while (0);
 $498 = $rf + 32 | 0;
 $499 = $rf + 24 | 0;
 $500 = $499 + 4 | 0;
 $501 = +(+SAFE_HEAP_LOAD_D($500 | 0, 4));
 $502 = $rf + 24 | 0;
 $503 = +(+SAFE_HEAP_LOAD_D($502 | 0, 4));
 $504 = -$503;
 __ZN6b2Vec23SetEff($498, $501, $504);
 $505 = $rf + 44 | 0;
 $506 = $rf + 32 | 0;
 __ZNK6b2Vec2ngEv($41, $506);
 {}
 SAFE_HEAP_STORE($505 | 0, SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($505 + 4 | 0, SAFE_HEAP_LOAD($41 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $507 = $rf + 32 | 0;
 $508 = $rf + 8 | 0;
 $509 = +__Z5b2DotRK6b2Vec2S1_($507, $508);
 $510 = $rf + 40 | 0;
 SAFE_HEAP_STORE_D($510 | 0, +$509, 4);
 $511 = $rf + 44 | 0;
 $512 = $rf + 16 | 0;
 $513 = +__Z5b2DotRK6b2Vec2S1_($511, $512);
 $514 = $rf + 52 | 0;
 SAFE_HEAP_STORE_D($514 | 0, +$513, 4);
 $515 = $clipPoints1 + 24 | 0;
 $516 = $clipPoints1;
 while (1) {
  __ZN12b2ClipVertexC2Ev($516);
  $517 = $516 + 12 | 0;
  $518 = ($517 | 0) == ($515 | 0);
  if ($518) {
   break;
  } else {
   $516 = $517;
  }
 }
 $519 = $clipPoints2 + 24 | 0;
 $520 = $clipPoints2;
 while (1) {
  __ZN12b2ClipVertexC2Ev($520);
  $521 = $520 + 12 | 0;
  $522 = ($521 | 0) == ($519 | 0);
  if ($522) {
   break;
  } else {
   $520 = $521;
  }
 }
 $523 = $rf + 32 | 0;
 $524 = $rf + 40 | 0;
 $525 = +(+SAFE_HEAP_LOAD_D($524 | 0, 4));
 $526 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
 $527 = __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1, $ie, $523, $525, $526) | 0;
 $np = $527;
 $528 = $np;
 $529 = ($528 | 0) < 2;
 if ($529) {
  STACKTOP = sp;
  return;
 }
 $530 = $rf + 44 | 0;
 $531 = $rf + 52 | 0;
 $532 = +(+SAFE_HEAP_LOAD_D($531 | 0, 4));
 $533 = $rf + 4 | 0;
 $534 = SAFE_HEAP_LOAD($533 | 0, 4, 0) | 0 | 0;
 $535 = __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2, $clipPoints1, $530, $532, $534) | 0;
 $np = $535;
 $536 = $np;
 $537 = ($536 | 0) < 2;
 if ($537) {
  STACKTOP = sp;
  return;
 }
 $538 = SAFE_HEAP_LOAD($primaryAxis | 0, 4, 0) | 0 | 0;
 $539 = ($538 | 0) == 1;
 $540 = $1;
 $541 = $540 + 40 | 0;
 if ($539) {
  $542 = $rf + 24 | 0;
  {}
  SAFE_HEAP_STORE($541 | 0, SAFE_HEAP_LOAD($542 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($541 + 4 | 0, SAFE_HEAP_LOAD($542 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $543 = $1;
  $544 = $543 + 48 | 0;
  $545 = $rf + 8 | 0;
  {}
  SAFE_HEAP_STORE($544 | 0, SAFE_HEAP_LOAD($545 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($544 + 4 | 0, SAFE_HEAP_LOAD($545 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 } else {
  $546 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
  $547 = $4;
  $548 = $547 + 84 | 0;
  $549 = $548 + ($546 << 3) | 0;
  {}
  SAFE_HEAP_STORE($541 | 0, SAFE_HEAP_LOAD($549 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($541 + 4 | 0, SAFE_HEAP_LOAD($549 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $550 = $1;
  $551 = $550 + 48 | 0;
  $552 = SAFE_HEAP_LOAD($rf | 0, 4, 0) | 0 | 0;
  $553 = $4;
  $554 = $553 + 20 | 0;
  $555 = $554 + ($552 << 3) | 0;
  {}
  SAFE_HEAP_STORE($551 | 0, SAFE_HEAP_LOAD($555 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($551 + 4 | 0, SAFE_HEAP_LOAD($555 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 }
 $pointCount = 0;
 $i3 = 0;
 while (1) {
  $556 = $i3;
  $557 = ($556 | 0) < 2;
  if (!$557) {
   break;
  }
  $558 = $rf + 24 | 0;
  $559 = $i3;
  $560 = $clipPoints2 + ($559 * 12 | 0) | 0;
  $561 = $rf + 8 | 0;
  __ZmiRK6b2Vec2S1_($42, $560, $561);
  $562 = +__Z5b2DotRK6b2Vec2S1_($558, $42);
  $separation = $562;
  $563 = $separation;
  $564 = $44 + 244 | 0;
  $565 = +(+SAFE_HEAP_LOAD_D($564 | 0, 4));
  $566 = $563 <= $565;
  if ($566) {
   $567 = $1;
   $568 = $pointCount;
   $569 = $567 + ($568 * 20 | 0) | 0;
   $cp = $569;
   $570 = SAFE_HEAP_LOAD($primaryAxis | 0, 4, 0) | 0 | 0;
   $571 = ($570 | 0) == 1;
   $572 = $cp;
   if ($571) {
    $573 = $44 + 132 | 0;
    $574 = $i3;
    $575 = $clipPoints2 + ($574 * 12 | 0) | 0;
    __Z6b2MulTRK11b2TransformRK6b2Vec2($43, $573, $575);
    {}
    SAFE_HEAP_STORE($572 | 0, SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($572 + 4 | 0, SAFE_HEAP_LOAD($43 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $576 = $cp;
    $577 = $576 + 16 | 0;
    $578 = $i3;
    $579 = $clipPoints2 + ($578 * 12 | 0) | 0;
    $580 = $579 + 8 | 0;
    {}
    SAFE_HEAP_STORE($577 | 0, SAFE_HEAP_LOAD($580 | 0, 4, 0) | 0 | 0 | 0, 4);
   } else {
    $581 = $i3;
    $582 = $clipPoints2 + ($581 * 12 | 0) | 0;
    {}
    SAFE_HEAP_STORE($572 | 0, SAFE_HEAP_LOAD($582 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($572 + 4 | 0, SAFE_HEAP_LOAD($582 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $583 = $i3;
    $584 = $clipPoints2 + ($583 * 12 | 0) | 0;
    $585 = $584 + 8 | 0;
    $586 = $585 + 3 | 0;
    $587 = SAFE_HEAP_LOAD($586 >> 0 | 0, 1, 0) | 0 | 0;
    $588 = $cp;
    $589 = $588 + 16 | 0;
    $590 = $589 + 2 | 0;
    SAFE_HEAP_STORE($590 >> 0 | 0, $587 | 0, 1);
    $591 = $i3;
    $592 = $clipPoints2 + ($591 * 12 | 0) | 0;
    $593 = $592 + 8 | 0;
    $594 = $593 + 2 | 0;
    $595 = SAFE_HEAP_LOAD($594 >> 0 | 0, 1, 0) | 0 | 0;
    $596 = $cp;
    $597 = $596 + 16 | 0;
    $598 = $597 + 3 | 0;
    SAFE_HEAP_STORE($598 >> 0 | 0, $595 | 0, 1);
    $599 = $i3;
    $600 = $clipPoints2 + ($599 * 12 | 0) | 0;
    $601 = $600 + 8 | 0;
    $602 = $601 + 1 | 0;
    $603 = SAFE_HEAP_LOAD($602 >> 0 | 0, 1, 0) | 0 | 0;
    $604 = $cp;
    $605 = $604 + 16 | 0;
    SAFE_HEAP_STORE($605 >> 0 | 0, $603 | 0, 1);
    $606 = $i3;
    $607 = $clipPoints2 + ($606 * 12 | 0) | 0;
    $608 = $607 + 8 | 0;
    $609 = SAFE_HEAP_LOAD($608 >> 0 | 0, 1, 0) | 0 | 0;
    $610 = $cp;
    $611 = $610 + 16 | 0;
    $612 = $611 + 1 | 0;
    SAFE_HEAP_STORE($612 >> 0 | 0, $609 | 0, 1);
   }
   $613 = $pointCount;
   $614 = $613 + 1 | 0;
   $pointCount = $614;
  }
  $615 = $i3;
  $616 = $615 + 1 | 0;
  $i3 = $616;
 }
 $617 = $pointCount;
 $618 = $1;
 $619 = $618 + 60 | 0;
 SAFE_HEAP_STORE($619 | 0, $617 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i$i18$i = 0, $$0$i$i$i7$i = 0, $$0$i$i49 = 0, $$01$i = 0, $$03$i = 0, $$1$i = 0, $$1$i9 = 0, $$12$i = 0, $$14$i = 0, $$16$i = 0, $$lcssa = 0, $$ph26 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i15$i = 0, $$pre$i22$i = 0;
 var $$pre$i24$i = 0, $$pre$i27$i = 0, $$pre$i31$i = 0, $$pre$i33$i = 0, $$pre$i35$i = 0, $$sum$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i = 0, $__p$1$i$i48 = 0, $__v$i$i$i = 0, $__v$i$i$i4 = 0, $__v$i$i17$i = 0, $__v$i$i6$i = 0, $isdigit$i = 0, $isdigit11$i = 0, $isdigit13$i = 0, $isdigit9$i = 0, $isdigittmp$i = 0, $isdigittmp10$i = 0, $isdigittmp12$i = 0, $isdigittmp8$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $t0$0$i = 0, $t01$0$i = 0, $t01$0$i$lcssa67 = 0, $t01$1$i = 0, $t01$2$i = 0, $t1$0$i$lcssa = 0, $t1$0$i45 = 0, $t13$0$i$lcssa = 0, $t13$0$i51 = 0, $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i17$i = sp + 252 | 0;
 $__v$i$i$i4 = sp + 232 | 0;
 $0 = sp + 208 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 168 | 0;
 $3 = sp + 152 | 0;
 $tmp$i = sp + 140 | 0;
 $4 = sp + 128 | 0;
 $__v$i$i6$i = sp + 108 | 0;
 $__v$i$i$i = sp + 88 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 $10 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($10) {
   $$0 = $first;
  } else {
   $11 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $12 = $11 << 24 >> 24;
   switch ($12 | 0) {
   case 68:
   case 67:
    {
     $13 = $last;
     $14 = $first;
     $15 = $13 - $14 | 0;
     $16 = ($15 | 0) > 1;
     L6 : do {
      if ($16) {
       $17 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $18 = $db + 4 | 0;
       $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
       $20 = ($17 | 0) == ($19 | 0);
       if ($20) {
        $$03$i = $first;
       } else {
        L9 : do {
         switch ($12 | 0) {
         case 67:
          {
           $21 = $first + 1 | 0;
           $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
           $23 = $22 << 24 >> 24;
           switch ($23 | 0) {
           case 53:
           case 51:
           case 50:
           case 49:
            {
             break;
            }
           default:
            {
             $$03$i = $first;
             break L6;
            }
           }
           $24 = $19 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6, $24);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5, $6);
           $25 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
           $26 = $db + 8 | 0;
           $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
           $28 = $25 >>> 0 < $27 >>> 0;
           if ($28) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $5);
            $29 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
            $30 = $29 + 24 | 0;
            SAFE_HEAP_STORE($18 | 0, $30 | 0, 4);
           } else {
            $31 = $db + 12 | 0;
            $32 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $33 = $25;
            $34 = $32;
            $35 = $33 - $34 | 0;
            $36 = ($35 | 0) / 24 & -1;
            $37 = $36 + 1 | 0;
            $38 = ($35 | 0) < -24;
            if ($38) {
             __THREW__ = 0;
             invoke_vi(238, $db | 0);
             $39 = __THREW__;
             __THREW__ = 0;
             $40 = ___cxa_find_matching_catch() | 0;
             $41 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             $$1$i = $41;
             $$12$i = $40;
             break L9;
            }
            $42 = $27;
            $43 = $42 - $34 | 0;
            $44 = ($43 | 0) / 24 & -1;
            $45 = $44 >>> 0 < 1073741823;
            if ($45) {
             $46 = $44 << 1;
             $47 = $46 >>> 0 < $37 >>> 0;
             $48 = $47 ? $37 : $46;
             $$0$i$i$i$i = $48;
            } else {
             $$0$i$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i, $$0$i$i$i$i, $36, $31);
            $49 = $__v$i$i$i + 8 | 0;
            $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($50, $5);
            $51 = $50 + 24 | 0;
            SAFE_HEAP_STORE($49 | 0, $51 | 0, 4);
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           $52 = $first + 2 | 0;
           $53 = $db + 60 | 0;
           SAFE_HEAP_STORE($53 >> 0 | 0, 1 | 0, 1);
           $$03$i = $52;
           break L6;
           break;
          }
         case 68:
          {
           $54 = $first + 1 | 0;
           $55 = SAFE_HEAP_LOAD($54 >> 0 | 0, 1, 0) | 0 | 0;
           $56 = $55 << 24 >> 24;
           switch ($56 | 0) {
           case 53:
           case 50:
           case 49:
           case 48:
            {
             break;
            }
           default:
            {
             $$03$i = $first;
             break L6;
            }
           }
           $57 = $19 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($9, $57);
           __THREW__ = 0;
           $58 = invoke_iiii(227, $9 | 0, 0, 10521 | 0) | 0;
           $59 = __THREW__;
           __THREW__ = 0;
           $60 = $59 & 1;
           do {
            if ($60) {
             $92 = ___cxa_find_matching_catch() | 0;
             $93 = tempRet0;
             $$0$i = $93;
             $$01$i = $92;
            } else {
             {}
             SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($58 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($58 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
             SAFE_HEAP_STORE($58 | 0, 0 | 0, 4);
             $61 = $58 + 4 | 0;
             SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
             $62 = $58 + 8 | 0;
             SAFE_HEAP_STORE($62 | 0, 0 | 0, 4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7, $8);
             $63 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
             $64 = $db + 8 | 0;
             $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
             $66 = $63 >>> 0 < $65 >>> 0;
             if ($66) {
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($63, $7);
              $67 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
              $68 = $67 + 24 | 0;
              SAFE_HEAP_STORE($18 | 0, $68 | 0, 4);
             } else {
              $69 = $db + 12 | 0;
              $70 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
              $71 = $63;
              $72 = $70;
              $73 = $71 - $72 | 0;
              $74 = ($73 | 0) / 24 & -1;
              $75 = $74 + 1 | 0;
              $76 = ($73 | 0) < -24;
              if ($76) {
               __THREW__ = 0;
               invoke_vi(238, $db | 0);
               $77 = __THREW__;
               __THREW__ = 0;
               $78 = ___cxa_find_matching_catch() | 0;
               $79 = tempRet0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
               $$0$i = $79;
               $$01$i = $78;
               break;
              }
              $80 = $65;
              $81 = $80 - $72 | 0;
              $82 = ($81 | 0) / 24 & -1;
              $83 = $82 >>> 0 < 1073741823;
              if ($83) {
               $84 = $82 << 1;
               $85 = $84 >>> 0 < $75 >>> 0;
               $86 = $85 ? $75 : $84;
               $$0$i$i$i7$i = $86;
              } else {
               $$0$i$i$i7$i = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i6$i, $$0$i$i$i7$i, $74, $69);
              $87 = $__v$i$i6$i + 8 | 0;
              $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($88, $7);
              $89 = $88 + 24 | 0;
              SAFE_HEAP_STORE($87 | 0, $89 | 0, 4);
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i6$i);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6$i);
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             $90 = $first + 2 | 0;
             $91 = $db + 60 | 0;
             SAFE_HEAP_STORE($91 >> 0 | 0, 1 | 0, 1);
             $$03$i = $90;
             break L6;
            }
           } while (0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $$1$i = $$0$i;
           $$12$i = $$01$i;
           break;
          }
         default:
          {
           $$03$i = $first;
           break L6;
          }
         }
        } while (0);
        ___resumeException($$12$i | 0);
       }
      } else {
       $$03$i = $first;
      }
     } while (0);
     $$0 = $$03$i;
     break L1;
     break;
    }
   case 85:
    {
     $94 = $last;
     $95 = $first;
     $96 = $94 - $95 | 0;
     $97 = ($96 | 0) > 2;
     $98 = $11 << 24 >> 24 == 85;
     $or$cond = $97 & $98;
     L41 : do {
      if ($or$cond) {
       $99 = $first + 1 | 0;
       $100 = SAFE_HEAP_LOAD($99 >> 0 | 0, 1, 0) | 0 | 0;
       $101 = $100 << 24 >> 24;
       L43 : do {
        switch ($101 | 0) {
        case 116:
         {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1, 10523, 8);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
          $102 = $db + 4 | 0;
          $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
          $104 = $db + 8 | 0;
          $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
          $106 = $103 >>> 0 < $105 >>> 0;
          if ($106) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103, $0);
           $107 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
           $108 = $107 + 24 | 0;
           SAFE_HEAP_STORE($102 | 0, $108 | 0, 4);
          } else {
           $109 = $db + 12 | 0;
           $110 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $111 = $103;
           $112 = $110;
           $113 = $111 - $112 | 0;
           $114 = ($113 | 0) / 24 & -1;
           $115 = $114 + 1 | 0;
           $116 = ($113 | 0) < -24;
           if ($116) {
            __THREW__ = 0;
            invoke_vi(238, $db | 0);
            $117 = __THREW__;
            __THREW__ = 0;
            $118 = ___cxa_find_matching_catch() | 0;
            $119 = tempRet0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$14$i = $119;
            $$16$i = $118;
            break L43;
           }
           $120 = $105;
           $121 = $120 - $112 | 0;
           $122 = ($121 | 0) / 24 & -1;
           $123 = $122 >>> 0 < 1073741823;
           if ($123) {
            $124 = $122 << 1;
            $125 = $124 >>> 0 < $115 >>> 0;
            $126 = $125 ? $115 : $124;
            $$0$i$i$i$i6 = $126;
           } else {
            $$0$i$i$i$i6 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i4, $$0$i$i$i$i6, $114, $109);
           $127 = $__v$i$i$i4 + 8 | 0;
           $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $0);
           $129 = $128 + 24 | 0;
           SAFE_HEAP_STORE($127 | 0, $129 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i$i4);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i4);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $130 = $first + 2 | 0;
          $131 = ($130 | 0) == ($last | 0);
          if ($131) {
           $132 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
           $133 = $132 + -24 | 0;
           $135 = $132;
           while (1) {
            $134 = $135 + -24 | 0;
            SAFE_HEAP_STORE($102 | 0, $134 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($134);
            $$pre$i$i = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
            $136 = ($$pre$i$i | 0) == ($133 | 0);
            if ($136) {
             $$1$i9 = $first;
             break L41;
            } else {
             $135 = $$pre$i$i;
            }
           }
          }
          $137 = SAFE_HEAP_LOAD($130 >> 0 | 0, 1, 0) | 0 | 0;
          $138 = $137 << 24 >> 24;
          $isdigittmp10$i = $138 + -48 | 0;
          $isdigit11$i = $isdigittmp10$i >>> 0 < 10;
          if ($isdigit11$i) {
           $139 = $first + 3 | 0;
           $140 = ($139 | 0) == ($last | 0);
           L62 : do {
            if ($140) {
             $t1$0$i$lcssa = $last;
            } else {
             $t1$0$i45 = $139;
             while (1) {
              $141 = SAFE_HEAP_LOAD($t1$0$i45 >> 0 | 0, 1, 0) | 0 | 0;
              $142 = $141 << 24 >> 24;
              $isdigittmp12$i = $142 + -48 | 0;
              $isdigit13$i = $isdigittmp12$i >>> 0 < 10;
              if (!$isdigit13$i) {
               $t1$0$i$lcssa = $t1$0$i45;
               break L62;
              }
              $143 = $t1$0$i45 + 1 | 0;
              $144 = ($143 | 0) == ($last | 0);
              if ($144) {
               $t1$0$i$lcssa = $last;
               break;
              } else {
               $t1$0$i45 = $143;
              }
             }
            }
           } while (0);
           $145 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
           $146 = $145 + -24 | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($146, $130, $t1$0$i$lcssa);
           $t0$0$i = $t1$0$i$lcssa;
          } else {
           $t0$0$i = $130;
          }
          $147 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
          $148 = $147 + -24 | 0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($148, 39);
          $149 = ($t0$0$i | 0) == ($last | 0);
          if (!$149) {
           $150 = SAFE_HEAP_LOAD($t0$0$i >> 0 | 0, 1, 0) | 0 | 0;
           $151 = $150 << 24 >> 24 == 95;
           if ($151) {
            $157 = $t0$0$i + 1 | 0;
            $$1$i9 = $157;
            break L41;
           }
          }
          $152 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
          $153 = $152 + -24 | 0;
          $155 = $152;
          while (1) {
           $154 = $155 + -24 | 0;
           SAFE_HEAP_STORE($102 | 0, $154 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($154);
           $$pre$i15$i = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
           $156 = ($$pre$i15$i | 0) == ($153 | 0);
           if ($156) {
            $$1$i9 = $first;
            break L41;
           } else {
            $155 = $$pre$i15$i;
           }
          }
          break;
         }
        case 108:
         {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3, 10532, 9);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2, $3);
          $158 = $db + 4 | 0;
          $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
          $160 = $db + 8 | 0;
          $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
          $162 = $159 >>> 0 < $161 >>> 0;
          if ($162) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($159, $2);
           $163 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
           $164 = $163 + 24 | 0;
           SAFE_HEAP_STORE($158 | 0, $164 | 0, 4);
          } else {
           $165 = $db + 12 | 0;
           $166 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $167 = $159;
           $168 = $166;
           $169 = $167 - $168 | 0;
           $170 = ($169 | 0) / 24 & -1;
           $171 = $170 + 1 | 0;
           $172 = ($169 | 0) < -24;
           if ($172) {
            __THREW__ = 0;
            invoke_vi(238, $db | 0);
            $173 = __THREW__;
            __THREW__ = 0;
            $174 = ___cxa_find_matching_catch() | 0;
            $175 = tempRet0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            $$14$i = $175;
            $$16$i = $174;
            break L43;
           }
           $176 = $161;
           $177 = $176 - $168 | 0;
           $178 = ($177 | 0) / 24 & -1;
           $179 = $178 >>> 0 < 1073741823;
           if ($179) {
            $180 = $178 << 1;
            $181 = $180 >>> 0 < $171 >>> 0;
            $182 = $181 ? $171 : $180;
            $$0$i$i$i18$i = $182;
           } else {
            $$0$i$i$i18$i = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17$i, $$0$i$i$i18$i, $170, $165);
           $183 = $__v$i$i17$i + 8 | 0;
           $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($184, $2);
           $185 = $184 + 24 | 0;
           SAFE_HEAP_STORE($183 | 0, $185 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i17$i);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17$i);
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $186 = $first + 2 | 0;
          $187 = SAFE_HEAP_LOAD($186 >> 0 | 0, 1, 0) | 0 | 0;
          $188 = $187 << 24 >> 24 == 118;
          L85 : do {
           if ($188) {
            $189 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
            $190 = $189 + -24 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($190, 41);
            $191 = $first + 3 | 0;
            $t01$1$i = $191;
           } else {
            $192 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($186, $last, $db) | 0;
            $193 = ($192 | 0) == ($186 | 0);
            $194 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
            if ($193) {
             $195 = $194 + -24 | 0;
             $197 = $194;
             while (1) {
              $196 = $197 + -24 | 0;
              SAFE_HEAP_STORE($158 | 0, $196 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($196);
              $$pre$i22$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
              $198 = ($$pre$i22$i | 0) == ($195 | 0);
              if ($198) {
               $$1$i9 = $first;
               break L41;
              } else {
               $197 = $$pre$i22$i;
              }
             }
            }
            $199 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
            $200 = $194;
            $201 = $199;
            $202 = $200 - $201 | 0;
            $203 = ($202 | 0) / 24 & -1;
            $204 = $203 >>> 0 < 2;
            if ($204) {
             $$1$i9 = $first;
             break L41;
            }
            $205 = $194 + -24 | 0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i, $205);
            $206 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
            $207 = $206 + -24 | 0;
            $209 = $206;
            while (1) {
             $208 = $209 + -24 | 0;
             SAFE_HEAP_STORE($158 | 0, $208 | 0, 4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($208);
             $$pre$i24$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
             $210 = ($$pre$i24$i | 0) == ($207 | 0);
             if ($210) {
              break;
             } else {
              $209 = $$pre$i24$i;
             }
            }
            $211 = $206 + -48 | 0;
            $212 = SAFE_HEAP_LOAD($tmp$i >> 0 | 0, 1, 0) | 0 | 0;
            $213 = $212 & 1;
            $214 = $213 << 24 >> 24 == 0;
            $215 = $tmp$i + 8 | 0;
            $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
            $217 = $tmp$i + 1 | 0;
            $218 = $214 ? $217 : $216;
            $219 = $tmp$i + 4 | 0;
            $220 = SAFE_HEAP_LOAD($219 | 0, 4, 0) | 0 | 0;
            $221 = $212 & 255;
            $222 = $221 >>> 1;
            $223 = $214 ? $222 : $220;
            __THREW__ = 0;
            invoke_iiii(222, $211 | 0, $218 | 0, $223 | 0) | 0;
            $224 = __THREW__;
            __THREW__ = 0;
            $225 = $224 & 1;
            do {
             if ($225) {
              label = 71;
             } else {
              $226 = $4 + 4 | 0;
              $227 = $4 + 8 | 0;
              $$pre$i$i$i$i = $212;
              $t01$0$i = $192;
              while (1) {
               __THREW__ = 0;
               $228 = invoke_iiii(230, $t01$0$i | 0, $last | 0, $db | 0) | 0;
               $229 = __THREW__;
               __THREW__ = 0;
               $230 = $229 & 1;
               if ($230) {
                label = 70;
                break;
               }
               $231 = ($228 | 0) == ($t01$0$i | 0);
               $232 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
               if ($231) {
                $$lcssa = $232;
                $t01$0$i$lcssa67 = $t01$0$i;
                label = 90;
                break;
               }
               $237 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
               $238 = $232;
               $239 = $237;
               $240 = $238 - $239 | 0;
               $241 = ($240 | 0) / 24 & -1;
               $242 = $241 >>> 0 < 2;
               if ($242) {
                label = 125;
                break;
               }
               $243 = $232 + -24 | 0;
               __THREW__ = 0;
               invoke_vii(232, $4 | 0, $243 | 0);
               $244 = __THREW__;
               __THREW__ = 0;
               $245 = $244 & 1;
               if ($245) {
                label = 70;
                break;
               }
               $246 = $$pre$i$i$i$i & 1;
               $247 = $246 << 24 >> 24 == 0;
               L105 : do {
                if ($247) {
                 SAFE_HEAP_STORE($217 >> 0 | 0, 0 | 0, 1);
                 SAFE_HEAP_STORE($tmp$i >> 0 | 0, 0 | 0, 1);
                } else {
                 $248 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
                 SAFE_HEAP_STORE($248 >> 0 | 0, 0 | 0, 1);
                 SAFE_HEAP_STORE($219 | 0, 0 | 0, 4);
                 $249 = SAFE_HEAP_LOAD($tmp$i | 0, 4, 0) | 0 | 0;
                 $250 = $249 & -2;
                 $phitmp$i$i$i$i$i$i$i = $250 + -1 | 0;
                 $251 = $249 & 255;
                 $252 = $251 & 1;
                 $253 = $252 << 24 >> 24 == 0;
                 do {
                  if ($253) {
                   $254 = $249 >>> 1;
                   $255 = $254 & 127;
                   $256 = ($251 & 255) < 22;
                   if ($256) {
                    $263 = $249 >>> 1;
                    $264 = $263 & 127;
                    $265 = $264 + 1 | 0;
                    _memcpy($217 | 0, $248 | 0, $265 | 0) | 0;
                    _free($248);
                    $$ph26 = $255;
                    break;
                   }
                   $257 = $255 + 16 | 0;
                   $258 = $257 & 240;
                   $phitmp$i2$i$i$i$i$i$i = $258 + -1 | 0;
                   $259 = ($phitmp$i2$i$i$i$i$i$i | 0) == ($phitmp$i$i$i$i$i$i$i | 0);
                   if ($259) {
                    break L105;
                   }
                   $260 = $phitmp$i2$i$i$i$i$i$i >>> 0 <= $phitmp$i$i$i$i$i$i$i >>> 0;
                   $261 = _malloc($258) | 0;
                   $262 = ($261 | 0) == (0 | 0);
                   $or$cond$i$i$i$i$i$i = $260 & $262;
                   if ($or$cond$i$i$i$i$i$i) {
                    break L105;
                   }
                   $266 = $249 >>> 1;
                   $267 = $266 & 127;
                   $268 = $267 + 1 | 0;
                   _memcpy($261 | 0, $217 | 0, $268 | 0) | 0;
                   $269 = $258 | 1;
                   SAFE_HEAP_STORE($tmp$i | 0, $269 | 0, 4);
                   SAFE_HEAP_STORE($219 | 0, $255 | 0, 4);
                   SAFE_HEAP_STORE($215 | 0, $261 | 0, 4);
                   break L105;
                  } else {
                   SAFE_HEAP_STORE($217 >> 0 | 0, 0 | 0, 1);
                   _free($248);
                   $$ph26 = 0;
                  }
                 } while (0);
                 $270 = $$ph26 << 1;
                 $271 = $270 & 255;
                 SAFE_HEAP_STORE($tmp$i >> 0 | 0, $271 | 0, 1);
                }
               } while (0);
               {}
               SAFE_HEAP_STORE($tmp$i | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($tmp$i + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($tmp$i + 8 | 0, SAFE_HEAP_LOAD($4 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
               SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($226 | 0, 0 | 0, 4);
               SAFE_HEAP_STORE($227 | 0, 0 | 0, 4);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
               $272 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
               $273 = $272 + -24 | 0;
               $275 = $272;
               while (1) {
                $274 = $275 + -24 | 0;
                SAFE_HEAP_STORE($158 | 0, $274 | 0, 4);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($274);
                $$pre$i27$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
                $276 = ($$pre$i27$i | 0) == ($273 | 0);
                if ($276) {
                 break;
                } else {
                 $275 = $$pre$i27$i;
                }
               }
               $277 = SAFE_HEAP_LOAD($tmp$i >> 0 | 0, 1, 0) | 0 | 0;
               $278 = $277 & 1;
               $279 = $278 << 24 >> 24 == 0;
               $280 = SAFE_HEAP_LOAD($219 | 0, 4, 0) | 0 | 0;
               $281 = $277 & 255;
               $282 = $281 >>> 1;
               $283 = $279 ? $282 : $280;
               $284 = ($283 | 0) == 0;
               if ($284) {
                $$pre$i$i$i$i = $277;
                $t01$0$i = $228;
                continue;
               }
               $285 = $272 + -48 | 0;
               __THREW__ = 0;
               invoke_iii(228, $285 | 0, 10309 | 0) | 0;
               $286 = __THREW__;
               __THREW__ = 0;
               $287 = $286 & 1;
               if ($287) {
                label = 70;
                break;
               }
               $288 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
               $289 = $288 + -24 | 0;
               $290 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
               $291 = $279 ? $217 : $290;
               __THREW__ = 0;
               invoke_iiii(222, $289 | 0, $291 | 0, $283 | 0) | 0;
               $292 = __THREW__;
               __THREW__ = 0;
               $293 = $292 & 1;
               if ($293) {
                label = 70;
                break;
               } else {
                $$pre$i$i$i$i = $277;
                $t01$0$i = $228;
               }
              }
              if ((label | 0) == 70) {
               $233 = ___cxa_find_matching_catch() | 0;
               $234 = tempRet0;
               $lpad$phi$index = $233;
               $lpad$phi$index2 = $234;
               break;
              } else if ((label | 0) == 90) {
               $294 = $$lcssa + -24 | 0;
               __THREW__ = 0;
               invoke_iii(228, $294 | 0, 10212 | 0) | 0;
               $295 = __THREW__;
               __THREW__ = 0;
               $296 = $295 & 1;
               if ($296) {
                label = 71;
                break;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
               $t01$1$i = $t01$0$i$lcssa67;
               break L85;
              } else if ((label | 0) == 125) {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
               $$1$i9 = $first;
               break L41;
              }
             }
            } while (0);
            if ((label | 0) == 71) {
             $235 = ___cxa_find_matching_catch() | 0;
             $236 = tempRet0;
             $lpad$phi$index = $235;
             $lpad$phi$index2 = $236;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
            $$14$i = $lpad$phi$index2;
            $$16$i = $lpad$phi$index;
            break L43;
           }
          } while (0);
          $297 = ($t01$1$i | 0) == ($last | 0);
          if (!$297) {
           $298 = SAFE_HEAP_LOAD($t01$1$i >> 0 | 0, 1, 0) | 0 | 0;
           $299 = $298 << 24 >> 24 == 69;
           if ($299) {
            $305 = $t01$1$i + 1 | 0;
            $306 = ($305 | 0) == ($last | 0);
            if ($306) {
             $307 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
             $308 = $307 + -24 | 0;
             $310 = $307;
             while (1) {
              $309 = $310 + -24 | 0;
              SAFE_HEAP_STORE($158 | 0, $309 | 0, 4);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($309);
              $$pre$i33$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
              $311 = ($$pre$i33$i | 0) == ($308 | 0);
              if ($311) {
               $$1$i9 = $first;
               break L41;
              } else {
               $310 = $$pre$i33$i;
              }
             }
            }
            $312 = SAFE_HEAP_LOAD($305 >> 0 | 0, 1, 0) | 0 | 0;
            $313 = $312 << 24 >> 24;
            $isdigittmp$i = $313 + -48 | 0;
            $isdigit$i = $isdigittmp$i >>> 0 < 10;
            if ($isdigit$i) {
             $314 = $t01$1$i + 2 | 0;
             $315 = ($314 | 0) == ($last | 0);
             L142 : do {
              if ($315) {
               $t13$0$i$lcssa = $last;
              } else {
               $t13$0$i51 = $314;
               while (1) {
                $316 = SAFE_HEAP_LOAD($t13$0$i51 >> 0 | 0, 1, 0) | 0 | 0;
                $317 = $316 << 24 >> 24;
                $isdigittmp8$i = $317 + -48 | 0;
                $isdigit9$i = $isdigittmp8$i >>> 0 < 10;
                if (!$isdigit9$i) {
                 $t13$0$i$lcssa = $t13$0$i51;
                 break L142;
                }
                $318 = $t13$0$i51 + 1 | 0;
                $319 = ($318 | 0) == ($last | 0);
                if ($319) {
                 $t13$0$i$lcssa = $last;
                 break;
                } else {
                 $t13$0$i51 = $318;
                }
               }
              }
             } while (0);
             $320 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
             $321 = $320 + -24 | 0;
             $322 = SAFE_HEAP_LOAD($321 >> 0 | 0, 1, 0) | 0 | 0;
             $323 = $322 & 1;
             $324 = $323 << 24 >> 24 == 0;
             if ($324) {
              $325 = $322 & 255;
              $326 = $325 >>> 1;
              $337 = 10;
              $338 = $326;
              $341 = $322;
             } else {
              $327 = $320 + -20 | 0;
              $328 = SAFE_HEAP_LOAD($327 | 0, 4, 0) | 0 | 0;
              $329 = SAFE_HEAP_LOAD($321 | 0, 4, 0) | 0 | 0;
              $330 = $329 & -2;
              $phitmp$i$i$i = $330 + -1 | 0;
              $331 = $329 & 255;
              $337 = $phitmp$i$i$i;
              $338 = $328;
              $341 = $331;
             }
             $332 = $t13$0$i$lcssa;
             $333 = $305;
             $334 = $332 - $333 | 0;
             $335 = ($t13$0$i$lcssa | 0) == ($305 | 0);
             if ($335) {
              $t01$2$i = $305;
             } else {
              $336 = $337 - $338 | 0;
              $339 = $336 >>> 0 < $334 >>> 0;
              do {
               if ($339) {
                $351 = $338 + $334 | 0;
                $352 = $351 - $337 | 0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($321, $337, $352, $338, 7, $334);
                $353 = $320 + -16 | 0;
                $354 = SAFE_HEAP_LOAD($353 | 0, 4, 0) | 0 | 0;
                $__p$0$i$i = $354;
               } else {
                $340 = $341 & 1;
                $342 = $340 << 24 >> 24 == 0;
                if ($342) {
                 $345 = $321 + 1 | 0;
                 $349 = $345;
                } else {
                 $343 = $320 + -16 | 0;
                 $344 = SAFE_HEAP_LOAD($343 | 0, 4, 0) | 0 | 0;
                 $349 = $344;
                }
                $346 = ($338 | 0) == 7;
                if ($346) {
                 $__p$0$i$i = $349;
                 break;
                }
                $347 = $338 + -7 | 0;
                $348 = $349 + 7 | 0;
                $$sum$i$i = $334 + 7 | 0;
                $350 = $349 + $$sum$i$i | 0;
                _memmove($350 | 0, $348 | 0, $347 | 0) | 0;
                $__p$0$i$i = $349;
               }
              } while (0);
              $355 = $338 + $334 | 0;
              $356 = SAFE_HEAP_LOAD($321 >> 0 | 0, 1, 0) | 0 | 0;
              $357 = $356 & 1;
              $358 = $357 << 24 >> 24 == 0;
              if ($358) {
               $360 = $355 << 1;
               $361 = $360 & 255;
               SAFE_HEAP_STORE($321 >> 0 | 0, $361 | 0, 1);
              } else {
               $359 = $320 + -20 | 0;
               SAFE_HEAP_STORE($359 | 0, $355 | 0, 4);
              }
              $362 = $__p$0$i$i + $355 | 0;
              SAFE_HEAP_STORE($362 >> 0 | 0, 0 | 0, 1);
              $363 = ($305 | 0) == ($t13$0$i$lcssa | 0);
              if ($363) {
               $t01$2$i = $t13$0$i$lcssa;
              } else {
               $364 = $__p$0$i$i + 7 | 0;
               $$0$i$i49 = $305;
               $__p$1$i$i48 = $364;
               while (1) {
                $365 = SAFE_HEAP_LOAD($$0$i$i49 >> 0 | 0, 1, 0) | 0 | 0;
                SAFE_HEAP_STORE($__p$1$i$i48 >> 0 | 0, $365 | 0, 1);
                $366 = $__p$1$i$i48 + 1 | 0;
                $367 = $$0$i$i49 + 1 | 0;
                $368 = ($367 | 0) == ($t13$0$i$lcssa | 0);
                if ($368) {
                 $t01$2$i = $t13$0$i$lcssa;
                 break;
                } else {
                 $$0$i$i49 = $367;
                 $__p$1$i$i48 = $366;
                }
               }
              }
             }
            } else {
             $t01$2$i = $305;
            }
            $369 = ($t01$2$i | 0) == ($last | 0);
            if (!$369) {
             $370 = SAFE_HEAP_LOAD($t01$2$i >> 0 | 0, 1, 0) | 0 | 0;
             $371 = $370 << 24 >> 24 == 95;
             if ($371) {
              $377 = $t01$2$i + 1 | 0;
              $$1$i9 = $377;
              break L41;
             }
            }
            $372 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
            $373 = $372 + -24 | 0;
            $375 = $372;
            while (1) {
             $374 = $375 + -24 | 0;
             SAFE_HEAP_STORE($158 | 0, $374 | 0, 4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($374);
             $$pre$i35$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
             $376 = ($$pre$i35$i | 0) == ($373 | 0);
             if ($376) {
              $$1$i9 = $first;
              break L41;
             } else {
              $375 = $$pre$i35$i;
             }
            }
           }
          }
          $300 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
          $301 = $300 + -24 | 0;
          $303 = $300;
          while (1) {
           $302 = $303 + -24 | 0;
           SAFE_HEAP_STORE($158 | 0, $302 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($302);
           $$pre$i31$i = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
           $304 = ($$pre$i31$i | 0) == ($301 | 0);
           if ($304) {
            $$1$i9 = $first;
            break L41;
           } else {
            $303 = $$pre$i31$i;
           }
          }
          break;
         }
        default:
         {
          $$1$i9 = $first;
          break L41;
         }
        }
       } while (0);
       ___resumeException($$16$i | 0);
      } else {
       $$1$i9 = $first;
      }
     } while (0);
     $$0 = $$1$i9;
     break L1;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
    {
     $378 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     STACKTOP = sp;
     return $378 | 0;
     break;
    }
   default:
    {
     $379 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $$0 = $379;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN7b2World8SolveTOIERK10b2TimeStep($this, $step) {
 $this = $this | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $alpha = 0.0, $alpha0 = 0.0, $b = 0, $bA = 0, $bA4 = 0, $bB = 0, $bB5 = 0, $backup = 0, $backup1 = 0, $backup2 = 0, $beta = 0.0, $bodies = 0;
 var $body = 0, $body7 = 0, $c = 0, $c1 = 0, $ce = 0, $ce8 = 0, $collideA = 0, $collideB = 0, $contact = 0, $fA = 0, $fA2 = 0, $fB = 0, $fB3 = 0, $i = 0, $i6 = 0, $indexA = 0, $indexB = 0, $input = 0, $island = 0, $minAlpha = 0.0;
 var $minContact = 0, $or$cond = 0, $or$cond3 = 0, $other = 0, $output = 0, $sensorA = 0, $sensorB = 0, $subStep = 0, $typeA = 0, $typeB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $island = sp + 408 | 0;
 $input = sp + 208 | 0;
 $output = sp + 200 | 0;
 $backup1 = sp + 140 | 0;
 $backup2 = sp + 104 | 0;
 $bodies = sp + 96 | 0;
 $backup = sp + 40 | 0;
 $subStep = sp + 16 | 0;
 $0 = $this;
 $1 = $step;
 $4 = $0;
 $5 = $4 + 68 | 0;
 $6 = $4 + 102872 | 0;
 $7 = $6 + 72 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, 64, 32, 0, $5, $8);
 $9 = $4 + 102995 | 0;
 $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
 $11 = $10 & 1;
 L1 : do {
  if ($11) {
   $12 = $4 + 102952 | 0;
   $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
   $b = $13;
   while (1) {
    $14 = $b;
    $15 = ($14 | 0) != (0 | 0);
    if (!$15) {
     break;
    }
    $16 = $b;
    $17 = $16 + 4 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 2, 0) | 0 | 0;
    $19 = $18 & 65535;
    $20 = $19 & -2;
    $21 = $20 & 65535;
    SAFE_HEAP_STORE($17 | 0, $21 | 0, 2);
    $22 = $b;
    $23 = $22 + 28 | 0;
    $24 = $23 + 32 | 0;
    SAFE_HEAP_STORE_D($24 | 0, +(0.0), 4);
    $25 = $b;
    $26 = $25 + 96 | 0;
    $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
    $b = $27;
   }
   $28 = $4 + 102872 | 0;
   $29 = $28 + 60 | 0;
   $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
   $c = $30;
   while (1) {
    $31 = $c;
    $32 = ($31 | 0) != (0 | 0);
    if (!$32) {
     break L1;
    }
    $33 = $c;
    $34 = $33 + 4 | 0;
    $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
    $36 = $35 & -34;
    SAFE_HEAP_STORE($34 | 0, $36 | 0, 4);
    $37 = $c;
    $38 = $37 + 128 | 0;
    SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
    $39 = $c;
    $40 = $39 + 132 | 0;
    SAFE_HEAP_STORE_D($40 | 0, +(1.0), 4);
    $41 = $c;
    $42 = $41 + 12 | 0;
    $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
    $c = $43;
   }
  }
 } while (0);
 L10 : while (1) {
  $minContact = 0;
  $minAlpha = 1.0;
  $44 = $4 + 102872 | 0;
  $45 = $44 + 60 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $c1 = $46;
  while (1) {
   $47 = $c1;
   $48 = ($47 | 0) != (0 | 0);
   if (!$48) {
    break;
   }
   $49 = $c1;
   __THREW__ = 0;
   $50 = invoke_ii(170, $49 | 0) | 0;
   $51 = __THREW__;
   __THREW__ = 0;
   $52 = $51 & 1;
   if ($52) {
    break L10;
   }
   $53 = $50 & 1;
   $54 = ($53 | 0) == 0;
   do {
    if (!$54) {
     $59 = $c1;
     $60 = $59 + 128 | 0;
     $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
     $62 = ($61 | 0) > 8;
     if (!$62) {
      $alpha = 1.0;
      $63 = $c1;
      $64 = $63 + 4 | 0;
      $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
      $66 = $65 & 32;
      $67 = ($66 | 0) != 0;
      $68 = $c1;
      if ($67) {
       $69 = $68 + 132 | 0;
       $70 = +(+SAFE_HEAP_LOAD_D($69 | 0, 4));
       $alpha = $70;
      } else {
       __THREW__ = 0;
       $71 = invoke_ii(179, $68 | 0) | 0;
       $72 = __THREW__;
       __THREW__ = 0;
       $73 = $72 & 1;
       if ($73) {
        break L10;
       }
       $fA = $71;
       $74 = $c1;
       __THREW__ = 0;
       $75 = invoke_ii(180, $74 | 0) | 0;
       $76 = __THREW__;
       __THREW__ = 0;
       $77 = $76 & 1;
       if ($77) {
        break L10;
       }
       $fB = $75;
       $78 = $fA;
       __THREW__ = 0;
       $79 = invoke_ii(181, $78 | 0) | 0;
       $80 = __THREW__;
       __THREW__ = 0;
       $81 = $80 & 1;
       if ($81) {
        break L10;
       }
       if ($79) {
        break;
       }
       $82 = $fB;
       __THREW__ = 0;
       $83 = invoke_ii(181, $82 | 0) | 0;
       $84 = __THREW__;
       __THREW__ = 0;
       $85 = $84 & 1;
       if ($85) {
        break L10;
       }
       if ($83) {
        break;
       }
       $86 = $fA;
       __THREW__ = 0;
       $87 = invoke_ii(182, $86 | 0) | 0;
       $88 = __THREW__;
       __THREW__ = 0;
       $89 = $88 & 1;
       if ($89) {
        break L10;
       }
       $bA = $87;
       $90 = $fB;
       __THREW__ = 0;
       $91 = invoke_ii(182, $90 | 0) | 0;
       $92 = __THREW__;
       __THREW__ = 0;
       $93 = $92 & 1;
       if ($93) {
        break L10;
       }
       $bB = $91;
       $94 = $bA;
       $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
       $typeA = $95;
       $96 = $bB;
       $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
       $typeB = $97;
       $98 = $typeA;
       $99 = ($98 | 0) == 2;
       $100 = $typeB;
       $101 = ($100 | 0) == 2;
       $or$cond = $99 | $101;
       if (!$or$cond) {
        label = 25;
        break L10;
       }
       $103 = $bA;
       __THREW__ = 0;
       $104 = invoke_ii(166, $103 | 0) | 0;
       $105 = __THREW__;
       __THREW__ = 0;
       $106 = $105 & 1;
       if ($106) {
        break L10;
       }
       $107 = $typeA;
       $108 = ($107 | 0) != 0;
       $109 = $104 ? $108 : 0;
       $110 = $109 & 1;
       $activeA = $110;
       $111 = $bB;
       __THREW__ = 0;
       $112 = invoke_ii(166, $111 | 0) | 0;
       $113 = __THREW__;
       __THREW__ = 0;
       $114 = $113 & 1;
       if ($114) {
        break L10;
       }
       $115 = $typeB;
       $116 = ($115 | 0) != 0;
       $117 = $112 ? $116 : 0;
       $118 = $117 & 1;
       $activeB = $118;
       $119 = $activeA;
       $120 = $119 & 1;
       $121 = $120 & 1;
       $122 = ($121 | 0) == 0;
       if ($122) {
        $123 = $activeB;
        $124 = $123 & 1;
        $125 = $124 & 1;
        $126 = ($125 | 0) == 0;
        if ($126) {
         break;
        }
       }
       $127 = $bA;
       __THREW__ = 0;
       $128 = invoke_ii(183, $127 | 0) | 0;
       $129 = __THREW__;
       __THREW__ = 0;
       $130 = $129 & 1;
       if ($130) {
        break L10;
       }
       $131 = $typeA;
       $132 = ($131 | 0) != 2;
       $133 = $128 ? 1 : $132;
       $134 = $133 & 1;
       $collideA = $134;
       $135 = $bB;
       __THREW__ = 0;
       $136 = invoke_ii(183, $135 | 0) | 0;
       $137 = __THREW__;
       __THREW__ = 0;
       $138 = $137 & 1;
       if ($138) {
        break L10;
       }
       $139 = $typeB;
       $140 = ($139 | 0) != 2;
       $141 = $136 ? 1 : $140;
       $142 = $141 & 1;
       $collideB = $142;
       $143 = $collideA;
       $144 = $143 & 1;
       $145 = $144 & 1;
       $146 = ($145 | 0) == 0;
       if ($146) {
        $147 = $collideB;
        $148 = $147 & 1;
        $149 = $148 & 1;
        $150 = ($149 | 0) == 0;
        if ($150) {
         break;
        }
       }
       $151 = $bA;
       $152 = $151 + 28 | 0;
       $153 = $152 + 32 | 0;
       $154 = +(+SAFE_HEAP_LOAD_D($153 | 0, 4));
       $alpha0 = $154;
       $155 = $bA;
       $156 = $155 + 28 | 0;
       $157 = $156 + 32 | 0;
       $158 = +(+SAFE_HEAP_LOAD_D($157 | 0, 4));
       $159 = $bB;
       $160 = $159 + 28 | 0;
       $161 = $160 + 32 | 0;
       $162 = +(+SAFE_HEAP_LOAD_D($161 | 0, 4));
       $163 = $158 < $162;
       $164 = $bB;
       $165 = $164 + 28 | 0;
       $166 = $165 + 32 | 0;
       $167 = +(+SAFE_HEAP_LOAD_D($166 | 0, 4));
       do {
        if ($163) {
         $alpha0 = $167;
         $168 = $bA;
         $169 = $168 + 28 | 0;
         $170 = $alpha0;
         __THREW__ = 0;
         invoke_vid(184, $169 | 0, +$170);
         $171 = __THREW__;
         __THREW__ = 0;
         $172 = $171 & 1;
         if ($172) {
          break L10;
         }
        } else {
         $173 = $bA;
         $174 = $173 + 28 | 0;
         $175 = $174 + 32 | 0;
         $176 = +(+SAFE_HEAP_LOAD_D($175 | 0, 4));
         $177 = $167 < $176;
         if (!$177) {
          break;
         }
         $178 = $bA;
         $179 = $178 + 28 | 0;
         $180 = $179 + 32 | 0;
         $181 = +(+SAFE_HEAP_LOAD_D($180 | 0, 4));
         $alpha0 = $181;
         $182 = $bB;
         $183 = $182 + 28 | 0;
         $184 = $alpha0;
         __THREW__ = 0;
         invoke_vid(184, $183 | 0, +$184);
         $185 = __THREW__;
         __THREW__ = 0;
         $186 = $185 & 1;
         if ($186) {
          break L10;
         }
        }
       } while (0);
       $187 = $alpha0;
       $188 = $187 < 1.0;
       if (!$188) {
        label = 39;
        break L10;
       }
       $190 = $c1;
       __THREW__ = 0;
       $191 = invoke_ii(185, $190 | 0) | 0;
       $192 = __THREW__;
       __THREW__ = 0;
       $193 = $192 & 1;
       if ($193) {
        break L10;
       }
       $indexA = $191;
       $194 = $c1;
       __THREW__ = 0;
       $195 = invoke_ii(186, $194 | 0) | 0;
       $196 = __THREW__;
       __THREW__ = 0;
       $197 = $196 & 1;
       if ($197) {
        break L10;
       }
       $indexB = $195;
       __THREW__ = 0;
       invoke_vi(187, $input | 0);
       $198 = __THREW__;
       __THREW__ = 0;
       $199 = $198 & 1;
       if ($199) {
        break L10;
       }
       $200 = $fA;
       __THREW__ = 0;
       $201 = invoke_ii(188, $200 | 0) | 0;
       $202 = __THREW__;
       __THREW__ = 0;
       $203 = $202 & 1;
       if ($203) {
        break L10;
       }
       $204 = $indexA;
       __THREW__ = 0;
       invoke_viii(189, $input | 0, $201 | 0, $204 | 0);
       $205 = __THREW__;
       __THREW__ = 0;
       $206 = $205 & 1;
       if ($206) {
        break L10;
       }
       $207 = $input + 28 | 0;
       $208 = $fB;
       __THREW__ = 0;
       $209 = invoke_ii(188, $208 | 0) | 0;
       $210 = __THREW__;
       __THREW__ = 0;
       $211 = $210 & 1;
       if ($211) {
        break L10;
       }
       $212 = $indexB;
       __THREW__ = 0;
       invoke_viii(189, $207 | 0, $209 | 0, $212 | 0);
       $213 = __THREW__;
       __THREW__ = 0;
       $214 = $213 & 1;
       if ($214) {
        break L10;
       }
       $215 = $input + 56 | 0;
       $216 = $bA;
       $217 = $216 + 28 | 0;
       dest = $215;
       src = $217;
       stop = dest + 36 | 0;
       do {
        SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
        dest = dest + 4 | 0;
        src = src + 4 | 0;
       } while ((dest | 0) < (stop | 0));
       $218 = $input + 92 | 0;
       $219 = $bB;
       $220 = $219 + 28 | 0;
       dest = $218;
       src = $220;
       stop = dest + 36 | 0;
       do {
        SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
        dest = dest + 4 | 0;
        src = src + 4 | 0;
       } while ((dest | 0) < (stop | 0));
       $221 = $input + 128 | 0;
       SAFE_HEAP_STORE_D($221 | 0, +(1.0), 4);
       __THREW__ = 0;
       invoke_vii(190, $output | 0, $input | 0);
       $222 = __THREW__;
       __THREW__ = 0;
       $223 = $222 & 1;
       if ($223) {
        break L10;
       }
       $224 = $output + 4 | 0;
       $225 = +(+SAFE_HEAP_LOAD_D($224 | 0, 4));
       $beta = $225;
       $226 = SAFE_HEAP_LOAD($output | 0, 4, 0) | 0 | 0;
       $227 = ($226 | 0) == 3;
       if ($227) {
        $228 = $alpha0;
        $229 = $alpha0;
        $230 = 1.0 - $229;
        $231 = $beta;
        $232 = $230 * $231;
        $233 = $228 + $232;
        __THREW__ = 0;
        $234 = +invoke_ddd(160, +$233, 1.0);
        $235 = __THREW__;
        __THREW__ = 0;
        $236 = $235 & 1;
        if ($236) {
         break L10;
        }
        $alpha = $234;
       } else {
        $alpha = 1.0;
       }
       $237 = $alpha;
       $238 = $c1;
       $239 = $238 + 132 | 0;
       SAFE_HEAP_STORE_D($239 | 0, +$237, 4);
       $240 = $c1;
       $241 = $240 + 4 | 0;
       $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
       $243 = $242 | 32;
       SAFE_HEAP_STORE($241 | 0, $243 | 0, 4);
      }
      $244 = $alpha;
      $245 = $minAlpha;
      $246 = $244 < $245;
      if ($246) {
       $247 = $c1;
       $minContact = $247;
       $248 = $alpha;
       $minAlpha = $248;
      }
     }
    }
   } while (0);
   $249 = $c1;
   $250 = $249 + 12 | 0;
   $251 = SAFE_HEAP_LOAD($250 | 0, 4, 0) | 0 | 0;
   $c1 = $251;
  }
  $252 = $minContact;
  $253 = ($252 | 0) == (0 | 0);
  $254 = $minAlpha;
  $255 = .9999988079071045 < $254;
  $or$cond3 = $253 | $255;
  if ($or$cond3) {
   label = 57;
   break;
  }
  $257 = $minContact;
  __THREW__ = 0;
  $258 = invoke_ii(179, $257 | 0) | 0;
  $259 = __THREW__;
  __THREW__ = 0;
  $260 = $259 & 1;
  if ($260) {
   break;
  }
  $fA2 = $258;
  $261 = $minContact;
  __THREW__ = 0;
  $262 = invoke_ii(180, $261 | 0) | 0;
  $263 = __THREW__;
  __THREW__ = 0;
  $264 = $263 & 1;
  if ($264) {
   break;
  }
  $fB3 = $262;
  $265 = $fA2;
  __THREW__ = 0;
  $266 = invoke_ii(182, $265 | 0) | 0;
  $267 = __THREW__;
  __THREW__ = 0;
  $268 = $267 & 1;
  if ($268) {
   break;
  }
  $bA4 = $266;
  $269 = $fB3;
  __THREW__ = 0;
  $270 = invoke_ii(182, $269 | 0) | 0;
  $271 = __THREW__;
  __THREW__ = 0;
  $272 = $271 & 1;
  if ($272) {
   break;
  }
  $bB5 = $270;
  $273 = $bA4;
  $274 = $273 + 28 | 0;
  dest = $backup1;
  src = $274;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $275 = $bB5;
  $276 = $275 + 28 | 0;
  dest = $backup2;
  src = $276;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $277 = $bA4;
  $278 = $minAlpha;
  __THREW__ = 0;
  invoke_vid(191, $277 | 0, +$278);
  $279 = __THREW__;
  __THREW__ = 0;
  $280 = $279 & 1;
  if ($280) {
   break;
  }
  $281 = $bB5;
  $282 = $minAlpha;
  __THREW__ = 0;
  invoke_vid(191, $281 | 0, +$282);
  $283 = __THREW__;
  __THREW__ = 0;
  $284 = $283 & 1;
  if ($284) {
   break;
  }
  $285 = $minContact;
  $286 = $4 + 102872 | 0;
  $287 = $286 + 72 | 0;
  $288 = SAFE_HEAP_LOAD($287 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  invoke_vii(192, $285 | 0, $288 | 0);
  $289 = __THREW__;
  __THREW__ = 0;
  $290 = $289 & 1;
  if ($290) {
   break;
  }
  $291 = $minContact;
  $292 = $291 + 4 | 0;
  $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
  $294 = $293 & -33;
  SAFE_HEAP_STORE($292 | 0, $294 | 0, 4);
  $295 = $minContact;
  $296 = $295 + 128 | 0;
  $297 = SAFE_HEAP_LOAD($296 | 0, 4, 0) | 0 | 0;
  $298 = $297 + 1 | 0;
  SAFE_HEAP_STORE($296 | 0, $298 | 0, 4);
  $299 = $minContact;
  __THREW__ = 0;
  $300 = invoke_ii(170, $299 | 0) | 0;
  $301 = __THREW__;
  __THREW__ = 0;
  $302 = $301 & 1;
  if ($302) {
   break;
  }
  $303 = $300 & 1;
  $304 = ($303 | 0) == 0;
  if (!$304) {
   $305 = $minContact;
   __THREW__ = 0;
   $306 = invoke_ii(171, $305 | 0) | 0;
   $307 = __THREW__;
   __THREW__ = 0;
   $308 = $307 & 1;
   if ($308) {
    break;
   }
   $309 = $306 & 1;
   $310 = ($309 | 0) == 0;
   if (!$310) {
    $324 = $bA4;
    __THREW__ = 0;
    invoke_vii(161, $324 | 0, 1);
    $325 = __THREW__;
    __THREW__ = 0;
    $326 = $325 & 1;
    if ($326) {
     break;
    }
    $327 = $bB5;
    __THREW__ = 0;
    invoke_vii(161, $327 | 0, 1);
    $328 = __THREW__;
    __THREW__ = 0;
    $329 = $328 & 1;
    if ($329) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(168, $island | 0);
    $330 = __THREW__;
    __THREW__ = 0;
    $331 = $330 & 1;
    if ($331) {
     break;
    }
    $332 = $bA4;
    __THREW__ = 0;
    invoke_vii(169, $island | 0, $332 | 0);
    $333 = __THREW__;
    __THREW__ = 0;
    $334 = $333 & 1;
    if ($334) {
     break;
    }
    $335 = $bB5;
    __THREW__ = 0;
    invoke_vii(169, $island | 0, $335 | 0);
    $336 = __THREW__;
    __THREW__ = 0;
    $337 = $336 & 1;
    if ($337) {
     break;
    }
    $338 = $minContact;
    __THREW__ = 0;
    invoke_vii(172, $island | 0, $338 | 0);
    $339 = __THREW__;
    __THREW__ = 0;
    $340 = $339 & 1;
    if ($340) {
     break;
    }
    $341 = $bA4;
    $342 = $341 + 4 | 0;
    $343 = SAFE_HEAP_LOAD($342 | 0, 2, 0) | 0 | 0;
    $344 = $343 & 65535;
    $345 = $344 | 1;
    $346 = $345 & 65535;
    SAFE_HEAP_STORE($342 | 0, $346 | 0, 2);
    $347 = $bB5;
    $348 = $347 + 4 | 0;
    $349 = SAFE_HEAP_LOAD($348 | 0, 2, 0) | 0 | 0;
    $350 = $349 & 65535;
    $351 = $350 | 1;
    $352 = $351 & 65535;
    SAFE_HEAP_STORE($348 | 0, $352 | 0, 2);
    $353 = $minContact;
    $354 = $353 + 4 | 0;
    $355 = SAFE_HEAP_LOAD($354 | 0, 4, 0) | 0 | 0;
    $356 = $355 | 1;
    SAFE_HEAP_STORE($354 | 0, $356 | 0, 4);
    $357 = $bA4;
    SAFE_HEAP_STORE($bodies | 0, $357 | 0, 4);
    $358 = $bodies + 4 | 0;
    $359 = $bB5;
    SAFE_HEAP_STORE($358 | 0, $359 | 0, 4);
    $i = 0;
    while (1) {
     $360 = $i;
     $361 = ($360 | 0) < 2;
     if (!$361) {
      break;
     }
     $362 = $i;
     $363 = $bodies + ($362 << 2) | 0;
     $364 = SAFE_HEAP_LOAD($363 | 0, 4, 0) | 0 | 0;
     $body = $364;
     $365 = $body;
     $366 = SAFE_HEAP_LOAD($365 | 0, 4, 0) | 0 | 0;
     $367 = ($366 | 0) == 2;
     L86 : do {
      if ($367) {
       $368 = $body;
       $369 = $368 + 112 | 0;
       $370 = SAFE_HEAP_LOAD($369 | 0, 4, 0) | 0 | 0;
       $ce = $370;
       while (1) {
        $371 = $ce;
        $372 = ($371 | 0) != (0 | 0);
        if (!$372) {
         break L86;
        }
        $373 = $island + 28 | 0;
        $374 = SAFE_HEAP_LOAD($373 | 0, 4, 0) | 0 | 0;
        $375 = $island + 40 | 0;
        $376 = SAFE_HEAP_LOAD($375 | 0, 4, 0) | 0 | 0;
        $377 = ($374 | 0) == ($376 | 0);
        if ($377) {
         break L86;
        }
        $378 = $island + 36 | 0;
        $379 = SAFE_HEAP_LOAD($378 | 0, 4, 0) | 0 | 0;
        $380 = $island + 44 | 0;
        $381 = SAFE_HEAP_LOAD($380 | 0, 4, 0) | 0 | 0;
        $382 = ($379 | 0) == ($381 | 0);
        if ($382) {
         break L86;
        }
        $383 = $ce;
        $384 = $383 + 4 | 0;
        $385 = SAFE_HEAP_LOAD($384 | 0, 4, 0) | 0 | 0;
        $contact = $385;
        $386 = $contact;
        $387 = $386 + 4 | 0;
        $388 = SAFE_HEAP_LOAD($387 | 0, 4, 0) | 0 | 0;
        $389 = $388 & 1;
        $390 = ($389 | 0) != 0;
        L93 : do {
         if (!$390) {
          $391 = $ce;
          $392 = SAFE_HEAP_LOAD($391 | 0, 4, 0) | 0 | 0;
          $other = $392;
          $393 = $other;
          $394 = SAFE_HEAP_LOAD($393 | 0, 4, 0) | 0 | 0;
          $395 = ($394 | 0) == 2;
          do {
           if ($395) {
            $396 = $body;
            __THREW__ = 0;
            $397 = invoke_ii(183, $396 | 0) | 0;
            $398 = __THREW__;
            __THREW__ = 0;
            $399 = $398 & 1;
            if ($399) {
             break L10;
            }
            $400 = $397 & 1;
            $401 = ($400 | 0) == 0;
            if (!$401) {
             break;
            }
            $402 = $other;
            __THREW__ = 0;
            $403 = invoke_ii(183, $402 | 0) | 0;
            $404 = __THREW__;
            __THREW__ = 0;
            $405 = $404 & 1;
            if ($405) {
             break L10;
            }
            $406 = $403 & 1;
            $407 = ($406 | 0) == 0;
            if ($407) {
             break L93;
            }
           }
          } while (0);
          $408 = $contact;
          $409 = $408 + 48 | 0;
          $410 = SAFE_HEAP_LOAD($409 | 0, 4, 0) | 0 | 0;
          $411 = $410 + 38 | 0;
          $412 = SAFE_HEAP_LOAD($411 >> 0 | 0, 1, 0) | 0 | 0;
          $413 = $412 & 1;
          $414 = $413 & 1;
          $sensorA = $414;
          $415 = $contact;
          $416 = $415 + 52 | 0;
          $417 = SAFE_HEAP_LOAD($416 | 0, 4, 0) | 0 | 0;
          $418 = $417 + 38 | 0;
          $419 = SAFE_HEAP_LOAD($418 >> 0 | 0, 1, 0) | 0 | 0;
          $420 = $419 & 1;
          $421 = $420 & 1;
          $sensorB = $421;
          $422 = $sensorA;
          $423 = $422 & 1;
          if ($423) {
           break;
          }
          $424 = $sensorB;
          $425 = $424 & 1;
          if ($425) {
           break;
          }
          $426 = $other;
          $427 = $426 + 28 | 0;
          dest = $backup;
          src = $427;
          stop = dest + 36 | 0;
          do {
           SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
           dest = dest + 4 | 0;
           src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          $428 = $other;
          $429 = $428 + 4 | 0;
          $430 = SAFE_HEAP_LOAD($429 | 0, 2, 0) | 0 | 0;
          $431 = $430 & 65535;
          $432 = $431 & 1;
          $433 = ($432 | 0) == 0;
          if ($433) {
           $434 = $other;
           $435 = $minAlpha;
           __THREW__ = 0;
           invoke_vid(191, $434 | 0, +$435);
           $436 = __THREW__;
           __THREW__ = 0;
           $437 = $436 & 1;
           if ($437) {
            break L10;
           }
          }
          $438 = $contact;
          $439 = $4 + 102872 | 0;
          $440 = $439 + 72 | 0;
          $441 = SAFE_HEAP_LOAD($440 | 0, 4, 0) | 0 | 0;
          __THREW__ = 0;
          invoke_vii(192, $438 | 0, $441 | 0);
          $442 = __THREW__;
          __THREW__ = 0;
          $443 = $442 & 1;
          if ($443) {
           break L10;
          }
          $444 = $contact;
          __THREW__ = 0;
          $445 = invoke_ii(170, $444 | 0) | 0;
          $446 = __THREW__;
          __THREW__ = 0;
          $447 = $446 & 1;
          if ($447) {
           break L10;
          }
          $448 = $445 & 1;
          $449 = ($448 | 0) == 0;
          if ($449) {
           $450 = $other;
           $451 = $450 + 28 | 0;
           dest = $451;
           src = $backup;
           stop = dest + 36 | 0;
           do {
            SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
            dest = dest + 4 | 0;
            src = src + 4 | 0;
           } while ((dest | 0) < (stop | 0));
           $452 = $other;
           __THREW__ = 0;
           invoke_vi(157, $452 | 0);
           $453 = __THREW__;
           __THREW__ = 0;
           $454 = $453 & 1;
           if ($454) {
            break L10;
           } else {
            break;
           }
          }
          $455 = $contact;
          __THREW__ = 0;
          $456 = invoke_ii(171, $455 | 0) | 0;
          $457 = __THREW__;
          __THREW__ = 0;
          $458 = $457 & 1;
          if ($458) {
           break L10;
          }
          $459 = $456 & 1;
          $460 = ($459 | 0) == 0;
          if ($460) {
           $461 = $other;
           $462 = $461 + 28 | 0;
           dest = $462;
           src = $backup;
           stop = dest + 36 | 0;
           do {
            SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
            dest = dest + 4 | 0;
            src = src + 4 | 0;
           } while ((dest | 0) < (stop | 0));
           $463 = $other;
           __THREW__ = 0;
           invoke_vi(157, $463 | 0);
           $464 = __THREW__;
           __THREW__ = 0;
           $465 = $464 & 1;
           if ($465) {
            break L10;
           } else {
            break;
           }
          }
          $466 = $contact;
          $467 = $466 + 4 | 0;
          $468 = SAFE_HEAP_LOAD($467 | 0, 4, 0) | 0 | 0;
          $469 = $468 | 1;
          SAFE_HEAP_STORE($467 | 0, $469 | 0, 4);
          $470 = $contact;
          __THREW__ = 0;
          invoke_vii(172, $island | 0, $470 | 0);
          $471 = __THREW__;
          __THREW__ = 0;
          $472 = $471 & 1;
          if ($472) {
           break L10;
          }
          $473 = $other;
          $474 = $473 + 4 | 0;
          $475 = SAFE_HEAP_LOAD($474 | 0, 2, 0) | 0 | 0;
          $476 = $475 & 65535;
          $477 = $476 & 1;
          $478 = ($477 | 0) != 0;
          if ($478) {
           break;
          }
          $479 = $other;
          $480 = $479 + 4 | 0;
          $481 = SAFE_HEAP_LOAD($480 | 0, 2, 0) | 0 | 0;
          $482 = $481 & 65535;
          $483 = $482 | 1;
          $484 = $483 & 65535;
          SAFE_HEAP_STORE($480 | 0, $484 | 0, 2);
          $485 = $other;
          $486 = SAFE_HEAP_LOAD($485 | 0, 4, 0) | 0 | 0;
          $487 = ($486 | 0) != 0;
          if ($487) {
           $488 = $other;
           __THREW__ = 0;
           invoke_vii(161, $488 | 0, 1);
           $489 = __THREW__;
           __THREW__ = 0;
           $490 = $489 & 1;
           if ($490) {
            break L10;
           }
          }
          $491 = $other;
          __THREW__ = 0;
          invoke_vii(169, $island | 0, $491 | 0);
          $492 = __THREW__;
          __THREW__ = 0;
          $493 = $492 & 1;
          if ($493) {
           break L10;
          }
         }
        } while (0);
        $494 = $ce;
        $495 = $494 + 12 | 0;
        $496 = SAFE_HEAP_LOAD($495 | 0, 4, 0) | 0 | 0;
        $ce = $496;
       }
      }
     } while (0);
     $497 = $i;
     $498 = $497 + 1 | 0;
     $i = $498;
    }
    $499 = $minAlpha;
    $500 = 1.0 - $499;
    $501 = $1;
    $502 = +(+SAFE_HEAP_LOAD_D($501 | 0, 4));
    $503 = $500 * $502;
    SAFE_HEAP_STORE_D($subStep | 0, +$503, 4);
    $504 = +(+SAFE_HEAP_LOAD_D($subStep | 0, 4));
    $505 = 1.0 / $504;
    $506 = $subStep + 4 | 0;
    SAFE_HEAP_STORE_D($506 | 0, +$505, 4);
    $507 = $subStep + 8 | 0;
    SAFE_HEAP_STORE_D($507 | 0, +(1.0), 4);
    $508 = $subStep + 16 | 0;
    SAFE_HEAP_STORE($508 | 0, 20 | 0, 4);
    $509 = $1;
    $510 = $509 + 12 | 0;
    $511 = SAFE_HEAP_LOAD($510 | 0, 4, 0) | 0 | 0;
    $512 = $subStep + 12 | 0;
    SAFE_HEAP_STORE($512 | 0, $511 | 0, 4);
    $513 = $subStep + 20 | 0;
    SAFE_HEAP_STORE($513 >> 0 | 0, 0 | 0, 1);
    $514 = $bA4;
    $515 = $514 + 8 | 0;
    $516 = SAFE_HEAP_LOAD($515 | 0, 4, 0) | 0 | 0;
    $517 = $bB5;
    $518 = $517 + 8 | 0;
    $519 = SAFE_HEAP_LOAD($518 | 0, 4, 0) | 0 | 0;
    __THREW__ = 0;
    invoke_viiii(194, $island | 0, $subStep | 0, $516 | 0, $519 | 0);
    $520 = __THREW__;
    __THREW__ = 0;
    $521 = $520 & 1;
    if ($521) {
     break;
    }
    $i6 = 0;
    while (1) {
     $522 = $i6;
     $523 = $island + 28 | 0;
     $524 = SAFE_HEAP_LOAD($523 | 0, 4, 0) | 0 | 0;
     $525 = ($522 | 0) < ($524 | 0);
     if (!$525) {
      break;
     }
     $526 = $i6;
     $527 = $island + 8 | 0;
     $528 = SAFE_HEAP_LOAD($527 | 0, 4, 0) | 0 | 0;
     $529 = $528 + ($526 << 2) | 0;
     $530 = SAFE_HEAP_LOAD($529 | 0, 4, 0) | 0 | 0;
     $body7 = $530;
     $531 = $body7;
     $532 = $531 + 4 | 0;
     $533 = SAFE_HEAP_LOAD($532 | 0, 2, 0) | 0 | 0;
     $534 = $533 & 65535;
     $535 = $534 & -2;
     $536 = $535 & 65535;
     SAFE_HEAP_STORE($532 | 0, $536 | 0, 2);
     $537 = $body7;
     $538 = SAFE_HEAP_LOAD($537 | 0, 4, 0) | 0 | 0;
     $539 = ($538 | 0) != 2;
     L127 : do {
      if (!$539) {
       $540 = $body7;
       __THREW__ = 0;
       invoke_vi(176, $540 | 0);
       $541 = __THREW__;
       __THREW__ = 0;
       $542 = $541 & 1;
       if ($542) {
        break L10;
       }
       $543 = $body7;
       $544 = $543 + 112 | 0;
       $545 = SAFE_HEAP_LOAD($544 | 0, 4, 0) | 0 | 0;
       $ce8 = $545;
       while (1) {
        $546 = $ce8;
        $547 = ($546 | 0) != (0 | 0);
        if (!$547) {
         break L127;
        }
        $548 = $ce8;
        $549 = $548 + 4 | 0;
        $550 = SAFE_HEAP_LOAD($549 | 0, 4, 0) | 0 | 0;
        $551 = $550 + 4 | 0;
        $552 = SAFE_HEAP_LOAD($551 | 0, 4, 0) | 0 | 0;
        $553 = $552 & -34;
        SAFE_HEAP_STORE($551 | 0, $553 | 0, 4);
        $554 = $ce8;
        $555 = $554 + 12 | 0;
        $556 = SAFE_HEAP_LOAD($555 | 0, 4, 0) | 0 | 0;
        $ce8 = $556;
       }
      }
     } while (0);
     $557 = $i6;
     $558 = $557 + 1 | 0;
     $i6 = $558;
    }
    $559 = $4 + 102872 | 0;
    __THREW__ = 0;
    invoke_vi(178, $559 | 0);
    $560 = __THREW__;
    __THREW__ = 0;
    $561 = $560 & 1;
    if ($561) {
     break;
    }
    $562 = $4 + 102994 | 0;
    $563 = SAFE_HEAP_LOAD($562 >> 0 | 0, 1, 0) | 0 | 0;
    $564 = $563 & 1;
    if ($564) {
     label = 120;
     break;
    } else {
     continue;
    }
   }
  }
  $311 = $minContact;
  __THREW__ = 0;
  invoke_vii(193, $311 | 0, 0);
  $312 = __THREW__;
  __THREW__ = 0;
  $313 = $312 & 1;
  if ($313) {
   break;
  }
  $314 = $bA4;
  $315 = $314 + 28 | 0;
  dest = $315;
  src = $backup1;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $316 = $bB5;
  $317 = $316 + 28 | 0;
  dest = $317;
  src = $backup2;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $318 = $bA4;
  __THREW__ = 0;
  invoke_vi(157, $318 | 0);
  $319 = __THREW__;
  __THREW__ = 0;
  $320 = $319 & 1;
  if ($320) {
   break;
  }
  $321 = $bB5;
  __THREW__ = 0;
  invoke_vi(157, $321 | 0);
  $322 = __THREW__;
  __THREW__ = 0;
  $323 = $322 & 1;
  if ($323) {
   break;
  }
 }
 if ((label | 0) == 25) {
  __THREW__ = 0;
  invoke_viiii(142, 6479 | 0, 6366 | 0, 641, 6313 | 0);
  $102 = __THREW__;
  __THREW__ = 0;
 } else if ((label | 0) == 39) {
  __THREW__ = 0;
  invoke_viiii(142, 6530 | 0, 6366 | 0, 676, 6313 | 0);
  $189 = __THREW__;
  __THREW__ = 0;
 } else if ((label | 0) == 57) {
  $256 = $4 + 102995 | 0;
  SAFE_HEAP_STORE($256 >> 0 | 0, 1 | 0, 1);
  __ZN8b2IslandD2Ev($island);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 120) {
  $565 = $4 + 102995 | 0;
  SAFE_HEAP_STORE($565 >> 0 | 0, 0 | 0, 1);
  __ZN8b2IslandD2Ev($island);
  STACKTOP = sp;
  return;
 }
 $55 = ___cxa_find_matching_catch() | 0;
 $56 = tempRet0;
 $2 = $55;
 $3 = $56;
 __ZN8b2IslandD2Ev($island);
 $57 = $2;
 $58 = $3;
 ___resumeException($57 | 0);
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$19 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$57 = 0, $$first = 0, $$pre = 0, $$pre$i = 0, $$pre$i14 = 0, $$pre$i16 = 0, $$pre$i20 = 0, $$pre$i22 = 0;
 var $$pre$i30 = 0, $$pre$i34 = 0, $$pre$i36 = 0, $$pre$i44 = 0, $$pre$i52 = 0, $$pre$i54 = 0, $$pre$phi80Z2D = 0, $$pre$phi82Z2D = 0, $$pre$phi84Z2D = 0, $$pre81 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $args3 = 0;
 var $global$0$off0 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $s = 0, $s1 = 0, $s4 = 0, $s5 = 0, $s6 = 0, $t$0 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$1107 = 0, $t$2 = 0, $t$3$lcssa = 0, $t$3110 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 132 | 0;
 $s = sp + 120 | 0;
 $0 = sp + 108 | 0;
 $s1 = sp + 96 | 0;
 $1 = sp + 84 | 0;
 $args3 = sp + 72 | 0;
 $s4 = sp + 60 | 0;
 $2 = sp + 48 | 0;
 $s5 = sp + 36 | 0;
 $3 = sp + 24 | 0;
 $s6 = sp + 12 | 0;
 $4 = sp;
 $5 = $last;
 $6 = $first;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) > 2;
 L1 : do {
  if ($8) {
   $9 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $10 = $9 << 24 >> 24 == 103;
   if ($10) {
    $11 = $first + 1 | 0;
    $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
    $13 = $12 << 24 >> 24 == 115;
    $14 = $first + 2 | 0;
    $$first = $13 ? $14 : $first;
    $global$0$off0 = $13;
    $t$0 = $$first;
   } else {
    $global$0$off0 = 0;
    $t$0 = $first;
   }
   $15 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
   $16 = ($15 | 0) == ($t$0 | 0);
   if (!$16) {
    if (!$global$0$off0) {
     $$19 = $15;
     break;
    }
    $17 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
    $18 = $db + 4 | 0;
    $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
    $20 = ($17 | 0) == ($19 | 0);
    if ($20) {
     $$19 = $first;
     break;
    }
    $21 = $19 + -24 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21, 0, 10495) | 0;
    $$19 = $15;
    break;
   }
   $22 = $t$0;
   $23 = $5 - $22 | 0;
   $24 = ($23 | 0) > 2;
   if ($24) {
    $25 = SAFE_HEAP_LOAD($t$0 >> 0 | 0, 1, 0) | 0 | 0;
    $26 = $25 << 24 >> 24 == 115;
    if ($26) {
     $27 = $t$0 + 1 | 0;
     $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
     $29 = $28 << 24 >> 24 == 114;
     if ($29) {
      $30 = $t$0 + 2 | 0;
      $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
      $32 = $31 << 24 >> 24 == 78;
      L14 : do {
       if ($32) {
        $33 = $t$0 + 3 | 0;
        $34 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33, $last, $db) | 0;
        $35 = ($34 | 0) == ($33 | 0);
        $36 = ($34 | 0) == ($last | 0);
        $or$cond = $35 | $36;
        if ($or$cond) {
         $$19 = $first;
         break L1;
        }
        $37 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34, $last, $db) | 0;
        $38 = ($37 | 0) == ($34 | 0);
        $$pre = $db + 4 | 0;
        do {
         if ($38) {
          $$pre$phi80Z2D = $db;
          $t$1$ph = $34;
         } else {
          $39 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $40 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $41 = $39;
          $42 = $40;
          $43 = $41 - $42 | 0;
          $44 = ($43 | 0) / 24 & -1;
          $45 = $44 >>> 0 < 2;
          if ($45) {
           $$19 = $first;
           break L1;
          }
          $46 = $39 + -24 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $46);
          $47 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $48 = $47 + -24 | 0;
          $50 = $47;
          while (1) {
           $49 = $50 + -24 | 0;
           SAFE_HEAP_STORE($$pre | 0, $49 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($49);
           $$pre$i = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
           $51 = ($$pre$i | 0) == ($48 | 0);
           if ($51) {
            break;
           } else {
            $50 = $$pre$i;
           }
          }
          $52 = $47 + -48 | 0;
          $53 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
          $54 = $53 & 1;
          $55 = $54 << 24 >> 24 == 0;
          $56 = $args + 8 | 0;
          $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
          $58 = $args + 1 | 0;
          $59 = $55 ? $58 : $57;
          $60 = $args + 4 | 0;
          $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
          $62 = $53 & 255;
          $63 = $62 >>> 1;
          $64 = $55 ? $63 : $61;
          __THREW__ = 0;
          invoke_iiii(222, $52 | 0, $59 | 0, $64 | 0) | 0;
          $65 = __THREW__;
          __THREW__ = 0;
          $66 = $65 & 1;
          if ($66) {
           $73 = ___cxa_find_matching_catch() | 0;
           $74 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
           $$5 = $74;
           $$57 = $73;
           break L14;
          }
          $67 = ($37 | 0) == ($last | 0);
          if (!$67) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
           $$pre$phi80Z2D = $db;
           $t$1$ph = $37;
           break;
          }
          $68 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $69 = $68 + -24 | 0;
          $71 = $68;
          while (1) {
           $70 = $71 + -24 | 0;
           SAFE_HEAP_STORE($$pre | 0, $70 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($70);
           $$pre$i14 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
           $72 = ($$pre$i14 | 0) == ($69 | 0);
           if ($72) {
            break;
           } else {
            $71 = $$pre$i14;
           }
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
          $$19 = $first;
          break L1;
         }
        } while (0);
        $75 = $0 + 8 | 0;
        $76 = $0 + 1 | 0;
        $77 = $0 + 4 | 0;
        $78 = SAFE_HEAP_LOAD($t$1$ph >> 0 | 0, 1, 0) | 0 | 0;
        $79 = $78 << 24 >> 24 == 69;
        L34 : do {
         if ($79) {
          $t$1$lcssa = $t$1$ph;
         } else {
          $t$1107 = $t$1$ph;
          while (1) {
           $80 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$1107, $last, $db) | 0;
           $81 = ($80 | 0) == ($t$1107 | 0);
           $82 = ($80 | 0) == ($last | 0);
           $or$cond11 = $81 | $82;
           if ($or$cond11) {
            $$19 = $first;
            break L1;
           }
           $83 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
           $84 = SAFE_HEAP_LOAD($$pre$phi80Z2D | 0, 4, 0) | 0 | 0;
           $85 = $83;
           $86 = $84;
           $87 = $85 - $86 | 0;
           $88 = ($87 | 0) / 24 & -1;
           $89 = $88 >>> 0 < 2;
           if ($89) {
            $$19 = $first;
            break L1;
           }
           $90 = $83 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s, $90);
           $91 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
           $92 = $91 + -24 | 0;
           $94 = $91;
           while (1) {
            $93 = $94 + -24 | 0;
            SAFE_HEAP_STORE($$pre | 0, $93 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($93);
            $$pre$i16 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
            $95 = ($$pre$i16 | 0) == ($92 | 0);
            if ($95) {
             break;
            } else {
             $94 = $$pre$i16;
            }
           }
           __THREW__ = 0;
           $96 = invoke_iiii(227, $s | 0, 0, 10495 | 0) | 0;
           $97 = __THREW__;
           __THREW__ = 0;
           $98 = $97 & 1;
           if ($98) {
            label = 33;
            break;
           }
           {}
           SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($96 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($96 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($96 | 0, 0 | 0, 4);
           $99 = $96 + 4 | 0;
           SAFE_HEAP_STORE($99 | 0, 0 | 0, 4);
           $100 = $96 + 8 | 0;
           SAFE_HEAP_STORE($100 | 0, 0 | 0, 4);
           $101 = $91 + -48 | 0;
           $102 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
           $103 = $102 & 1;
           $104 = $103 << 24 >> 24 == 0;
           $105 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
           $106 = $104 ? $76 : $105;
           $107 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
           $108 = $102 & 255;
           $109 = $108 >>> 1;
           $110 = $104 ? $109 : $107;
           __THREW__ = 0;
           invoke_iiii(222, $101 | 0, $106 | 0, $110 | 0) | 0;
           $111 = __THREW__;
           __THREW__ = 0;
           $112 = $111 & 1;
           if ($112) {
            label = 34;
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s);
           $113 = SAFE_HEAP_LOAD($80 >> 0 | 0, 1, 0) | 0 | 0;
           $114 = $113 << 24 >> 24 == 69;
           if ($114) {
            $t$1$lcssa = $80;
            break L34;
           } else {
            $t$1107 = $80;
           }
          }
          if ((label | 0) == 33) {
           $115 = ___cxa_find_matching_catch() | 0;
           $116 = tempRet0;
           $$01 = $116;
           $$02 = $115;
          } else if ((label | 0) == 34) {
           $117 = ___cxa_find_matching_catch() | 0;
           $118 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           $$01 = $118;
           $$02 = $117;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s);
          $$5 = $$01;
          $$57 = $$02;
          break L14;
         }
        } while (0);
        $119 = $t$1$lcssa + 1 | 0;
        $120 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($119, $last, $db) | 0;
        $121 = ($120 | 0) == ($119 | 0);
        if ($121) {
         $122 = SAFE_HEAP_LOAD($$pre$phi80Z2D | 0, 4, 0) | 0 | 0;
         $123 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
         $124 = ($122 | 0) == ($123 | 0);
         if ($124) {
          $$19 = $first;
          break L1;
         }
         $125 = $123 + -24 | 0;
         $127 = $123;
         while (1) {
          $126 = $127 + -24 | 0;
          SAFE_HEAP_STORE($$pre | 0, $126 | 0, 4);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($126);
          $$pre$i20 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $128 = ($$pre$i20 | 0) == ($125 | 0);
          if ($128) {
           $$19 = $first;
           break L1;
          } else {
           $127 = $$pre$i20;
          }
         }
        }
        $129 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
        $130 = SAFE_HEAP_LOAD($$pre$phi80Z2D | 0, 4, 0) | 0 | 0;
        $131 = $129;
        $132 = $130;
        $133 = $131 - $132 | 0;
        $134 = ($133 | 0) / 24 & -1;
        $135 = $134 >>> 0 < 2;
        if ($135) {
         $$19 = $first;
         break L1;
        }
        $136 = $129 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s1, $136);
        $137 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
        $138 = $137 + -24 | 0;
        $140 = $137;
        while (1) {
         $139 = $140 + -24 | 0;
         SAFE_HEAP_STORE($$pre | 0, $139 | 0, 4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($139);
         $$pre$i22 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
         $141 = ($$pre$i22 | 0) == ($138 | 0);
         if ($141) {
          break;
         } else {
          $140 = $$pre$i22;
         }
        }
        __THREW__ = 0;
        $142 = invoke_iiii(227, $s1 | 0, 0, 10495 | 0) | 0;
        $143 = __THREW__;
        __THREW__ = 0;
        $144 = $143 & 1;
        do {
         if ($144) {
          $162 = ___cxa_find_matching_catch() | 0;
          $163 = tempRet0;
          $$1 = $163;
          $$13 = $162;
         } else {
          {}
          SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($142 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($142 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($142 | 0, 0 | 0, 4);
          $145 = $142 + 4 | 0;
          SAFE_HEAP_STORE($145 | 0, 0 | 0, 4);
          $146 = $142 + 8 | 0;
          SAFE_HEAP_STORE($146 | 0, 0 | 0, 4);
          $147 = $137 + -48 | 0;
          $148 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
          $149 = $148 & 1;
          $150 = $149 << 24 >> 24 == 0;
          $151 = $1 + 8 | 0;
          $152 = SAFE_HEAP_LOAD($151 | 0, 4, 0) | 0 | 0;
          $153 = $1 + 1 | 0;
          $154 = $150 ? $153 : $152;
          $155 = $1 + 4 | 0;
          $156 = SAFE_HEAP_LOAD($155 | 0, 4, 0) | 0 | 0;
          $157 = $148 & 255;
          $158 = $157 >>> 1;
          $159 = $150 ? $158 : $156;
          __THREW__ = 0;
          invoke_iiii(222, $147 | 0, $154 | 0, $159 | 0) | 0;
          $160 = __THREW__;
          __THREW__ = 0;
          $161 = $160 & 1;
          if ($161) {
           $164 = ___cxa_find_matching_catch() | 0;
           $165 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           $$1 = $165;
           $$13 = $164;
           break;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s1);
           $$19 = $120;
           break L1;
          }
         }
        } while (0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s1);
        $$5 = $$1;
        $$57 = $$13;
       } else {
        $166 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
        $167 = ($166 | 0) == ($30 | 0);
        if (!$167) {
         $168 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($166, $last, $db) | 0;
         $169 = ($168 | 0) == ($166 | 0);
         do {
          if ($169) {
           $t$2 = $166;
          } else {
           $170 = $db + 4 | 0;
           $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
           $172 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $173 = $171;
           $174 = $172;
           $175 = $173 - $174 | 0;
           $176 = ($175 | 0) / 24 & -1;
           $177 = $176 >>> 0 < 2;
           if ($177) {
            $$19 = $first;
            break L1;
           }
           $178 = $171 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3, $178);
           $179 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
           $180 = $179 + -24 | 0;
           $182 = $179;
           while (1) {
            $181 = $182 + -24 | 0;
            SAFE_HEAP_STORE($170 | 0, $181 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($181);
            $$pre$i30 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
            $183 = ($$pre$i30 | 0) == ($180 | 0);
            if ($183) {
             break;
            } else {
             $182 = $$pre$i30;
            }
           }
           $184 = $179 + -48 | 0;
           $185 = SAFE_HEAP_LOAD($args3 >> 0 | 0, 1, 0) | 0 | 0;
           $186 = $185 & 1;
           $187 = $186 << 24 >> 24 == 0;
           $188 = $args3 + 8 | 0;
           $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
           $190 = $args3 + 1 | 0;
           $191 = $187 ? $190 : $189;
           $192 = $args3 + 4 | 0;
           $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
           $194 = $185 & 255;
           $195 = $194 >>> 1;
           $196 = $187 ? $195 : $193;
           __THREW__ = 0;
           invoke_iiii(222, $184 | 0, $191 | 0, $196 | 0) | 0;
           $197 = __THREW__;
           __THREW__ = 0;
           $198 = $197 & 1;
           if ($198) {
            $199 = ___cxa_find_matching_catch() | 0;
            $200 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
            $$5 = $200;
            $$57 = $199;
            break L14;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
            $t$2 = $168;
            break;
           }
          }
         } while (0);
         $201 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2, $last, $db) | 0;
         $202 = ($201 | 0) == ($t$2 | 0);
         if ($202) {
          $203 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $204 = $db + 4 | 0;
          $205 = SAFE_HEAP_LOAD($204 | 0, 4, 0) | 0 | 0;
          $206 = ($203 | 0) == ($205 | 0);
          if ($206) {
           $$19 = $first;
           break L1;
          }
          $207 = $205 + -24 | 0;
          $209 = $205;
          while (1) {
           $208 = $209 + -24 | 0;
           SAFE_HEAP_STORE($204 | 0, $208 | 0, 4);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($208);
           $$pre$i34 = SAFE_HEAP_LOAD($204 | 0, 4, 0) | 0 | 0;
           $210 = ($$pre$i34 | 0) == ($207 | 0);
           if ($210) {
            $$19 = $first;
            break L1;
           } else {
            $209 = $$pre$i34;
           }
          }
         }
         $211 = $db + 4 | 0;
         $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
         $213 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $214 = $212;
         $215 = $213;
         $216 = $214 - $215 | 0;
         $217 = ($216 | 0) / 24 & -1;
         $218 = $217 >>> 0 < 2;
         if ($218) {
          $$19 = $first;
          break L1;
         }
         $219 = $212 + -24 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s4, $219);
         $220 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
         $221 = $220 + -24 | 0;
         $223 = $220;
         while (1) {
          $222 = $223 + -24 | 0;
          SAFE_HEAP_STORE($211 | 0, $222 | 0, 4);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($222);
          $$pre$i36 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
          $224 = ($$pre$i36 | 0) == ($221 | 0);
          if ($224) {
           break;
          } else {
           $223 = $$pre$i36;
          }
         }
         __THREW__ = 0;
         $225 = invoke_iiii(227, $s4 | 0, 0, 10495 | 0) | 0;
         $226 = __THREW__;
         __THREW__ = 0;
         $227 = $226 & 1;
         do {
          if ($227) {
           $245 = ___cxa_find_matching_catch() | 0;
           $246 = tempRet0;
           $$2 = $246;
           $$24 = $245;
          } else {
           {}
           SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($225 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($225 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($225 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($225 | 0, 0 | 0, 4);
           $228 = $225 + 4 | 0;
           SAFE_HEAP_STORE($228 | 0, 0 | 0, 4);
           $229 = $225 + 8 | 0;
           SAFE_HEAP_STORE($229 | 0, 0 | 0, 4);
           $230 = $220 + -48 | 0;
           $231 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
           $232 = $231 & 1;
           $233 = $232 << 24 >> 24 == 0;
           $234 = $2 + 8 | 0;
           $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
           $236 = $2 + 1 | 0;
           $237 = $233 ? $236 : $235;
           $238 = $2 + 4 | 0;
           $239 = SAFE_HEAP_LOAD($238 | 0, 4, 0) | 0 | 0;
           $240 = $231 & 255;
           $241 = $240 >>> 1;
           $242 = $233 ? $241 : $239;
           __THREW__ = 0;
           invoke_iiii(222, $230 | 0, $237 | 0, $242 | 0) | 0;
           $243 = __THREW__;
           __THREW__ = 0;
           $244 = $243 & 1;
           if ($244) {
            $247 = ___cxa_find_matching_catch() | 0;
            $248 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            $$2 = $248;
            $$24 = $247;
            break;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s4);
            $$19 = $201;
            break L1;
           }
          }
         } while (0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s4);
         $$5 = $$2;
         $$57 = $$24;
         break;
        }
        $249 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30, $last, $db) | 0;
        $250 = ($249 | 0) == ($30 | 0);
        $251 = ($249 | 0) == ($last | 0);
        $or$cond12 = $250 | $251;
        if ($or$cond12) {
         $$19 = $first;
         break L1;
        }
        if ($global$0$off0) {
         $252 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $253 = $db + 4 | 0;
         $254 = SAFE_HEAP_LOAD($253 | 0, 4, 0) | 0 | 0;
         $255 = ($252 | 0) == ($254 | 0);
         if ($255) {
          $$19 = $first;
          break L1;
         }
         $256 = $254 + -24 | 0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($256, 0, 10495) | 0;
         $$pre$phi82Z2D = $253;
         $$pre$phi84Z2D = $db;
        } else {
         $$pre81 = $db + 4 | 0;
         $$pre$phi82Z2D = $$pre81;
         $$pre$phi84Z2D = $db;
        }
        $257 = $3 + 8 | 0;
        $258 = $3 + 1 | 0;
        $259 = $3 + 4 | 0;
        $260 = SAFE_HEAP_LOAD($249 >> 0 | 0, 1, 0) | 0 | 0;
        $261 = $260 << 24 >> 24 == 69;
        L103 : do {
         if ($261) {
          $t$3$lcssa = $249;
         } else {
          $t$3110 = $249;
          while (1) {
           $262 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$3110, $last, $db) | 0;
           $263 = ($262 | 0) == ($t$3110 | 0);
           $264 = ($262 | 0) == ($last | 0);
           $or$cond13 = $263 | $264;
           if ($or$cond13) {
            $$19 = $first;
            break L1;
           }
           $265 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
           $266 = SAFE_HEAP_LOAD($$pre$phi84Z2D | 0, 4, 0) | 0 | 0;
           $267 = $265;
           $268 = $266;
           $269 = $267 - $268 | 0;
           $270 = ($269 | 0) / 24 & -1;
           $271 = $270 >>> 0 < 2;
           if ($271) {
            $$19 = $first;
            break L1;
           }
           $272 = $265 + -24 | 0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s5, $272);
           $273 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
           $274 = $273 + -24 | 0;
           $276 = $273;
           while (1) {
            $275 = $276 + -24 | 0;
            SAFE_HEAP_STORE($$pre$phi82Z2D | 0, $275 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($275);
            $$pre$i44 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
            $277 = ($$pre$i44 | 0) == ($274 | 0);
            if ($277) {
             break;
            } else {
             $276 = $$pre$i44;
            }
           }
           __THREW__ = 0;
           $278 = invoke_iiii(227, $s5 | 0, 0, 10495 | 0) | 0;
           $279 = __THREW__;
           __THREW__ = 0;
           $280 = $279 & 1;
           if ($280) {
            label = 83;
            break;
           }
           {}
           SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($278 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($278 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($278 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($278 | 0, 0 | 0, 4);
           $281 = $278 + 4 | 0;
           SAFE_HEAP_STORE($281 | 0, 0 | 0, 4);
           $282 = $278 + 8 | 0;
           SAFE_HEAP_STORE($282 | 0, 0 | 0, 4);
           $283 = $273 + -48 | 0;
           $284 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
           $285 = $284 & 1;
           $286 = $285 << 24 >> 24 == 0;
           $287 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
           $288 = $286 ? $258 : $287;
           $289 = SAFE_HEAP_LOAD($259 | 0, 4, 0) | 0 | 0;
           $290 = $284 & 255;
           $291 = $290 >>> 1;
           $292 = $286 ? $291 : $289;
           __THREW__ = 0;
           invoke_iiii(222, $283 | 0, $288 | 0, $292 | 0) | 0;
           $293 = __THREW__;
           __THREW__ = 0;
           $294 = $293 & 1;
           if ($294) {
            label = 84;
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s5);
           $295 = SAFE_HEAP_LOAD($262 >> 0 | 0, 1, 0) | 0 | 0;
           $296 = $295 << 24 >> 24 == 69;
           if ($296) {
            $t$3$lcssa = $262;
            break L103;
           } else {
            $t$3110 = $262;
           }
          }
          if ((label | 0) == 83) {
           $297 = ___cxa_find_matching_catch() | 0;
           $298 = tempRet0;
           $$3 = $298;
           $$35 = $297;
          } else if ((label | 0) == 84) {
           $299 = ___cxa_find_matching_catch() | 0;
           $300 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$3 = $300;
           $$35 = $299;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s5);
          $$5 = $$3;
          $$57 = $$35;
          break L14;
         }
        } while (0);
        $301 = $t$3$lcssa + 1 | 0;
        $302 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($301, $last, $db) | 0;
        $303 = ($302 | 0) == ($301 | 0);
        if ($303) {
         $304 = SAFE_HEAP_LOAD($$pre$phi84Z2D | 0, 4, 0) | 0 | 0;
         $305 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
         $306 = ($304 | 0) == ($305 | 0);
         if ($306) {
          $$19 = $first;
          break L1;
         }
         $307 = $305 + -24 | 0;
         $309 = $305;
         while (1) {
          $308 = $309 + -24 | 0;
          SAFE_HEAP_STORE($$pre$phi82Z2D | 0, $308 | 0, 4);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($308);
          $$pre$i52 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
          $310 = ($$pre$i52 | 0) == ($307 | 0);
          if ($310) {
           $$19 = $first;
           break L1;
          } else {
           $309 = $$pre$i52;
          }
         }
        }
        $311 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
        $312 = SAFE_HEAP_LOAD($$pre$phi84Z2D | 0, 4, 0) | 0 | 0;
        $313 = $311;
        $314 = $312;
        $315 = $313 - $314 | 0;
        $316 = ($315 | 0) / 24 & -1;
        $317 = $316 >>> 0 < 2;
        if ($317) {
         $$19 = $first;
         break L1;
        }
        $318 = $311 + -24 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s6, $318);
        $319 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
        $320 = $319 + -24 | 0;
        $322 = $319;
        while (1) {
         $321 = $322 + -24 | 0;
         SAFE_HEAP_STORE($$pre$phi82Z2D | 0, $321 | 0, 4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($321);
         $$pre$i54 = SAFE_HEAP_LOAD($$pre$phi82Z2D | 0, 4, 0) | 0 | 0;
         $323 = ($$pre$i54 | 0) == ($320 | 0);
         if ($323) {
          break;
         } else {
          $322 = $$pre$i54;
         }
        }
        __THREW__ = 0;
        $324 = invoke_iiii(227, $s6 | 0, 0, 10495 | 0) | 0;
        $325 = __THREW__;
        __THREW__ = 0;
        $326 = $325 & 1;
        do {
         if ($326) {
          $344 = ___cxa_find_matching_catch() | 0;
          $345 = tempRet0;
          $$4 = $345;
          $$46 = $344;
         } else {
          {}
          SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($324 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($324 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($324 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($324 | 0, 0 | 0, 4);
          $327 = $324 + 4 | 0;
          SAFE_HEAP_STORE($327 | 0, 0 | 0, 4);
          $328 = $324 + 8 | 0;
          SAFE_HEAP_STORE($328 | 0, 0 | 0, 4);
          $329 = $319 + -48 | 0;
          $330 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
          $331 = $330 & 1;
          $332 = $331 << 24 >> 24 == 0;
          $333 = $4 + 8 | 0;
          $334 = SAFE_HEAP_LOAD($333 | 0, 4, 0) | 0 | 0;
          $335 = $4 + 1 | 0;
          $336 = $332 ? $335 : $334;
          $337 = $4 + 4 | 0;
          $338 = SAFE_HEAP_LOAD($337 | 0, 4, 0) | 0 | 0;
          $339 = $330 & 255;
          $340 = $339 >>> 1;
          $341 = $332 ? $340 : $338;
          __THREW__ = 0;
          invoke_iiii(222, $329 | 0, $336 | 0, $341 | 0) | 0;
          $342 = __THREW__;
          __THREW__ = 0;
          $343 = $342 & 1;
          if ($343) {
           $346 = ___cxa_find_matching_catch() | 0;
           $347 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $$4 = $347;
           $$46 = $346;
           break;
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s6);
           $$19 = $302;
           break L1;
          }
         }
        } while (0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s6);
        $$5 = $$4;
        $$57 = $$46;
       }
      } while (0);
      ___resumeException($$57 | 0);
     } else {
      $$19 = $first;
     }
    } else {
     $$19 = $first;
    }
   } else {
    $$19 = $first;
   }
  } else {
   $$19 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$19 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i12 = 0, $$0$i$i$i17 = 0, $$0$i$i$i22 = 0, $$0$i$i$i27 = 0, $$0$i$i$i32 = 0, $$0$i$i$i37 = 0, $$0$i$i$i40 = 0, $$03 = 0, $$04 = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa95 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i11 = 0, $__v$i$i16 = 0, $__v$i$i21 = 0, $__v$i$i26 = 0, $__v$i$i31 = 0;
 var $__v$i$i36 = 0, $__v$i$i38 = 0, $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i43$index7Z2D = 0, $eh$lpad$body$i$i43$indexZ2D = 0, $isdigit = 0, $isdigit10 = 0, $isdigit6 = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp5 = 0, $isdigittmp7 = 0, $isdigittmp9 = 0, $sub$0 = 0, $sub$179 = 0, $sub$179$lcssa = 0, $sub$2 = 0, $t$080 = 0, $t$080$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i38 = sp + 284 | 0;
 $__v$i$i36 = sp + 264 | 0;
 $__v$i$i31 = sp + 244 | 0;
 $__v$i$i26 = sp + 224 | 0;
 $__v$i$i21 = sp + 204 | 0;
 $__v$i$i16 = sp + 184 | 0;
 $__v$i$i11 = sp + 164 | 0;
 $__v$i$i = sp + 144 | 0;
 $0 = sp + 120 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 24 | 0;
 $5 = sp;
 $6 = $last;
 $7 = $first;
 $8 = $6 - $7 | 0;
 $9 = ($8 | 0) > 1;
 L1 : do {
  if ($9) {
   $10 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 << 24 >> 24 == 83;
   if ($11) {
    $12 = $first + 1 | 0;
    $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
    $14 = $13 << 24 >> 24;
    L4 : do {
     switch ($14 | 0) {
     case 97:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0, 10406);
       $15 = $db + 4 | 0;
       $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
       $17 = $db + 8 | 0;
       $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
       $19 = $16 >>> 0 < $18 >>> 0;
       if ($19) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $0);
        $20 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
        $21 = $20 + 24 | 0;
        SAFE_HEAP_STORE($15 | 0, $21 | 0, 4);
       } else {
        $22 = $db + 12 | 0;
        $23 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $24 = $16;
        $25 = $23;
        $26 = $24 - $25 | 0;
        $27 = ($26 | 0) / 24 & -1;
        $28 = $27 + 1 | 0;
        $29 = ($26 | 0) < -24;
        if ($29) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $30 = __THREW__;
         __THREW__ = 0;
         $31 = ___cxa_find_matching_catch() | 0;
         $32 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         $$03 = $31;
         $$04 = $32;
         break L4;
        }
        $33 = $18;
        $34 = $33 - $25 | 0;
        $35 = ($34 | 0) / 24 & -1;
        $36 = $35 >>> 0 < 1073741823;
        if ($36) {
         $37 = $35 << 1;
         $38 = $37 >>> 0 < $28 >>> 0;
         $39 = $38 ? $28 : $37;
         $$0$i$i$i = $39;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $27, $22);
        $40 = $__v$i$i + 8 | 0;
        $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $0);
        $42 = $41 + 24 | 0;
        SAFE_HEAP_STORE($40 | 0, $42 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       $43 = $first + 2 | 0;
       $$0 = $43;
       break L1;
       break;
      }
     case 98:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($1, 10421);
       $44 = $db + 4 | 0;
       $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
       $46 = $db + 8 | 0;
       $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
       $48 = $45 >>> 0 < $47 >>> 0;
       if ($48) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45, $1);
        $49 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
        $50 = $49 + 24 | 0;
        SAFE_HEAP_STORE($44 | 0, $50 | 0, 4);
       } else {
        $51 = $db + 12 | 0;
        $52 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $53 = $45;
        $54 = $52;
        $55 = $53 - $54 | 0;
        $56 = ($55 | 0) / 24 & -1;
        $57 = $56 + 1 | 0;
        $58 = ($55 | 0) < -24;
        if ($58) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $59 = __THREW__;
         __THREW__ = 0;
         $60 = ___cxa_find_matching_catch() | 0;
         $61 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
         $$03 = $60;
         $$04 = $61;
         break L4;
        }
        $62 = $47;
        $63 = $62 - $54 | 0;
        $64 = ($63 | 0) / 24 & -1;
        $65 = $64 >>> 0 < 1073741823;
        if ($65) {
         $66 = $64 << 1;
         $67 = $66 >>> 0 < $57 >>> 0;
         $68 = $67 ? $57 : $66;
         $$0$i$i$i12 = $68;
        } else {
         $$0$i$i$i12 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i11, $$0$i$i$i12, $56, $51);
        $69 = $__v$i$i11 + 8 | 0;
        $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70, $1);
        $71 = $70 + 24 | 0;
        SAFE_HEAP_STORE($69 | 0, $71 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i11);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i11);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       $72 = $first + 2 | 0;
       $$0 = $72;
       break L1;
       break;
      }
     case 115:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($2, 10439);
       $73 = $db + 4 | 0;
       $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
       $75 = $db + 8 | 0;
       $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
       $77 = $74 >>> 0 < $76 >>> 0;
       if ($77) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($74, $2);
        $78 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
        $79 = $78 + 24 | 0;
        SAFE_HEAP_STORE($73 | 0, $79 | 0, 4);
       } else {
        $80 = $db + 12 | 0;
        $81 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $82 = $74;
        $83 = $81;
        $84 = $82 - $83 | 0;
        $85 = ($84 | 0) / 24 & -1;
        $86 = $85 + 1 | 0;
        $87 = ($84 | 0) < -24;
        if ($87) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $88 = __THREW__;
         __THREW__ = 0;
         $89 = ___cxa_find_matching_catch() | 0;
         $90 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
         $$03 = $89;
         $$04 = $90;
         break L4;
        }
        $91 = $76;
        $92 = $91 - $83 | 0;
        $93 = ($92 | 0) / 24 & -1;
        $94 = $93 >>> 0 < 1073741823;
        if ($94) {
         $95 = $93 << 1;
         $96 = $95 >>> 0 < $86 >>> 0;
         $97 = $96 ? $86 : $95;
         $$0$i$i$i17 = $97;
        } else {
         $$0$i$i$i17 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i16, $$0$i$i$i17, $85, $80);
        $98 = $__v$i$i16 + 8 | 0;
        $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($99, $2);
        $100 = $99 + 24 | 0;
        SAFE_HEAP_STORE($98 | 0, $100 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i16);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i16);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
       $101 = $first + 2 | 0;
       $$0 = $101;
       break L1;
       break;
      }
     case 105:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3, 10451);
       $102 = $db + 4 | 0;
       $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
       $104 = $db + 8 | 0;
       $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
       $106 = $103 >>> 0 < $105 >>> 0;
       if ($106) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103, $3);
        $107 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
        $108 = $107 + 24 | 0;
        SAFE_HEAP_STORE($102 | 0, $108 | 0, 4);
       } else {
        $109 = $db + 12 | 0;
        $110 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $111 = $103;
        $112 = $110;
        $113 = $111 - $112 | 0;
        $114 = ($113 | 0) / 24 & -1;
        $115 = $114 + 1 | 0;
        $116 = ($113 | 0) < -24;
        if ($116) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $117 = __THREW__;
         __THREW__ = 0;
         $118 = ___cxa_find_matching_catch() | 0;
         $119 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
         $$03 = $118;
         $$04 = $119;
         break L4;
        }
        $120 = $105;
        $121 = $120 - $112 | 0;
        $122 = ($121 | 0) / 24 & -1;
        $123 = $122 >>> 0 < 1073741823;
        if ($123) {
         $124 = $122 << 1;
         $125 = $124 >>> 0 < $115 >>> 0;
         $126 = $125 ? $115 : $124;
         $$0$i$i$i22 = $126;
        } else {
         $$0$i$i$i22 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i21, $$0$i$i$i22, $114, $109);
        $127 = $__v$i$i21 + 8 | 0;
        $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $3);
        $129 = $128 + 24 | 0;
        SAFE_HEAP_STORE($127 | 0, $129 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i21);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i21);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       $130 = $first + 2 | 0;
       $$0 = $130;
       break L1;
       break;
      }
     case 111:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($4, 10464);
       $131 = $db + 4 | 0;
       $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
       $133 = $db + 8 | 0;
       $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
       $135 = $132 >>> 0 < $134 >>> 0;
       if ($135) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($132, $4);
        $136 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
        $137 = $136 + 24 | 0;
        SAFE_HEAP_STORE($131 | 0, $137 | 0, 4);
       } else {
        $138 = $db + 12 | 0;
        $139 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $140 = $132;
        $141 = $139;
        $142 = $140 - $141 | 0;
        $143 = ($142 | 0) / 24 & -1;
        $144 = $143 + 1 | 0;
        $145 = ($142 | 0) < -24;
        if ($145) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $146 = __THREW__;
         __THREW__ = 0;
         $147 = ___cxa_find_matching_catch() | 0;
         $148 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         $$03 = $147;
         $$04 = $148;
         break L4;
        }
        $149 = $134;
        $150 = $149 - $141 | 0;
        $151 = ($150 | 0) / 24 & -1;
        $152 = $151 >>> 0 < 1073741823;
        if ($152) {
         $153 = $151 << 1;
         $154 = $153 >>> 0 < $144 >>> 0;
         $155 = $154 ? $144 : $153;
         $$0$i$i$i27 = $155;
        } else {
         $$0$i$i$i27 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i26, $$0$i$i$i27, $143, $138);
        $156 = $__v$i$i26 + 8 | 0;
        $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($157, $4);
        $158 = $157 + 24 | 0;
        SAFE_HEAP_STORE($156 | 0, $158 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i26);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $159 = $first + 2 | 0;
       $$0 = $159;
       break L1;
       break;
      }
     case 100:
      {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5, 10477);
       $160 = $db + 4 | 0;
       $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
       $162 = $db + 8 | 0;
       $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
       $164 = $161 >>> 0 < $163 >>> 0;
       if ($164) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($161, $5);
        $165 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
        $166 = $165 + 24 | 0;
        SAFE_HEAP_STORE($160 | 0, $166 | 0, 4);
       } else {
        $167 = $db + 12 | 0;
        $168 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $169 = $161;
        $170 = $168;
        $171 = $169 - $170 | 0;
        $172 = ($171 | 0) / 24 & -1;
        $173 = $172 + 1 | 0;
        $174 = ($171 | 0) < -24;
        if ($174) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $175 = __THREW__;
         __THREW__ = 0;
         $176 = ___cxa_find_matching_catch() | 0;
         $177 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         $$03 = $176;
         $$04 = $177;
         break L4;
        }
        $178 = $163;
        $179 = $178 - $170 | 0;
        $180 = ($179 | 0) / 24 & -1;
        $181 = $180 >>> 0 < 1073741823;
        if ($181) {
         $182 = $180 << 1;
         $183 = $182 >>> 0 < $173 >>> 0;
         $184 = $183 ? $173 : $182;
         $$0$i$i$i32 = $184;
        } else {
         $$0$i$i$i32 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i31, $$0$i$i$i32, $172, $167);
        $185 = $__v$i$i31 + 8 | 0;
        $186 = SAFE_HEAP_LOAD($185 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($186, $5);
        $187 = $186 + 24 | 0;
        SAFE_HEAP_STORE($185 | 0, $187 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i31);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i31);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $188 = $first + 2 | 0;
       $$0 = $188;
       break L1;
       break;
      }
     case 95:
      {
       $189 = $db + 16 | 0;
       $190 = SAFE_HEAP_LOAD($189 | 0, 4, 0) | 0 | 0;
       $191 = $db + 20 | 0;
       $192 = SAFE_HEAP_LOAD($191 | 0, 4, 0) | 0 | 0;
       $193 = ($190 | 0) == ($192 | 0);
       if ($193) {
        $$0 = $first;
        break L1;
       }
       $194 = SAFE_HEAP_LOAD($190 | 0, 4, 0) | 0 | 0;
       $195 = $190 + 4 | 0;
       $196 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0;
       $197 = $db + 4 | 0;
       $198 = $db + 8 | 0;
       $199 = $db + 12 | 0;
       $200 = $__v$i$i36 + 8 | 0;
       $201 = ($194 | 0) == ($196 | 0);
       L108 : do {
        if (!$201) {
         $205 = $194;
         while (1) {
          $202 = SAFE_HEAP_LOAD($197 | 0, 4, 0) | 0 | 0;
          $203 = SAFE_HEAP_LOAD($198 | 0, 4, 0) | 0 | 0;
          $204 = ($202 | 0) == ($203 | 0);
          if ($204) {
           $214 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $215 = $202;
           $216 = $214;
           $217 = $215 - $216 | 0;
           $218 = ($217 | 0) / 24 & -1;
           $219 = $218 + 1 | 0;
           $220 = ($217 | 0) < -24;
           if ($220) {
            label = 59;
            break;
           }
           $221 = $218 >>> 0 < 1073741823;
           if ($221) {
            $222 = $218 << 1;
            $223 = $222 >>> 0 < $219 >>> 0;
            $224 = $223 ? $219 : $222;
            $$0$i$i$i37 = $224;
           } else {
            $$0$i$i$i37 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i36, $$0$i$i$i37, $218, $199);
           $225 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
           __THREW__ = 0;
           invoke_vii(236, $225 | 0, $205 | 0);
           $226 = __THREW__;
           __THREW__ = 0;
           $227 = $226 & 1;
           if ($227) {
            label = 65;
            break;
           }
           $228 = $225 + 12 | 0;
           $229 = $205 + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $228 | 0, $229 | 0);
           $230 = __THREW__;
           __THREW__ = 0;
           $231 = $230 & 1;
           if ($231) {
            $$lcssa101 = $225;
            label = 64;
            break;
           }
           $236 = $225 + 24 | 0;
           SAFE_HEAP_STORE($200 | 0, $236 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i36);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i36);
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($202, $205);
           $206 = $202 + 12 | 0;
           $207 = $205 + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $206 | 0, $207 | 0);
           $208 = __THREW__;
           __THREW__ = 0;
           $209 = $208 & 1;
           if ($209) {
            $$lcssa99 = $202;
            label = 56;
            break;
           }
           $212 = SAFE_HEAP_LOAD($197 | 0, 4, 0) | 0 | 0;
           $213 = $212 + 24 | 0;
           SAFE_HEAP_STORE($197 | 0, $213 | 0, 4);
          }
          $237 = $205 + 24 | 0;
          $238 = ($237 | 0) == ($196 | 0);
          if ($238) {
           break L108;
          } else {
           $205 = $237;
          }
         }
         if ((label | 0) == 56) {
          $210 = ___cxa_find_matching_catch() | 0;
          $211 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa99);
          ___resumeException($210 | 0);
         } else if ((label | 0) == 59) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         } else if ((label | 0) == 64) {
          $232 = ___cxa_find_matching_catch() | 0;
          $233 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa101);
          $eh$lpad$body$i$i$index2Z2D = $233;
          $eh$lpad$body$i$i$indexZ2D = $232;
         } else if ((label | 0) == 65) {
          $234 = ___cxa_find_matching_catch() | 0;
          $235 = tempRet0;
          $eh$lpad$body$i$i$index2Z2D = $235;
          $eh$lpad$body$i$i$indexZ2D = $234;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i36);
         ___resumeException($eh$lpad$body$i$i$indexZ2D | 0);
        }
       } while (0);
       $239 = $first + 2 | 0;
       $$0 = $239;
       break L1;
       break;
      }
     default:
      {
       $isdigittmp = $14 + -48 | 0;
       $isdigit = $isdigittmp >>> 0 < 10;
       if ($isdigit) {
        $243 = $13;
       } else {
        $240 = _isupper($14) | 0;
        $241 = ($240 | 0) == 0;
        if ($241) {
         $$0 = $first;
         break L1;
        }
        $$pre = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
        $243 = $$pre;
       }
       $242 = $243 << 24 >> 24;
       $isdigittmp5 = $242 + -48 | 0;
       $244 = $first + 2 | 0;
       $245 = ($244 | 0) == ($last | 0);
       if ($245) {
        $$0 = $first;
        break L1;
       }
       $isdigit6 = $isdigittmp5 >>> 0 < 10;
       $246 = $242 + -55 | 0;
       $sub$0 = $isdigit6 ? $isdigittmp5 : $246;
       $sub$179 = $sub$0;
       $t$080 = $244;
       while (1) {
        $247 = SAFE_HEAP_LOAD($t$080 >> 0 | 0, 1, 0) | 0 | 0;
        $248 = $247 << 24 >> 24;
        $isdigittmp7 = $248 + -48 | 0;
        $isdigit8 = $isdigittmp7 >>> 0 < 10;
        if ($isdigit8) {
         $254 = $247;
        } else {
         $249 = _isupper($248) | 0;
         $250 = ($249 | 0) == 0;
         $251 = SAFE_HEAP_LOAD($t$080 >> 0 | 0, 1, 0) | 0 | 0;
         if ($250) {
          $$lcssa98 = $251;
          $sub$179$lcssa = $sub$179;
          $t$080$lcssa = $t$080;
          break;
         } else {
          $254 = $251;
         }
        }
        $252 = $sub$179 * 36 | 0;
        $253 = $254 << 24 >> 24;
        $isdigittmp9 = $253 + -48 | 0;
        $isdigit10 = $isdigittmp9 >>> 0 < 10;
        $255 = $253 + -55 | 0;
        $$pn = $isdigit10 ? $isdigittmp9 : $255;
        $sub$2 = $$pn + $252 | 0;
        $256 = $t$080 + 1 | 0;
        $257 = ($256 | 0) == ($last | 0);
        if ($257) {
         $$0 = $first;
         break L1;
        } else {
         $sub$179 = $sub$2;
         $t$080 = $256;
        }
       }
       $258 = $$lcssa98 << 24 >> 24 == 95;
       if (!$258) {
        $$0 = $first;
        break L1;
       }
       $259 = $sub$179$lcssa + 1 | 0;
       $260 = $db + 20 | 0;
       $261 = SAFE_HEAP_LOAD($260 | 0, 4, 0) | 0 | 0;
       $262 = $db + 16 | 0;
       $263 = SAFE_HEAP_LOAD($262 | 0, 4, 0) | 0 | 0;
       $264 = $261;
       $265 = $263;
       $266 = $264 - $265 | 0;
       $267 = $266 >> 4;
       $268 = $259 >>> 0 < $267 >>> 0;
       if (!$268) {
        $$0 = $first;
        break L1;
       }
       $269 = $263 + ($259 << 4) | 0;
       $270 = SAFE_HEAP_LOAD($269 | 0, 4, 0) | 0 | 0;
       $271 = ($263 + ($259 << 4) | 0) + 4 | 0;
       $272 = SAFE_HEAP_LOAD($271 | 0, 4, 0) | 0 | 0;
       $273 = $db + 4 | 0;
       $274 = $db + 8 | 0;
       $275 = $db + 12 | 0;
       $276 = $__v$i$i38 + 8 | 0;
       $277 = ($270 | 0) == ($272 | 0);
       L19 : do {
        if (!$277) {
         $281 = $270;
         while (1) {
          $278 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0;
          $279 = SAFE_HEAP_LOAD($274 | 0, 4, 0) | 0 | 0;
          $280 = ($278 | 0) == ($279 | 0);
          if ($280) {
           $290 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $291 = $278;
           $292 = $290;
           $293 = $291 - $292 | 0;
           $294 = ($293 | 0) / 24 & -1;
           $295 = $294 + 1 | 0;
           $296 = ($293 | 0) < -24;
           if ($296) {
            label = 86;
            break;
           }
           $297 = $294 >>> 0 < 1073741823;
           if ($297) {
            $298 = $294 << 1;
            $299 = $298 >>> 0 < $295 >>> 0;
            $300 = $299 ? $295 : $298;
            $$0$i$i$i40 = $300;
           } else {
            $$0$i$i$i40 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38, $$0$i$i$i40, $294, $275);
           $301 = SAFE_HEAP_LOAD($276 | 0, 4, 0) | 0 | 0;
           __THREW__ = 0;
           invoke_vii(236, $301 | 0, $281 | 0);
           $302 = __THREW__;
           __THREW__ = 0;
           $303 = $302 & 1;
           if ($303) {
            label = 92;
            break;
           }
           $304 = $301 + 12 | 0;
           $305 = $281 + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $304 | 0, $305 | 0);
           $306 = __THREW__;
           __THREW__ = 0;
           $307 = $306 & 1;
           if ($307) {
            $$lcssa95 = $301;
            label = 91;
            break;
           }
           $312 = $301 + 24 | 0;
           SAFE_HEAP_STORE($276 | 0, $312 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i38);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
          } else {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($278, $281);
           $282 = $278 + 12 | 0;
           $283 = $281 + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $282 | 0, $283 | 0);
           $284 = __THREW__;
           __THREW__ = 0;
           $285 = $284 & 1;
           if ($285) {
            $$lcssa = $278;
            label = 83;
            break;
           }
           $288 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0;
           $289 = $288 + 24 | 0;
           SAFE_HEAP_STORE($273 | 0, $289 | 0, 4);
          }
          $313 = $281 + 24 | 0;
          $314 = ($313 | 0) == ($272 | 0);
          if ($314) {
           break L19;
          } else {
           $281 = $313;
          }
         }
         if ((label | 0) == 83) {
          $286 = ___cxa_find_matching_catch() | 0;
          $287 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
          ___resumeException($286 | 0);
         } else if ((label | 0) == 86) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
         } else if ((label | 0) == 91) {
          $308 = ___cxa_find_matching_catch() | 0;
          $309 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa95);
          $eh$lpad$body$i$i43$index7Z2D = $309;
          $eh$lpad$body$i$i43$indexZ2D = $308;
         } else if ((label | 0) == 92) {
          $310 = ___cxa_find_matching_catch() | 0;
          $311 = tempRet0;
          $eh$lpad$body$i$i43$index7Z2D = $311;
          $eh$lpad$body$i$i43$indexZ2D = $310;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
         ___resumeException($eh$lpad$body$i$i43$indexZ2D | 0);
        }
       } while (0);
       $315 = $t$080$lcssa + 1 | 0;
       $$0 = $315;
       break L1;
      }
     }
    } while (0);
    ___resumeException($$03 | 0);
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b($this, $profile, $step, $gravity, $allowSleep) {
 $this = $this | 0;
 $profile = $profile | 0;
 $step = $step | 0;
 $gravity = $gravity | 0;
 $allowSleep = $allowSleep | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0.0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0.0, $a5 = 0.0, $angTolSqr = 0.0, $b = 0, $b13 = 0, $b15 = 0, $body = 0, $c = 0;
 var $c4 = 0, $contactSolver = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i11 = 0, $i12 = 0, $i14 = 0, $i2 = 0, $i3 = 0, $i9 = 0, $j = 0, $j10 = 0, $jointOkay = 0, $jointsOkay = 0, $linTolSqr = 0.0, $minSleepTime = 0.0, $positionSolved = 0;
 var $ratio = 0.0, $ratio8 = 0.0, $rotation = 0.0, $solverData = 0, $timer = 0, $translation = 0, $v = 0, $v6 = 0, $w = 0.0, $w7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $timer = sp + 360 | 0;
 $c = sp + 320 | 0;
 $v = sp + 304 | 0;
 $5 = sp + 288 | 0;
 $6 = sp + 280 | 0;
 $7 = sp + 272 | 0;
 $8 = sp + 264 | 0;
 $solverData = sp + 232 | 0;
 $contactSolverDef = sp + 188 | 0;
 $contactSolver = sp + 136 | 0;
 $c4 = sp + 104 | 0;
 $v6 = sp + 88 | 0;
 $translation = sp + 72 | 0;
 $11 = sp + 48 | 0;
 $0 = $this;
 $1 = $profile;
 $2 = $step;
 $3 = $gravity;
 $12 = $allowSleep & 1;
 $4 = $12;
 $13 = $0;
 __ZN7b2TimerC2Ev($timer);
 $14 = $2;
 $15 = +(+SAFE_HEAP_LOAD_D($14 | 0, 4));
 $h = $15;
 $i = 0;
 while (1) {
  $16 = $i;
  $17 = $13 + 28 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = ($16 | 0) < ($18 | 0);
  if (!$19) {
   break;
  }
  $20 = $i;
  $21 = $13 + 8 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 + ($20 << 2) | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $b = $24;
  $25 = $b;
  $26 = $25 + 28 | 0;
  $27 = $26 + 16 | 0;
  {}
  SAFE_HEAP_STORE($c | 0, SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($c + 4 | 0, SAFE_HEAP_LOAD($27 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $28 = $b;
  $29 = $28 + 28 | 0;
  $30 = $29 + 28 | 0;
  $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
  $a = $31;
  $32 = $b;
  $33 = $32 + 64 | 0;
  {}
  SAFE_HEAP_STORE($v | 0, SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($v + 4 | 0, SAFE_HEAP_LOAD($33 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $34 = $b;
  $35 = $34 + 72 | 0;
  $36 = +(+SAFE_HEAP_LOAD_D($35 | 0, 4));
  $w = $36;
  $37 = $b;
  $38 = $37 + 28 | 0;
  $39 = $38 + 8 | 0;
  $40 = $b;
  $41 = $40 + 28 | 0;
  $42 = $41 + 16 | 0;
  {}
  SAFE_HEAP_STORE($39 | 0, SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($39 + 4 | 0, SAFE_HEAP_LOAD($42 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $43 = $b;
  $44 = $43 + 28 | 0;
  $45 = $44 + 28 | 0;
  $46 = +(+SAFE_HEAP_LOAD_D($45 | 0, 4));
  $47 = $b;
  $48 = $47 + 28 | 0;
  $49 = $48 + 24 | 0;
  SAFE_HEAP_STORE_D($49 | 0, +$46, 4);
  $50 = $b;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = ($51 | 0) == 2;
  if ($52) {
   $53 = $h;
   $54 = $b;
   $55 = $54 + 140 | 0;
   $56 = +(+SAFE_HEAP_LOAD_D($55 | 0, 4));
   $57 = $3;
   __ZmlfRK6b2Vec2($7, $56, $57);
   $58 = $b;
   $59 = $58 + 120 | 0;
   $60 = +(+SAFE_HEAP_LOAD_D($59 | 0, 4));
   $61 = $b;
   $62 = $61 + 76 | 0;
   __ZmlfRK6b2Vec2($8, $60, $62);
   __ZplRK6b2Vec2S1_($6, $7, $8);
   __ZmlfRK6b2Vec2($5, $53, $6);
   __ZN6b2Vec2pLERKS_($v, $5);
   $63 = $h;
   $64 = $b;
   $65 = $64 + 128 | 0;
   $66 = +(+SAFE_HEAP_LOAD_D($65 | 0, 4));
   $67 = $63 * $66;
   $68 = $b;
   $69 = $68 + 84 | 0;
   $70 = +(+SAFE_HEAP_LOAD_D($69 | 0, 4));
   $71 = $67 * $70;
   $72 = $w;
   $73 = $72 + $71;
   $w = $73;
   $74 = $h;
   $75 = $b;
   $76 = $75 + 132 | 0;
   $77 = +(+SAFE_HEAP_LOAD_D($76 | 0, 4));
   $78 = $74 * $77;
   $79 = 1.0 + $78;
   $80 = 1.0 / $79;
   __ZN6b2Vec2mLEf($v, $80);
   $81 = $h;
   $82 = $b;
   $83 = $82 + 136 | 0;
   $84 = +(+SAFE_HEAP_LOAD_D($83 | 0, 4));
   $85 = $81 * $84;
   $86 = 1.0 + $85;
   $87 = 1.0 / $86;
   $88 = $w;
   $89 = $88 * $87;
   $w = $89;
  }
  $90 = $i;
  $91 = $13 + 20 | 0;
  $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $93 = $92 + ($90 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($93 | 0, SAFE_HEAP_LOAD($c | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($93 + 4 | 0, SAFE_HEAP_LOAD($c + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $94 = $a;
  $95 = $i;
  $96 = $13 + 20 | 0;
  $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
  $98 = $97 + ($95 * 12 | 0) | 0;
  $99 = $98 + 8 | 0;
  SAFE_HEAP_STORE_D($99 | 0, +$94, 4);
  $100 = $i;
  $101 = $13 + 24 | 0;
  $102 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
  $103 = $102 + ($100 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($103 | 0, SAFE_HEAP_LOAD($v | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($103 + 4 | 0, SAFE_HEAP_LOAD($v + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $104 = $w;
  $105 = $i;
  $106 = $13 + 24 | 0;
  $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
  $108 = $107 + ($105 * 12 | 0) | 0;
  $109 = $108 + 8 | 0;
  SAFE_HEAP_STORE_D($109 | 0, +$104, 4);
  $110 = $i;
  $111 = $110 + 1 | 0;
  $i = $111;
 }
 __ZN7b2Timer5ResetEv($timer);
 $112 = $2;
 {}
 SAFE_HEAP_STORE($solverData | 0, SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($solverData + 4 | 0, SAFE_HEAP_LOAD($112 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($solverData + 8 | 0, SAFE_HEAP_LOAD($112 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($solverData + 12 | 0, SAFE_HEAP_LOAD($112 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($solverData + 16 | 0, SAFE_HEAP_LOAD($112 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($solverData + 20 | 0, SAFE_HEAP_LOAD($112 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 $113 = $13 + 20 | 0;
 $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
 $115 = $solverData + 24 | 0;
 SAFE_HEAP_STORE($115 | 0, $114 | 0, 4);
 $116 = $13 + 24 | 0;
 $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
 $118 = $solverData + 28 | 0;
 SAFE_HEAP_STORE($118 | 0, $117 | 0, 4);
 $119 = $2;
 {}
 SAFE_HEAP_STORE($contactSolverDef | 0, SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 4 | 0, SAFE_HEAP_LOAD($119 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 8 | 0, SAFE_HEAP_LOAD($119 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 12 | 0, SAFE_HEAP_LOAD($119 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 16 | 0, SAFE_HEAP_LOAD($119 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 20 | 0, SAFE_HEAP_LOAD($119 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 $120 = $13 + 12 | 0;
 $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $122 = $contactSolverDef + 24 | 0;
 SAFE_HEAP_STORE($122 | 0, $121 | 0, 4);
 $123 = $13 + 36 | 0;
 $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
 $125 = $contactSolverDef + 28 | 0;
 SAFE_HEAP_STORE($125 | 0, $124 | 0, 4);
 $126 = $13 + 20 | 0;
 $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
 $128 = $contactSolverDef + 32 | 0;
 SAFE_HEAP_STORE($128 | 0, $127 | 0, 4);
 $129 = $13 + 24 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = $contactSolverDef + 36 | 0;
 SAFE_HEAP_STORE($131 | 0, $130 | 0, 4);
 $132 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $133 = $contactSolverDef + 40 | 0;
 SAFE_HEAP_STORE($133 | 0, $132 | 0, 4);
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
 __THREW__ = 0;
 invoke_vi(144, $contactSolver | 0);
 $134 = __THREW__;
 __THREW__ = 0;
 $135 = $134 & 1;
 L8 : do {
  if (!$135) {
   $136 = $2;
   $137 = $136 + 20 | 0;
   $138 = SAFE_HEAP_LOAD($137 >> 0 | 0, 1, 0) | 0 | 0;
   $139 = $138 & 1;
   if ($139) {
    __THREW__ = 0;
    invoke_vi(145, $contactSolver | 0);
    $140 = __THREW__;
    __THREW__ = 0;
    $141 = $140 & 1;
    if ($141) {
     break;
    }
   }
   $i1 = 0;
   while (1) {
    $146 = $i1;
    $147 = $13 + 32 | 0;
    $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
    $149 = ($146 | 0) < ($148 | 0);
    if (!$149) {
     break;
    }
    $150 = $i1;
    $151 = $13 + 16 | 0;
    $152 = SAFE_HEAP_LOAD($151 | 0, 4, 0) | 0 | 0;
    $153 = $152 + ($150 << 2) | 0;
    $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
    $155 = SAFE_HEAP_LOAD($154 | 0, 4, 0) | 0 | 0;
    $156 = $155 + 32 | 0;
    $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
    __THREW__ = 0;
    invoke_vii($157 | 0, $154 | 0, $solverData | 0);
    $158 = __THREW__;
    __THREW__ = 0;
    $159 = $158 & 1;
    if ($159) {
     break L8;
    }
    $160 = $i1;
    $161 = $160 + 1 | 0;
    $i1 = $161;
   }
   __THREW__ = 0;
   $162 = +invoke_di(146, $timer | 0);
   $163 = __THREW__;
   __THREW__ = 0;
   $164 = $163 & 1;
   if (!$164) {
    $165 = $1;
    $166 = $165 + 12 | 0;
    SAFE_HEAP_STORE_D($166 | 0, +$162, 4);
    __THREW__ = 0;
    invoke_vi(147, $timer | 0);
    $167 = __THREW__;
    __THREW__ = 0;
    $168 = $167 & 1;
    if (!$168) {
     $i2 = 0;
     while (1) {
      $169 = $i2;
      $170 = $2;
      $171 = $170 + 12 | 0;
      $172 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
      $173 = ($169 | 0) < ($172 | 0);
      if (!$173) {
       break;
      }
      $j = 0;
      while (1) {
       $174 = $j;
       $175 = $13 + 32 | 0;
       $176 = SAFE_HEAP_LOAD($175 | 0, 4, 0) | 0 | 0;
       $177 = ($174 | 0) < ($176 | 0);
       if (!$177) {
        break;
       }
       $178 = $j;
       $179 = $13 + 16 | 0;
       $180 = SAFE_HEAP_LOAD($179 | 0, 4, 0) | 0 | 0;
       $181 = $180 + ($178 << 2) | 0;
       $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
       $183 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
       $184 = $183 + 36 | 0;
       $185 = SAFE_HEAP_LOAD($184 | 0, 4, 0) | 0 | 0;
       __THREW__ = 0;
       invoke_vii($185 | 0, $182 | 0, $solverData | 0);
       $186 = __THREW__;
       __THREW__ = 0;
       $187 = $186 & 1;
       if ($187) {
        break L8;
       }
       $188 = $j;
       $189 = $188 + 1 | 0;
       $j = $189;
      }
      __THREW__ = 0;
      invoke_vi(148, $contactSolver | 0);
      $190 = __THREW__;
      __THREW__ = 0;
      $191 = $190 & 1;
      if ($191) {
       break L8;
      }
      $192 = $i2;
      $193 = $192 + 1 | 0;
      $i2 = $193;
     }
     __THREW__ = 0;
     invoke_vi(149, $contactSolver | 0);
     $194 = __THREW__;
     __THREW__ = 0;
     $195 = $194 & 1;
     if (!$195) {
      __THREW__ = 0;
      $196 = +invoke_di(146, $timer | 0);
      $197 = __THREW__;
      __THREW__ = 0;
      $198 = $197 & 1;
      if (!$198) {
       $199 = $1;
       $200 = $199 + 16 | 0;
       SAFE_HEAP_STORE_D($200 | 0, +$196, 4);
       $i3 = 0;
       while (1) {
        $201 = $i3;
        $202 = $13 + 28 | 0;
        $203 = SAFE_HEAP_LOAD($202 | 0, 4, 0) | 0 | 0;
        $204 = ($201 | 0) < ($203 | 0);
        if (!$204) {
         break;
        }
        $205 = $i3;
        $206 = $13 + 20 | 0;
        $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
        $208 = $207 + ($205 * 12 | 0) | 0;
        {}
        SAFE_HEAP_STORE($c4 | 0, SAFE_HEAP_LOAD($208 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($c4 + 4 | 0, SAFE_HEAP_LOAD($208 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        $209 = $i3;
        $210 = $13 + 20 | 0;
        $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
        $212 = $211 + ($209 * 12 | 0) | 0;
        $213 = $212 + 8 | 0;
        $214 = +(+SAFE_HEAP_LOAD_D($213 | 0, 4));
        $a5 = $214;
        $215 = $i3;
        $216 = $13 + 24 | 0;
        $217 = SAFE_HEAP_LOAD($216 | 0, 4, 0) | 0 | 0;
        $218 = $217 + ($215 * 12 | 0) | 0;
        {}
        SAFE_HEAP_STORE($v6 | 0, SAFE_HEAP_LOAD($218 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($v6 + 4 | 0, SAFE_HEAP_LOAD($218 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        $219 = $i3;
        $220 = $13 + 24 | 0;
        $221 = SAFE_HEAP_LOAD($220 | 0, 4, 0) | 0 | 0;
        $222 = $221 + ($219 * 12 | 0) | 0;
        $223 = $222 + 8 | 0;
        $224 = +(+SAFE_HEAP_LOAD_D($223 | 0, 4));
        $w7 = $224;
        $225 = $h;
        __THREW__ = 0;
        invoke_vidi(150, $translation | 0, +$225, $v6 | 0);
        $226 = __THREW__;
        __THREW__ = 0;
        $227 = $226 & 1;
        if ($227) {
         break L8;
        }
        __THREW__ = 0;
        $228 = +invoke_dii(151, $translation | 0, $translation | 0);
        $229 = __THREW__;
        __THREW__ = 0;
        $230 = $229 & 1;
        if ($230) {
         break L8;
        }
        $231 = $228 > 4.0;
        if ($231) {
         __THREW__ = 0;
         $232 = +invoke_di(152, $translation | 0);
         $233 = __THREW__;
         __THREW__ = 0;
         $234 = $233 & 1;
         if ($234) {
          break L8;
         }
         $235 = 2.0 / $232;
         $ratio = $235;
         $236 = $ratio;
         __THREW__ = 0;
         invoke_vid(153, $v6 | 0, +$236);
         $237 = __THREW__;
         __THREW__ = 0;
         $238 = $237 & 1;
         if ($238) {
          break L8;
         }
        }
        $239 = $h;
        $240 = $w7;
        $241 = $239 * $240;
        $rotation = $241;
        $242 = $rotation;
        $243 = $rotation;
        $244 = $242 * $243;
        $245 = $244 > 2.4674012660980225;
        if ($245) {
         $246 = $rotation;
         __THREW__ = 0;
         $247 = +invoke_dd(154, +$246);
         $248 = __THREW__;
         __THREW__ = 0;
         $249 = $248 & 1;
         if ($249) {
          break L8;
         }
         $250 = 1.5707963705062866 / $247;
         $ratio8 = $250;
         $251 = $ratio8;
         $252 = $w7;
         $253 = $252 * $251;
         $w7 = $253;
        }
        $254 = $h;
        __THREW__ = 0;
        invoke_vidi(150, $11 | 0, +$254, $v6 | 0);
        $255 = __THREW__;
        __THREW__ = 0;
        $256 = $255 & 1;
        if ($256) {
         break L8;
        }
        __THREW__ = 0;
        invoke_vii(155, $c4 | 0, $11 | 0);
        $257 = __THREW__;
        __THREW__ = 0;
        $258 = $257 & 1;
        if ($258) {
         break L8;
        }
        $259 = $h;
        $260 = $w7;
        $261 = $259 * $260;
        $262 = $a5;
        $263 = $262 + $261;
        $a5 = $263;
        $264 = $i3;
        $265 = $13 + 20 | 0;
        $266 = SAFE_HEAP_LOAD($265 | 0, 4, 0) | 0 | 0;
        $267 = $266 + ($264 * 12 | 0) | 0;
        {}
        SAFE_HEAP_STORE($267 | 0, SAFE_HEAP_LOAD($c4 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($267 + 4 | 0, SAFE_HEAP_LOAD($c4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        $268 = $a5;
        $269 = $i3;
        $270 = $13 + 20 | 0;
        $271 = SAFE_HEAP_LOAD($270 | 0, 4, 0) | 0 | 0;
        $272 = $271 + ($269 * 12 | 0) | 0;
        $273 = $272 + 8 | 0;
        SAFE_HEAP_STORE_D($273 | 0, +$268, 4);
        $274 = $i3;
        $275 = $13 + 24 | 0;
        $276 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
        $277 = $276 + ($274 * 12 | 0) | 0;
        {}
        SAFE_HEAP_STORE($277 | 0, SAFE_HEAP_LOAD($v6 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($277 + 4 | 0, SAFE_HEAP_LOAD($v6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        $278 = $w7;
        $279 = $i3;
        $280 = $13 + 24 | 0;
        $281 = SAFE_HEAP_LOAD($280 | 0, 4, 0) | 0 | 0;
        $282 = $281 + ($279 * 12 | 0) | 0;
        $283 = $282 + 8 | 0;
        SAFE_HEAP_STORE_D($283 | 0, +$278, 4);
        $284 = $i3;
        $285 = $284 + 1 | 0;
        $i3 = $285;
       }
       __THREW__ = 0;
       invoke_vi(147, $timer | 0);
       $286 = __THREW__;
       __THREW__ = 0;
       $287 = $286 & 1;
       if (!$287) {
        $positionSolved = 0;
        $i9 = 0;
        while (1) {
         $288 = $i9;
         $289 = $2;
         $290 = $289 + 16 | 0;
         $291 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
         $292 = ($288 | 0) < ($291 | 0);
         if (!$292) {
          break;
         }
         __THREW__ = 0;
         $293 = invoke_ii(156, $contactSolver | 0) | 0;
         $294 = __THREW__;
         __THREW__ = 0;
         $295 = $294 & 1;
         if ($295) {
          break L8;
         }
         $296 = $293 & 1;
         $contactsOkay = $296;
         $jointsOkay = 1;
         $j10 = 0;
         while (1) {
          $297 = $j10;
          $298 = $13 + 32 | 0;
          $299 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
          $300 = ($297 | 0) < ($299 | 0);
          if (!$300) {
           break;
          }
          $301 = $j10;
          $302 = $13 + 16 | 0;
          $303 = SAFE_HEAP_LOAD($302 | 0, 4, 0) | 0 | 0;
          $304 = $303 + ($301 << 2) | 0;
          $305 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0;
          $306 = SAFE_HEAP_LOAD($305 | 0, 4, 0) | 0 | 0;
          $307 = $306 + 40 | 0;
          $308 = SAFE_HEAP_LOAD($307 | 0, 4, 0) | 0 | 0;
          __THREW__ = 0;
          $309 = invoke_iii($308 | 0, $305 | 0, $solverData | 0) | 0;
          $310 = __THREW__;
          __THREW__ = 0;
          $311 = $310 & 1;
          if ($311) {
           break L8;
          }
          $312 = $309 & 1;
          $jointOkay = $312;
          $313 = $jointsOkay;
          $314 = $313 & 1;
          $315 = $jointOkay;
          $316 = $315 & 1;
          $317 = $314 ? $316 : 0;
          $318 = $317 & 1;
          $jointsOkay = $318;
          $319 = $j10;
          $320 = $319 + 1 | 0;
          $j10 = $320;
         }
         $321 = $contactsOkay;
         $322 = $321 & 1;
         if ($322) {
          $323 = $jointsOkay;
          $324 = $323 & 1;
          if ($324) {
           label = 49;
           break;
          }
         }
         $325 = $i9;
         $326 = $325 + 1 | 0;
         $i9 = $326;
        }
        if ((label | 0) == 49) {
         $positionSolved = 1;
        }
        $i11 = 0;
        while (1) {
         $327 = $i11;
         $328 = $13 + 28 | 0;
         $329 = SAFE_HEAP_LOAD($328 | 0, 4, 0) | 0 | 0;
         $330 = ($327 | 0) < ($329 | 0);
         if (!$330) {
          break;
         }
         $331 = $i11;
         $332 = $13 + 8 | 0;
         $333 = SAFE_HEAP_LOAD($332 | 0, 4, 0) | 0 | 0;
         $334 = $333 + ($331 << 2) | 0;
         $335 = SAFE_HEAP_LOAD($334 | 0, 4, 0) | 0 | 0;
         $body = $335;
         $336 = $body;
         $337 = $336 + 28 | 0;
         $338 = $337 + 16 | 0;
         $339 = $i11;
         $340 = $13 + 20 | 0;
         $341 = SAFE_HEAP_LOAD($340 | 0, 4, 0) | 0 | 0;
         $342 = $341 + ($339 * 12 | 0) | 0;
         {}
         SAFE_HEAP_STORE($338 | 0, SAFE_HEAP_LOAD($342 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($338 + 4 | 0, SAFE_HEAP_LOAD($342 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         $343 = $i11;
         $344 = $13 + 20 | 0;
         $345 = SAFE_HEAP_LOAD($344 | 0, 4, 0) | 0 | 0;
         $346 = $345 + ($343 * 12 | 0) | 0;
         $347 = $346 + 8 | 0;
         $348 = +(+SAFE_HEAP_LOAD_D($347 | 0, 4));
         $349 = $body;
         $350 = $349 + 28 | 0;
         $351 = $350 + 28 | 0;
         SAFE_HEAP_STORE_D($351 | 0, +$348, 4);
         $352 = $body;
         $353 = $352 + 64 | 0;
         $354 = $i11;
         $355 = $13 + 24 | 0;
         $356 = SAFE_HEAP_LOAD($355 | 0, 4, 0) | 0 | 0;
         $357 = $356 + ($354 * 12 | 0) | 0;
         {}
         SAFE_HEAP_STORE($353 | 0, SAFE_HEAP_LOAD($357 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($353 + 4 | 0, SAFE_HEAP_LOAD($357 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         $358 = $i11;
         $359 = $13 + 24 | 0;
         $360 = SAFE_HEAP_LOAD($359 | 0, 4, 0) | 0 | 0;
         $361 = $360 + ($358 * 12 | 0) | 0;
         $362 = $361 + 8 | 0;
         $363 = +(+SAFE_HEAP_LOAD_D($362 | 0, 4));
         $364 = $body;
         $365 = $364 + 72 | 0;
         SAFE_HEAP_STORE_D($365 | 0, +$363, 4);
         $366 = $body;
         __THREW__ = 0;
         invoke_vi(157, $366 | 0);
         $367 = __THREW__;
         __THREW__ = 0;
         $368 = $367 & 1;
         if ($368) {
          break L8;
         }
         $369 = $i11;
         $370 = $369 + 1 | 0;
         $i11 = $370;
        }
        __THREW__ = 0;
        $371 = +invoke_di(146, $timer | 0);
        $372 = __THREW__;
        __THREW__ = 0;
        $373 = $372 & 1;
        if (!$373) {
         $374 = $1;
         $375 = $374 + 20 | 0;
         SAFE_HEAP_STORE_D($375 | 0, +$371, 4);
         $376 = $contactSolver + 40 | 0;
         $377 = SAFE_HEAP_LOAD($376 | 0, 4, 0) | 0 | 0;
         __THREW__ = 0;
         invoke_vii(158, $13 | 0, $377 | 0);
         $378 = __THREW__;
         __THREW__ = 0;
         $379 = $378 & 1;
         if (!$379) {
          $380 = $4;
          $381 = $380 & 1;
          if (!$381) {
           __ZN15b2ContactSolverD2Ev($contactSolver);
           STACKTOP = sp;
           return;
          }
          $minSleepTime = 34028234663852886.0e22;
          $linTolSqr = 9.999999747378752e-005;
          $angTolSqr = .001218469929881394;
          $i12 = 0;
          while (1) {
           $382 = $i12;
           $383 = $13 + 28 | 0;
           $384 = SAFE_HEAP_LOAD($383 | 0, 4, 0) | 0 | 0;
           $385 = ($382 | 0) < ($384 | 0);
           if (!$385) {
            break;
           }
           $386 = $i12;
           $387 = $13 + 8 | 0;
           $388 = SAFE_HEAP_LOAD($387 | 0, 4, 0) | 0 | 0;
           $389 = $388 + ($386 << 2) | 0;
           $390 = SAFE_HEAP_LOAD($389 | 0, 4, 0) | 0 | 0;
           $b13 = $390;
           $391 = $b13;
           __THREW__ = 0;
           $392 = invoke_ii(159, $391 | 0) | 0;
           $393 = __THREW__;
           __THREW__ = 0;
           $394 = $393 & 1;
           if ($394) {
            break L8;
           }
           $395 = ($392 | 0) == 0;
           L78 : do {
            if (!$395) {
             $396 = $b13;
             $397 = $396 + 4 | 0;
             $398 = SAFE_HEAP_LOAD($397 | 0, 2, 0) | 0 | 0;
             $399 = $398 & 65535;
             $400 = $399 & 4;
             $401 = ($400 | 0) == 0;
             do {
              if (!$401) {
               $402 = $b13;
               $403 = $402 + 72 | 0;
               $404 = +(+SAFE_HEAP_LOAD_D($403 | 0, 4));
               $405 = $b13;
               $406 = $405 + 72 | 0;
               $407 = +(+SAFE_HEAP_LOAD_D($406 | 0, 4));
               $408 = $404 * $407;
               $409 = $408 > .001218469929881394;
               if (!$409) {
                $410 = $b13;
                $411 = $410 + 64 | 0;
                $412 = $b13;
                $413 = $412 + 64 | 0;
                __THREW__ = 0;
                $414 = +invoke_dii(151, $411 | 0, $413 | 0);
                $415 = __THREW__;
                __THREW__ = 0;
                $416 = $415 & 1;
                if ($416) {
                 break L8;
                }
                $417 = $414 > 9.999999747378752e-005;
                if ($417) {
                 break;
                }
                $420 = $h;
                $421 = $b13;
                $422 = $421 + 144 | 0;
                $423 = +(+SAFE_HEAP_LOAD_D($422 | 0, 4));
                $424 = $423 + $420;
                SAFE_HEAP_STORE_D($422 | 0, +$424, 4);
                $425 = $minSleepTime;
                $426 = $b13;
                $427 = $426 + 144 | 0;
                $428 = +(+SAFE_HEAP_LOAD_D($427 | 0, 4));
                __THREW__ = 0;
                $429 = +invoke_ddd(160, +$425, +$428);
                $430 = __THREW__;
                __THREW__ = 0;
                $431 = $430 & 1;
                if ($431) {
                 break L8;
                }
                $minSleepTime = $429;
                break L78;
               }
              }
             } while (0);
             $418 = $b13;
             $419 = $418 + 144 | 0;
             SAFE_HEAP_STORE_D($419 | 0, +(0.0), 4);
             $minSleepTime = 0.0;
            }
           } while (0);
           $432 = $i12;
           $433 = $432 + 1 | 0;
           $i12 = $433;
          }
          $434 = $minSleepTime;
          $435 = $434 >= .5;
          if (!$435) {
           __ZN15b2ContactSolverD2Ev($contactSolver);
           STACKTOP = sp;
           return;
          }
          $436 = $positionSolved;
          $437 = $436 & 1;
          if (!$437) {
           __ZN15b2ContactSolverD2Ev($contactSolver);
           STACKTOP = sp;
           return;
          }
          $i14 = 0;
          while (1) {
           $438 = $i14;
           $439 = $13 + 28 | 0;
           $440 = SAFE_HEAP_LOAD($439 | 0, 4, 0) | 0 | 0;
           $441 = ($438 | 0) < ($440 | 0);
           if (!$441) {
            break;
           }
           $442 = $i14;
           $443 = $13 + 8 | 0;
           $444 = SAFE_HEAP_LOAD($443 | 0, 4, 0) | 0 | 0;
           $445 = $444 + ($442 << 2) | 0;
           $446 = SAFE_HEAP_LOAD($445 | 0, 4, 0) | 0 | 0;
           $b15 = $446;
           $447 = $b15;
           __THREW__ = 0;
           invoke_vii(161, $447 | 0, 0);
           $448 = __THREW__;
           __THREW__ = 0;
           $449 = $448 & 1;
           if ($449) {
            break L8;
           }
           $450 = $i14;
           $451 = $450 + 1 | 0;
           $i14 = $451;
          }
          __ZN15b2ContactSolverD2Ev($contactSolver);
          STACKTOP = sp;
          return;
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $142 = ___cxa_find_matching_catch() | 0;
 $143 = tempRet0;
 $9 = $142;
 $10 = $143;
 __ZN15b2ContactSolverD2Ev($contactSolver);
 $144 = $9;
 $145 = $10;
 ___resumeException($144 | 0);
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0$i$i$i = 0, $$0$i$i$i10 = 0, $$0$i$i$i21 = 0, $$0$i$i$i7 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$lcssa = 0, $$lcssa152 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$pre = 0, $$pre$i = 0, $$pre$i15 = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i20 = 0, $__v$i$i6 = 0, $__v$i$i9 = 0, $args = 0, $eh$lpad$body$i$i$index15Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$index6Z2D = 0, $eh$lpad$body$indexZ2D = 0, $k$0121 = 0;
 var $k1$0124 = 0, $k2$0123 = 0, $or$cond = 0, $t$0$lcssa = 0, $t$0126 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i20 = sp + 124 | 0;
 $__v$i$i9 = sp + 104 | 0;
 $__v$i$i6 = sp + 84 | 0;
 $__v$i$i = sp + 64 | 0;
 $args = sp + 52 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = $last;
 $4 = $first;
 $5 = $3 - $4 | 0;
 $6 = ($5 | 0) > 1;
 L1 : do {
  if ($6) {
   $7 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $8 = $7 << 24 >> 24 == 73;
   if ($8) {
    $9 = $db + 61 | 0;
    $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
    $11 = $10 << 24 >> 24 == 0;
    $$pre = $db + 36 | 0;
    if (!$11) {
     $12 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
     $13 = $12 + -16 | 0;
     $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
     $15 = $12 + -12 | 0;
     $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
     $17 = ($16 | 0) == ($14 | 0);
     if (!$17) {
      $19 = $16;
      while (1) {
       $18 = $19 + -16 | 0;
       SAFE_HEAP_STORE($15 | 0, $18 | 0, 4);
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
       $20 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
       $21 = ($20 | 0) == ($14 | 0);
       if ($21) {
        break;
       } else {
        $19 = $20;
       }
      }
     }
    }
    $22 = $first + 1 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($args, 10369, 1);
    $23 = $db + 4 | 0;
    $24 = $db + 12 | 0;
    $25 = $__v$i$i6 + 8 | 0;
    $26 = $__v$i$i9 + 8 | 0;
    $27 = $args + 4 | 0;
    $28 = $0 + 8 | 0;
    $29 = $0 + 1 | 0;
    $30 = $0 + 4 | 0;
    $31 = $db + 32 | 0;
    $32 = $db + 40 | 0;
    $33 = $db + 44 | 0;
    $34 = $__v$i$i + 8 | 0;
    $35 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
    $36 = $35 << 24 >> 24 == 69;
    L9 : do {
     if ($36) {
      $t$0$lcssa = $22;
      label = 62;
     } else {
      $t$0126 = $22;
      L10 : while (1) {
       $40 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
       $41 = $40 << 24 >> 24 == 0;
       do {
        if (!$41) {
         $42 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
         $43 = $42;
         $44 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
         $45 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
         $46 = $44 >>> 0 < $45 >>> 0;
         if ($46) {
          SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
          $47 = $44 + 4 | 0;
          SAFE_HEAP_STORE($47 | 0, 0 | 0, 4);
          $48 = $44 + 8 | 0;
          SAFE_HEAP_STORE($48 | 0, 0 | 0, 4);
          $49 = $44 + 12 | 0;
          SAFE_HEAP_STORE($49 | 0, $43 | 0, 4);
          $50 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $51 = $50 + 16 | 0;
          SAFE_HEAP_STORE($$pre | 0, $51 | 0, 4);
          break;
         }
         $52 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
         $53 = $44;
         $54 = $52;
         $55 = $53 - $54 | 0;
         $56 = $55 >> 4;
         $57 = $56 + 1 | 0;
         $58 = ($55 | 0) < -16;
         if ($58) {
          label = 12;
          break L10;
         }
         $60 = $45;
         $61 = $60 - $54 | 0;
         $62 = $61 >> 4;
         $63 = $62 >>> 0 < 1073741823;
         if ($63) {
          $64 = $61 >> 3;
          $65 = $64 >>> 0 < $57 >>> 0;
          $66 = $65 ? $57 : $64;
          $$0$i$i$i = $66;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i, $$0$i$i$i, $56, $33);
         $67 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
         $68 = $67 + 4 | 0;
         SAFE_HEAP_STORE($68 | 0, 0 | 0, 4);
         $69 = $67 + 8 | 0;
         SAFE_HEAP_STORE($69 | 0, 0 | 0, 4);
         $70 = $67 + 12 | 0;
         SAFE_HEAP_STORE($70 | 0, $43 | 0, 4);
         $71 = $67 + 16 | 0;
         SAFE_HEAP_STORE($34 | 0, $71 | 0, 4);
         __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($31, $__v$i$i);
         __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
        }
       } while (0);
       $80 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
       $81 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $82 = $80;
       $83 = $81;
       $84 = $82 - $83 | 0;
       $85 = ($84 | 0) / 24 & -1;
       __THREW__ = 0;
       $38 = invoke_iiii(247, $t$0126 | 0, $last | 0, $db | 0) | 0;
       $86 = __THREW__;
       __THREW__ = 0;
       $87 = $86 & 1;
       if ($87) {
        label = 18;
        break;
       }
       $88 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
       $89 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $90 = $88;
       $91 = $89;
       $92 = $90 - $91 | 0;
       $93 = ($92 | 0) / 24 & -1;
       $94 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
       $95 = $94 << 24 >> 24 == 0;
       if (!$95) {
        $96 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
        $97 = $96 + -16 | 0;
        $99 = $96;
        while (1) {
         $98 = $99 + -16 | 0;
         SAFE_HEAP_STORE($$pre | 0, $98 | 0, 4);
         __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($98);
         $$pre$i = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
         $100 = ($$pre$i | 0) == ($97 | 0);
         if ($100) {
          break;
         } else {
          $99 = $$pre$i;
         }
        }
       }
       $101 = ($38 | 0) == ($t$0126 | 0);
       $102 = ($38 | 0) == ($last | 0);
       $or$cond = $101 | $102;
       if ($or$cond) {
        label = 73;
        break;
       }
       $103 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
       $104 = $103 << 24 >> 24 == 0;
       if (!$104) {
        $106 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
        $107 = $106 + -16 | 0;
        $108 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
        $109 = $108;
        $110 = $106 + -12 | 0;
        $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
        $112 = $106 + -8 | 0;
        $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
        $114 = $111 >>> 0 < $113 >>> 0;
        if ($114) {
         SAFE_HEAP_STORE($111 | 0, 0 | 0, 4);
         $115 = $111 + 4 | 0;
         SAFE_HEAP_STORE($115 | 0, 0 | 0, 4);
         $116 = $111 + 8 | 0;
         SAFE_HEAP_STORE($116 | 0, 0 | 0, 4);
         $117 = $111 + 12 | 0;
         SAFE_HEAP_STORE($117 | 0, $109 | 0, 4);
         $118 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
         $119 = $118 + 16 | 0;
         SAFE_HEAP_STORE($110 | 0, $119 | 0, 4);
        } else {
         $120 = $106 + -4 | 0;
         $121 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
         $122 = $111;
         $123 = $121;
         $124 = $122 - $123 | 0;
         $125 = $124 >> 4;
         $126 = $125 + 1 | 0;
         $127 = ($124 | 0) < -16;
         if ($127) {
          $$lcssa = $107;
          label = 31;
          break;
         }
         $129 = $113;
         $130 = $129 - $123 | 0;
         $131 = $130 >> 4;
         $132 = $131 >>> 0 < 1073741823;
         if ($132) {
          $133 = $130 >> 3;
          $134 = $133 >>> 0 < $126 >>> 0;
          $135 = $134 ? $126 : $133;
          $$0$i$i$i7 = $135;
         } else {
          $$0$i$i$i7 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i6, $$0$i$i$i7, $125, $120);
         $136 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($136 | 0, 0 | 0, 4);
         $137 = $136 + 4 | 0;
         SAFE_HEAP_STORE($137 | 0, 0 | 0, 4);
         $138 = $136 + 8 | 0;
         SAFE_HEAP_STORE($138 | 0, 0 | 0, 4);
         $139 = $136 + 12 | 0;
         SAFE_HEAP_STORE($139 | 0, $109 | 0, 4);
         $140 = $136 + 16 | 0;
         SAFE_HEAP_STORE($25 | 0, $140 | 0, 4);
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($107, $__v$i$i6);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i6);
        }
        $141 = $85 >>> 0 < $93 >>> 0;
        if ($141) {
         $k$0121 = $85;
         while (1) {
          $142 = SAFE_HEAP_LOAD($$pre | 0, 4, 0) | 0 | 0;
          $143 = $142 + -12 | 0;
          $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
          $145 = $144 + -16 | 0;
          $146 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $147 = $146 + ($k$0121 * 24 | 0) | 0;
          $148 = $144 + -12 | 0;
          $149 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
          $150 = $144 + -8 | 0;
          $151 = SAFE_HEAP_LOAD($150 | 0, 4, 0) | 0 | 0;
          $152 = ($149 | 0) == ($151 | 0);
          if ($152) {
           $163 = $144 + -4 | 0;
           $164 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
           $165 = $149;
           $166 = $164;
           $167 = $165 - $166 | 0;
           $168 = ($167 | 0) / 24 & -1;
           $169 = $168 + 1 | 0;
           $170 = ($167 | 0) < -24;
           if ($170) {
            $$lcssa152 = $145;
            label = 42;
            break L10;
           }
           $172 = $168 >>> 0 < 1073741823;
           if ($172) {
            $173 = $168 << 1;
            $174 = $173 >>> 0 < $169 >>> 0;
            $175 = $174 ? $169 : $173;
            $$0$i$i$i10 = $175;
           } else {
            $$0$i$i$i10 = 2147483647;
           }
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i9, $$0$i$i$i10, $168, $163);
           $176 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
           __THREW__ = 0;
           invoke_vii(236, $176 | 0, $147 | 0);
           $177 = __THREW__;
           __THREW__ = 0;
           $178 = $177 & 1;
           if ($178) {
            label = 48;
            break L10;
           }
           $179 = $176 + 12 | 0;
           $180 = ($146 + ($k$0121 * 24 | 0) | 0) + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $179 | 0, $180 | 0);
           $181 = __THREW__;
           __THREW__ = 0;
           $182 = $181 & 1;
           if ($182) {
            $$lcssa157 = $176;
            label = 47;
            break L10;
           }
           $187 = $176 + 24 | 0;
           SAFE_HEAP_STORE($26 | 0, $187 | 0, 4);
           __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($145, $__v$i$i9);
           __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i9);
          } else {
           __THREW__ = 0;
           invoke_vii(236, $149 | 0, $147 | 0);
           $153 = __THREW__;
           __THREW__ = 0;
           $154 = $153 & 1;
           if ($154) {
            label = 17;
            break L10;
           }
           $155 = $149 + 12 | 0;
           $156 = ($146 + ($k$0121 * 24 | 0) | 0) + 12 | 0;
           __THREW__ = 0;
           invoke_vii(236, $155 | 0, $156 | 0);
           $157 = __THREW__;
           __THREW__ = 0;
           $158 = $157 & 1;
           if ($158) {
            $$lcssa156 = $149;
            label = 39;
            break L10;
           }
           $161 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
           $162 = $161 + 24 | 0;
           SAFE_HEAP_STORE($148 | 0, $162 | 0, 4);
          }
          $188 = $k$0121 + 1 | 0;
          $189 = $188 >>> 0 < $93 >>> 0;
          if ($189) {
           $k$0121 = $188;
          } else {
           break;
          }
         }
        }
       }
       $105 = $85 >>> 0 < $93 >>> 0;
       if ($105) {
        $k2$0123 = $85;
        while (1) {
         $191 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
         $192 = $191 & 1;
         $193 = $192 << 24 >> 24 == 0;
         $194 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
         $195 = $191 & 255;
         $196 = $195 >>> 1;
         $197 = $193 ? $196 : $194;
         $198 = $197 >>> 0 > 1;
         if ($198) {
          __THREW__ = 0;
          invoke_iii(228, $args | 0, 10309 | 0) | 0;
          $199 = __THREW__;
          __THREW__ = 0;
          $200 = $199 & 1;
          if ($200) {
           label = 16;
           break L10;
          }
         }
         $201 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $202 = $201 + ($k2$0123 * 24 | 0) | 0;
         __THREW__ = 0;
         invoke_vii(232, $0 | 0, $202 | 0);
         $203 = __THREW__;
         __THREW__ = 0;
         $204 = $203 & 1;
         if ($204) {
          label = 16;
          break L10;
         }
         $205 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
         $206 = $205 & 1;
         $207 = $206 << 24 >> 24 == 0;
         $208 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
         $209 = $207 ? $29 : $208;
         $210 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
         $211 = $205 & 255;
         $212 = $211 >>> 1;
         $213 = $207 ? $212 : $210;
         __THREW__ = 0;
         invoke_iiii(222, $args | 0, $209 | 0, $213 | 0) | 0;
         $214 = __THREW__;
         __THREW__ = 0;
         $215 = $214 & 1;
         if ($215) {
          label = 58;
          break L10;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $216 = $k2$0123 + 1 | 0;
         $217 = $216 >>> 0 < $93 >>> 0;
         if ($217) {
          $k2$0123 = $216;
         } else {
          break;
         }
        }
       }
       $190 = ($93 | 0) == ($85 | 0);
       if (!$190) {
        $k1$0124 = $93;
        while (1) {
         $220 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
         $221 = $220 + -24 | 0;
         $223 = $220;
         while (1) {
          $222 = $223 + -24 | 0;
          SAFE_HEAP_STORE($23 | 0, $222 | 0, 4);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($222);
          $$pre$i15 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
          $224 = ($$pre$i15 | 0) == ($221 | 0);
          if ($224) {
           break;
          } else {
           $223 = $$pre$i15;
          }
         }
         $225 = $k1$0124 + -1 | 0;
         $226 = ($225 | 0) == ($85 | 0);
         if ($226) {
          break;
         } else {
          $k1$0124 = $225;
         }
        }
       }
       $37 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
       $39 = $37 << 24 >> 24 == 69;
       if ($39) {
        $t$0$lcssa = $38;
        label = 62;
        break L9;
       } else {
        $t$0126 = $38;
       }
      }
      switch (label | 0) {
      case 12:
       {
        __THREW__ = 0;
        invoke_vi(238, $31 | 0);
        $59 = __THREW__;
        __THREW__ = 0;
        label = 19;
        break L9;
        break;
       }
      case 16:
       {
        $72 = ___cxa_find_matching_catch() | 0;
        $73 = tempRet0;
        $eh$lpad$body$index6Z2D = $73;
        $eh$lpad$body$indexZ2D = $72;
        label = 20;
        break L9;
        break;
       }
      case 17:
       {
        $74 = ___cxa_find_matching_catch() | 0;
        $75 = tempRet0;
        $eh$lpad$body$index6Z2D = $75;
        $eh$lpad$body$indexZ2D = $74;
        label = 20;
        break L9;
        break;
       }
      case 18:
       {
        $76 = ___cxa_find_matching_catch() | 0;
        $77 = tempRet0;
        $eh$lpad$body$index6Z2D = $77;
        $eh$lpad$body$indexZ2D = $76;
        label = 20;
        break L9;
        break;
       }
      case 31:
       {
        __THREW__ = 0;
        invoke_vi(238, $$lcssa | 0);
        $128 = __THREW__;
        __THREW__ = 0;
        label = 19;
        break L9;
        break;
       }
      case 39:
       {
        $159 = ___cxa_find_matching_catch() | 0;
        $160 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa156);
        $eh$lpad$body$index6Z2D = $160;
        $eh$lpad$body$indexZ2D = $159;
        label = 20;
        break L9;
        break;
       }
      case 42:
       {
        __THREW__ = 0;
        invoke_vi(238, $$lcssa152 | 0);
        $171 = __THREW__;
        __THREW__ = 0;
        label = 19;
        break L9;
        break;
       }
      case 47:
       {
        $183 = ___cxa_find_matching_catch() | 0;
        $184 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa157);
        $eh$lpad$body$i$i$index15Z2D = $184;
        $eh$lpad$body$i$i$indexZ2D = $183;
        break;
       }
      case 48:
       {
        $185 = ___cxa_find_matching_catch() | 0;
        $186 = tempRet0;
        $eh$lpad$body$i$i$index15Z2D = $186;
        $eh$lpad$body$i$i$indexZ2D = $185;
        break;
       }
      case 58:
       {
        $218 = ___cxa_find_matching_catch() | 0;
        $219 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        $$04 = $219;
        $$05 = $218;
        break L9;
        break;
       }
      case 73:
       {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
        $$1 = $first;
        break L1;
        break;
       }
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i9);
      $eh$lpad$body$index6Z2D = $eh$lpad$body$i$i$index15Z2D;
      $eh$lpad$body$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
      label = 20;
     }
    } while (0);
    do {
     if ((label | 0) == 62) {
      $227 = $t$0$lcssa + 1 | 0;
      $228 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
      $229 = $228 & 1;
      $230 = $229 << 24 >> 24 == 0;
      $231 = $args + 8 | 0;
      $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
      $233 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
      $234 = $args + 1 | 0;
      $235 = $228 & 255;
      $236 = $235 >>> 1;
      $237 = $230 ? $234 : $232;
      $238 = $230 ? $236 : $233;
      $$sum$i = $238 + -1 | 0;
      $239 = $237 + $$sum$i | 0;
      $240 = SAFE_HEAP_LOAD($239 >> 0 | 0, 1, 0) | 0 | 0;
      $241 = $240 << 24 >> 24 == 62;
      __THREW__ = 0;
      if ($241) {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 11354) | 0;
       $244 = __THREW__;
       __THREW__ = 0;
       $245 = $244 & 1;
       if ($245) {
        label = 19;
        break;
       }
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 10371) | 0;
       $242 = __THREW__;
       __THREW__ = 0;
       $243 = $242 & 1;
       if ($243) {
        label = 19;
        break;
       }
      }
      {}
      SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($args | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($args + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($args + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($args | 0, 0 | 0, 4);
      $246 = $args + 4 | 0;
      SAFE_HEAP_STORE($246 | 0, 0 | 0, 4);
      $247 = $args + 8 | 0;
      SAFE_HEAP_STORE($247 | 0, 0 | 0, 4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
      $248 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
      $249 = $db + 8 | 0;
      $250 = SAFE_HEAP_LOAD($249 | 0, 4, 0) | 0 | 0;
      $251 = $248 >>> 0 < $250 >>> 0;
      if ($251) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($248, $1);
       $252 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
       $253 = $252 + 24 | 0;
       SAFE_HEAP_STORE($23 | 0, $253 | 0, 4);
      } else {
       $254 = $db + 12 | 0;
       $255 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $256 = $248;
       $257 = $255;
       $258 = $256 - $257 | 0;
       $259 = ($258 | 0) / 24 & -1;
       $260 = $259 + 1 | 0;
       $261 = ($258 | 0) < -24;
       if ($261) {
        __THREW__ = 0;
        invoke_vi(238, $db | 0);
        $262 = __THREW__;
        __THREW__ = 0;
        $263 = ___cxa_find_matching_catch() | 0;
        $264 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $$04 = $264;
        $$05 = $263;
        break;
       }
       $265 = $250;
       $266 = $265 - $257 | 0;
       $267 = ($266 | 0) / 24 & -1;
       $268 = $267 >>> 0 < 1073741823;
       if ($268) {
        $269 = $267 << 1;
        $270 = $269 >>> 0 < $260 >>> 0;
        $271 = $270 ? $260 : $269;
        $$0$i$i$i21 = $271;
       } else {
        $$0$i$i$i21 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20, $$0$i$i$i21, $259, $254);
       $272 = $__v$i$i20 + 8 | 0;
       $273 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($273, $1);
       $274 = $273 + 24 | 0;
       SAFE_HEAP_STORE($272 | 0, $274 | 0, 4);
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i20);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$1 = $227;
      break L1;
     }
    } while (0);
    if ((label | 0) == 19) {
     $78 = ___cxa_find_matching_catch() | 0;
     $79 = tempRet0;
     $eh$lpad$body$index6Z2D = $79;
     $eh$lpad$body$indexZ2D = $78;
     label = 20;
    }
    if ((label | 0) == 20) {
     $$04 = $eh$lpad$body$index6Z2D;
     $$05 = $eh$lpad$body$indexZ2D;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    ___resumeException($$05 | 0);
   } else {
    $$1 = $first;
   }
  } else {
   $$1 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}
function __ZN15b2ContactSolver24SolveVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $P1 = 0, $P111 = 0, $P114 = 0, $P18 = 0, $P2 = 0, $P212 = 0, $P215 = 0, $P29 = 0, $P6 = 0, $a = 0, $b = 0, $cp1 = 0, $cp2 = 0;
 var $d = 0, $d10 = 0, $d13 = 0, $d7 = 0, $dv = 0, $dv1 = 0, $dv2 = 0, $dv3 = 0, $friction = 0.0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $j1 = 0, $k_errorTol = 0.0, $lambda = 0.0, $lambda4 = 0.0, $mA = 0.0;
 var $mB = 0.0, $maxFriction = 0.0, $newImpulse = 0.0, $newImpulse5 = 0.0, $normal = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pointCount = 0, $tangent = 0, $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $vcp2 = 0, $vn = 0.0, $vn1 = 0.0, $vn2 = 0.0, $vt = 0.0;
 var $wA = 0.0, $wB = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vA = sp + 592 | 0;
 $vB = sp + 576 | 0;
 $normal = sp + 560 | 0;
 $tangent = sp + 552 | 0;
 $dv = sp + 528 | 0;
 $1 = sp + 520 | 0;
 $2 = sp + 512 | 0;
 $3 = sp + 504 | 0;
 $4 = sp + 496 | 0;
 $P = sp + 472 | 0;
 $5 = sp + 464 | 0;
 $6 = sp + 456 | 0;
 $dv3 = sp + 440 | 0;
 $7 = sp + 432 | 0;
 $8 = sp + 424 | 0;
 $9 = sp + 416 | 0;
 $10 = sp + 408 | 0;
 $P6 = sp + 384 | 0;
 $11 = sp + 376 | 0;
 $12 = sp + 368 | 0;
 $a = sp + 352 | 0;
 $dv1 = sp + 344 | 0;
 $13 = sp + 336 | 0;
 $14 = sp + 328 | 0;
 $15 = sp + 320 | 0;
 $16 = sp + 312 | 0;
 $dv2 = sp + 304 | 0;
 $17 = sp + 296 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 280 | 0;
 $20 = sp + 272 | 0;
 $b = sp + 256 | 0;
 $21 = sp + 248 | 0;
 $x = sp + 232 | 0;
 $22 = sp + 224 | 0;
 $d = sp + 216 | 0;
 $P1 = sp + 208 | 0;
 $P2 = sp + 200 | 0;
 $23 = sp + 192 | 0;
 $24 = sp + 184 | 0;
 $25 = sp + 176 | 0;
 $26 = sp + 168 | 0;
 $d7 = sp + 160 | 0;
 $P18 = sp + 152 | 0;
 $P29 = sp + 144 | 0;
 $27 = sp + 136 | 0;
 $28 = sp + 128 | 0;
 $29 = sp + 120 | 0;
 $30 = sp + 112 | 0;
 $d10 = sp + 104 | 0;
 $P111 = sp + 96 | 0;
 $P212 = sp + 88 | 0;
 $31 = sp + 80 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 64 | 0;
 $34 = sp + 56 | 0;
 $d13 = sp + 48 | 0;
 $P114 = sp + 40 | 0;
 $P215 = sp + 32 | 0;
 $35 = sp + 24 | 0;
 $36 = sp + 16 | 0;
 $37 = sp + 8 | 0;
 $38 = sp;
 $0 = $this;
 $39 = $0;
 $i = 0;
 L1 : while (1) {
  $40 = $i;
  $41 = $39 + 48 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = ($40 | 0) < ($42 | 0);
  if (!$43) {
   label = 26;
   break;
  }
  $44 = $39 + 40 | 0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  $46 = $i;
  $47 = $45 + ($46 * 156 | 0) | 0;
  $vc = $47;
  $48 = $vc;
  $49 = $48 + 112 | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $indexA = $50;
  $51 = $vc;
  $52 = $51 + 116 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $indexB = $53;
  $54 = $vc;
  $55 = $54 + 120 | 0;
  $56 = +(+SAFE_HEAP_LOAD_D($55 | 0, 4));
  $mA = $56;
  $57 = $vc;
  $58 = $57 + 128 | 0;
  $59 = +(+SAFE_HEAP_LOAD_D($58 | 0, 4));
  $iA = $59;
  $60 = $vc;
  $61 = $60 + 124 | 0;
  $62 = +(+SAFE_HEAP_LOAD_D($61 | 0, 4));
  $mB = $62;
  $63 = $vc;
  $64 = $63 + 132 | 0;
  $65 = +(+SAFE_HEAP_LOAD_D($64 | 0, 4));
  $iB = $65;
  $66 = $vc;
  $67 = $66 + 148 | 0;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $pointCount = $68;
  $69 = $indexA;
  $70 = $39 + 28 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
  $72 = $71 + ($69 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vA | 0, SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vA + 4 | 0, SAFE_HEAP_LOAD($72 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $73 = $indexA;
  $74 = $39 + 28 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = $75 + ($73 * 12 | 0) | 0;
  $77 = $76 + 8 | 0;
  $78 = +(+SAFE_HEAP_LOAD_D($77 | 0, 4));
  $wA = $78;
  $79 = $indexB;
  $80 = $39 + 28 | 0;
  $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
  $82 = $81 + ($79 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vB | 0, SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vB + 4 | 0, SAFE_HEAP_LOAD($82 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $83 = $indexB;
  $84 = $39 + 28 | 0;
  $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
  $86 = $85 + ($83 * 12 | 0) | 0;
  $87 = $86 + 8 | 0;
  $88 = +(+SAFE_HEAP_LOAD_D($87 | 0, 4));
  $wB = $88;
  $89 = $vc;
  $90 = $89 + 72 | 0;
  {}
  SAFE_HEAP_STORE($normal | 0, SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($normal + 4 | 0, SAFE_HEAP_LOAD($90 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1.0);
  $91 = $vc;
  $92 = $91 + 136 | 0;
  $93 = +(+SAFE_HEAP_LOAD_D($92 | 0, 4));
  $friction = $93;
  $94 = $pointCount;
  $95 = ($94 | 0) == 1;
  $96 = $pointCount;
  $97 = ($96 | 0) == 2;
  $or$cond = $95 | $97;
  if (!$or$cond) {
   label = 4;
   break;
  }
  $j = 0;
  while (1) {
   $98 = $j;
   $99 = $pointCount;
   $100 = ($98 | 0) < ($99 | 0);
   if (!$100) {
    break;
   }
   $101 = $vc;
   $102 = $j;
   $103 = $101 + ($102 * 36 | 0) | 0;
   $vcp = $103;
   $104 = $wB;
   $105 = $vcp;
   $106 = $105 + 8 | 0;
   __Z7b2CrossfRK6b2Vec2($3, $104, $106);
   __ZplRK6b2Vec2S1_($2, $vB, $3);
   __ZmiRK6b2Vec2S1_($1, $2, $vA);
   $107 = $wA;
   $108 = $vcp;
   __Z7b2CrossfRK6b2Vec2($4, $107, $108);
   __ZmiRK6b2Vec2S1_($dv, $1, $4);
   $109 = +__Z5b2DotRK6b2Vec2S1_($dv, $tangent);
   $110 = $vc;
   $111 = $110 + 144 | 0;
   $112 = +(+SAFE_HEAP_LOAD_D($111 | 0, 4));
   $113 = $109 - $112;
   $vt = $113;
   $114 = $vcp;
   $115 = $114 + 28 | 0;
   $116 = +(+SAFE_HEAP_LOAD_D($115 | 0, 4));
   $117 = $vt;
   $118 = -$117;
   $119 = $116 * $118;
   $lambda = $119;
   $120 = $friction;
   $121 = $vcp;
   $122 = $121 + 16 | 0;
   $123 = +(+SAFE_HEAP_LOAD_D($122 | 0, 4));
   $124 = $120 * $123;
   $maxFriction = $124;
   $125 = $vcp;
   $126 = $125 + 20 | 0;
   $127 = +(+SAFE_HEAP_LOAD_D($126 | 0, 4));
   $128 = $lambda;
   $129 = $127 + $128;
   $130 = $maxFriction;
   $131 = -$130;
   $132 = $maxFriction;
   $133 = +__Z7b2ClampIfET_S0_S0_S0_($129, $131, $132);
   $newImpulse = $133;
   $134 = $newImpulse;
   $135 = $vcp;
   $136 = $135 + 20 | 0;
   $137 = +(+SAFE_HEAP_LOAD_D($136 | 0, 4));
   $138 = $134 - $137;
   $lambda = $138;
   $139 = $newImpulse;
   $140 = $vcp;
   $141 = $140 + 20 | 0;
   SAFE_HEAP_STORE_D($141 | 0, +$139, 4);
   $142 = $lambda;
   __ZmlfRK6b2Vec2($P, $142, $tangent);
   $143 = $mA;
   __ZmlfRK6b2Vec2($5, $143, $P);
   __ZN6b2Vec2mIERKS_($vA, $5);
   $144 = $iA;
   $145 = $vcp;
   $146 = +__Z7b2CrossRK6b2Vec2S1_($145, $P);
   $147 = $144 * $146;
   $148 = $wA;
   $149 = $148 - $147;
   $wA = $149;
   $150 = $mB;
   __ZmlfRK6b2Vec2($6, $150, $P);
   __ZN6b2Vec2pLERKS_($vB, $6);
   $151 = $iB;
   $152 = $vcp;
   $153 = $152 + 8 | 0;
   $154 = +__Z7b2CrossRK6b2Vec2S1_($153, $P);
   $155 = $151 * $154;
   $156 = $wB;
   $157 = $156 + $155;
   $wB = $157;
   $158 = $j;
   $159 = $158 + 1 | 0;
   $j = $159;
  }
  $160 = $pointCount;
  $161 = ($160 | 0) == 1;
  do {
   if ($161) {
    label = 10;
   } else {
    $162 = SAFE_HEAP_LOAD(3499 >> 0 | 0, 1, 0) | 0 | 0;
    $163 = $162 & 1;
    $164 = $163 & 1;
    $165 = ($164 | 0) == 0;
    if ($165) {
     label = 10;
    } else {
     $220 = $vc;
     $cp1 = $220;
     $221 = $vc;
     $222 = $221 + 36 | 0;
     $cp2 = $222;
     $223 = $cp1;
     $224 = $223 + 16 | 0;
     $225 = +(+SAFE_HEAP_LOAD_D($224 | 0, 4));
     $226 = $cp2;
     $227 = $226 + 16 | 0;
     $228 = +(+SAFE_HEAP_LOAD_D($227 | 0, 4));
     __ZN6b2Vec2C2Eff($a, $225, $228);
     $229 = +(+SAFE_HEAP_LOAD_D($a | 0, 4));
     $230 = $229 >= 0.0;
     if (!$230) {
      label = 15;
      break L1;
     }
     $231 = $a + 4 | 0;
     $232 = +(+SAFE_HEAP_LOAD_D($231 | 0, 4));
     $233 = $232 >= 0.0;
     if (!$233) {
      label = 15;
      break L1;
     }
     $234 = $wB;
     $235 = $cp1;
     $236 = $235 + 8 | 0;
     __Z7b2CrossfRK6b2Vec2($15, $234, $236);
     __ZplRK6b2Vec2S1_($14, $vB, $15);
     __ZmiRK6b2Vec2S1_($13, $14, $vA);
     $237 = $wA;
     $238 = $cp1;
     __Z7b2CrossfRK6b2Vec2($16, $237, $238);
     __ZmiRK6b2Vec2S1_($dv1, $13, $16);
     $239 = $wB;
     $240 = $cp2;
     $241 = $240 + 8 | 0;
     __Z7b2CrossfRK6b2Vec2($19, $239, $241);
     __ZplRK6b2Vec2S1_($18, $vB, $19);
     __ZmiRK6b2Vec2S1_($17, $18, $vA);
     $242 = $wA;
     $243 = $cp2;
     __Z7b2CrossfRK6b2Vec2($20, $242, $243);
     __ZmiRK6b2Vec2S1_($dv2, $17, $20);
     $244 = +__Z5b2DotRK6b2Vec2S1_($dv1, $normal);
     $vn1 = $244;
     $245 = +__Z5b2DotRK6b2Vec2S1_($dv2, $normal);
     $vn2 = $245;
     __ZN6b2Vec2C2Ev($b);
     $246 = $vn1;
     $247 = $cp1;
     $248 = $247 + 32 | 0;
     $249 = +(+SAFE_HEAP_LOAD_D($248 | 0, 4));
     $250 = $246 - $249;
     SAFE_HEAP_STORE_D($b | 0, +$250, 4);
     $251 = $vn2;
     $252 = $cp2;
     $253 = $252 + 32 | 0;
     $254 = +(+SAFE_HEAP_LOAD_D($253 | 0, 4));
     $255 = $251 - $254;
     $256 = $b + 4 | 0;
     SAFE_HEAP_STORE_D($256 | 0, +$255, 4);
     $257 = $vc;
     $258 = $257 + 96 | 0;
     __Z5b2MulRK7b2Mat22RK6b2Vec2($21, $258, $a);
     __ZN6b2Vec2mIERKS_($b, $21);
     $k_errorTol = 1.0000000474974513e-003;
     $259 = $vc;
     $260 = $259 + 80 | 0;
     __Z5b2MulRK7b2Mat22RK6b2Vec2($22, $260, $b);
     __ZNK6b2Vec2ngEv($x, $22);
     $261 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
     $262 = $261 >= 0.0;
     if ($262) {
      $263 = $x + 4 | 0;
      $264 = +(+SAFE_HEAP_LOAD_D($263 | 0, 4));
      $265 = $264 >= 0.0;
      if ($265) {
       __ZmiRK6b2Vec2S1_($d, $x, $a);
       $266 = +(+SAFE_HEAP_LOAD_D($d | 0, 4));
       __ZmlfRK6b2Vec2($P1, $266, $normal);
       $267 = $d + 4 | 0;
       $268 = +(+SAFE_HEAP_LOAD_D($267 | 0, 4));
       __ZmlfRK6b2Vec2($P2, $268, $normal);
       $269 = $mA;
       __ZplRK6b2Vec2S1_($24, $P1, $P2);
       __ZmlfRK6b2Vec2($23, $269, $24);
       __ZN6b2Vec2mIERKS_($vA, $23);
       $270 = $iA;
       $271 = $cp1;
       $272 = +__Z7b2CrossRK6b2Vec2S1_($271, $P1);
       $273 = $cp2;
       $274 = +__Z7b2CrossRK6b2Vec2S1_($273, $P2);
       $275 = $272 + $274;
       $276 = $270 * $275;
       $277 = $wA;
       $278 = $277 - $276;
       $wA = $278;
       $279 = $mB;
       __ZplRK6b2Vec2S1_($26, $P1, $P2);
       __ZmlfRK6b2Vec2($25, $279, $26);
       __ZN6b2Vec2pLERKS_($vB, $25);
       $280 = $iB;
       $281 = $cp1;
       $282 = $281 + 8 | 0;
       $283 = +__Z7b2CrossRK6b2Vec2S1_($282, $P1);
       $284 = $cp2;
       $285 = $284 + 8 | 0;
       $286 = +__Z7b2CrossRK6b2Vec2S1_($285, $P2);
       $287 = $283 + $286;
       $288 = $280 * $287;
       $289 = $wB;
       $290 = $289 + $288;
       $wB = $290;
       $291 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
       $292 = $cp1;
       $293 = $292 + 16 | 0;
       SAFE_HEAP_STORE_D($293 | 0, +$291, 4);
       $294 = $x + 4 | 0;
       $295 = +(+SAFE_HEAP_LOAD_D($294 | 0, 4));
       $296 = $cp2;
       $297 = $296 + 16 | 0;
       SAFE_HEAP_STORE_D($297 | 0, +$295, 4);
       break;
      }
     }
     $298 = $cp1;
     $299 = $298 + 24 | 0;
     $300 = +(+SAFE_HEAP_LOAD_D($299 | 0, 4));
     $301 = -$300;
     $302 = +(+SAFE_HEAP_LOAD_D($b | 0, 4));
     $303 = $301 * $302;
     SAFE_HEAP_STORE_D($x | 0, +$303, 4);
     $304 = $x + 4 | 0;
     SAFE_HEAP_STORE_D($304 | 0, +(0.0), 4);
     $vn1 = 0.0;
     $305 = $vc;
     $306 = $305 + 96 | 0;
     $307 = $306 + 4 | 0;
     $308 = +(+SAFE_HEAP_LOAD_D($307 | 0, 4));
     $309 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
     $310 = $308 * $309;
     $311 = $b + 4 | 0;
     $312 = +(+SAFE_HEAP_LOAD_D($311 | 0, 4));
     $313 = $310 + $312;
     $vn2 = $313;
     $314 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
     $315 = $314 >= 0.0;
     $316 = $vn2;
     $317 = $316 >= 0.0;
     $or$cond3 = $315 & $317;
     if ($or$cond3) {
      __ZmiRK6b2Vec2S1_($d7, $x, $a);
      $318 = +(+SAFE_HEAP_LOAD_D($d7 | 0, 4));
      __ZmlfRK6b2Vec2($P18, $318, $normal);
      $319 = $d7 + 4 | 0;
      $320 = +(+SAFE_HEAP_LOAD_D($319 | 0, 4));
      __ZmlfRK6b2Vec2($P29, $320, $normal);
      $321 = $mA;
      __ZplRK6b2Vec2S1_($28, $P18, $P29);
      __ZmlfRK6b2Vec2($27, $321, $28);
      __ZN6b2Vec2mIERKS_($vA, $27);
      $322 = $iA;
      $323 = $cp1;
      $324 = +__Z7b2CrossRK6b2Vec2S1_($323, $P18);
      $325 = $cp2;
      $326 = +__Z7b2CrossRK6b2Vec2S1_($325, $P29);
      $327 = $324 + $326;
      $328 = $322 * $327;
      $329 = $wA;
      $330 = $329 - $328;
      $wA = $330;
      $331 = $mB;
      __ZplRK6b2Vec2S1_($30, $P18, $P29);
      __ZmlfRK6b2Vec2($29, $331, $30);
      __ZN6b2Vec2pLERKS_($vB, $29);
      $332 = $iB;
      $333 = $cp1;
      $334 = $333 + 8 | 0;
      $335 = +__Z7b2CrossRK6b2Vec2S1_($334, $P18);
      $336 = $cp2;
      $337 = $336 + 8 | 0;
      $338 = +__Z7b2CrossRK6b2Vec2S1_($337, $P29);
      $339 = $335 + $338;
      $340 = $332 * $339;
      $341 = $wB;
      $342 = $341 + $340;
      $wB = $342;
      $343 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
      $344 = $cp1;
      $345 = $344 + 16 | 0;
      SAFE_HEAP_STORE_D($345 | 0, +$343, 4);
      $346 = $x + 4 | 0;
      $347 = +(+SAFE_HEAP_LOAD_D($346 | 0, 4));
      $348 = $cp2;
      $349 = $348 + 16 | 0;
      SAFE_HEAP_STORE_D($349 | 0, +$347, 4);
      break;
     }
     SAFE_HEAP_STORE_D($x | 0, +(0.0), 4);
     $350 = $cp2;
     $351 = $350 + 24 | 0;
     $352 = +(+SAFE_HEAP_LOAD_D($351 | 0, 4));
     $353 = -$352;
     $354 = $b + 4 | 0;
     $355 = +(+SAFE_HEAP_LOAD_D($354 | 0, 4));
     $356 = $353 * $355;
     $357 = $x + 4 | 0;
     SAFE_HEAP_STORE_D($357 | 0, +$356, 4);
     $358 = $vc;
     $359 = $358 + 96 | 0;
     $360 = $359 + 8 | 0;
     $361 = +(+SAFE_HEAP_LOAD_D($360 | 0, 4));
     $362 = $x + 4 | 0;
     $363 = +(+SAFE_HEAP_LOAD_D($362 | 0, 4));
     $364 = $361 * $363;
     $365 = +(+SAFE_HEAP_LOAD_D($b | 0, 4));
     $366 = $364 + $365;
     $vn1 = $366;
     $vn2 = 0.0;
     $367 = $x + 4 | 0;
     $368 = +(+SAFE_HEAP_LOAD_D($367 | 0, 4));
     $369 = $368 >= 0.0;
     $370 = $vn1;
     $371 = $370 >= 0.0;
     $or$cond5 = $369 & $371;
     if ($or$cond5) {
      __ZmiRK6b2Vec2S1_($d10, $x, $a);
      $372 = +(+SAFE_HEAP_LOAD_D($d10 | 0, 4));
      __ZmlfRK6b2Vec2($P111, $372, $normal);
      $373 = $d10 + 4 | 0;
      $374 = +(+SAFE_HEAP_LOAD_D($373 | 0, 4));
      __ZmlfRK6b2Vec2($P212, $374, $normal);
      $375 = $mA;
      __ZplRK6b2Vec2S1_($32, $P111, $P212);
      __ZmlfRK6b2Vec2($31, $375, $32);
      __ZN6b2Vec2mIERKS_($vA, $31);
      $376 = $iA;
      $377 = $cp1;
      $378 = +__Z7b2CrossRK6b2Vec2S1_($377, $P111);
      $379 = $cp2;
      $380 = +__Z7b2CrossRK6b2Vec2S1_($379, $P212);
      $381 = $378 + $380;
      $382 = $376 * $381;
      $383 = $wA;
      $384 = $383 - $382;
      $wA = $384;
      $385 = $mB;
      __ZplRK6b2Vec2S1_($34, $P111, $P212);
      __ZmlfRK6b2Vec2($33, $385, $34);
      __ZN6b2Vec2pLERKS_($vB, $33);
      $386 = $iB;
      $387 = $cp1;
      $388 = $387 + 8 | 0;
      $389 = +__Z7b2CrossRK6b2Vec2S1_($388, $P111);
      $390 = $cp2;
      $391 = $390 + 8 | 0;
      $392 = +__Z7b2CrossRK6b2Vec2S1_($391, $P212);
      $393 = $389 + $392;
      $394 = $386 * $393;
      $395 = $wB;
      $396 = $395 + $394;
      $wB = $396;
      $397 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
      $398 = $cp1;
      $399 = $398 + 16 | 0;
      SAFE_HEAP_STORE_D($399 | 0, +$397, 4);
      $400 = $x + 4 | 0;
      $401 = +(+SAFE_HEAP_LOAD_D($400 | 0, 4));
      $402 = $cp2;
      $403 = $402 + 16 | 0;
      SAFE_HEAP_STORE_D($403 | 0, +$401, 4);
      break;
     }
     SAFE_HEAP_STORE_D($x | 0, +(0.0), 4);
     $404 = $x + 4 | 0;
     SAFE_HEAP_STORE_D($404 | 0, +(0.0), 4);
     $405 = +(+SAFE_HEAP_LOAD_D($b | 0, 4));
     $vn1 = $405;
     $406 = $b + 4 | 0;
     $407 = +(+SAFE_HEAP_LOAD_D($406 | 0, 4));
     $vn2 = $407;
     $408 = $vn1;
     $409 = $408 >= 0.0;
     $410 = $vn2;
     $411 = $410 >= 0.0;
     $or$cond7 = $409 & $411;
     if ($or$cond7) {
      __ZmiRK6b2Vec2S1_($d13, $x, $a);
      $412 = +(+SAFE_HEAP_LOAD_D($d13 | 0, 4));
      __ZmlfRK6b2Vec2($P114, $412, $normal);
      $413 = $d13 + 4 | 0;
      $414 = +(+SAFE_HEAP_LOAD_D($413 | 0, 4));
      __ZmlfRK6b2Vec2($P215, $414, $normal);
      $415 = $mA;
      __ZplRK6b2Vec2S1_($36, $P114, $P215);
      __ZmlfRK6b2Vec2($35, $415, $36);
      __ZN6b2Vec2mIERKS_($vA, $35);
      $416 = $iA;
      $417 = $cp1;
      $418 = +__Z7b2CrossRK6b2Vec2S1_($417, $P114);
      $419 = $cp2;
      $420 = +__Z7b2CrossRK6b2Vec2S1_($419, $P215);
      $421 = $418 + $420;
      $422 = $416 * $421;
      $423 = $wA;
      $424 = $423 - $422;
      $wA = $424;
      $425 = $mB;
      __ZplRK6b2Vec2S1_($38, $P114, $P215);
      __ZmlfRK6b2Vec2($37, $425, $38);
      __ZN6b2Vec2pLERKS_($vB, $37);
      $426 = $iB;
      $427 = $cp1;
      $428 = $427 + 8 | 0;
      $429 = +__Z7b2CrossRK6b2Vec2S1_($428, $P114);
      $430 = $cp2;
      $431 = $430 + 8 | 0;
      $432 = +__Z7b2CrossRK6b2Vec2S1_($431, $P215);
      $433 = $429 + $432;
      $434 = $426 * $433;
      $435 = $wB;
      $436 = $435 + $434;
      $wB = $436;
      $437 = +(+SAFE_HEAP_LOAD_D($x | 0, 4));
      $438 = $cp1;
      $439 = $438 + 16 | 0;
      SAFE_HEAP_STORE_D($439 | 0, +$437, 4);
      $440 = $x + 4 | 0;
      $441 = +(+SAFE_HEAP_LOAD_D($440 | 0, 4));
      $442 = $cp2;
      $443 = $442 + 16 | 0;
      SAFE_HEAP_STORE_D($443 | 0, +$441, 4);
     }
    }
   }
  } while (0);
  L25 : do {
   if ((label | 0) == 10) {
    label = 0;
    $j1 = 0;
    while (1) {
     $166 = $j1;
     $167 = $pointCount;
     $168 = ($166 | 0) < ($167 | 0);
     if (!$168) {
      break L25;
     }
     $169 = $vc;
     $170 = $j1;
     $171 = $169 + ($170 * 36 | 0) | 0;
     $vcp2 = $171;
     $172 = $wB;
     $173 = $vcp2;
     $174 = $173 + 8 | 0;
     __Z7b2CrossfRK6b2Vec2($9, $172, $174);
     __ZplRK6b2Vec2S1_($8, $vB, $9);
     __ZmiRK6b2Vec2S1_($7, $8, $vA);
     $175 = $wA;
     $176 = $vcp2;
     __Z7b2CrossfRK6b2Vec2($10, $175, $176);
     __ZmiRK6b2Vec2S1_($dv3, $7, $10);
     $177 = +__Z5b2DotRK6b2Vec2S1_($dv3, $normal);
     $vn = $177;
     $178 = $vcp2;
     $179 = $178 + 24 | 0;
     $180 = +(+SAFE_HEAP_LOAD_D($179 | 0, 4));
     $181 = -$180;
     $182 = $vn;
     $183 = $vcp2;
     $184 = $183 + 32 | 0;
     $185 = +(+SAFE_HEAP_LOAD_D($184 | 0, 4));
     $186 = $182 - $185;
     $187 = $181 * $186;
     $lambda4 = $187;
     $188 = $vcp2;
     $189 = $188 + 16 | 0;
     $190 = +(+SAFE_HEAP_LOAD_D($189 | 0, 4));
     $191 = $lambda4;
     $192 = $190 + $191;
     $193 = +__Z5b2MaxIfET_S0_S0_($192, 0.0);
     $newImpulse5 = $193;
     $194 = $newImpulse5;
     $195 = $vcp2;
     $196 = $195 + 16 | 0;
     $197 = +(+SAFE_HEAP_LOAD_D($196 | 0, 4));
     $198 = $194 - $197;
     $lambda4 = $198;
     $199 = $newImpulse5;
     $200 = $vcp2;
     $201 = $200 + 16 | 0;
     SAFE_HEAP_STORE_D($201 | 0, +$199, 4);
     $202 = $lambda4;
     __ZmlfRK6b2Vec2($P6, $202, $normal);
     $203 = $mA;
     __ZmlfRK6b2Vec2($11, $203, $P6);
     __ZN6b2Vec2mIERKS_($vA, $11);
     $204 = $iA;
     $205 = $vcp2;
     $206 = +__Z7b2CrossRK6b2Vec2S1_($205, $P6);
     $207 = $204 * $206;
     $208 = $wA;
     $209 = $208 - $207;
     $wA = $209;
     $210 = $mB;
     __ZmlfRK6b2Vec2($12, $210, $P6);
     __ZN6b2Vec2pLERKS_($vB, $12);
     $211 = $iB;
     $212 = $vcp2;
     $213 = $212 + 8 | 0;
     $214 = +__Z7b2CrossRK6b2Vec2S1_($213, $P6);
     $215 = $211 * $214;
     $216 = $wB;
     $217 = $216 + $215;
     $wB = $217;
     $218 = $j1;
     $219 = $218 + 1 | 0;
     $j1 = $219;
    }
   }
  } while (0);
  $444 = $indexA;
  $445 = $39 + 28 | 0;
  $446 = SAFE_HEAP_LOAD($445 | 0, 4, 0) | 0 | 0;
  $447 = $446 + ($444 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($447 | 0, SAFE_HEAP_LOAD($vA | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($447 + 4 | 0, SAFE_HEAP_LOAD($vA + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $448 = $wA;
  $449 = $indexA;
  $450 = $39 + 28 | 0;
  $451 = SAFE_HEAP_LOAD($450 | 0, 4, 0) | 0 | 0;
  $452 = $451 + ($449 * 12 | 0) | 0;
  $453 = $452 + 8 | 0;
  SAFE_HEAP_STORE_D($453 | 0, +$448, 4);
  $454 = $indexB;
  $455 = $39 + 28 | 0;
  $456 = SAFE_HEAP_LOAD($455 | 0, 4, 0) | 0 | 0;
  $457 = $456 + ($454 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($457 | 0, SAFE_HEAP_LOAD($vB | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($457 + 4 | 0, SAFE_HEAP_LOAD($vB + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $458 = $wB;
  $459 = $indexB;
  $460 = $39 + 28 | 0;
  $461 = SAFE_HEAP_LOAD($460 | 0, 4, 0) | 0 | 0;
  $462 = $461 + ($459 * 12 | 0) | 0;
  $463 = $462 + 8 | 0;
  SAFE_HEAP_STORE_D($463 | 0, +$458, 4);
  $464 = $i;
  $465 = $464 + 1 | 0;
  $i = $465;
 }
 if ((label | 0) == 4) {
  ___assert_fail(6150 | 0, 6052 | 0, 315, 6185 | 0);
 } else if ((label | 0) == 15) {
  ___assert_fail(6210 | 0, 6052 | 0, 413, 6185 | 0);
 } else if ((label | 0) == 26) {
  STACKTOP = sp;
  return;
 }
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort();
 }
 $4 = $mem + -4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort();
 }
 $8 = $5 & -8;
 $$sum = $8 + -8 | 0;
 $9 = $mem + $$sum | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   $16 = $14 >>> 0 < $2 >>> 0;
   if ($16) {
    _abort();
   }
   $17 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
   $18 = ($14 | 0) == ($17 | 0);
   if ($18) {
    $$sum3 = $8 + -4 | 0;
    $103 = $mem + $$sum3 | 0;
    $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
    $105 = $104 & 3;
    $106 = ($105 | 0) == 3;
    if (!$106) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    SAFE_HEAP_STORE(2084 | 0, $15 | 0, 4);
    $107 = $104 & -2;
    SAFE_HEAP_STORE($103 | 0, $107 | 0, 4);
    $108 = $15 | 1;
    $$sum20 = $$sum2 + 4 | 0;
    $109 = $mem + $$sum20 | 0;
    SAFE_HEAP_STORE($109 | 0, $108 | 0, 4);
    SAFE_HEAP_STORE($9 | 0, $15 | 0, 4);
    return;
   }
   $19 = $12 >>> 3;
   $20 = $12 >>> 0 < 256;
   if ($20) {
    $$sum30 = $$sum2 + 8 | 0;
    $21 = $mem + $$sum30 | 0;
    $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
    $$sum31 = $$sum2 + 12 | 0;
    $23 = $mem + $$sum31 | 0;
    $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
    $25 = $19 << 1;
    $26 = 2116 + ($25 << 2) | 0;
    $27 = ($22 | 0) == ($26 | 0);
    if (!$27) {
     $28 = $22 >>> 0 < $2 >>> 0;
     if ($28) {
      _abort();
     }
     $29 = $22 + 12 | 0;
     $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
     $31 = ($30 | 0) == ($14 | 0);
     if (!$31) {
      _abort();
     }
    }
    $32 = ($24 | 0) == ($22 | 0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
     $36 = $35 & $34;
     SAFE_HEAP_STORE(2076 | 0, $36 | 0, 4);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    $37 = ($24 | 0) == ($26 | 0);
    if ($37) {
     $$pre60 = $24 + 8 | 0;
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = $24 >>> 0 < $2 >>> 0;
     if ($38) {
      _abort();
     }
     $39 = $24 + 8 | 0;
     $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
     $41 = ($40 | 0) == ($14 | 0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
     }
    }
    $42 = $22 + 12 | 0;
    SAFE_HEAP_STORE($42 | 0, $24 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi61Z2D | 0, $22 | 0, 4);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $$sum22 = $$sum2 + 24 | 0;
   $43 = $mem + $$sum22 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $$sum23 = $$sum2 + 12 | 0;
   $45 = $mem + $$sum23 | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = ($46 | 0) == ($14 | 0);
   do {
    if ($47) {
     $$sum25 = $$sum2 + 20 | 0;
     $57 = $mem + $$sum25 | 0;
     $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
     $59 = ($58 | 0) == (0 | 0);
     if ($59) {
      $$sum24 = $$sum2 + 16 | 0;
      $60 = $mem + $$sum24 | 0;
      $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
      $62 = ($61 | 0) == (0 | 0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
      $68 = ($67 | 0) == (0 | 0);
      if ($68) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     $69 = $RP$0$lcssa >>> 0 < $2 >>> 0;
     if ($69) {
      _abort();
     } else {
      SAFE_HEAP_STORE($RP$0$lcssa | 0, 0 | 0, 4);
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = $$sum2 + 8 | 0;
     $48 = $mem + $$sum29 | 0;
     $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
     $50 = $49 >>> 0 < $2 >>> 0;
     if ($50) {
      _abort();
     }
     $51 = $49 + 12 | 0;
     $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
     $53 = ($52 | 0) == ($14 | 0);
     if (!$53) {
      _abort();
     }
     $54 = $46 + 8 | 0;
     $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
     $56 = ($55 | 0) == ($14 | 0);
     if ($56) {
      SAFE_HEAP_STORE($51 | 0, $46 | 0, 4);
      SAFE_HEAP_STORE($54 | 0, $49 | 0, 4);
      $R$1 = $46;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $70 = ($44 | 0) == (0 | 0);
   if ($70) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $$sum26 = $$sum2 + 28 | 0;
    $71 = $mem + $$sum26 | 0;
    $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
    $73 = 2380 + ($72 << 2) | 0;
    $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
    $75 = ($14 | 0) == ($74 | 0);
    if ($75) {
     SAFE_HEAP_STORE($73 | 0, $R$1 | 0, 4);
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
      $79 = $78 & $77;
      SAFE_HEAP_STORE(2080 | 0, $79 | 0, 4);
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     $80 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $81 = $44 >>> 0 < $80 >>> 0;
     if ($81) {
      _abort();
     }
     $82 = $44 + 16 | 0;
     $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
     $84 = ($83 | 0) == ($14 | 0);
     if ($84) {
      SAFE_HEAP_STORE($82 | 0, $R$1 | 0, 4);
     } else {
      $85 = $44 + 20 | 0;
      SAFE_HEAP_STORE($85 | 0, $R$1 | 0, 4);
     }
     $86 = ($R$1 | 0) == (0 | 0);
     if ($86) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    $87 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
    $88 = $R$1 >>> 0 < $87 >>> 0;
    if ($88) {
     _abort();
    }
    $89 = $R$1 + 24 | 0;
    SAFE_HEAP_STORE($89 | 0, $44 | 0, 4);
    $$sum27 = $$sum2 + 16 | 0;
    $90 = $mem + $$sum27 | 0;
    $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
    $92 = ($91 | 0) == (0 | 0);
    do {
     if (!$92) {
      $93 = $91 >>> 0 < $87 >>> 0;
      if ($93) {
       _abort();
      } else {
       $94 = $R$1 + 16 | 0;
       SAFE_HEAP_STORE($94 | 0, $91 | 0, 4);
       $95 = $91 + 24 | 0;
       SAFE_HEAP_STORE($95 | 0, $R$1 | 0, 4);
       break;
      }
     }
    } while (0);
    $$sum28 = $$sum2 + 20 | 0;
    $96 = $mem + $$sum28 | 0;
    $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
    $98 = ($97 | 0) == (0 | 0);
    if ($98) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     $99 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $100 = $97 >>> 0 < $99 >>> 0;
     if ($100) {
      _abort();
     } else {
      $101 = $R$1 + 20 | 0;
      SAFE_HEAP_STORE($101 | 0, $97 | 0, 4);
      $102 = $97 + 24 | 0;
      SAFE_HEAP_STORE($102 | 0, $R$1 | 0, 4);
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 $110 = $p$0 >>> 0 < $9 >>> 0;
 if (!$110) {
  _abort();
 }
 $$sum19 = $8 + -4 | 0;
 $111 = $mem + $$sum19 | 0;
 $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
 $113 = $112 & 1;
 $114 = ($113 | 0) == 0;
 if ($114) {
  _abort();
 }
 $115 = $112 & 2;
 $116 = ($115 | 0) == 0;
 if ($116) {
  $117 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
  $118 = ($9 | 0) == ($117 | 0);
  if ($118) {
   $119 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
   $120 = $119 + $psize$0 | 0;
   SAFE_HEAP_STORE(2088 | 0, $120 | 0, 4);
   SAFE_HEAP_STORE(2100 | 0, $p$0 | 0, 4);
   $121 = $120 | 1;
   $122 = $p$0 + 4 | 0;
   SAFE_HEAP_STORE($122 | 0, $121 | 0, 4);
   $123 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
   $124 = ($p$0 | 0) == ($123 | 0);
   if (!$124) {
    return;
   }
   SAFE_HEAP_STORE(2096 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(2084 | 0, 0 | 0, 4);
   return;
  }
  $125 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
  $126 = ($9 | 0) == ($125 | 0);
  if ($126) {
   $127 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
   $128 = $127 + $psize$0 | 0;
   SAFE_HEAP_STORE(2084 | 0, $128 | 0, 4);
   SAFE_HEAP_STORE(2096 | 0, $p$0 | 0, 4);
   $129 = $128 | 1;
   $130 = $p$0 + 4 | 0;
   SAFE_HEAP_STORE($130 | 0, $129 | 0, 4);
   $131 = $p$0 + $128 | 0;
   SAFE_HEAP_STORE($131 | 0, $128 | 0, 4);
   return;
  }
  $132 = $112 & -8;
  $133 = $132 + $psize$0 | 0;
  $134 = $112 >>> 3;
  $135 = $112 >>> 0 < 256;
  do {
   if ($135) {
    $136 = $mem + $8 | 0;
    $137 = SAFE_HEAP_LOAD($136 | 0, 4, 0) | 0 | 0;
    $$sum1718 = $8 | 4;
    $138 = $mem + $$sum1718 | 0;
    $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
    $140 = $134 << 1;
    $141 = 2116 + ($140 << 2) | 0;
    $142 = ($137 | 0) == ($141 | 0);
    if (!$142) {
     $143 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $144 = $137 >>> 0 < $143 >>> 0;
     if ($144) {
      _abort();
     }
     $145 = $137 + 12 | 0;
     $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
     $147 = ($146 | 0) == ($9 | 0);
     if (!$147) {
      _abort();
     }
    }
    $148 = ($139 | 0) == ($137 | 0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
     $152 = $151 & $150;
     SAFE_HEAP_STORE(2076 | 0, $152 | 0, 4);
     break;
    }
    $153 = ($139 | 0) == ($141 | 0);
    if ($153) {
     $$pre58 = $139 + 8 | 0;
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $155 = $139 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort();
     }
     $156 = $139 + 8 | 0;
     $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
     $158 = ($157 | 0) == ($9 | 0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
     }
    }
    $159 = $137 + 12 | 0;
    SAFE_HEAP_STORE($159 | 0, $139 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi59Z2D | 0, $137 | 0, 4);
   } else {
    $$sum5 = $8 + 16 | 0;
    $160 = $mem + $$sum5 | 0;
    $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
    $$sum67 = $8 | 4;
    $162 = $mem + $$sum67 | 0;
    $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
    $164 = ($163 | 0) == ($9 | 0);
    do {
     if ($164) {
      $$sum9 = $8 + 12 | 0;
      $175 = $mem + $$sum9 | 0;
      $176 = SAFE_HEAP_LOAD($175 | 0, 4, 0) | 0 | 0;
      $177 = ($176 | 0) == (0 | 0);
      if ($177) {
       $$sum8 = $8 + 8 | 0;
       $178 = $mem + $$sum8 | 0;
       $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0;
       $180 = ($179 | 0) == (0 | 0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;
       $RP9$0 = $175;
      }
      while (1) {
       $181 = $R7$0 + 20 | 0;
       $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
       $183 = ($182 | 0) == (0 | 0);
       if (!$183) {
        $R7$0 = $182;
        $RP9$0 = $181;
        continue;
       }
       $184 = $R7$0 + 16 | 0;
       $185 = SAFE_HEAP_LOAD($184 | 0, 4, 0) | 0 | 0;
       $186 = ($185 | 0) == (0 | 0);
       if ($186) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;
        $RP9$0 = $184;
       }
      }
      $187 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $188 = $RP9$0$lcssa >>> 0 < $187 >>> 0;
      if ($188) {
       _abort();
      } else {
       SAFE_HEAP_STORE($RP9$0$lcssa | 0, 0 | 0, 4);
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = $mem + $8 | 0;
      $166 = SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0;
      $167 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $168 = $166 >>> 0 < $167 >>> 0;
      if ($168) {
       _abort();
      }
      $169 = $166 + 12 | 0;
      $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
      $171 = ($170 | 0) == ($9 | 0);
      if (!$171) {
       _abort();
      }
      $172 = $163 + 8 | 0;
      $173 = SAFE_HEAP_LOAD($172 | 0, 4, 0) | 0 | 0;
      $174 = ($173 | 0) == ($9 | 0);
      if ($174) {
       SAFE_HEAP_STORE($169 | 0, $163 | 0, 4);
       SAFE_HEAP_STORE($172 | 0, $166 | 0, 4);
       $R7$1 = $163;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $189 = ($161 | 0) == (0 | 0);
    if (!$189) {
     $$sum12 = $8 + 20 | 0;
     $190 = $mem + $$sum12 | 0;
     $191 = SAFE_HEAP_LOAD($190 | 0, 4, 0) | 0 | 0;
     $192 = 2380 + ($191 << 2) | 0;
     $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
     $194 = ($9 | 0) == ($193 | 0);
     if ($194) {
      SAFE_HEAP_STORE($192 | 0, $R7$1 | 0, 4);
      $cond47 = ($R7$1 | 0) == (0 | 0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
       $198 = $197 & $196;
       SAFE_HEAP_STORE(2080 | 0, $198 | 0, 4);
       break;
      }
     } else {
      $199 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $200 = $161 >>> 0 < $199 >>> 0;
      if ($200) {
       _abort();
      }
      $201 = $161 + 16 | 0;
      $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
      $203 = ($202 | 0) == ($9 | 0);
      if ($203) {
       SAFE_HEAP_STORE($201 | 0, $R7$1 | 0, 4);
      } else {
       $204 = $161 + 20 | 0;
       SAFE_HEAP_STORE($204 | 0, $R7$1 | 0, 4);
      }
      $205 = ($R7$1 | 0) == (0 | 0);
      if ($205) {
       break;
      }
     }
     $206 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $207 = $R7$1 >>> 0 < $206 >>> 0;
     if ($207) {
      _abort();
     }
     $208 = $R7$1 + 24 | 0;
     SAFE_HEAP_STORE($208 | 0, $161 | 0, 4);
     $$sum13 = $8 + 8 | 0;
     $209 = $mem + $$sum13 | 0;
     $210 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
     $211 = ($210 | 0) == (0 | 0);
     do {
      if (!$211) {
       $212 = $210 >>> 0 < $206 >>> 0;
       if ($212) {
        _abort();
       } else {
        $213 = $R7$1 + 16 | 0;
        SAFE_HEAP_STORE($213 | 0, $210 | 0, 4);
        $214 = $210 + 24 | 0;
        SAFE_HEAP_STORE($214 | 0, $R7$1 | 0, 4);
        break;
       }
      }
     } while (0);
     $$sum14 = $8 + 12 | 0;
     $215 = $mem + $$sum14 | 0;
     $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
     $217 = ($216 | 0) == (0 | 0);
     if (!$217) {
      $218 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $219 = $216 >>> 0 < $218 >>> 0;
      if ($219) {
       _abort();
      } else {
       $220 = $R7$1 + 20 | 0;
       SAFE_HEAP_STORE($220 | 0, $216 | 0, 4);
       $221 = $216 + 24 | 0;
       SAFE_HEAP_STORE($221 | 0, $R7$1 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  $222 = $133 | 1;
  $223 = $p$0 + 4 | 0;
  SAFE_HEAP_STORE($223 | 0, $222 | 0, 4);
  $224 = $p$0 + $133 | 0;
  SAFE_HEAP_STORE($224 | 0, $133 | 0, 4);
  $225 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
  $226 = ($p$0 | 0) == ($225 | 0);
  if ($226) {
   SAFE_HEAP_STORE(2084 | 0, $133 | 0, 4);
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  SAFE_HEAP_STORE($111 | 0, $227 | 0, 4);
  $228 = $psize$0 | 1;
  $229 = $p$0 + 4 | 0;
  SAFE_HEAP_STORE($229 | 0, $228 | 0, 4);
  $230 = $p$0 + $psize$0 | 0;
  SAFE_HEAP_STORE($230 | 0, $psize$0 | 0, 4);
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = $psize$1 >>> 0 < 256;
 if ($232) {
  $233 = $231 << 1;
  $234 = 2116 + ($233 << 2) | 0;
  $235 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237 | 0) == 0;
  if ($238) {
   $239 = $235 | $236;
   SAFE_HEAP_STORE(2076 | 0, $239 | 0, 4);
   $$pre = $233 + 2 | 0;
   $$pre57 = 2116 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre57;
   $F16$0 = $234;
  } else {
   $$sum11 = $233 + 2 | 0;
   $240 = 2116 + ($$sum11 << 2) | 0;
   $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
   $242 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
   $243 = $241 >>> 0 < $242 >>> 0;
   if ($243) {
    _abort();
   } else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $p$0 | 0, 4);
  $244 = $F16$0 + 12 | 0;
  SAFE_HEAP_STORE($244 | 0, $p$0 | 0, 4);
  $245 = $p$0 + 8 | 0;
  SAFE_HEAP_STORE($245 | 0, $F16$0 | 0, 4);
  $246 = $p$0 + 12 | 0;
  SAFE_HEAP_STORE($246 | 0, $234 | 0, 4);
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247 | 0) == 0;
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = $psize$1 >>> 0 > 16777215;
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = $247 + 1048320 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = $253 + 520192 | 0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = $258 + 245760 | 0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = 14 - $262 | 0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = $263 + $265 | 0;
   $267 = $266 << 1;
   $268 = $266 + 7 | 0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = 2380 + ($I18$0 << 2) | 0;
 $273 = $p$0 + 28 | 0;
 SAFE_HEAP_STORE($273 | 0, $I18$0 | 0, 4);
 $274 = $p$0 + 16 | 0;
 $275 = $p$0 + 20 | 0;
 SAFE_HEAP_STORE($275 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($274 | 0, 0 | 0, 4);
 $276 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278 | 0) == 0;
 L199 : do {
  if ($279) {
   $280 = $276 | $277;
   SAFE_HEAP_STORE(2080 | 0, $280 | 0, 4);
   SAFE_HEAP_STORE($272 | 0, $p$0 | 0, 4);
   $281 = $p$0 + 24 | 0;
   SAFE_HEAP_STORE($281 | 0, $272 | 0, 4);
   $282 = $p$0 + 12 | 0;
   SAFE_HEAP_STORE($282 | 0, $p$0 | 0, 4);
   $283 = $p$0 + 8 | 0;
   SAFE_HEAP_STORE($283 | 0, $p$0 | 0, 4);
  } else {
   $284 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
   $285 = $284 + 4 | 0;
   $286 = SAFE_HEAP_LOAD($285 | 0, 4, 0) | 0 | 0;
   $287 = $286 & -8;
   $288 = ($287 | 0) == ($psize$1 | 0);
   L202 : do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0 | 0) == 31;
     $290 = $I18$0 >>> 1;
     $291 = 25 - $290 | 0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;
     $T$051 = $284;
     while (1) {
      $300 = $K19$052 >>> 31;
      $301 = ($T$051 + 16 | 0) + ($300 << 2) | 0;
      $296 = SAFE_HEAP_LOAD($301 | 0, 4, 0) | 0 | 0;
      $302 = ($296 | 0) == (0 | 0);
      if ($302) {
       $$lcssa = $301;
       $T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = $296 + 4 | 0;
      $297 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
      $298 = $297 & -8;
      $299 = ($298 | 0) == ($psize$1 | 0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;
       $T$051 = $296;
      }
     }
     $303 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $304 = $$lcssa >>> 0 < $303 >>> 0;
     if ($304) {
      _abort();
     } else {
      SAFE_HEAP_STORE($$lcssa | 0, $p$0 | 0, 4);
      $305 = $p$0 + 24 | 0;
      SAFE_HEAP_STORE($305 | 0, $T$051$lcssa | 0, 4);
      $306 = $p$0 + 12 | 0;
      SAFE_HEAP_STORE($306 | 0, $p$0 | 0, 4);
      $307 = $p$0 + 8 | 0;
      SAFE_HEAP_STORE($307 | 0, $p$0 | 0, 4);
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0;
   $309 = SAFE_HEAP_LOAD($308 | 0, 4, 0) | 0 | 0;
   $310 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
   $311 = $309 >>> 0 >= $310 >>> 0;
   $not$ = $T$0$lcssa >>> 0 >= $310 >>> 0;
   $312 = $311 & $not$;
   if ($312) {
    $313 = $309 + 12 | 0;
    SAFE_HEAP_STORE($313 | 0, $p$0 | 0, 4);
    SAFE_HEAP_STORE($308 | 0, $p$0 | 0, 4);
    $314 = $p$0 + 8 | 0;
    SAFE_HEAP_STORE($314 | 0, $309 | 0, 4);
    $315 = $p$0 + 12 | 0;
    SAFE_HEAP_STORE($315 | 0, $T$0$lcssa | 0, 4);
    $316 = $p$0 + 24 | 0;
    SAFE_HEAP_STORE($316 | 0, 0 | 0, 4);
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $317 = SAFE_HEAP_LOAD(2108 | 0, 4, 0) | 0 | 0;
 $318 = $317 + -1 | 0;
 SAFE_HEAP_STORE(2108 | 0, $318 | 0, 4);
 $319 = ($318 | 0) == 0;
 if ($319) {
  $sp$0$in$i = 2532;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = SAFE_HEAP_LOAD($sp$0$in$i | 0, 4, 0) | 0 | 0;
  $320 = ($sp$0$i | 0) == (0 | 0);
  $321 = $sp$0$i + 8 | 0;
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 SAFE_HEAP_STORE(2108 | 0, -1 | 0, 4);
 return;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + $psize | 0;
 $1 = $p + 4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $2 & 1;
 $4 = ($3 | 0) == 0;
 do {
  if ($4) {
   $5 = SAFE_HEAP_LOAD($p | 0, 4, 0) | 0 | 0;
   $6 = $2 & 3;
   $7 = ($6 | 0) == 0;
   if ($7) {
    return;
   }
   $8 = 0 - $5 | 0;
   $9 = $p + $8 | 0;
   $10 = $5 + $psize | 0;
   $11 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
   $12 = $9 >>> 0 < $11 >>> 0;
   if ($12) {
    _abort();
   }
   $13 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
   $14 = ($9 | 0) == ($13 | 0);
   if ($14) {
    $$sum = $psize + 4 | 0;
    $99 = $p + $$sum | 0;
    $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
    $101 = $100 & 3;
    $102 = ($101 | 0) == 3;
    if (!$102) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
    SAFE_HEAP_STORE(2084 | 0, $10 | 0, 4);
    $103 = $100 & -2;
    SAFE_HEAP_STORE($99 | 0, $103 | 0, 4);
    $104 = $10 | 1;
    $$sum14 = 4 - $5 | 0;
    $105 = $p + $$sum14 | 0;
    SAFE_HEAP_STORE($105 | 0, $104 | 0, 4);
    SAFE_HEAP_STORE($0 | 0, $10 | 0, 4);
    return;
   }
   $15 = $5 >>> 3;
   $16 = $5 >>> 0 < 256;
   if ($16) {
    $$sum24 = 8 - $5 | 0;
    $17 = $p + $$sum24 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $$sum25 = 12 - $5 | 0;
    $19 = $p + $$sum25 | 0;
    $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $21 = $15 << 1;
    $22 = 2116 + ($21 << 2) | 0;
    $23 = ($18 | 0) == ($22 | 0);
    if (!$23) {
     $24 = $18 >>> 0 < $11 >>> 0;
     if ($24) {
      _abort();
     }
     $25 = $18 + 12 | 0;
     $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
     $27 = ($26 | 0) == ($9 | 0);
     if (!$27) {
      _abort();
     }
    }
    $28 = ($20 | 0) == ($18 | 0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
     $32 = $31 & $30;
     SAFE_HEAP_STORE(2076 | 0, $32 | 0, 4);
     $$0 = $9;
     $$02 = $10;
     break;
    }
    $33 = ($20 | 0) == ($22 | 0);
    if ($33) {
     $$pre51 = $20 + 8 | 0;
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = $20 >>> 0 < $11 >>> 0;
     if ($34) {
      _abort();
     }
     $35 = $20 + 8 | 0;
     $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
     $37 = ($36 | 0) == ($9 | 0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
     }
    }
    $38 = $18 + 12 | 0;
    SAFE_HEAP_STORE($38 | 0, $20 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi52Z2D | 0, $18 | 0, 4);
    $$0 = $9;
    $$02 = $10;
    break;
   }
   $$sum16 = 24 - $5 | 0;
   $39 = $p + $$sum16 | 0;
   $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
   $$sum17 = 12 - $5 | 0;
   $41 = $p + $$sum17 | 0;
   $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
   $43 = ($42 | 0) == ($9 | 0);
   do {
    if ($43) {
     $$sum18 = 16 - $5 | 0;
     $$sum19 = $$sum18 + 4 | 0;
     $53 = $p + $$sum19 | 0;
     $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
     $55 = ($54 | 0) == (0 | 0);
     if ($55) {
      $56 = $p + $$sum18 | 0;
      $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
      $58 = ($57 | 0) == (0 | 0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;
       $RP$0 = $56;
      }
     } else {
      $R$0 = $54;
      $RP$0 = $53;
     }
     while (1) {
      $59 = $R$0 + 20 | 0;
      $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
      $61 = ($60 | 0) == (0 | 0);
      if (!$61) {
       $R$0 = $60;
       $RP$0 = $59;
       continue;
      }
      $62 = $R$0 + 16 | 0;
      $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
      $64 = ($63 | 0) == (0 | 0);
      if ($64) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;
       $RP$0 = $62;
      }
     }
     $65 = $RP$0$lcssa >>> 0 < $11 >>> 0;
     if ($65) {
      _abort();
     } else {
      SAFE_HEAP_STORE($RP$0$lcssa | 0, 0 | 0, 4);
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = 8 - $5 | 0;
     $44 = $p + $$sum23 | 0;
     $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
     $46 = $45 >>> 0 < $11 >>> 0;
     if ($46) {
      _abort();
     }
     $47 = $45 + 12 | 0;
     $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
     $49 = ($48 | 0) == ($9 | 0);
     if (!$49) {
      _abort();
     }
     $50 = $42 + 8 | 0;
     $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
     $52 = ($51 | 0) == ($9 | 0);
     if ($52) {
      SAFE_HEAP_STORE($47 | 0, $42 | 0, 4);
      SAFE_HEAP_STORE($50 | 0, $45 | 0, 4);
      $R$1 = $42;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $66 = ($40 | 0) == (0 | 0);
   if ($66) {
    $$0 = $9;
    $$02 = $10;
   } else {
    $$sum20 = 28 - $5 | 0;
    $67 = $p + $$sum20 | 0;
    $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
    $69 = 2380 + ($68 << 2) | 0;
    $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
    $71 = ($9 | 0) == ($70 | 0);
    if ($71) {
     SAFE_HEAP_STORE($69 | 0, $R$1 | 0, 4);
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
      $75 = $74 & $73;
      SAFE_HEAP_STORE(2080 | 0, $75 | 0, 4);
      $$0 = $9;
      $$02 = $10;
      break;
     }
    } else {
     $76 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $77 = $40 >>> 0 < $76 >>> 0;
     if ($77) {
      _abort();
     }
     $78 = $40 + 16 | 0;
     $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
     $80 = ($79 | 0) == ($9 | 0);
     if ($80) {
      SAFE_HEAP_STORE($78 | 0, $R$1 | 0, 4);
     } else {
      $81 = $40 + 20 | 0;
      SAFE_HEAP_STORE($81 | 0, $R$1 | 0, 4);
     }
     $82 = ($R$1 | 0) == (0 | 0);
     if ($82) {
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
    $83 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
    $84 = $R$1 >>> 0 < $83 >>> 0;
    if ($84) {
     _abort();
    }
    $85 = $R$1 + 24 | 0;
    SAFE_HEAP_STORE($85 | 0, $40 | 0, 4);
    $$sum21 = 16 - $5 | 0;
    $86 = $p + $$sum21 | 0;
    $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
    $88 = ($87 | 0) == (0 | 0);
    do {
     if (!$88) {
      $89 = $87 >>> 0 < $83 >>> 0;
      if ($89) {
       _abort();
      } else {
       $90 = $R$1 + 16 | 0;
       SAFE_HEAP_STORE($90 | 0, $87 | 0, 4);
       $91 = $87 + 24 | 0;
       SAFE_HEAP_STORE($91 | 0, $R$1 | 0, 4);
       break;
      }
     }
    } while (0);
    $$sum22 = $$sum21 + 4 | 0;
    $92 = $p + $$sum22 | 0;
    $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
    $94 = ($93 | 0) == (0 | 0);
    if ($94) {
     $$0 = $9;
     $$02 = $10;
    } else {
     $95 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $96 = $93 >>> 0 < $95 >>> 0;
     if ($96) {
      _abort();
     } else {
      $97 = $R$1 + 20 | 0;
      SAFE_HEAP_STORE($97 | 0, $93 | 0, 4);
      $98 = $93 + 24 | 0;
      SAFE_HEAP_STORE($98 | 0, $R$1 | 0, 4);
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;
   $$02 = $psize;
  }
 } while (0);
 $106 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
 $107 = $0 >>> 0 < $106 >>> 0;
 if ($107) {
  _abort();
 }
 $$sum1 = $psize + 4 | 0;
 $108 = $p + $$sum1 | 0;
 $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
 $110 = $109 & 2;
 $111 = ($110 | 0) == 0;
 if ($111) {
  $112 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
  $113 = ($0 | 0) == ($112 | 0);
  if ($113) {
   $114 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
   $115 = $114 + $$02 | 0;
   SAFE_HEAP_STORE(2088 | 0, $115 | 0, 4);
   SAFE_HEAP_STORE(2100 | 0, $$0 | 0, 4);
   $116 = $115 | 1;
   $117 = $$0 + 4 | 0;
   SAFE_HEAP_STORE($117 | 0, $116 | 0, 4);
   $118 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
   $119 = ($$0 | 0) == ($118 | 0);
   if (!$119) {
    return;
   }
   SAFE_HEAP_STORE(2096 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(2084 | 0, 0 | 0, 4);
   return;
  }
  $120 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
  $121 = ($0 | 0) == ($120 | 0);
  if ($121) {
   $122 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
   $123 = $122 + $$02 | 0;
   SAFE_HEAP_STORE(2084 | 0, $123 | 0, 4);
   SAFE_HEAP_STORE(2096 | 0, $$0 | 0, 4);
   $124 = $123 | 1;
   $125 = $$0 + 4 | 0;
   SAFE_HEAP_STORE($125 | 0, $124 | 0, 4);
   $126 = $$0 + $123 | 0;
   SAFE_HEAP_STORE($126 | 0, $123 | 0, 4);
   return;
  }
  $127 = $109 & -8;
  $128 = $127 + $$02 | 0;
  $129 = $109 >>> 3;
  $130 = $109 >>> 0 < 256;
  do {
   if ($130) {
    $$sum12 = $psize + 8 | 0;
    $131 = $p + $$sum12 | 0;
    $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
    $$sum13 = $psize + 12 | 0;
    $133 = $p + $$sum13 | 0;
    $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
    $135 = $129 << 1;
    $136 = 2116 + ($135 << 2) | 0;
    $137 = ($132 | 0) == ($136 | 0);
    if (!$137) {
     $138 = $132 >>> 0 < $106 >>> 0;
     if ($138) {
      _abort();
     }
     $139 = $132 + 12 | 0;
     $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
     $141 = ($140 | 0) == ($0 | 0);
     if (!$141) {
      _abort();
     }
    }
    $142 = ($134 | 0) == ($132 | 0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
     $146 = $145 & $144;
     SAFE_HEAP_STORE(2076 | 0, $146 | 0, 4);
     break;
    }
    $147 = ($134 | 0) == ($136 | 0);
    if ($147) {
     $$pre49 = $134 + 8 | 0;
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = $134 >>> 0 < $106 >>> 0;
     if ($148) {
      _abort();
     }
     $149 = $134 + 8 | 0;
     $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
     $151 = ($150 | 0) == ($0 | 0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
     }
    }
    $152 = $132 + 12 | 0;
    SAFE_HEAP_STORE($152 | 0, $134 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi50Z2D | 0, $132 | 0, 4);
   } else {
    $$sum2 = $psize + 24 | 0;
    $153 = $p + $$sum2 | 0;
    $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
    $$sum3 = $psize + 12 | 0;
    $155 = $p + $$sum3 | 0;
    $156 = SAFE_HEAP_LOAD($155 | 0, 4, 0) | 0 | 0;
    $157 = ($156 | 0) == ($0 | 0);
    do {
     if ($157) {
      $$sum5 = $psize + 20 | 0;
      $167 = $p + $$sum5 | 0;
      $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
      $169 = ($168 | 0) == (0 | 0);
      if ($169) {
       $$sum4 = $psize + 16 | 0;
       $170 = $p + $$sum4 | 0;
       $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
       $172 = ($171 | 0) == (0 | 0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;
        $RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;
       $RP9$0 = $167;
      }
      while (1) {
       $173 = $R7$0 + 20 | 0;
       $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
       $175 = ($174 | 0) == (0 | 0);
       if (!$175) {
        $R7$0 = $174;
        $RP9$0 = $173;
        continue;
       }
       $176 = $R7$0 + 16 | 0;
       $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
       $178 = ($177 | 0) == (0 | 0);
       if ($178) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;
        $RP9$0 = $176;
       }
      }
      $179 = $RP9$0$lcssa >>> 0 < $106 >>> 0;
      if ($179) {
       _abort();
      } else {
       SAFE_HEAP_STORE($RP9$0$lcssa | 0, 0 | 0, 4);
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = $psize + 8 | 0;
      $158 = $p + $$sum11 | 0;
      $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
      $160 = $159 >>> 0 < $106 >>> 0;
      if ($160) {
       _abort();
      }
      $161 = $159 + 12 | 0;
      $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
      $163 = ($162 | 0) == ($0 | 0);
      if (!$163) {
       _abort();
      }
      $164 = $156 + 8 | 0;
      $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
      $166 = ($165 | 0) == ($0 | 0);
      if ($166) {
       SAFE_HEAP_STORE($161 | 0, $156 | 0, 4);
       SAFE_HEAP_STORE($164 | 0, $159 | 0, 4);
       $R7$1 = $156;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $180 = ($154 | 0) == (0 | 0);
    if (!$180) {
     $$sum8 = $psize + 28 | 0;
     $181 = $p + $$sum8 | 0;
     $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
     $183 = 2380 + ($182 << 2) | 0;
     $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
     $185 = ($0 | 0) == ($184 | 0);
     if ($185) {
      SAFE_HEAP_STORE($183 | 0, $R7$1 | 0, 4);
      $cond39 = ($R7$1 | 0) == (0 | 0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
       $189 = $188 & $187;
       SAFE_HEAP_STORE(2080 | 0, $189 | 0, 4);
       break;
      }
     } else {
      $190 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $191 = $154 >>> 0 < $190 >>> 0;
      if ($191) {
       _abort();
      }
      $192 = $154 + 16 | 0;
      $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
      $194 = ($193 | 0) == ($0 | 0);
      if ($194) {
       SAFE_HEAP_STORE($192 | 0, $R7$1 | 0, 4);
      } else {
       $195 = $154 + 20 | 0;
       SAFE_HEAP_STORE($195 | 0, $R7$1 | 0, 4);
      }
      $196 = ($R7$1 | 0) == (0 | 0);
      if ($196) {
       break;
      }
     }
     $197 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $198 = $R7$1 >>> 0 < $197 >>> 0;
     if ($198) {
      _abort();
     }
     $199 = $R7$1 + 24 | 0;
     SAFE_HEAP_STORE($199 | 0, $154 | 0, 4);
     $$sum9 = $psize + 16 | 0;
     $200 = $p + $$sum9 | 0;
     $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
     $202 = ($201 | 0) == (0 | 0);
     do {
      if (!$202) {
       $203 = $201 >>> 0 < $197 >>> 0;
       if ($203) {
        _abort();
       } else {
        $204 = $R7$1 + 16 | 0;
        SAFE_HEAP_STORE($204 | 0, $201 | 0, 4);
        $205 = $201 + 24 | 0;
        SAFE_HEAP_STORE($205 | 0, $R7$1 | 0, 4);
        break;
       }
      }
     } while (0);
     $$sum10 = $psize + 20 | 0;
     $206 = $p + $$sum10 | 0;
     $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
     $208 = ($207 | 0) == (0 | 0);
     if (!$208) {
      $209 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
      $210 = $207 >>> 0 < $209 >>> 0;
      if ($210) {
       _abort();
      } else {
       $211 = $R7$1 + 20 | 0;
       SAFE_HEAP_STORE($211 | 0, $207 | 0, 4);
       $212 = $207 + 24 | 0;
       SAFE_HEAP_STORE($212 | 0, $R7$1 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  $213 = $128 | 1;
  $214 = $$0 + 4 | 0;
  SAFE_HEAP_STORE($214 | 0, $213 | 0, 4);
  $215 = $$0 + $128 | 0;
  SAFE_HEAP_STORE($215 | 0, $128 | 0, 4);
  $216 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
  $217 = ($$0 | 0) == ($216 | 0);
  if ($217) {
   SAFE_HEAP_STORE(2084 | 0, $128 | 0, 4);
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  SAFE_HEAP_STORE($108 | 0, $218 | 0, 4);
  $219 = $$02 | 1;
  $220 = $$0 + 4 | 0;
  SAFE_HEAP_STORE($220 | 0, $219 | 0, 4);
  $221 = $$0 + $$02 | 0;
  SAFE_HEAP_STORE($221 | 0, $$02 | 0, 4);
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = $$1 >>> 0 < 256;
 if ($223) {
  $224 = $222 << 1;
  $225 = 2116 + ($224 << 2) | 0;
  $226 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228 | 0) == 0;
  if ($229) {
   $230 = $226 | $227;
   SAFE_HEAP_STORE(2076 | 0, $230 | 0, 4);
   $$pre = $224 + 2 | 0;
   $$pre48 = 2116 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre48;
   $F16$0 = $225;
  } else {
   $$sum7 = $224 + 2 | 0;
   $231 = 2116 + ($$sum7 << 2) | 0;
   $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
   $233 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
   $234 = $232 >>> 0 < $233 >>> 0;
   if ($234) {
    _abort();
   } else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $$0 | 0, 4);
  $235 = $F16$0 + 12 | 0;
  SAFE_HEAP_STORE($235 | 0, $$0 | 0, 4);
  $236 = $$0 + 8 | 0;
  SAFE_HEAP_STORE($236 | 0, $F16$0 | 0, 4);
  $237 = $$0 + 12 | 0;
  SAFE_HEAP_STORE($237 | 0, $225 | 0, 4);
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238 | 0) == 0;
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = $$1 >>> 0 > 16777215;
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = $238 + 1048320 | 0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = $244 + 520192 | 0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = $249 + 245760 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = 14 - $253 | 0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = $254 + $256 | 0;
   $258 = $257 << 1;
   $259 = $257 + 7 | 0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = 2380 + ($I19$0 << 2) | 0;
 $264 = $$0 + 28 | 0;
 SAFE_HEAP_STORE($264 | 0, $I19$0 | 0, 4);
 $265 = $$0 + 16 | 0;
 $266 = $$0 + 20 | 0;
 SAFE_HEAP_STORE($266 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($265 | 0, 0 | 0, 4);
 $267 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269 | 0) == 0;
 if ($270) {
  $271 = $267 | $268;
  SAFE_HEAP_STORE(2080 | 0, $271 | 0, 4);
  SAFE_HEAP_STORE($263 | 0, $$0 | 0, 4);
  $272 = $$0 + 24 | 0;
  SAFE_HEAP_STORE($272 | 0, $263 | 0, 4);
  $273 = $$0 + 12 | 0;
  SAFE_HEAP_STORE($273 | 0, $$0 | 0, 4);
  $274 = $$0 + 8 | 0;
  SAFE_HEAP_STORE($274 | 0, $$0 | 0, 4);
  return;
 }
 $275 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
 $276 = $275 + 4 | 0;
 $277 = SAFE_HEAP_LOAD($276 | 0, 4, 0) | 0 | 0;
 $278 = $277 & -8;
 $279 = ($278 | 0) == ($$1 | 0);
 L191 : do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0 | 0) == 31;
   $281 = $I19$0 >>> 1;
   $282 = 25 - $281 | 0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;
   $T$042 = $275;
   while (1) {
    $291 = $K20$043 >>> 31;
    $292 = ($T$042 + 16 | 0) + ($291 << 2) | 0;
    $287 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
    $293 = ($287 | 0) == (0 | 0);
    if ($293) {
     $$lcssa = $292;
     $T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = $287 + 4 | 0;
    $288 = SAFE_HEAP_LOAD($286 | 0, 4, 0) | 0 | 0;
    $289 = $288 & -8;
    $290 = ($289 | 0) == ($$1 | 0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;
     $T$042 = $287;
    }
   }
   $294 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
   $295 = $$lcssa >>> 0 < $294 >>> 0;
   if ($295) {
    _abort();
   }
   SAFE_HEAP_STORE($$lcssa | 0, $$0 | 0, 4);
   $296 = $$0 + 24 | 0;
   SAFE_HEAP_STORE($296 | 0, $T$042$lcssa | 0, 4);
   $297 = $$0 + 12 | 0;
   SAFE_HEAP_STORE($297 | 0, $$0 | 0, 4);
   $298 = $$0 + 8 | 0;
   SAFE_HEAP_STORE($298 | 0, $$0 | 0, 4);
   return;
  }
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = SAFE_HEAP_LOAD($299 | 0, 4, 0) | 0 | 0;
 $301 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
 $302 = $300 >>> 0 >= $301 >>> 0;
 $not$ = $T$0$lcssa >>> 0 >= $301 >>> 0;
 $303 = $302 & $not$;
 if (!$303) {
  _abort();
 }
 $304 = $300 + 12 | 0;
 SAFE_HEAP_STORE($304 | 0, $$0 | 0, 4);
 SAFE_HEAP_STORE($299 | 0, $$0 | 0, 4);
 $305 = $$0 + 8 | 0;
 SAFE_HEAP_STORE($305 | 0, $300 | 0, 4);
 $306 = $$0 + 12 | 0;
 SAFE_HEAP_STORE($306 | 0, $T$0$lcssa | 0, 4);
 $307 = $$0 + 24 | 0;
 SAFE_HEAP_STORE($307 | 0, 0 | 0, 4);
 return;
}

function __ZN7b2World5SolveERK10b2TimeStep($this, $step) {
 $this = $this | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b1 = 0, $b3 = 0, $b4 = 0, $c = 0, $ce = 0, $contact = 0, $i = 0, $island = 0, $j = 0, $je = 0;
 var $other = 0, $other2 = 0, $profile = 0, $seed = 0, $sensorA = 0, $sensorB = 0, $stack = 0, $stackCount = 0, $stackSize = 0, $timer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $island = sp + 108 | 0;
 $profile = sp + 16 | 0;
 $timer = sp + 168 | 0;
 $0 = $this;
 $1 = $step;
 $4 = $0;
 $5 = $4 + 102996 | 0;
 $6 = $5 + 12 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +(0.0), 4);
 $7 = $4 + 102996 | 0;
 $8 = $7 + 16 | 0;
 SAFE_HEAP_STORE_D($8 | 0, +(0.0), 4);
 $9 = $4 + 102996 | 0;
 $10 = $9 + 20 | 0;
 SAFE_HEAP_STORE_D($10 | 0, +(0.0), 4);
 $11 = $4 + 102960 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $4 + 102872 | 0;
 $14 = $13 + 64 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $4 + 102964 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = $4 + 68 | 0;
 $19 = $4 + 102872 | 0;
 $20 = $19 + 72 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($island, $12, $15, $17, $18, $21);
 $22 = $4 + 102952 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $b = $23;
 while (1) {
  $24 = $b;
  $25 = ($24 | 0) != (0 | 0);
  if (!$25) {
   break;
  }
  $26 = $b;
  $27 = $26 + 4 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 2, 0) | 0 | 0;
  $29 = $28 & 65535;
  $30 = $29 & -2;
  $31 = $30 & 65535;
  SAFE_HEAP_STORE($27 | 0, $31 | 0, 2);
  $32 = $b;
  $33 = $32 + 96 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $b = $34;
 }
 $35 = $4 + 102872 | 0;
 $36 = $35 + 60 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $c = $37;
 while (1) {
  $38 = $c;
  $39 = ($38 | 0) != (0 | 0);
  if (!$39) {
   break;
  }
  $40 = $c;
  $41 = $40 + 4 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = $42 & -2;
  SAFE_HEAP_STORE($41 | 0, $43 | 0, 4);
  $44 = $c;
  $45 = $44 + 12 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $c = $46;
 }
 $47 = $4 + 102956 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $j = $48;
 while (1) {
  $49 = $j;
  $50 = ($49 | 0) != (0 | 0);
  if (!$50) {
   break;
  }
  $51 = $j;
  $52 = $51 + 60 | 0;
  SAFE_HEAP_STORE($52 >> 0 | 0, 0 | 0, 1);
  $53 = $j;
  $54 = $53 + 12 | 0;
  $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
  $j = $55;
 }
 $56 = $4 + 102960 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $stackSize = $57;
 $58 = $4 + 68 | 0;
 $59 = $stackSize;
 $60 = $59 << 2;
 __THREW__ = 0;
 $61 = invoke_iii(165, $58 | 0, $60 | 0) | 0;
 $62 = __THREW__;
 __THREW__ = 0;
 $63 = $62 & 1;
 L13 : do {
  if (!$63) {
   $stack = $61;
   $64 = $4 + 102952 | 0;
   $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
   $seed = $65;
   L15 : while (1) {
    $66 = $seed;
    $67 = ($66 | 0) != (0 | 0);
    if (!$67) {
     label = 65;
     break;
    }
    $68 = $seed;
    $69 = $68 + 4 | 0;
    $70 = SAFE_HEAP_LOAD($69 | 0, 2, 0) | 0 | 0;
    $71 = $70 & 65535;
    $72 = $71 & 1;
    $73 = ($72 | 0) != 0;
    L18 : do {
     if (!$73) {
      $78 = $seed;
      __THREW__ = 0;
      $79 = invoke_ii(166, $78 | 0) | 0;
      $80 = __THREW__;
      __THREW__ = 0;
      $81 = $80 & 1;
      if ($81) {
       break L13;
      }
      $82 = $79 & 1;
      $83 = ($82 | 0) == 0;
      if (!$83) {
       $84 = $seed;
       __THREW__ = 0;
       $85 = invoke_ii(167, $84 | 0) | 0;
       $86 = __THREW__;
       __THREW__ = 0;
       $87 = $86 & 1;
       if ($87) {
        break L13;
       }
       $88 = $85 & 1;
       $89 = ($88 | 0) == 0;
       if (!$89) {
        $90 = $seed;
        __THREW__ = 0;
        $91 = invoke_ii(159, $90 | 0) | 0;
        $92 = __THREW__;
        __THREW__ = 0;
        $93 = $92 & 1;
        if ($93) {
         break L13;
        }
        $94 = ($91 | 0) == 0;
        if (!$94) {
         __THREW__ = 0;
         invoke_vi(168, $island | 0);
         $95 = __THREW__;
         __THREW__ = 0;
         $96 = $95 & 1;
         if ($96) {
          break L13;
         }
         $stackCount = 0;
         $97 = $seed;
         $98 = $stackCount;
         $99 = $98 + 1 | 0;
         $stackCount = $99;
         $100 = $stack;
         $101 = $100 + ($98 << 2) | 0;
         SAFE_HEAP_STORE($101 | 0, $97 | 0, 4);
         $102 = $seed;
         $103 = $102 + 4 | 0;
         $104 = SAFE_HEAP_LOAD($103 | 0, 2, 0) | 0 | 0;
         $105 = $104 & 65535;
         $106 = $105 | 1;
         $107 = $106 & 65535;
         SAFE_HEAP_STORE($103 | 0, $107 | 0, 2);
         L27 : while (1) {
          $108 = $stackCount;
          $109 = ($108 | 0) > 0;
          if (!$109) {
           break;
          }
          $110 = $stackCount;
          $111 = $110 + -1 | 0;
          $stackCount = $111;
          $112 = $stack;
          $113 = $112 + ($111 << 2) | 0;
          $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
          $b1 = $114;
          $115 = $b1;
          __THREW__ = 0;
          $116 = invoke_ii(167, $115 | 0) | 0;
          $117 = __THREW__;
          __THREW__ = 0;
          $118 = $117 & 1;
          if ($118) {
           break L13;
          }
          $119 = $116 & 1;
          $120 = ($119 | 0) == 1;
          if (!$120) {
           label = 26;
           break L15;
          }
          $122 = $b1;
          __THREW__ = 0;
          invoke_vii(169, $island | 0, $122 | 0);
          $123 = __THREW__;
          __THREW__ = 0;
          $124 = $123 & 1;
          if ($124) {
           break L13;
          }
          $125 = $b1;
          __THREW__ = 0;
          invoke_vii(161, $125 | 0, 1);
          $126 = __THREW__;
          __THREW__ = 0;
          $127 = $126 & 1;
          if ($127) {
           break L13;
          }
          $128 = $b1;
          __THREW__ = 0;
          $129 = invoke_ii(159, $128 | 0) | 0;
          $130 = __THREW__;
          __THREW__ = 0;
          $131 = $130 & 1;
          if ($131) {
           break L13;
          }
          $132 = ($129 | 0) == 0;
          if ($132) {
           continue;
          }
          $133 = $b1;
          $134 = $133 + 112 | 0;
          $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
          $ce = $135;
          while (1) {
           $136 = $ce;
           $137 = ($136 | 0) != (0 | 0);
           if (!$137) {
            break;
           }
           $138 = $ce;
           $139 = $138 + 4 | 0;
           $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
           $contact = $140;
           $141 = $contact;
           $142 = $141 + 4 | 0;
           $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
           $144 = $143 & 1;
           $145 = ($144 | 0) != 0;
           do {
            if (!$145) {
             $146 = $contact;
             __THREW__ = 0;
             $147 = invoke_ii(170, $146 | 0) | 0;
             $148 = __THREW__;
             __THREW__ = 0;
             $149 = $148 & 1;
             if ($149) {
              break L13;
             }
             $150 = $147 & 1;
             $151 = ($150 | 0) == 0;
             if ($151) {
              break;
             }
             $152 = $contact;
             __THREW__ = 0;
             $153 = invoke_ii(171, $152 | 0) | 0;
             $154 = __THREW__;
             __THREW__ = 0;
             $155 = $154 & 1;
             if ($155) {
              break L13;
             }
             $156 = $153 & 1;
             $157 = ($156 | 0) == 0;
             if ($157) {
              break;
             }
             $158 = $contact;
             $159 = $158 + 48 | 0;
             $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
             $161 = $160 + 38 | 0;
             $162 = SAFE_HEAP_LOAD($161 >> 0 | 0, 1, 0) | 0 | 0;
             $163 = $162 & 1;
             $164 = $163 & 1;
             $sensorA = $164;
             $165 = $contact;
             $166 = $165 + 52 | 0;
             $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
             $168 = $167 + 38 | 0;
             $169 = SAFE_HEAP_LOAD($168 >> 0 | 0, 1, 0) | 0 | 0;
             $170 = $169 & 1;
             $171 = $170 & 1;
             $sensorB = $171;
             $172 = $sensorA;
             $173 = $172 & 1;
             if ($173) {
              break;
             }
             $174 = $sensorB;
             $175 = $174 & 1;
             if ($175) {
              break;
             }
             $176 = $contact;
             __THREW__ = 0;
             invoke_vii(172, $island | 0, $176 | 0);
             $177 = __THREW__;
             __THREW__ = 0;
             $178 = $177 & 1;
             if ($178) {
              break L13;
             }
             $179 = $contact;
             $180 = $179 + 4 | 0;
             $181 = SAFE_HEAP_LOAD($180 | 0, 4, 0) | 0 | 0;
             $182 = $181 | 1;
             SAFE_HEAP_STORE($180 | 0, $182 | 0, 4);
             $183 = $ce;
             $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
             $other = $184;
             $185 = $other;
             $186 = $185 + 4 | 0;
             $187 = SAFE_HEAP_LOAD($186 | 0, 2, 0) | 0 | 0;
             $188 = $187 & 65535;
             $189 = $188 & 1;
             $190 = ($189 | 0) != 0;
             if ($190) {
              break;
             }
             $191 = $stackCount;
             $192 = $stackSize;
             $193 = ($191 | 0) < ($192 | 0);
             if (!$193) {
              label = 43;
              break L15;
             }
             $195 = $other;
             $196 = $stackCount;
             $197 = $196 + 1 | 0;
             $stackCount = $197;
             $198 = $stack;
             $199 = $198 + ($196 << 2) | 0;
             SAFE_HEAP_STORE($199 | 0, $195 | 0, 4);
             $200 = $other;
             $201 = $200 + 4 | 0;
             $202 = SAFE_HEAP_LOAD($201 | 0, 2, 0) | 0 | 0;
             $203 = $202 & 65535;
             $204 = $203 | 1;
             $205 = $204 & 65535;
             SAFE_HEAP_STORE($201 | 0, $205 | 0, 2);
            }
           } while (0);
           $206 = $ce;
           $207 = $206 + 12 | 0;
           $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
           $ce = $208;
          }
          $209 = $b1;
          $210 = $209 + 108 | 0;
          $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
          $je = $211;
          while (1) {
           $212 = $je;
           $213 = ($212 | 0) != (0 | 0);
           if (!$213) {
            continue L27;
           }
           $214 = $je;
           $215 = $214 + 4 | 0;
           $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
           $217 = $216 + 60 | 0;
           $218 = SAFE_HEAP_LOAD($217 >> 0 | 0, 1, 0) | 0 | 0;
           $219 = $218 & 1;
           $220 = $219 & 1;
           $221 = ($220 | 0) == 1;
           do {
            if (!$221) {
             $222 = $je;
             $223 = SAFE_HEAP_LOAD($222 | 0, 4, 0) | 0 | 0;
             $other2 = $223;
             $224 = $other2;
             __THREW__ = 0;
             $225 = invoke_ii(167, $224 | 0) | 0;
             $226 = __THREW__;
             __THREW__ = 0;
             $227 = $226 & 1;
             if ($227) {
              break L13;
             }
             $228 = $225 & 1;
             $229 = ($228 | 0) == 0;
             if ($229) {
              break;
             }
             $230 = $je;
             $231 = $230 + 4 | 0;
             $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
             __THREW__ = 0;
             invoke_vii(173, $island | 0, $232 | 0);
             $233 = __THREW__;
             __THREW__ = 0;
             $234 = $233 & 1;
             if ($234) {
              break L13;
             }
             $235 = $je;
             $236 = $235 + 4 | 0;
             $237 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
             $238 = $237 + 60 | 0;
             SAFE_HEAP_STORE($238 >> 0 | 0, 1 | 0, 1);
             $239 = $other2;
             $240 = $239 + 4 | 0;
             $241 = SAFE_HEAP_LOAD($240 | 0, 2, 0) | 0 | 0;
             $242 = $241 & 65535;
             $243 = $242 & 1;
             $244 = ($243 | 0) != 0;
             if ($244) {
              break;
             }
             $245 = $stackCount;
             $246 = $stackSize;
             $247 = ($245 | 0) < ($246 | 0);
             if (!$247) {
              label = 54;
              break L15;
             }
             $249 = $other2;
             $250 = $stackCount;
             $251 = $250 + 1 | 0;
             $stackCount = $251;
             $252 = $stack;
             $253 = $252 + ($250 << 2) | 0;
             SAFE_HEAP_STORE($253 | 0, $249 | 0, 4);
             $254 = $other2;
             $255 = $254 + 4 | 0;
             $256 = SAFE_HEAP_LOAD($255 | 0, 2, 0) | 0 | 0;
             $257 = $256 & 65535;
             $258 = $257 | 1;
             $259 = $258 & 65535;
             SAFE_HEAP_STORE($255 | 0, $259 | 0, 2);
            }
           } while (0);
           $260 = $je;
           $261 = $260 + 12 | 0;
           $262 = SAFE_HEAP_LOAD($261 | 0, 4, 0) | 0 | 0;
           $je = $262;
          }
         }
         $263 = $1;
         $264 = $4 + 102968 | 0;
         $265 = $4 + 102976 | 0;
         $266 = SAFE_HEAP_LOAD($265 >> 0 | 0, 1, 0) | 0 | 0;
         $267 = $266 & 1;
         __THREW__ = 0;
         invoke_viiiii(174, $island | 0, $profile | 0, $263 | 0, $264 | 0, $267 | 0);
         $268 = __THREW__;
         __THREW__ = 0;
         $269 = $268 & 1;
         if ($269) {
          break L13;
         }
         $270 = $profile + 12 | 0;
         $271 = +(+SAFE_HEAP_LOAD_D($270 | 0, 4));
         $272 = $4 + 102996 | 0;
         $273 = $272 + 12 | 0;
         $274 = +(+SAFE_HEAP_LOAD_D($273 | 0, 4));
         $275 = $274 + $271;
         SAFE_HEAP_STORE_D($273 | 0, +$275, 4);
         $276 = $profile + 16 | 0;
         $277 = +(+SAFE_HEAP_LOAD_D($276 | 0, 4));
         $278 = $4 + 102996 | 0;
         $279 = $278 + 16 | 0;
         $280 = +(+SAFE_HEAP_LOAD_D($279 | 0, 4));
         $281 = $280 + $277;
         SAFE_HEAP_STORE_D($279 | 0, +$281, 4);
         $282 = $profile + 20 | 0;
         $283 = +(+SAFE_HEAP_LOAD_D($282 | 0, 4));
         $284 = $4 + 102996 | 0;
         $285 = $284 + 20 | 0;
         $286 = +(+SAFE_HEAP_LOAD_D($285 | 0, 4));
         $287 = $286 + $283;
         SAFE_HEAP_STORE_D($285 | 0, +$287, 4);
         $i = 0;
         while (1) {
          $288 = $i;
          $289 = $island + 28 | 0;
          $290 = SAFE_HEAP_LOAD($289 | 0, 4, 0) | 0 | 0;
          $291 = ($288 | 0) < ($290 | 0);
          if (!$291) {
           break L18;
          }
          $292 = $i;
          $293 = $island + 8 | 0;
          $294 = SAFE_HEAP_LOAD($293 | 0, 4, 0) | 0 | 0;
          $295 = $294 + ($292 << 2) | 0;
          $296 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
          $b3 = $296;
          $297 = $b3;
          __THREW__ = 0;
          $298 = invoke_ii(159, $297 | 0) | 0;
          $299 = __THREW__;
          __THREW__ = 0;
          $300 = $299 & 1;
          if ($300) {
           break L13;
          }
          $301 = ($298 | 0) == 0;
          if ($301) {
           $302 = $b3;
           $303 = $302 + 4 | 0;
           $304 = SAFE_HEAP_LOAD($303 | 0, 2, 0) | 0 | 0;
           $305 = $304 & 65535;
           $306 = $305 & -2;
           $307 = $306 & 65535;
           SAFE_HEAP_STORE($303 | 0, $307 | 0, 2);
          }
          $308 = $i;
          $309 = $308 + 1 | 0;
          $i = $309;
         }
        }
       }
      }
     }
    } while (0);
    $310 = $seed;
    $311 = $310 + 96 | 0;
    $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
    $seed = $312;
   }
   if ((label | 0) == 26) {
    __THREW__ = 0;
    invoke_viiii(142, 6428 | 0, 6366 | 0, 445, 6450 | 0);
    $121 = __THREW__;
    __THREW__ = 0;
    break;
   } else if ((label | 0) == 43) {
    __THREW__ = 0;
    invoke_viiii(142, 6456 | 0, 6366 | 0, 495, 6450 | 0);
    $194 = __THREW__;
    __THREW__ = 0;
    break;
   } else if ((label | 0) == 54) {
    __THREW__ = 0;
    invoke_viiii(142, 6456 | 0, 6366 | 0, 524, 6450 | 0);
    $248 = __THREW__;
    __THREW__ = 0;
    break;
   } else if ((label | 0) == 65) {
    $313 = $4 + 68 | 0;
    $314 = $stack;
    __THREW__ = 0;
    invoke_vii(143, $313 | 0, $314 | 0);
    $315 = __THREW__;
    __THREW__ = 0;
    $316 = $315 & 1;
    if ($316) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(175, $timer | 0);
    $317 = __THREW__;
    __THREW__ = 0;
    $318 = $317 & 1;
    if ($318) {
     break;
    }
    $319 = $4 + 102952 | 0;
    $320 = SAFE_HEAP_LOAD($319 | 0, 4, 0) | 0 | 0;
    $b4 = $320;
    while (1) {
     $321 = $b4;
     $322 = ($321 | 0) != (0 | 0);
     if (!$322) {
      break;
     }
     $323 = $b4;
     $324 = $323 + 4 | 0;
     $325 = SAFE_HEAP_LOAD($324 | 0, 2, 0) | 0 | 0;
     $326 = $325 & 65535;
     $327 = $326 & 1;
     $328 = ($327 | 0) == 0;
     if (!$328) {
      $329 = $b4;
      __THREW__ = 0;
      $330 = invoke_ii(159, $329 | 0) | 0;
      $331 = __THREW__;
      __THREW__ = 0;
      $332 = $331 & 1;
      if ($332) {
       break L13;
      }
      $333 = ($330 | 0) == 0;
      if (!$333) {
       $334 = $b4;
       __THREW__ = 0;
       invoke_vi(176, $334 | 0);
       $335 = __THREW__;
       __THREW__ = 0;
       $336 = $335 & 1;
       if ($336) {
        break L13;
       }
      }
     }
     $337 = $b4;
     __THREW__ = 0;
     $338 = invoke_ii(177, $337 | 0) | 0;
     $339 = __THREW__;
     __THREW__ = 0;
     $340 = $339 & 1;
     if ($340) {
      break L13;
     }
     $b4 = $338;
    }
    $341 = $4 + 102872 | 0;
    __THREW__ = 0;
    invoke_vi(178, $341 | 0);
    $342 = __THREW__;
    __THREW__ = 0;
    $343 = $342 & 1;
    if ($343) {
     break;
    }
    __THREW__ = 0;
    $344 = +invoke_di(146, $timer | 0);
    $345 = __THREW__;
    __THREW__ = 0;
    $346 = $345 & 1;
    if ($346) {
     break;
    }
    $347 = $4 + 102996 | 0;
    $348 = $347 + 24 | 0;
    SAFE_HEAP_STORE_D($348 | 0, +$344, 4);
    __ZN8b2IslandD2Ev($island);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $74 = ___cxa_find_matching_catch() | 0;
 $75 = tempRet0;
 $2 = $74;
 $3 = $75;
 __ZN8b2IslandD2Ev($island);
 $76 = $2;
 $77 = $3;
 ___resumeException($76 | 0);
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i15 = 0, $$0$i$i$i7 = 0, $$0$i$i$i9 = 0, $$0$i$i58 = 0, $$02 = 0, $$03 = 0, $$lcssa = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$lcssa78 = 0, $$lcssa81 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i57 = 0, $__p$0$ph$i$i = 0, $__v$i$i = 0, $__v$i$i13 = 0;
 var $__v$i$i6 = 0, $__v$i$i8 = 0, $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i18$index7Z2D = 0, $eh$lpad$body$i$i18$indexZ2D = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $scevgep2$i$i = 0, $sub$061 = 0, $sub$061$lcssa = 0, $t1$060 = 0, $t1$060$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i13 = sp + 124 | 0;
 $__v$i$i8 = sp + 104 | 0;
 $__v$i$i6 = sp + 84 | 0;
 $__v$i$i = sp + 64 | 0;
 $0 = sp + 40 | 0;
 $1 = sp + 16 | 0;
 $2 = sp;
 $3 = $last;
 $4 = $first;
 $5 = $3 - $4 | 0;
 $6 = ($5 | 0) > 1;
 L1 : do {
  if ($6) {
   $7 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $8 = $7 << 24 >> 24 == 84;
   if ($8) {
    $9 = $first + 1 | 0;
    $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
    $11 = $10 << 24 >> 24 == 95;
    do {
     if ($11) {
      $12 = $db + 32 | 0;
      $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
      $14 = $db + 36 | 0;
      $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
      $16 = ($13 | 0) == ($15 | 0);
      if ($16) {
       $$0 = $first;
       break L1;
      }
      $17 = $15 + -16 | 0;
      $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
      $19 = $15 + -12 | 0;
      $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
      $21 = ($18 | 0) == ($20 | 0);
      if ($21) {
       SAFE_HEAP_STORE($0 >> 0 | 0, 4 | 0, 1);
       $68 = $0 + 1 | 0;
       SAFE_HEAP_STORE($68 >> 0 | 0, 24404 & 255 | 0, 1);
       SAFE_HEAP_STORE($68 + 1 >> 0 | 0, 24404 >> 8 | 0, 1);
       $69 = $0 + 3 | 0;
       SAFE_HEAP_STORE($69 >> 0 | 0, 0 | 0, 1);
       $70 = $0 + 12 | 0;
       SAFE_HEAP_STORE($70 | 0, 0 | 0, 4);
       $71 = $70 + 4 | 0;
       SAFE_HEAP_STORE($71 | 0, 0 | 0, 4);
       $72 = $70 + 8 | 0;
       SAFE_HEAP_STORE($72 | 0, 0 | 0, 4);
       $73 = $db + 4 | 0;
       $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
       $75 = $db + 8 | 0;
       $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
       $77 = $74 >>> 0 < $76 >>> 0;
       if ($77) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($74, $0);
        $78 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
        $79 = $78 + 24 | 0;
        SAFE_HEAP_STORE($73 | 0, $79 | 0, 4);
       } else {
        $80 = $db + 12 | 0;
        $81 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $82 = $74;
        $83 = $81;
        $84 = $82 - $83 | 0;
        $85 = ($84 | 0) / 24 & -1;
        $86 = $85 + 1 | 0;
        $87 = ($84 | 0) < -24;
        if ($87) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $88 = __THREW__;
         __THREW__ = 0;
         $89 = ___cxa_find_matching_catch() | 0;
         $90 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         $$02 = $90;
         $$03 = $89;
         break;
        }
        $91 = $76;
        $92 = $91 - $83 | 0;
        $93 = ($92 | 0) / 24 & -1;
        $94 = $93 >>> 0 < 1073741823;
        if ($94) {
         $95 = $93 << 1;
         $96 = $95 >>> 0 < $86 >>> 0;
         $97 = $96 ? $86 : $95;
         $$0$i$i$i9 = $97;
        } else {
         $$0$i$i$i9 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i8, $$0$i$i$i9, $85, $80);
        $98 = $__v$i$i8 + 8 | 0;
        $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($99, $0);
        $100 = $99 + 24 | 0;
        SAFE_HEAP_STORE($98 | 0, $100 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i8);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i8);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       $101 = $first + 2 | 0;
       $102 = $db + 62 | 0;
       SAFE_HEAP_STORE($102 >> 0 | 0, 1 | 0, 1);
       $$0 = $101;
       break L1;
      }
      $22 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
      $23 = $18 + 4 | 0;
      $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
      $25 = $db + 4 | 0;
      $26 = $db + 8 | 0;
      $27 = $db + 12 | 0;
      $28 = $__v$i$i6 + 8 | 0;
      $29 = ($22 | 0) == ($24 | 0);
      L20 : do {
       if (!$29) {
        $33 = $22;
        while (1) {
         $30 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
         $31 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
         $32 = ($30 | 0) == ($31 | 0);
         if ($32) {
          $42 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $43 = $30;
          $44 = $42;
          $45 = $43 - $44 | 0;
          $46 = ($45 | 0) / 24 & -1;
          $47 = $46 + 1 | 0;
          $48 = ($45 | 0) < -24;
          if ($48) {
           label = 12;
           break;
          }
          $49 = $46 >>> 0 < 1073741823;
          if ($49) {
           $50 = $46 << 1;
           $51 = $50 >>> 0 < $47 >>> 0;
           $52 = $51 ? $47 : $50;
           $$0$i$i$i7 = $52;
          } else {
           $$0$i$i$i7 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i6, $$0$i$i$i7, $46, $27);
          $53 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
          __THREW__ = 0;
          invoke_vii(236, $53 | 0, $33 | 0);
          $54 = __THREW__;
          __THREW__ = 0;
          $55 = $54 & 1;
          if ($55) {
           label = 18;
           break;
          }
          $56 = $53 + 12 | 0;
          $57 = $33 + 12 | 0;
          __THREW__ = 0;
          invoke_vii(236, $56 | 0, $57 | 0);
          $58 = __THREW__;
          __THREW__ = 0;
          $59 = $58 & 1;
          if ($59) {
           $$lcssa75 = $53;
           label = 17;
           break;
          }
          $64 = $53 + 24 | 0;
          SAFE_HEAP_STORE($28 | 0, $64 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i6);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($30, $33);
          $34 = $30 + 12 | 0;
          $35 = $33 + 12 | 0;
          __THREW__ = 0;
          invoke_vii(236, $34 | 0, $35 | 0);
          $36 = __THREW__;
          __THREW__ = 0;
          $37 = $36 & 1;
          if ($37) {
           $$lcssa = $30;
           label = 9;
           break;
          }
          $40 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
          $41 = $40 + 24 | 0;
          SAFE_HEAP_STORE($25 | 0, $41 | 0, 4);
         }
         $65 = $33 + 24 | 0;
         $66 = ($65 | 0) == ($24 | 0);
         if ($66) {
          break L20;
         } else {
          $33 = $65;
         }
        }
        if ((label | 0) == 9) {
         $38 = ___cxa_find_matching_catch() | 0;
         $39 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
         ___resumeException($38 | 0);
        } else if ((label | 0) == 12) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        } else if ((label | 0) == 17) {
         $60 = ___cxa_find_matching_catch() | 0;
         $61 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa75);
         $eh$lpad$body$i$i$index2Z2D = $61;
         $eh$lpad$body$i$i$indexZ2D = $60;
        } else if ((label | 0) == 18) {
         $62 = ___cxa_find_matching_catch() | 0;
         $63 = tempRet0;
         $eh$lpad$body$i$i$index2Z2D = $63;
         $eh$lpad$body$i$i$indexZ2D = $62;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6);
        ___resumeException($eh$lpad$body$i$i$indexZ2D | 0);
       }
      } while (0);
      $67 = $first + 2 | 0;
      $$0 = $67;
      break L1;
     } else {
      $103 = $10 << 24 >> 24;
      $isdigittmp = $103 + -48 | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      if (!$isdigit) {
       $$0 = $first;
       break L1;
      }
      $104 = $first + 2 | 0;
      $105 = ($104 | 0) == ($last | 0);
      if ($105) {
       $$0 = $first;
       break L1;
      } else {
       $sub$061 = $isdigittmp;
       $t1$060 = $104;
      }
      while (1) {
       $106 = SAFE_HEAP_LOAD($t1$060 >> 0 | 0, 1, 0) | 0 | 0;
       $107 = $106 << 24 >> 24;
       $isdigittmp4 = $107 + -48 | 0;
       $isdigit5 = $isdigittmp4 >>> 0 < 10;
       if (!$isdigit5) {
        $$lcssa81 = $106;
        $sub$061$lcssa = $sub$061;
        $t1$060$lcssa = $t1$060;
        break;
       }
       $108 = $sub$061 * 10 | 0;
       $109 = $isdigittmp4 + $108 | 0;
       $110 = $t1$060 + 1 | 0;
       $111 = ($110 | 0) == ($last | 0);
       if ($111) {
        $$0 = $first;
        break L1;
       } else {
        $sub$061 = $109;
        $t1$060 = $110;
       }
      }
      $112 = $$lcssa81 << 24 >> 24 == 95;
      if (!$112) {
       $$0 = $first;
       break L1;
      }
      $113 = $db + 32 | 0;
      $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
      $115 = $db + 36 | 0;
      $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
      $117 = ($114 | 0) == ($116 | 0);
      if ($117) {
       $$0 = $first;
       break L1;
      }
      $118 = $sub$061$lcssa + 1 | 0;
      $119 = $116 + -12 | 0;
      $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
      $121 = $116 + -16 | 0;
      $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
      $123 = $120;
      $124 = $122;
      $125 = $123 - $124 | 0;
      $126 = $125 >> 4;
      $127 = $118 >>> 0 < $126 >>> 0;
      if (!$127) {
       $175 = $t1$060$lcssa + 1 | 0;
       $176 = $175;
       $177 = $176 - $4 | 0;
       $178 = $177 >>> 0 > 4294967279;
       if ($178) {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
       }
       $179 = $177 >>> 0 < 11;
       if ($179) {
        $180 = $177 << 1;
        $181 = $180 & 255;
        SAFE_HEAP_STORE($2 >> 0 | 0, $181 | 0, 1);
        $182 = $2 + 1 | 0;
        $__p$0$ph$i$i = $182;
       } else {
        $183 = $177 + 16 | 0;
        $184 = $183 & -16;
        $185 = _malloc($184) | 0;
        $186 = $2 + 8 | 0;
        SAFE_HEAP_STORE($186 | 0, $185 | 0, 4);
        $187 = $184 | 1;
        SAFE_HEAP_STORE($2 | 0, $187 | 0, 4);
        $188 = $2 + 4 | 0;
        SAFE_HEAP_STORE($188 | 0, $177 | 0, 4);
        $__p$0$ph$i$i = $185;
       }
       $189 = ($175 | 0) == ($first | 0);
       if (!$189) {
        $$0$i$i58 = $first;
        $__p$0$i$i57 = $__p$0$ph$i$i;
        while (1) {
         $190 = SAFE_HEAP_LOAD($$0$i$i58 >> 0 | 0, 1, 0) | 0 | 0;
         SAFE_HEAP_STORE($__p$0$i$i57 >> 0 | 0, $190 | 0, 1);
         $191 = $$0$i$i58 + 1 | 0;
         $192 = $__p$0$i$i57 + 1 | 0;
         $193 = ($$0$i$i58 | 0) == ($t1$060$lcssa | 0);
         if ($193) {
          break;
         } else {
          $$0$i$i58 = $191;
          $__p$0$i$i57 = $192;
         }
        }
       }
       $scevgep2$i$i = $__p$0$ph$i$i + $177 | 0;
       SAFE_HEAP_STORE($scevgep2$i$i >> 0 | 0, 0 | 0, 1);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1, $2);
       $194 = $db + 4 | 0;
       $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
       $196 = $db + 8 | 0;
       $197 = SAFE_HEAP_LOAD($196 | 0, 4, 0) | 0 | 0;
       $198 = $195 >>> 0 < $197 >>> 0;
       if ($198) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($195, $1);
        $199 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
        $200 = $199 + 24 | 0;
        SAFE_HEAP_STORE($194 | 0, $200 | 0, 4);
       } else {
        $201 = $db + 12 | 0;
        $202 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $203 = $195;
        $204 = $202;
        $205 = $203 - $204 | 0;
        $206 = ($205 | 0) / 24 & -1;
        $207 = $206 + 1 | 0;
        $208 = ($205 | 0) < -24;
        if ($208) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $209 = __THREW__;
         __THREW__ = 0;
         $210 = ___cxa_find_matching_catch() | 0;
         $211 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$02 = $211;
         $$03 = $210;
         break;
        }
        $212 = $197;
        $213 = $212 - $204 | 0;
        $214 = ($213 | 0) / 24 & -1;
        $215 = $214 >>> 0 < 1073741823;
        if ($215) {
         $216 = $214 << 1;
         $217 = $216 >>> 0 < $207 >>> 0;
         $218 = $217 ? $207 : $216;
         $$0$i$i$i = $218;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $206, $201);
        $219 = $__v$i$i + 8 | 0;
        $220 = SAFE_HEAP_LOAD($219 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($220, $1);
        $221 = $220 + 24 | 0;
        SAFE_HEAP_STORE($219 | 0, $221 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $222 = $db + 62 | 0;
       SAFE_HEAP_STORE($222 >> 0 | 0, 1 | 0, 1);
       $$0 = $175;
       break L1;
      }
      $128 = $122 + ($118 << 4) | 0;
      $129 = SAFE_HEAP_LOAD($128 | 0, 4, 0) | 0 | 0;
      $130 = ($122 + ($118 << 4) | 0) + 4 | 0;
      $131 = SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0;
      $132 = $db + 4 | 0;
      $133 = $db + 8 | 0;
      $134 = $db + 12 | 0;
      $135 = $__v$i$i13 + 8 | 0;
      $136 = ($129 | 0) == ($131 | 0);
      L73 : do {
       if (!$136) {
        $140 = $129;
        while (1) {
         $137 = SAFE_HEAP_LOAD($132 | 0, 4, 0) | 0 | 0;
         $138 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
         $139 = ($137 | 0) == ($138 | 0);
         if ($139) {
          $149 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $150 = $137;
          $151 = $149;
          $152 = $150 - $151 | 0;
          $153 = ($152 | 0) / 24 & -1;
          $154 = $153 + 1 | 0;
          $155 = ($152 | 0) < -24;
          if ($155) {
           label = 44;
           break;
          }
          $156 = $153 >>> 0 < 1073741823;
          if ($156) {
           $157 = $153 << 1;
           $158 = $157 >>> 0 < $154 >>> 0;
           $159 = $158 ? $154 : $157;
           $$0$i$i$i15 = $159;
          } else {
           $$0$i$i$i15 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13, $$0$i$i$i15, $153, $134);
          $160 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
          __THREW__ = 0;
          invoke_vii(236, $160 | 0, $140 | 0);
          $161 = __THREW__;
          __THREW__ = 0;
          $162 = $161 & 1;
          if ($162) {
           label = 50;
           break;
          }
          $163 = $160 + 12 | 0;
          $164 = $140 + 12 | 0;
          __THREW__ = 0;
          invoke_vii(236, $163 | 0, $164 | 0);
          $165 = __THREW__;
          __THREW__ = 0;
          $166 = $165 & 1;
          if ($166) {
           $$lcssa78 = $160;
           label = 49;
           break;
          }
          $171 = $160 + 24 | 0;
          SAFE_HEAP_STORE($135 | 0, $171 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i13);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($137, $140);
          $141 = $137 + 12 | 0;
          $142 = $140 + 12 | 0;
          __THREW__ = 0;
          invoke_vii(236, $141 | 0, $142 | 0);
          $143 = __THREW__;
          __THREW__ = 0;
          $144 = $143 & 1;
          if ($144) {
           $$lcssa76 = $137;
           label = 41;
           break;
          }
          $147 = SAFE_HEAP_LOAD($132 | 0, 4, 0) | 0 | 0;
          $148 = $147 + 24 | 0;
          SAFE_HEAP_STORE($132 | 0, $148 | 0, 4);
         }
         $172 = $140 + 24 | 0;
         $173 = ($172 | 0) == ($131 | 0);
         if ($173) {
          break L73;
         } else {
          $140 = $172;
         }
        }
        if ((label | 0) == 41) {
         $145 = ___cxa_find_matching_catch() | 0;
         $146 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa76);
         ___resumeException($145 | 0);
        } else if ((label | 0) == 44) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
        } else if ((label | 0) == 49) {
         $167 = ___cxa_find_matching_catch() | 0;
         $168 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa78);
         $eh$lpad$body$i$i18$index7Z2D = $168;
         $eh$lpad$body$i$i18$indexZ2D = $167;
        } else if ((label | 0) == 50) {
         $169 = ___cxa_find_matching_catch() | 0;
         $170 = tempRet0;
         $eh$lpad$body$i$i18$index7Z2D = $170;
         $eh$lpad$body$i$i18$indexZ2D = $169;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
        ___resumeException($eh$lpad$body$i$i18$indexZ2D | 0);
       }
      } while (0);
      $174 = $t1$060$lcssa + 1 | 0;
      $$0 = $174;
      break L1;
     }
    } while (0);
    ___resumeException($$03 | 0);
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN13b2DynamicTree7BalanceEi($this, $iA) {
 $this = $this | 0;
 $iA = $iA | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, $F = 0, $G = 0, $balance = 0, $iB = 0, $iC = 0, $iD = 0, $iE = 0;
 var $iF = 0, $iG = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $iA;
 $3 = $1;
 $4 = $2;
 $5 = ($4 | 0) != -1;
 if (!$5) {
  ___assert_fail(4652 | 0, 4215 | 0, 379, 4663 | 0);
 }
 $6 = $3 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $2;
 $9 = $7 + ($8 * 36 | 0) | 0;
 $A = $9;
 $10 = $A;
 $11 = __ZNK10b2TreeNode6IsLeafEv($10) | 0;
 if (!$11) {
  $12 = $A;
  $13 = $12 + 32 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = ($14 | 0) < 2;
  if (!$15) {
   $17 = $A;
   $18 = $17 + 24 | 0;
   $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
   $iB = $19;
   $20 = $A;
   $21 = $20 + 28 | 0;
   $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
   $iC = $22;
   $23 = $iB;
   $24 = 0 <= ($23 | 0);
   if (!$24) {
    ___assert_fail(4671 | 0, 4215 | 0, 389, 4663 | 0);
   }
   $25 = $iB;
   $26 = $3 + 12 | 0;
   $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
   $28 = ($25 | 0) < ($27 | 0);
   if (!$28) {
    ___assert_fail(4671 | 0, 4215 | 0, 389, 4663 | 0);
   }
   $29 = $iC;
   $30 = 0 <= ($29 | 0);
   if (!$30) {
    ___assert_fail(4702 | 0, 4215 | 0, 390, 4663 | 0);
   }
   $31 = $iC;
   $32 = $3 + 12 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $34 = ($31 | 0) < ($33 | 0);
   if (!$34) {
    ___assert_fail(4702 | 0, 4215 | 0, 390, 4663 | 0);
   }
   $35 = $3 + 4 | 0;
   $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
   $37 = $iB;
   $38 = $36 + ($37 * 36 | 0) | 0;
   $B = $38;
   $39 = $3 + 4 | 0;
   $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
   $41 = $iC;
   $42 = $40 + ($41 * 36 | 0) | 0;
   $C = $42;
   $43 = $C;
   $44 = $43 + 32 | 0;
   $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
   $46 = $B;
   $47 = $46 + 32 | 0;
   $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
   $49 = $45 - $48 | 0;
   $balance = $49;
   $50 = $balance;
   $51 = ($50 | 0) > 1;
   if ($51) {
    $52 = $C;
    $53 = $52 + 24 | 0;
    $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
    $iF = $54;
    $55 = $C;
    $56 = $55 + 28 | 0;
    $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
    $iG = $57;
    $58 = $3 + 4 | 0;
    $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
    $60 = $iF;
    $61 = $59 + ($60 * 36 | 0) | 0;
    $F = $61;
    $62 = $3 + 4 | 0;
    $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
    $64 = $iG;
    $65 = $63 + ($64 * 36 | 0) | 0;
    $G = $65;
    $66 = $iF;
    $67 = 0 <= ($66 | 0);
    if (!$67) {
     ___assert_fail(4733 | 0, 4215 | 0, 404, 4663 | 0);
    }
    $68 = $iF;
    $69 = $3 + 12 | 0;
    $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
    $71 = ($68 | 0) < ($70 | 0);
    if (!$71) {
     ___assert_fail(4733 | 0, 4215 | 0, 404, 4663 | 0);
    }
    $72 = $iG;
    $73 = 0 <= ($72 | 0);
    if (!$73) {
     ___assert_fail(4764 | 0, 4215 | 0, 405, 4663 | 0);
    }
    $74 = $iG;
    $75 = $3 + 12 | 0;
    $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
    $77 = ($74 | 0) < ($76 | 0);
    if (!$77) {
     ___assert_fail(4764 | 0, 4215 | 0, 405, 4663 | 0);
    }
    $78 = $2;
    $79 = $C;
    $80 = $79 + 24 | 0;
    SAFE_HEAP_STORE($80 | 0, $78 | 0, 4);
    $81 = $A;
    $82 = $81 + 20 | 0;
    $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
    $84 = $C;
    $85 = $84 + 20 | 0;
    SAFE_HEAP_STORE($85 | 0, $83 | 0, 4);
    $86 = $iC;
    $87 = $A;
    $88 = $87 + 20 | 0;
    SAFE_HEAP_STORE($88 | 0, $86 | 0, 4);
    $89 = $C;
    $90 = $89 + 20 | 0;
    $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
    $92 = ($91 | 0) != -1;
    do {
     if ($92) {
      $93 = $C;
      $94 = $93 + 20 | 0;
      $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
      $96 = $3 + 4 | 0;
      $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
      $98 = $97 + ($95 * 36 | 0) | 0;
      $99 = $98 + 24 | 0;
      $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
      $101 = $2;
      $102 = ($100 | 0) == ($101 | 0);
      if ($102) {
       $103 = $iC;
       $104 = $C;
       $105 = $104 + 20 | 0;
       $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
       $107 = $3 + 4 | 0;
       $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
       $109 = $108 + ($106 * 36 | 0) | 0;
       $110 = $109 + 24 | 0;
       SAFE_HEAP_STORE($110 | 0, $103 | 0, 4);
       break;
      }
      $111 = $C;
      $112 = $111 + 20 | 0;
      $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
      $114 = $3 + 4 | 0;
      $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
      $116 = $115 + ($113 * 36 | 0) | 0;
      $117 = $116 + 28 | 0;
      $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
      $119 = $2;
      $120 = ($118 | 0) == ($119 | 0);
      if ($120) {
       $121 = $iC;
       $122 = $C;
       $123 = $122 + 20 | 0;
       $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
       $125 = $3 + 4 | 0;
       $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
       $127 = $126 + ($124 * 36 | 0) | 0;
       $128 = $127 + 28 | 0;
       SAFE_HEAP_STORE($128 | 0, $121 | 0, 4);
       break;
      } else {
       ___assert_fail(4795 | 0, 4215 | 0, 421, 4663 | 0);
      }
     } else {
      $129 = $iC;
      SAFE_HEAP_STORE($3 | 0, $129 | 0, 4);
     }
    } while (0);
    $130 = $F;
    $131 = $130 + 32 | 0;
    $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
    $133 = $G;
    $134 = $133 + 32 | 0;
    $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
    $136 = ($132 | 0) > ($135 | 0);
    if ($136) {
     $137 = $iF;
     $138 = $C;
     $139 = $138 + 28 | 0;
     SAFE_HEAP_STORE($139 | 0, $137 | 0, 4);
     $140 = $iG;
     $141 = $A;
     $142 = $141 + 28 | 0;
     SAFE_HEAP_STORE($142 | 0, $140 | 0, 4);
     $143 = $2;
     $144 = $G;
     $145 = $144 + 20 | 0;
     SAFE_HEAP_STORE($145 | 0, $143 | 0, 4);
     $146 = $A;
     $147 = $B;
     $148 = $G;
     __ZN6b2AABB7CombineERKS_S1_($146, $147, $148);
     $149 = $C;
     $150 = $A;
     $151 = $F;
     __ZN6b2AABB7CombineERKS_S1_($149, $150, $151);
     $152 = $B;
     $153 = $152 + 32 | 0;
     $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
     $155 = $G;
     $156 = $155 + 32 | 0;
     $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
     $158 = __Z5b2MaxIiET_S0_S0_($154, $157) | 0;
     $159 = 1 + $158 | 0;
     $160 = $A;
     $161 = $160 + 32 | 0;
     SAFE_HEAP_STORE($161 | 0, $159 | 0, 4);
     $162 = $A;
     $163 = $162 + 32 | 0;
     $164 = SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0;
     $165 = $F;
     $166 = $165 + 32 | 0;
     $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
     $168 = __Z5b2MaxIiET_S0_S0_($164, $167) | 0;
     $169 = 1 + $168 | 0;
     $170 = $C;
     $171 = $170 + 32 | 0;
     SAFE_HEAP_STORE($171 | 0, $169 | 0, 4);
    } else {
     $172 = $iG;
     $173 = $C;
     $174 = $173 + 28 | 0;
     SAFE_HEAP_STORE($174 | 0, $172 | 0, 4);
     $175 = $iF;
     $176 = $A;
     $177 = $176 + 28 | 0;
     SAFE_HEAP_STORE($177 | 0, $175 | 0, 4);
     $178 = $2;
     $179 = $F;
     $180 = $179 + 20 | 0;
     SAFE_HEAP_STORE($180 | 0, $178 | 0, 4);
     $181 = $A;
     $182 = $B;
     $183 = $F;
     __ZN6b2AABB7CombineERKS_S1_($181, $182, $183);
     $184 = $C;
     $185 = $A;
     $186 = $G;
     __ZN6b2AABB7CombineERKS_S1_($184, $185, $186);
     $187 = $B;
     $188 = $187 + 32 | 0;
     $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
     $190 = $F;
     $191 = $190 + 32 | 0;
     $192 = SAFE_HEAP_LOAD($191 | 0, 4, 0) | 0 | 0;
     $193 = __Z5b2MaxIiET_S0_S0_($189, $192) | 0;
     $194 = 1 + $193 | 0;
     $195 = $A;
     $196 = $195 + 32 | 0;
     SAFE_HEAP_STORE($196 | 0, $194 | 0, 4);
     $197 = $A;
     $198 = $197 + 32 | 0;
     $199 = SAFE_HEAP_LOAD($198 | 0, 4, 0) | 0 | 0;
     $200 = $G;
     $201 = $200 + 32 | 0;
     $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
     $203 = __Z5b2MaxIiET_S0_S0_($199, $202) | 0;
     $204 = 1 + $203 | 0;
     $205 = $C;
     $206 = $205 + 32 | 0;
     SAFE_HEAP_STORE($206 | 0, $204 | 0, 4);
    }
    $207 = $iC;
    $0 = $207;
    $367 = $0;
    STACKTOP = sp;
    return $367 | 0;
   }
   $208 = $balance;
   $209 = ($208 | 0) < -1;
   if (!$209) {
    $366 = $2;
    $0 = $366;
    $367 = $0;
    STACKTOP = sp;
    return $367 | 0;
   }
   $210 = $B;
   $211 = $210 + 24 | 0;
   $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
   $iD = $212;
   $213 = $B;
   $214 = $213 + 28 | 0;
   $215 = SAFE_HEAP_LOAD($214 | 0, 4, 0) | 0 | 0;
   $iE = $215;
   $216 = $3 + 4 | 0;
   $217 = SAFE_HEAP_LOAD($216 | 0, 4, 0) | 0 | 0;
   $218 = $iD;
   $219 = $217 + ($218 * 36 | 0) | 0;
   $D = $219;
   $220 = $3 + 4 | 0;
   $221 = SAFE_HEAP_LOAD($220 | 0, 4, 0) | 0 | 0;
   $222 = $iE;
   $223 = $221 + ($222 * 36 | 0) | 0;
   $E = $223;
   $224 = $iD;
   $225 = 0 <= ($224 | 0);
   if (!$225) {
    ___assert_fail(4827 | 0, 4215 | 0, 464, 4663 | 0);
   }
   $226 = $iD;
   $227 = $3 + 12 | 0;
   $228 = SAFE_HEAP_LOAD($227 | 0, 4, 0) | 0 | 0;
   $229 = ($226 | 0) < ($228 | 0);
   if (!$229) {
    ___assert_fail(4827 | 0, 4215 | 0, 464, 4663 | 0);
   }
   $230 = $iE;
   $231 = 0 <= ($230 | 0);
   if (!$231) {
    ___assert_fail(4858 | 0, 4215 | 0, 465, 4663 | 0);
   }
   $232 = $iE;
   $233 = $3 + 12 | 0;
   $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
   $235 = ($232 | 0) < ($234 | 0);
   if (!$235) {
    ___assert_fail(4858 | 0, 4215 | 0, 465, 4663 | 0);
   }
   $236 = $2;
   $237 = $B;
   $238 = $237 + 24 | 0;
   SAFE_HEAP_STORE($238 | 0, $236 | 0, 4);
   $239 = $A;
   $240 = $239 + 20 | 0;
   $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
   $242 = $B;
   $243 = $242 + 20 | 0;
   SAFE_HEAP_STORE($243 | 0, $241 | 0, 4);
   $244 = $iB;
   $245 = $A;
   $246 = $245 + 20 | 0;
   SAFE_HEAP_STORE($246 | 0, $244 | 0, 4);
   $247 = $B;
   $248 = $247 + 20 | 0;
   $249 = SAFE_HEAP_LOAD($248 | 0, 4, 0) | 0 | 0;
   $250 = ($249 | 0) != -1;
   do {
    if ($250) {
     $251 = $B;
     $252 = $251 + 20 | 0;
     $253 = SAFE_HEAP_LOAD($252 | 0, 4, 0) | 0 | 0;
     $254 = $3 + 4 | 0;
     $255 = SAFE_HEAP_LOAD($254 | 0, 4, 0) | 0 | 0;
     $256 = $255 + ($253 * 36 | 0) | 0;
     $257 = $256 + 24 | 0;
     $258 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
     $259 = $2;
     $260 = ($258 | 0) == ($259 | 0);
     if ($260) {
      $261 = $iB;
      $262 = $B;
      $263 = $262 + 20 | 0;
      $264 = SAFE_HEAP_LOAD($263 | 0, 4, 0) | 0 | 0;
      $265 = $3 + 4 | 0;
      $266 = SAFE_HEAP_LOAD($265 | 0, 4, 0) | 0 | 0;
      $267 = $266 + ($264 * 36 | 0) | 0;
      $268 = $267 + 24 | 0;
      SAFE_HEAP_STORE($268 | 0, $261 | 0, 4);
      break;
     }
     $269 = $B;
     $270 = $269 + 20 | 0;
     $271 = SAFE_HEAP_LOAD($270 | 0, 4, 0) | 0 | 0;
     $272 = $3 + 4 | 0;
     $273 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
     $274 = $273 + ($271 * 36 | 0) | 0;
     $275 = $274 + 28 | 0;
     $276 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
     $277 = $2;
     $278 = ($276 | 0) == ($277 | 0);
     if ($278) {
      $279 = $iB;
      $280 = $B;
      $281 = $280 + 20 | 0;
      $282 = SAFE_HEAP_LOAD($281 | 0, 4, 0) | 0 | 0;
      $283 = $3 + 4 | 0;
      $284 = SAFE_HEAP_LOAD($283 | 0, 4, 0) | 0 | 0;
      $285 = $284 + ($282 * 36 | 0) | 0;
      $286 = $285 + 28 | 0;
      SAFE_HEAP_STORE($286 | 0, $279 | 0, 4);
      break;
     } else {
      ___assert_fail(4889 | 0, 4215 | 0, 481, 4663 | 0);
     }
    } else {
     $287 = $iB;
     SAFE_HEAP_STORE($3 | 0, $287 | 0, 4);
    }
   } while (0);
   $288 = $D;
   $289 = $288 + 32 | 0;
   $290 = SAFE_HEAP_LOAD($289 | 0, 4, 0) | 0 | 0;
   $291 = $E;
   $292 = $291 + 32 | 0;
   $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
   $294 = ($290 | 0) > ($293 | 0);
   if ($294) {
    $295 = $iD;
    $296 = $B;
    $297 = $296 + 28 | 0;
    SAFE_HEAP_STORE($297 | 0, $295 | 0, 4);
    $298 = $iE;
    $299 = $A;
    $300 = $299 + 24 | 0;
    SAFE_HEAP_STORE($300 | 0, $298 | 0, 4);
    $301 = $2;
    $302 = $E;
    $303 = $302 + 20 | 0;
    SAFE_HEAP_STORE($303 | 0, $301 | 0, 4);
    $304 = $A;
    $305 = $C;
    $306 = $E;
    __ZN6b2AABB7CombineERKS_S1_($304, $305, $306);
    $307 = $B;
    $308 = $A;
    $309 = $D;
    __ZN6b2AABB7CombineERKS_S1_($307, $308, $309);
    $310 = $C;
    $311 = $310 + 32 | 0;
    $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
    $313 = $E;
    $314 = $313 + 32 | 0;
    $315 = SAFE_HEAP_LOAD($314 | 0, 4, 0) | 0 | 0;
    $316 = __Z5b2MaxIiET_S0_S0_($312, $315) | 0;
    $317 = 1 + $316 | 0;
    $318 = $A;
    $319 = $318 + 32 | 0;
    SAFE_HEAP_STORE($319 | 0, $317 | 0, 4);
    $320 = $A;
    $321 = $320 + 32 | 0;
    $322 = SAFE_HEAP_LOAD($321 | 0, 4, 0) | 0 | 0;
    $323 = $D;
    $324 = $323 + 32 | 0;
    $325 = SAFE_HEAP_LOAD($324 | 0, 4, 0) | 0 | 0;
    $326 = __Z5b2MaxIiET_S0_S0_($322, $325) | 0;
    $327 = 1 + $326 | 0;
    $328 = $B;
    $329 = $328 + 32 | 0;
    SAFE_HEAP_STORE($329 | 0, $327 | 0, 4);
   } else {
    $330 = $iE;
    $331 = $B;
    $332 = $331 + 28 | 0;
    SAFE_HEAP_STORE($332 | 0, $330 | 0, 4);
    $333 = $iD;
    $334 = $A;
    $335 = $334 + 24 | 0;
    SAFE_HEAP_STORE($335 | 0, $333 | 0, 4);
    $336 = $2;
    $337 = $D;
    $338 = $337 + 20 | 0;
    SAFE_HEAP_STORE($338 | 0, $336 | 0, 4);
    $339 = $A;
    $340 = $C;
    $341 = $D;
    __ZN6b2AABB7CombineERKS_S1_($339, $340, $341);
    $342 = $B;
    $343 = $A;
    $344 = $E;
    __ZN6b2AABB7CombineERKS_S1_($342, $343, $344);
    $345 = $C;
    $346 = $345 + 32 | 0;
    $347 = SAFE_HEAP_LOAD($346 | 0, 4, 0) | 0 | 0;
    $348 = $D;
    $349 = $348 + 32 | 0;
    $350 = SAFE_HEAP_LOAD($349 | 0, 4, 0) | 0 | 0;
    $351 = __Z5b2MaxIiET_S0_S0_($347, $350) | 0;
    $352 = 1 + $351 | 0;
    $353 = $A;
    $354 = $353 + 32 | 0;
    SAFE_HEAP_STORE($354 | 0, $352 | 0, 4);
    $355 = $A;
    $356 = $355 + 32 | 0;
    $357 = SAFE_HEAP_LOAD($356 | 0, 4, 0) | 0 | 0;
    $358 = $E;
    $359 = $358 + 32 | 0;
    $360 = SAFE_HEAP_LOAD($359 | 0, 4, 0) | 0 | 0;
    $361 = __Z5b2MaxIiET_S0_S0_($357, $360) | 0;
    $362 = 1 + $361 | 0;
    $363 = $B;
    $364 = $363 + 32 | 0;
    SAFE_HEAP_STORE($364 | 0, $362 | 0, 4);
   }
   $365 = $iB;
   $0 = $365;
   $367 = $0;
   STACKTOP = sp;
   return $367 | 0;
  }
 }
 $16 = $2;
 $0 = $16;
 $367 = $0;
 STACKTOP = sp;
 return $367 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i6 = 0, $$01 = 0, $$02 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__v$i$i = 0, $__v$i$i10 = 0, $__v$i$i5 = 0, $k1$015 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i10 = sp + 112 | 0;
 $__v$i$i5 = sp + 92 | 0;
 $__v$i$i = sp + 72 | 0;
 $0 = sp + 56 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($6) {
   $$02 = $first;
  } else {
   $7 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $8 = $7 << 24 >> 24;
   L3 : do {
    switch ($8 | 0) {
    case 84:
     {
      $9 = $db + 4 | 0;
      $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
      $11 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $12 = $10;
      $13 = $11;
      $14 = $12 - $13 | 0;
      $15 = ($14 | 0) / 24 & -1;
      $16 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $17 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
      $18 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $19 = $17;
      $20 = $18;
      $21 = $19 - $20 | 0;
      $22 = ($21 | 0) / 24 & -1;
      $23 = ($16 | 0) != ($first | 0);
      $24 = $15 + 1 | 0;
      $25 = ($22 | 0) == ($24 | 0);
      $or$cond = $23 & $25;
      if (!$or$cond) {
       $26 = ($22 | 0) == ($15 | 0);
       if ($26) {
        $$02 = $first;
        break L1;
       } else {
        $80 = $17;
        $k1$015 = $22;
       }
       while (1) {
        $79 = $80 + -24 | 0;
        $82 = $80;
        while (1) {
         $81 = $82 + -24 | 0;
         SAFE_HEAP_STORE($9 | 0, $81 | 0, 4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($81);
         $$pre$i = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
         $83 = ($$pre$i | 0) == ($79 | 0);
         if ($83) {
          break;
         } else {
          $82 = $$pre$i;
         }
        }
        $84 = $k1$015 + -1 | 0;
        $85 = ($84 | 0) == ($15 | 0);
        if ($85) {
         $$02 = $first;
         break L1;
        } else {
         $80 = $79;
         $k1$015 = $84;
        }
       }
      }
      $27 = $db + 16 | 0;
      $28 = $17 + -24 | 0;
      $29 = $db + 12 | 0;
      $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($1 | 0, $30 | 0, 4);
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0, $28, $1);
      $31 = $db + 20 | 0;
      $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
      $33 = $db + 24 | 0;
      $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
      $35 = $32 >>> 0 < $34 >>> 0;
      if ($35) {
       $36 = $0 + 12 | 0;
       $37 = $32 + 4 | 0;
       $38 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
       $39 = $32 + 12 | 0;
       SAFE_HEAP_STORE($39 | 0, $38 | 0, 4);
       $40 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($32 | 0, $40 | 0, 4);
       $41 = $0 + 4 | 0;
       $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($37 | 0, $42 | 0, 4);
       $43 = $0 + 8 | 0;
       $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
       $45 = $32 + 8 | 0;
       SAFE_HEAP_STORE($45 | 0, $44 | 0, 4);
       SAFE_HEAP_STORE($43 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($41 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
       $46 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
       $47 = $46 + 16 | 0;
       SAFE_HEAP_STORE($31 | 0, $47 | 0, 4);
      } else {
       $48 = $db + 28 | 0;
       $49 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
       $50 = $32;
       $51 = $49;
       $52 = $50 - $51 | 0;
       $53 = $52 >> 4;
       $54 = $53 + 1 | 0;
       $55 = ($52 | 0) < -16;
       if ($55) {
        __THREW__ = 0;
        invoke_vi(238, $27 | 0);
        $56 = __THREW__;
        __THREW__ = 0;
        $57 = ___cxa_find_matching_catch() | 0;
        $58 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
        $$0 = $58;
        $$01 = $57;
        break L3;
       }
       $59 = $34;
       $60 = $59 - $51 | 0;
       $61 = $60 >> 4;
       $62 = $61 >>> 0 < 1073741823;
       if ($62) {
        $63 = $60 >> 3;
        $64 = $63 >>> 0 < $54 >>> 0;
        $65 = $64 ? $54 : $63;
        $$0$i$i$i = $65;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i, $$0$i$i$i, $53, $48);
       $66 = $__v$i$i + 8 | 0;
       $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
       $68 = $0 + 12 | 0;
       $69 = $67 + 4 | 0;
       $70 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
       $71 = $67 + 12 | 0;
       SAFE_HEAP_STORE($71 | 0, $70 | 0, 4);
       $72 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($67 | 0, $72 | 0, 4);
       $73 = $0 + 4 | 0;
       $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($69 | 0, $74 | 0, 4);
       $75 = $0 + 8 | 0;
       $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
       $77 = $67 + 8 | 0;
       SAFE_HEAP_STORE($77 | 0, $76 | 0, 4);
       SAFE_HEAP_STORE($75 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($73 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
       $78 = $67 + 16 | 0;
       SAFE_HEAP_STORE($66 | 0, $78 | 0, 4);
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($27, $__v$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
      $$02 = $16;
      break L1;
      break;
     }
    case 68:
     {
      $86 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $87 = ($86 | 0) == ($first | 0);
      if ($87) {
       $$02 = $first;
       break L1;
      }
      $88 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $89 = $db + 4 | 0;
      $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
      $91 = ($88 | 0) == ($90 | 0);
      if ($91) {
       $$02 = $first;
       break L1;
      }
      $92 = $db + 16 | 0;
      $93 = $90 + -24 | 0;
      $94 = $db + 12 | 0;
      $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($3 | 0, $95 | 0, 4);
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2, $93, $3);
      $96 = $db + 20 | 0;
      $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
      $98 = $db + 24 | 0;
      $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
      $100 = $97 >>> 0 < $99 >>> 0;
      if ($100) {
       $101 = $2 + 12 | 0;
       $102 = $97 + 4 | 0;
       $103 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
       $104 = $97 + 12 | 0;
       SAFE_HEAP_STORE($104 | 0, $103 | 0, 4);
       $105 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($97 | 0, $105 | 0, 4);
       $106 = $2 + 4 | 0;
       $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($102 | 0, $107 | 0, 4);
       $108 = $2 + 8 | 0;
       $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
       $110 = $97 + 8 | 0;
       SAFE_HEAP_STORE($110 | 0, $109 | 0, 4);
       SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($106 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
       $111 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
       $112 = $111 + 16 | 0;
       SAFE_HEAP_STORE($96 | 0, $112 | 0, 4);
      } else {
       $113 = $db + 28 | 0;
       $114 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
       $115 = $97;
       $116 = $114;
       $117 = $115 - $116 | 0;
       $118 = $117 >> 4;
       $119 = $118 + 1 | 0;
       $120 = ($117 | 0) < -16;
       if ($120) {
        __THREW__ = 0;
        invoke_vi(238, $92 | 0);
        $121 = __THREW__;
        __THREW__ = 0;
        $122 = ___cxa_find_matching_catch() | 0;
        $123 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
        $$0 = $123;
        $$01 = $122;
        break L3;
       }
       $124 = $99;
       $125 = $124 - $116 | 0;
       $126 = $125 >> 4;
       $127 = $126 >>> 0 < 1073741823;
       if ($127) {
        $128 = $125 >> 3;
        $129 = $128 >>> 0 < $119 >>> 0;
        $130 = $129 ? $119 : $128;
        $$0$i$i$i6 = $130;
       } else {
        $$0$i$i$i6 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i5, $$0$i$i$i6, $118, $113);
       $131 = $__v$i$i5 + 8 | 0;
       $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
       $133 = $2 + 12 | 0;
       $134 = $132 + 4 | 0;
       $135 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
       $136 = $132 + 12 | 0;
       SAFE_HEAP_STORE($136 | 0, $135 | 0, 4);
       $137 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($132 | 0, $137 | 0, 4);
       $138 = $2 + 4 | 0;
       $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($134 | 0, $139 | 0, 4);
       $140 = $2 + 8 | 0;
       $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
       $142 = $132 + 8 | 0;
       SAFE_HEAP_STORE($142 | 0, $141 | 0, 4);
       SAFE_HEAP_STORE($140 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($138 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
       $143 = $132 + 16 | 0;
       SAFE_HEAP_STORE($131 | 0, $143 | 0, 4);
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($92, $__v$i$i5);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i5);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
      $$02 = $86;
      break L1;
      break;
     }
    case 83:
     {
      $144 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      $145 = ($144 | 0) == ($first | 0);
      if (!$145) {
       $$02 = $144;
       break L1;
      }
      $146 = $last;
      $147 = $first;
      $148 = $146 - $147 | 0;
      $149 = ($148 | 0) > 2;
      if (!$149) {
       $$02 = $first;
       break L1;
      }
      $150 = $first + 1 | 0;
      $151 = SAFE_HEAP_LOAD($150 >> 0 | 0, 1, 0) | 0 | 0;
      $152 = $151 << 24 >> 24 == 116;
      if (!$152) {
       $$02 = $first;
       break L1;
      }
      $153 = $first + 2 | 0;
      $154 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($153, $last, $db) | 0;
      $155 = ($154 | 0) == ($153 | 0);
      if ($155) {
       $$02 = $first;
       break L1;
      }
      $156 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $157 = $db + 4 | 0;
      $158 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
      $159 = ($156 | 0) == ($158 | 0);
      if ($159) {
       $$02 = $first;
       break L1;
      }
      $160 = $158 + -24 | 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($160, 0, 10515) | 0;
      $161 = $db + 16 | 0;
      $162 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
      $163 = $162 + -24 | 0;
      $164 = $db + 12 | 0;
      $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($5 | 0, $165 | 0, 4);
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4, $163, $5);
      $166 = $db + 20 | 0;
      $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
      $168 = $db + 24 | 0;
      $169 = SAFE_HEAP_LOAD($168 | 0, 4, 0) | 0 | 0;
      $170 = $167 >>> 0 < $169 >>> 0;
      if ($170) {
       $171 = $4 + 12 | 0;
       $172 = $167 + 4 | 0;
       $173 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
       $174 = $167 + 12 | 0;
       SAFE_HEAP_STORE($174 | 0, $173 | 0, 4);
       $175 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($167 | 0, $175 | 0, 4);
       $176 = $4 + 4 | 0;
       $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($172 | 0, $177 | 0, 4);
       $178 = $4 + 8 | 0;
       $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0;
       $180 = $167 + 8 | 0;
       SAFE_HEAP_STORE($180 | 0, $179 | 0, 4);
       SAFE_HEAP_STORE($178 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($176 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
       $181 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
       $182 = $181 + 16 | 0;
       SAFE_HEAP_STORE($166 | 0, $182 | 0, 4);
      } else {
       $183 = $db + 28 | 0;
       $184 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
       $185 = $167;
       $186 = $184;
       $187 = $185 - $186 | 0;
       $188 = $187 >> 4;
       $189 = $188 + 1 | 0;
       $190 = ($187 | 0) < -16;
       if ($190) {
        __THREW__ = 0;
        invoke_vi(238, $161 | 0);
        $191 = __THREW__;
        __THREW__ = 0;
        $192 = ___cxa_find_matching_catch() | 0;
        $193 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
        $$0 = $193;
        $$01 = $192;
        break L3;
       }
       $194 = $169;
       $195 = $194 - $186 | 0;
       $196 = $195 >> 4;
       $197 = $196 >>> 0 < 1073741823;
       if ($197) {
        $198 = $195 >> 3;
        $199 = $198 >>> 0 < $189 >>> 0;
        $200 = $199 ? $189 : $198;
        $$0$i$i$i11 = $200;
       } else {
        $$0$i$i$i11 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i10, $$0$i$i$i11, $188, $183);
       $201 = $__v$i$i10 + 8 | 0;
       $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
       $203 = $4 + 12 | 0;
       $204 = $202 + 4 | 0;
       $205 = SAFE_HEAP_LOAD($203 | 0, 4, 0) | 0 | 0;
       $206 = $202 + 12 | 0;
       SAFE_HEAP_STORE($206 | 0, $205 | 0, 4);
       $207 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($202 | 0, $207 | 0, 4);
       $208 = $4 + 4 | 0;
       $209 = SAFE_HEAP_LOAD($208 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE($204 | 0, $209 | 0, 4);
       $210 = $4 + 8 | 0;
       $211 = SAFE_HEAP_LOAD($210 | 0, 4, 0) | 0 | 0;
       $212 = $202 + 8 | 0;
       SAFE_HEAP_STORE($212 | 0, $211 | 0, 4);
       SAFE_HEAP_STORE($210 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($208 | 0, 0 | 0, 4);
       SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
       $213 = $202 + 16 | 0;
       SAFE_HEAP_STORE($201 | 0, $213 | 0, 4);
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($161, $__v$i$i10);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i10);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
      $$02 = $154;
      break L1;
      break;
     }
    default:
     {
      $$02 = $first;
      break L1;
     }
    }
   } while (0);
   ___resumeException($$01 | 0);
  }
 } while (0);
 STACKTOP = sp;
 return $$02 | 0;
}

function __ZN15b2ContactSolver29InitializeVelocityConstraintsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0;
 var $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $k11 = 0.0, $k12 = 0.0, $k22 = 0.0, $kNormal = 0.0, $kTangent = 0.0, $k_maxConditionNumber = 0.0, $localCenterA = 0, $localCenterB = 0, $mA = 0.0, $mB = 0.0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0;
 var $radiusB = 0.0, $rn1A = 0.0, $rn1B = 0.0, $rn2A = 0.0, $rn2B = 0.0, $rnA = 0.0, $rnB = 0.0, $rtA = 0.0, $rtB = 0.0, $tangent = 0, $vA = 0, $vB = 0, $vRel = 0.0, $vc = 0, $vcp = 0, $vcp1 = 0, $vcp2 = 0, $wA = 0.0, $wB = 0.0, $worldManifold = 0;
 var $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $localCenterA = sp + 336 | 0;
 $localCenterB = sp + 328 | 0;
 $cA = sp + 320 | 0;
 $vA = sp + 304 | 0;
 $cB = sp + 288 | 0;
 $vB = sp + 272 | 0;
 $xfA = sp + 248 | 0;
 $xfB = sp + 232 | 0;
 $1 = sp + 224 | 0;
 $2 = sp + 216 | 0;
 $3 = sp + 208 | 0;
 $4 = sp + 200 | 0;
 $worldManifold = sp + 168 | 0;
 $5 = sp + 144 | 0;
 $6 = sp + 136 | 0;
 $tangent = sp + 112 | 0;
 $7 = sp + 88 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 56 | 0;
 $12 = sp;
 $0 = $this;
 $13 = $0;
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $13 + 48 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = ($14 | 0) < ($16 | 0);
  if (!$17) {
   label = 16;
   break;
  }
  $18 = $13 + 40 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $i;
  $21 = $19 + ($20 * 156 | 0) | 0;
  $vc = $21;
  $22 = $13 + 36 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = $i;
  $25 = $23 + ($24 * 88 | 0) | 0;
  $pc = $25;
  $26 = $pc;
  $27 = $26 + 76 | 0;
  $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
  $radiusA = $28;
  $29 = $pc;
  $30 = $29 + 80 | 0;
  $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
  $radiusB = $31;
  $32 = $vc;
  $33 = $32 + 152 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $35 = $13 + 44 | 0;
  $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
  $37 = $36 + ($34 << 2) | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = __ZN9b2Contact11GetManifoldEv($38) | 0;
  $manifold = $39;
  $40 = $vc;
  $41 = $40 + 112 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $indexA = $42;
  $43 = $vc;
  $44 = $43 + 116 | 0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  $indexB = $45;
  $46 = $vc;
  $47 = $46 + 120 | 0;
  $48 = +(+SAFE_HEAP_LOAD_D($47 | 0, 4));
  $mA = $48;
  $49 = $vc;
  $50 = $49 + 124 | 0;
  $51 = +(+SAFE_HEAP_LOAD_D($50 | 0, 4));
  $mB = $51;
  $52 = $vc;
  $53 = $52 + 128 | 0;
  $54 = +(+SAFE_HEAP_LOAD_D($53 | 0, 4));
  $iA = $54;
  $55 = $vc;
  $56 = $55 + 132 | 0;
  $57 = +(+SAFE_HEAP_LOAD_D($56 | 0, 4));
  $iB = $57;
  $58 = $pc;
  $59 = $58 + 48 | 0;
  {}
  SAFE_HEAP_STORE($localCenterA | 0, SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterA + 4 | 0, SAFE_HEAP_LOAD($59 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $60 = $pc;
  $61 = $60 + 56 | 0;
  {}
  SAFE_HEAP_STORE($localCenterB | 0, SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterB + 4 | 0, SAFE_HEAP_LOAD($61 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $62 = $indexA;
  $63 = $13 + 24 | 0;
  $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
  $65 = $64 + ($62 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cA | 0, SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cA + 4 | 0, SAFE_HEAP_LOAD($65 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $66 = $indexA;
  $67 = $13 + 24 | 0;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = $68 + ($66 * 12 | 0) | 0;
  $70 = $69 + 8 | 0;
  $71 = +(+SAFE_HEAP_LOAD_D($70 | 0, 4));
  $aA = $71;
  $72 = $indexA;
  $73 = $13 + 28 | 0;
  $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
  $75 = $74 + ($72 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vA | 0, SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vA + 4 | 0, SAFE_HEAP_LOAD($75 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $76 = $indexA;
  $77 = $13 + 28 | 0;
  $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
  $79 = $78 + ($76 * 12 | 0) | 0;
  $80 = $79 + 8 | 0;
  $81 = +(+SAFE_HEAP_LOAD_D($80 | 0, 4));
  $wA = $81;
  $82 = $indexB;
  $83 = $13 + 24 | 0;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $84 + ($82 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cB | 0, SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cB + 4 | 0, SAFE_HEAP_LOAD($85 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $86 = $indexB;
  $87 = $13 + 24 | 0;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $89 = $88 + ($86 * 12 | 0) | 0;
  $90 = $89 + 8 | 0;
  $91 = +(+SAFE_HEAP_LOAD_D($90 | 0, 4));
  $aB = $91;
  $92 = $indexB;
  $93 = $13 + 28 | 0;
  $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
  $95 = $94 + ($92 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vB | 0, SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vB + 4 | 0, SAFE_HEAP_LOAD($95 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $96 = $indexB;
  $97 = $13 + 28 | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
  $99 = $98 + ($96 * 12 | 0) | 0;
  $100 = $99 + 8 | 0;
  $101 = +(+SAFE_HEAP_LOAD_D($100 | 0, 4));
  $wB = $101;
  $102 = $manifold;
  $103 = $102 + 60 | 0;
  $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
  $105 = ($104 | 0) > 0;
  if (!$105) {
   label = 4;
   break;
  }
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $106 = $xfA + 8 | 0;
  $107 = $aA;
  __ZN5b2Rot3SetEf($106, $107);
  $108 = $xfB + 8 | 0;
  $109 = $aB;
  __ZN5b2Rot3SetEf($108, $109);
  $110 = $xfA + 8 | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($2, $110, $localCenterA);
  __ZmiRK6b2Vec2S1_($1, $cA, $2);
  {}
  SAFE_HEAP_STORE($xfA | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xfA + 4 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $111 = $xfB + 8 | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($4, $111, $localCenterB);
  __ZmiRK6b2Vec2S1_($3, $cB, $4);
  {}
  SAFE_HEAP_STORE($xfB | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xfB + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __ZN15b2WorldManifoldC2Ev($worldManifold);
  $112 = $manifold;
  $113 = $radiusA;
  $114 = $radiusB;
  __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($worldManifold, $112, $xfA, $113, $xfB, $114);
  $115 = $vc;
  $116 = $115 + 72 | 0;
  {}
  SAFE_HEAP_STORE($116 | 0, SAFE_HEAP_LOAD($worldManifold | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($116 + 4 | 0, SAFE_HEAP_LOAD($worldManifold + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $117 = $vc;
  $118 = $117 + 148 | 0;
  $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
  $pointCount = $119;
  $j = 0;
  while (1) {
   $120 = $j;
   $121 = $pointCount;
   $122 = ($120 | 0) < ($121 | 0);
   $123 = $vc;
   if (!$122) {
    break;
   }
   $124 = $j;
   $125 = $123 + ($124 * 36 | 0) | 0;
   $vcp = $125;
   $126 = $vcp;
   $127 = $j;
   $128 = $worldManifold + 8 | 0;
   $129 = $128 + ($127 << 3) | 0;
   __ZmiRK6b2Vec2S1_($5, $129, $cA);
   {}
   SAFE_HEAP_STORE($126 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($126 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $130 = $vcp;
   $131 = $130 + 8 | 0;
   $132 = $j;
   $133 = $worldManifold + 8 | 0;
   $134 = $133 + ($132 << 3) | 0;
   __ZmiRK6b2Vec2S1_($6, $134, $cB);
   {}
   SAFE_HEAP_STORE($131 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($131 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $135 = $vcp;
   $136 = $vc;
   $137 = $136 + 72 | 0;
   $138 = +__Z7b2CrossRK6b2Vec2S1_($135, $137);
   $rnA = $138;
   $139 = $vcp;
   $140 = $139 + 8 | 0;
   $141 = $vc;
   $142 = $141 + 72 | 0;
   $143 = +__Z7b2CrossRK6b2Vec2S1_($140, $142);
   $rnB = $143;
   $144 = $mA;
   $145 = $mB;
   $146 = $144 + $145;
   $147 = $iA;
   $148 = $rnA;
   $149 = $147 * $148;
   $150 = $rnA;
   $151 = $149 * $150;
   $152 = $146 + $151;
   $153 = $iB;
   $154 = $rnB;
   $155 = $153 * $154;
   $156 = $rnB;
   $157 = $155 * $156;
   $158 = $152 + $157;
   $kNormal = $158;
   $159 = $kNormal;
   $160 = $159 > 0.0;
   $161 = $kNormal;
   $162 = 1.0 / $161;
   $163 = $160 ? $162 : 0.0;
   $164 = $vcp;
   $165 = $164 + 24 | 0;
   SAFE_HEAP_STORE_D($165 | 0, +$163, 4);
   $166 = $vc;
   $167 = $166 + 72 | 0;
   __Z7b2CrossRK6b2Vec2f($tangent, $167, 1.0);
   $168 = $vcp;
   $169 = +__Z7b2CrossRK6b2Vec2S1_($168, $tangent);
   $rtA = $169;
   $170 = $vcp;
   $171 = $170 + 8 | 0;
   $172 = +__Z7b2CrossRK6b2Vec2S1_($171, $tangent);
   $rtB = $172;
   $173 = $mA;
   $174 = $mB;
   $175 = $173 + $174;
   $176 = $iA;
   $177 = $rtA;
   $178 = $176 * $177;
   $179 = $rtA;
   $180 = $178 * $179;
   $181 = $175 + $180;
   $182 = $iB;
   $183 = $rtB;
   $184 = $182 * $183;
   $185 = $rtB;
   $186 = $184 * $185;
   $187 = $181 + $186;
   $kTangent = $187;
   $188 = $kTangent;
   $189 = $188 > 0.0;
   $190 = $kTangent;
   $191 = 1.0 / $190;
   $192 = $189 ? $191 : 0.0;
   $193 = $vcp;
   $194 = $193 + 28 | 0;
   SAFE_HEAP_STORE_D($194 | 0, +$192, 4);
   $195 = $vcp;
   $196 = $195 + 32 | 0;
   SAFE_HEAP_STORE_D($196 | 0, +(0.0), 4);
   $197 = $vc;
   $198 = $197 + 72 | 0;
   $199 = $wB;
   $200 = $vcp;
   $201 = $200 + 8 | 0;
   __Z7b2CrossfRK6b2Vec2($10, $199, $201);
   __ZplRK6b2Vec2S1_($9, $vB, $10);
   __ZmiRK6b2Vec2S1_($8, $9, $vA);
   $202 = $wA;
   $203 = $vcp;
   __Z7b2CrossfRK6b2Vec2($11, $202, $203);
   __ZmiRK6b2Vec2S1_($7, $8, $11);
   $204 = +__Z5b2DotRK6b2Vec2S1_($198, $7);
   $vRel = $204;
   $205 = $vRel;
   $206 = $205 < -1.0;
   if ($206) {
    $207 = $vc;
    $208 = $207 + 140 | 0;
    $209 = +(+SAFE_HEAP_LOAD_D($208 | 0, 4));
    $210 = -$209;
    $211 = $vRel;
    $212 = $210 * $211;
    $213 = $vcp;
    $214 = $213 + 32 | 0;
    SAFE_HEAP_STORE_D($214 | 0, +$212, 4);
   }
   $215 = $j;
   $216 = $215 + 1 | 0;
   $j = $216;
  }
  $217 = $123 + 148 | 0;
  $218 = SAFE_HEAP_LOAD($217 | 0, 4, 0) | 0 | 0;
  $219 = ($218 | 0) == 2;
  do {
   if ($219) {
    $220 = SAFE_HEAP_LOAD(3499 >> 0 | 0, 1, 0) | 0 | 0;
    $221 = $220 & 1;
    if ($221) {
     $222 = $vc;
     $vcp1 = $222;
     $223 = $vc;
     $224 = $223 + 36 | 0;
     $vcp2 = $224;
     $225 = $vcp1;
     $226 = $vc;
     $227 = $226 + 72 | 0;
     $228 = +__Z7b2CrossRK6b2Vec2S1_($225, $227);
     $rn1A = $228;
     $229 = $vcp1;
     $230 = $229 + 8 | 0;
     $231 = $vc;
     $232 = $231 + 72 | 0;
     $233 = +__Z7b2CrossRK6b2Vec2S1_($230, $232);
     $rn1B = $233;
     $234 = $vcp2;
     $235 = $vc;
     $236 = $235 + 72 | 0;
     $237 = +__Z7b2CrossRK6b2Vec2S1_($234, $236);
     $rn2A = $237;
     $238 = $vcp2;
     $239 = $238 + 8 | 0;
     $240 = $vc;
     $241 = $240 + 72 | 0;
     $242 = +__Z7b2CrossRK6b2Vec2S1_($239, $241);
     $rn2B = $242;
     $243 = $mA;
     $244 = $mB;
     $245 = $243 + $244;
     $246 = $iA;
     $247 = $rn1A;
     $248 = $246 * $247;
     $249 = $rn1A;
     $250 = $248 * $249;
     $251 = $245 + $250;
     $252 = $iB;
     $253 = $rn1B;
     $254 = $252 * $253;
     $255 = $rn1B;
     $256 = $254 * $255;
     $257 = $251 + $256;
     $k11 = $257;
     $258 = $mA;
     $259 = $mB;
     $260 = $258 + $259;
     $261 = $iA;
     $262 = $rn2A;
     $263 = $261 * $262;
     $264 = $rn2A;
     $265 = $263 * $264;
     $266 = $260 + $265;
     $267 = $iB;
     $268 = $rn2B;
     $269 = $267 * $268;
     $270 = $rn2B;
     $271 = $269 * $270;
     $272 = $266 + $271;
     $k22 = $272;
     $273 = $mA;
     $274 = $mB;
     $275 = $273 + $274;
     $276 = $iA;
     $277 = $rn1A;
     $278 = $276 * $277;
     $279 = $rn2A;
     $280 = $278 * $279;
     $281 = $275 + $280;
     $282 = $iB;
     $283 = $rn1B;
     $284 = $282 * $283;
     $285 = $rn2B;
     $286 = $284 * $285;
     $287 = $281 + $286;
     $k12 = $287;
     $k_maxConditionNumber = 1.0e3;
     $288 = $k11;
     $289 = $k11;
     $290 = $288 * $289;
     $291 = $k11;
     $292 = $k22;
     $293 = $291 * $292;
     $294 = $k12;
     $295 = $k12;
     $296 = $294 * $295;
     $297 = $293 - $296;
     $298 = 1.0e3 * $297;
     $299 = $290 < $298;
     $300 = $vc;
     if ($299) {
      $301 = $300 + 96 | 0;
      $302 = $k11;
      $303 = $k12;
      __ZN6b2Vec23SetEff($301, $302, $303);
      $304 = $vc;
      $305 = $304 + 96 | 0;
      $306 = $305 + 8 | 0;
      $307 = $k12;
      $308 = $k22;
      __ZN6b2Vec23SetEff($306, $307, $308);
      $309 = $vc;
      $310 = $309 + 80 | 0;
      $311 = $vc;
      $312 = $311 + 96 | 0;
      __ZNK7b2Mat2210GetInverseEv($12, $312);
      {}
      SAFE_HEAP_STORE($310 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($310 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($310 + 8 | 0, SAFE_HEAP_LOAD($12 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($310 + 12 | 0, SAFE_HEAP_LOAD($12 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
      break;
     } else {
      $313 = $300 + 148 | 0;
      SAFE_HEAP_STORE($313 | 0, 1 | 0, 4);
      break;
     }
    }
   }
  } while (0);
  $314 = $i;
  $315 = $314 + 1 | 0;
  $i = $315;
 }
 if ((label | 0) == 4) {
  ___assert_fail(6027 | 0, 6052 | 0, 172, 6120 | 0);
 } else if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}

function __Z9initStartv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $body = 0, $bodyDef = 0, $dynamicBall = 0, $fixtureDef = 0, $gravity = 0, $groundBody = 0, $groundBodyDef = 0, $groundBox = 0, $i = 0, $px = 0.0, $py = 0.0, $randCol = 0, $wallBox = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $gravity = sp + 584 | 0;
 $groundBodyDef = sp + 524 | 0;
 $wallBox = sp + 368 | 0;
 $2 = sp + 360 | 0;
 $3 = sp + 352 | 0;
 $groundBox = sp + 200 | 0;
 $4 = sp + 184 | 0;
 $5 = sp + 172 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 148 | 0;
 $8 = sp + 136 | 0;
 $9 = sp + 124 | 0;
 $bodyDef = sp + 60 | 0;
 $body = sp + 52 | 0;
 $dynamicBall = sp + 32 | 0;
 $fixtureDef = sp + 4 | 0;
 _srand(0);
 $11 = __Znwj(24) | 0;
 {}
 SAFE_HEAP_STORE($11 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 4 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 8 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 12 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 16 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 20 | 0, 0 | 0 | 0, 4);
 __ZN5SceneC2Ev($11);
 SAFE_HEAP_STORE(700 | 0, $11 | 0, 4);
 __ZN6b2Vec2C2Eff($gravity, 0.0, -7.0);
 $12 = __Znwj(103028) | 0;
 __THREW__ = 0;
 invoke_vii(96, $12 | 0, $gravity | 0);
 $13 = __THREW__;
 __THREW__ = 0;
 $14 = $13 & 1;
 if ($14) {
  $72 = ___cxa_find_matching_catch() | 0;
  $73 = tempRet0;
  $0 = $72;
  $1 = $73;
  __ZdlPv($12);
  $144 = $0;
  $145 = $1;
  ___resumeException($144 | 0);
 }
 SAFE_HEAP_STORE(696 | 0, $12 | 0, 4);
 __ZN9b2BodyDefC2Ev($groundBodyDef);
 $15 = $groundBodyDef + 4 | 0;
 __ZN6b2Vec23SetEff($15, 0.0, -10.0);
 $16 = SAFE_HEAP_LOAD(696 | 0, 4, 0) | 0 | 0;
 $17 = __ZN7b2World10CreateBodyEPK9b2BodyDef($16, $groundBodyDef) | 0;
 $groundBody = $17;
 __ZN14b2PolygonShapeC2Ev($wallBox);
 __THREW__ = 0;
 invoke_vidd(97, $2 | 0, -10.0, 0.0);
 $18 = __THREW__;
 __THREW__ = 0;
 $19 = $18 & 1;
 if ($19) {
  label = 25;
 } else {
  __THREW__ = 0;
  invoke_viddid(98, $wallBox | 0, 8.0, 50.0, $2 | 0, 0.0);
  $20 = __THREW__;
  __THREW__ = 0;
  $21 = $20 & 1;
  if ($21) {
   label = 25;
  } else {
   $22 = $groundBody;
   __THREW__ = 0;
   invoke_iiid(99, $22 | 0, $wallBox | 0, 0.0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if ($24) {
    label = 25;
   } else {
    __THREW__ = 0;
    invoke_vidd(97, $3 | 0, 10.0, 0.0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if ($26) {
     label = 25;
    } else {
     __THREW__ = 0;
     invoke_viddid(98, $wallBox | 0, 8.0, 50.0, $3 | 0, 0.0);
     $27 = __THREW__;
     __THREW__ = 0;
     $28 = $27 & 1;
     if ($28) {
      label = 25;
     } else {
      $29 = $groundBody;
      __THREW__ = 0;
      invoke_iiid(99, $29 | 0, $wallBox | 0, 0.0) | 0;
      $30 = __THREW__;
      __THREW__ = 0;
      $31 = $30 & 1;
      if ($31) {
       label = 25;
      } else {
       __THREW__ = 0;
       invoke_vi(100, $groundBox | 0);
       $32 = __THREW__;
       __THREW__ = 0;
       $33 = $32 & 1;
       if ($33) {
        label = 25;
       } else {
        __THREW__ = 0;
        invoke_vidd(101, $groundBox | 0, 50.0, 10.0);
        $34 = __THREW__;
        __THREW__ = 0;
        $35 = $34 & 1;
        L13 : do {
         if ($35) {
          label = 26;
         } else {
          $36 = $groundBody;
          __THREW__ = 0;
          invoke_iiid(99, $36 | 0, $groundBox | 0, 0.0) | 0;
          $37 = __THREW__;
          __THREW__ = 0;
          $38 = $37 & 1;
          if ($38) {
           label = 26;
          } else {
           $39 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
           $40 = $39 + 12 | 0;
           __THREW__ = 0;
           invoke_vii(102, $5 | 0, 2572 | 0);
           $41 = __THREW__;
           __THREW__ = 0;
           $42 = $41 & 1;
           if ($42) {
            label = 26;
           } else {
            __THREW__ = 0;
            invoke_vii(103, $4 | 0, $5 | 0);
            $43 = __THREW__;
            __THREW__ = 0;
            $44 = $43 & 1;
            do {
             if ($44) {
              $78 = ___cxa_find_matching_catch() | 0;
              $79 = tempRet0;
              $0 = $78;
              $1 = $79;
             } else {
              __THREW__ = 0;
              invoke_vii(104, $40 | 0, $4 | 0);
              $45 = __THREW__;
              __THREW__ = 0;
              $46 = $45 & 1;
              if ($46) {
               $80 = ___cxa_find_matching_catch() | 0;
               $81 = tempRet0;
               $0 = $80;
               $1 = $81;
               __ZN6SpriteD2Ev($4);
               break;
              }
              __ZN6SpriteD2Ev($4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
              $47 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
              $48 = $47 + 12 | 0;
              __THREW__ = 0;
              invoke_vii(102, $7 | 0, 2580 | 0);
              $49 = __THREW__;
              __THREW__ = 0;
              $50 = $49 & 1;
              if ($50) {
               label = 26;
               break L13;
              }
              __THREW__ = 0;
              invoke_vii(103, $6 | 0, $7 | 0);
              $51 = __THREW__;
              __THREW__ = 0;
              $52 = $51 & 1;
              do {
               if ($52) {
                $82 = ___cxa_find_matching_catch() | 0;
                $83 = tempRet0;
                $0 = $82;
                $1 = $83;
               } else {
                __THREW__ = 0;
                invoke_vii(104, $48 | 0, $6 | 0);
                $53 = __THREW__;
                __THREW__ = 0;
                $54 = $53 & 1;
                if ($54) {
                 $84 = ___cxa_find_matching_catch() | 0;
                 $85 = tempRet0;
                 $0 = $84;
                 $1 = $85;
                 __ZN6SpriteD2Ev($6);
                 break;
                }
                __ZN6SpriteD2Ev($6);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
                $55 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
                $56 = $55 + 12 | 0;
                __THREW__ = 0;
                invoke_vii(102, $9 | 0, 2588 | 0);
                $57 = __THREW__;
                __THREW__ = 0;
                $58 = $57 & 1;
                if ($58) {
                 label = 26;
                 break L13;
                }
                __THREW__ = 0;
                invoke_vii(103, $8 | 0, $9 | 0);
                $59 = __THREW__;
                __THREW__ = 0;
                $60 = $59 & 1;
                do {
                 if ($60) {
                  $86 = ___cxa_find_matching_catch() | 0;
                  $87 = tempRet0;
                  $0 = $86;
                  $1 = $87;
                 } else {
                  __THREW__ = 0;
                  invoke_vii(104, $56 | 0, $8 | 0);
                  $61 = __THREW__;
                  __THREW__ = 0;
                  $62 = $61 & 1;
                  if ($62) {
                   $88 = ___cxa_find_matching_catch() | 0;
                   $89 = tempRet0;
                   $0 = $88;
                   $1 = $89;
                   __ZN6SpriteD2Ev($8);
                   break;
                  }
                  __ZN6SpriteD2Ev($8);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
                  $px = -1.2000000476837158;
                  $py = 10.0;
                  $i = 0;
                  while (1) {
                   $63 = $i;
                   $64 = ($63 | 0) < 50;
                   if (!$64) {
                    label = 50;
                    break;
                   }
                   $65 = $i;
                   $66 = ($65 | 0) % 5 & -1;
                   $67 = ($66 | 0) != 0;
                   if ($67) {
                    $68 = $px;
                    $69 = $68;
                    $70 = $69 + .48;
                    $71 = $70;
                    $px = $71;
                   } else {
                    $px = -1.2000000476837158;
                    $90 = $i;
                    $91 = ($90 | 0) % 10 & -1;
                    $92 = ($91 | 0) != 0;
                    if ($92) {
                     $93 = $px;
                     $94 = $93;
                     $95 = $94 + .5;
                     $96 = $95;
                     $px = $96;
                    }
                    $97 = $py;
                    $98 = $97;
                    $99 = $98 - .8;
                    $100 = $99;
                    $py = $100;
                   }
                   __THREW__ = 0;
                   invoke_vi(105, $bodyDef | 0);
                   $101 = __THREW__;
                   __THREW__ = 0;
                   $102 = $101 & 1;
                   if ($102) {
                    label = 26;
                    break L13;
                   }
                   SAFE_HEAP_STORE($bodyDef | 0, 2 | 0, 4);
                   $103 = $bodyDef + 4 | 0;
                   $104 = $px;
                   $105 = $py;
                   __THREW__ = 0;
                   invoke_vidd(106, $103 | 0, +$104, +$105);
                   $106 = __THREW__;
                   __THREW__ = 0;
                   $107 = $106 & 1;
                   if ($107) {
                    label = 26;
                    break L13;
                   }
                   __THREW__ = 0;
                   $108 = invoke_i(107) | 0;
                   $109 = __THREW__;
                   __THREW__ = 0;
                   $110 = $109 & 1;
                   if ($110) {
                    label = 26;
                    break L13;
                   }
                   $111 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
                   $112 = $111 + 12 | 0;
                   $113 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($112) | 0;
                   $114 = ($108 >>> 0) % ($113 >>> 0) & -1;
                   $randCol = $114;
                   $115 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
                   $116 = $115 + 12 | 0;
                   $117 = $randCol;
                   __THREW__ = 0;
                   $118 = invoke_iii(108, $116 | 0, $117 | 0) | 0;
                   $119 = __THREW__;
                   __THREW__ = 0;
                   $120 = $119 & 1;
                   if ($120) {
                    label = 26;
                    break L13;
                   }
                   $121 = $bodyDef + 44 | 0;
                   SAFE_HEAP_STORE($121 | 0, $118 | 0, 4);
                   $122 = SAFE_HEAP_LOAD(696 | 0, 4, 0) | 0 | 0;
                   __THREW__ = 0;
                   $123 = invoke_iii(109, $122 | 0, $bodyDef | 0) | 0;
                   $124 = __THREW__;
                   __THREW__ = 0;
                   $125 = $124 & 1;
                   if ($125) {
                    label = 26;
                    break L13;
                   }
                   SAFE_HEAP_STORE($body | 0, $123 | 0, 4);
                   $126 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
                   __THREW__ = 0;
                   invoke_vii(110, $126 | 0, $body | 0);
                   $127 = __THREW__;
                   __THREW__ = 0;
                   $128 = $127 & 1;
                   if ($128) {
                    label = 26;
                    break L13;
                   }
                   __THREW__ = 0;
                   invoke_vi(111, $dynamicBall | 0);
                   $129 = __THREW__;
                   __THREW__ = 0;
                   $130 = $129 & 1;
                   if ($130) {
                    label = 26;
                    break L13;
                   }
                   $131 = $dynamicBall + 8 | 0;
                   SAFE_HEAP_STORE_D($131 | 0, +(.20000000298023224), 4);
                   __THREW__ = 0;
                   invoke_vi(112, $fixtureDef | 0);
                   $132 = __THREW__;
                   __THREW__ = 0;
                   $133 = $132 & 1;
                   if ($133) {
                    label = 49;
                    break;
                   }
                   SAFE_HEAP_STORE($fixtureDef | 0, $dynamicBall | 0, 4);
                   $134 = $fixtureDef + 12 | 0;
                   SAFE_HEAP_STORE_D($134 | 0, +(.30000001192092896), 4);
                   $135 = $fixtureDef + 16 | 0;
                   SAFE_HEAP_STORE_D($135 | 0, +(1.0), 4);
                   $136 = $fixtureDef + 8 | 0;
                   SAFE_HEAP_STORE_D($136 | 0, +(.30000001192092896), 4);
                   $137 = SAFE_HEAP_LOAD($body | 0, 4, 0) | 0 | 0;
                   __THREW__ = 0;
                   invoke_iii(113, $137 | 0, $fixtureDef | 0) | 0;
                   $138 = __THREW__;
                   __THREW__ = 0;
                   $139 = $138 & 1;
                   if ($139) {
                    label = 49;
                    break;
                   }
                   __ZN13b2CircleShapeD2Ev($dynamicBall);
                   $140 = $i;
                   $141 = $140 + 1 | 0;
                   $i = $141;
                  }
                  if ((label | 0) == 49) {
                   $142 = ___cxa_find_matching_catch() | 0;
                   $143 = tempRet0;
                   $0 = $142;
                   $1 = $143;
                   __ZN13b2CircleShapeD2Ev($dynamicBall);
                   break L13;
                  } else if ((label | 0) == 50) {
                   $10 = 1;
                   __ZN14b2PolygonShapeD2Ev($groundBox);
                   __ZN14b2PolygonShapeD2Ev($wallBox);
                   STACKTOP = sp;
                   return 0;
                  }
                 }
                } while (0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
                break L13;
               }
              } while (0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
              break L13;
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
           }
          }
         }
        } while (0);
        if ((label | 0) == 26) {
         $76 = ___cxa_find_matching_catch() | 0;
         $77 = tempRet0;
         $0 = $76;
         $1 = $77;
        }
        __ZN14b2PolygonShapeD2Ev($groundBox);
       }
      }
     }
    }
   }
  }
 }
 if ((label | 0) == 25) {
  $74 = ___cxa_find_matching_catch() | 0;
  $75 = tempRet0;
  $0 = $74;
  $1 = $75;
 }
 __ZN14b2PolygonShapeD2Ev($wallBox);
 $144 = $0;
 $145 = $1;
 ___resumeException($144 | 0);
 return 0 | 0;
}

function __ZN8b2Island8SolveTOIERK10b2TimeStepii($this, $subStep, $toiIndexA, $toiIndexB) {
 $this = $this | 0;
 $subStep = $subStep | 0;
 $toiIndexA = $toiIndexA | 0;
 $toiIndexB = $toiIndexB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a = 0.0, $b = 0, $body = 0, $c = 0, $contactSolver = 0, $contactSolverDef = 0, $contactsOkay = 0, $h = 0.0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $ratio = 0.0, $ratio4 = 0.0, $rotation = 0.0, $translation = 0, $v = 0, $w = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $contactSolverDef = sp + 148 | 0;
 $contactSolver = sp + 96 | 0;
 $c = sp + 64 | 0;
 $v = sp + 48 | 0;
 $translation = sp + 32 | 0;
 $6 = sp + 8 | 0;
 $0 = $this;
 $1 = $subStep;
 $2 = $toiIndexA;
 $3 = $toiIndexB;
 $7 = $0;
 $8 = $2;
 $9 = $7 + 28 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($8 | 0) < ($10 | 0);
 if (!$11) {
  ___assert_fail(6237 | 0, 6261 | 0, 386, 6313 | 0);
 }
 $12 = $3;
 $13 = $7 + 28 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = ($12 | 0) < ($14 | 0);
 if (!$15) {
  ___assert_fail(6322 | 0, 6261 | 0, 387, 6313 | 0);
 }
 $i = 0;
 while (1) {
  $16 = $i;
  $17 = $7 + 28 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = ($16 | 0) < ($18 | 0);
  if (!$19) {
   break;
  }
  $20 = $i;
  $21 = $7 + 8 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 + ($20 << 2) | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $b = $24;
  $25 = $i;
  $26 = $7 + 20 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 + ($25 * 12 | 0) | 0;
  $29 = $b;
  $30 = $29 + 28 | 0;
  $31 = $30 + 16 | 0;
  {}
  SAFE_HEAP_STORE($28 | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($28 + 4 | 0, SAFE_HEAP_LOAD($31 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $32 = $b;
  $33 = $32 + 28 | 0;
  $34 = $33 + 28 | 0;
  $35 = +(+SAFE_HEAP_LOAD_D($34 | 0, 4));
  $36 = $i;
  $37 = $7 + 20 | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = $38 + ($36 * 12 | 0) | 0;
  $40 = $39 + 8 | 0;
  SAFE_HEAP_STORE_D($40 | 0, +$35, 4);
  $41 = $i;
  $42 = $7 + 24 | 0;
  $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
  $44 = $43 + ($41 * 12 | 0) | 0;
  $45 = $b;
  $46 = $45 + 64 | 0;
  {}
  SAFE_HEAP_STORE($44 | 0, SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($44 + 4 | 0, SAFE_HEAP_LOAD($46 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $47 = $b;
  $48 = $47 + 72 | 0;
  $49 = +(+SAFE_HEAP_LOAD_D($48 | 0, 4));
  $50 = $i;
  $51 = $7 + 24 | 0;
  $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
  $53 = $52 + ($50 * 12 | 0) | 0;
  $54 = $53 + 8 | 0;
  SAFE_HEAP_STORE_D($54 | 0, +$49, 4);
  $55 = $i;
  $56 = $55 + 1 | 0;
  $i = $56;
 }
 $57 = $7 + 12 | 0;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $59 = $contactSolverDef + 24 | 0;
 SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
 $60 = $7 + 36 | 0;
 $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
 $62 = $contactSolverDef + 28 | 0;
 SAFE_HEAP_STORE($62 | 0, $61 | 0, 4);
 $63 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $64 = $contactSolverDef + 40 | 0;
 SAFE_HEAP_STORE($64 | 0, $63 | 0, 4);
 $65 = $1;
 {}
 SAFE_HEAP_STORE($contactSolverDef | 0, SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 4 | 0, SAFE_HEAP_LOAD($65 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 8 | 0, SAFE_HEAP_LOAD($65 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 12 | 0, SAFE_HEAP_LOAD($65 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 16 | 0, SAFE_HEAP_LOAD($65 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($contactSolverDef + 20 | 0, SAFE_HEAP_LOAD($65 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 $66 = $7 + 20 | 0;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = $contactSolverDef + 32 | 0;
 SAFE_HEAP_STORE($68 | 0, $67 | 0, 4);
 $69 = $7 + 24 | 0;
 $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
 $71 = $contactSolverDef + 36 | 0;
 SAFE_HEAP_STORE($71 | 0, $70 | 0, 4);
 __ZN15b2ContactSolverC2EP18b2ContactSolverDef($contactSolver, $contactSolverDef);
 $i1 = 0;
 while (1) {
  $72 = $i1;
  $73 = $1;
  $74 = $73 + 16 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = ($72 | 0) < ($75 | 0);
  if (!$76) {
   label = 14;
   break;
  }
  $77 = $2;
  $78 = $3;
  __THREW__ = 0;
  $79 = invoke_iiii(162, $contactSolver | 0, $77 | 0, $78 | 0) | 0;
  $80 = __THREW__;
  __THREW__ = 0;
  $81 = $80 & 1;
  if ($81) {
   break;
  }
  $82 = $79 & 1;
  $contactsOkay = $82;
  $83 = $contactsOkay;
  $84 = $83 & 1;
  if ($84) {
   label = 14;
   break;
  }
  $89 = $i1;
  $90 = $89 + 1 | 0;
  $i1 = $90;
 }
 L16 : do {
  if ((label | 0) == 14) {
   $91 = $2;
   $92 = $7 + 8 | 0;
   $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
   $94 = $93 + ($91 << 2) | 0;
   $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
   $96 = $95 + 28 | 0;
   $97 = $96 + 8 | 0;
   $98 = $2;
   $99 = $7 + 20 | 0;
   $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
   $101 = $100 + ($98 * 12 | 0) | 0;
   {}
   SAFE_HEAP_STORE($97 | 0, SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($97 + 4 | 0, SAFE_HEAP_LOAD($101 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $102 = $2;
   $103 = $7 + 20 | 0;
   $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
   $105 = $104 + ($102 * 12 | 0) | 0;
   $106 = $105 + 8 | 0;
   $107 = +(+SAFE_HEAP_LOAD_D($106 | 0, 4));
   $108 = $2;
   $109 = $7 + 8 | 0;
   $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
   $111 = $110 + ($108 << 2) | 0;
   $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
   $113 = $112 + 28 | 0;
   $114 = $113 + 24 | 0;
   SAFE_HEAP_STORE_D($114 | 0, +$107, 4);
   $115 = $3;
   $116 = $7 + 8 | 0;
   $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
   $118 = $117 + ($115 << 2) | 0;
   $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
   $120 = $119 + 28 | 0;
   $121 = $120 + 8 | 0;
   $122 = $3;
   $123 = $7 + 20 | 0;
   $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
   $125 = $124 + ($122 * 12 | 0) | 0;
   {}
   SAFE_HEAP_STORE($121 | 0, SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($121 + 4 | 0, SAFE_HEAP_LOAD($125 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $126 = $3;
   $127 = $7 + 20 | 0;
   $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
   $129 = $128 + ($126 * 12 | 0) | 0;
   $130 = $129 + 8 | 0;
   $131 = +(+SAFE_HEAP_LOAD_D($130 | 0, 4));
   $132 = $3;
   $133 = $7 + 8 | 0;
   $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
   $135 = $134 + ($132 << 2) | 0;
   $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
   $137 = $136 + 28 | 0;
   $138 = $137 + 24 | 0;
   SAFE_HEAP_STORE_D($138 | 0, +$131, 4);
   __THREW__ = 0;
   invoke_vi(144, $contactSolver | 0);
   $139 = __THREW__;
   __THREW__ = 0;
   $140 = $139 & 1;
   if (!$140) {
    $i2 = 0;
    while (1) {
     $141 = $i2;
     $142 = $1;
     $143 = $142 + 12 | 0;
     $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
     $145 = ($141 | 0) < ($144 | 0);
     if (!$145) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(148, $contactSolver | 0);
     $146 = __THREW__;
     __THREW__ = 0;
     $147 = $146 & 1;
     if ($147) {
      break L16;
     }
     $148 = $i2;
     $149 = $148 + 1 | 0;
     $i2 = $149;
    }
    $150 = $1;
    $151 = +(+SAFE_HEAP_LOAD_D($150 | 0, 4));
    $h = $151;
    $i3 = 0;
    while (1) {
     $152 = $i3;
     $153 = $7 + 28 | 0;
     $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
     $155 = ($152 | 0) < ($154 | 0);
     if (!$155) {
      break;
     }
     $156 = $i3;
     $157 = $7 + 20 | 0;
     $158 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
     $159 = $158 + ($156 * 12 | 0) | 0;
     {}
     SAFE_HEAP_STORE($c | 0, SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($c + 4 | 0, SAFE_HEAP_LOAD($159 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $160 = $i3;
     $161 = $7 + 20 | 0;
     $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
     $163 = $162 + ($160 * 12 | 0) | 0;
     $164 = $163 + 8 | 0;
     $165 = +(+SAFE_HEAP_LOAD_D($164 | 0, 4));
     $a = $165;
     $166 = $i3;
     $167 = $7 + 24 | 0;
     $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
     $169 = $168 + ($166 * 12 | 0) | 0;
     {}
     SAFE_HEAP_STORE($v | 0, SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($v + 4 | 0, SAFE_HEAP_LOAD($169 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $170 = $i3;
     $171 = $7 + 24 | 0;
     $172 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
     $173 = $172 + ($170 * 12 | 0) | 0;
     $174 = $173 + 8 | 0;
     $175 = +(+SAFE_HEAP_LOAD_D($174 | 0, 4));
     $w = $175;
     $176 = $h;
     __THREW__ = 0;
     invoke_vidi(150, $translation | 0, +$176, $v | 0);
     $177 = __THREW__;
     __THREW__ = 0;
     $178 = $177 & 1;
     if ($178) {
      break L16;
     }
     __THREW__ = 0;
     $179 = +invoke_dii(151, $translation | 0, $translation | 0);
     $180 = __THREW__;
     __THREW__ = 0;
     $181 = $180 & 1;
     if ($181) {
      break L16;
     }
     $182 = $179 > 4.0;
     if ($182) {
      __THREW__ = 0;
      $183 = +invoke_di(152, $translation | 0);
      $184 = __THREW__;
      __THREW__ = 0;
      $185 = $184 & 1;
      if ($185) {
       break L16;
      }
      $186 = 2.0 / $183;
      $ratio = $186;
      $187 = $ratio;
      __THREW__ = 0;
      invoke_vid(153, $v | 0, +$187);
      $188 = __THREW__;
      __THREW__ = 0;
      $189 = $188 & 1;
      if ($189) {
       break L16;
      }
     }
     $190 = $h;
     $191 = $w;
     $192 = $190 * $191;
     $rotation = $192;
     $193 = $rotation;
     $194 = $rotation;
     $195 = $193 * $194;
     $196 = $195 > 2.4674012660980225;
     if ($196) {
      $197 = $rotation;
      __THREW__ = 0;
      $198 = +invoke_dd(154, +$197);
      $199 = __THREW__;
      __THREW__ = 0;
      $200 = $199 & 1;
      if ($200) {
       break L16;
      }
      $201 = 1.5707963705062866 / $198;
      $ratio4 = $201;
      $202 = $ratio4;
      $203 = $w;
      $204 = $203 * $202;
      $w = $204;
     }
     $205 = $h;
     __THREW__ = 0;
     invoke_vidi(150, $6 | 0, +$205, $v | 0);
     $206 = __THREW__;
     __THREW__ = 0;
     $207 = $206 & 1;
     if ($207) {
      break L16;
     }
     __THREW__ = 0;
     invoke_vii(155, $c | 0, $6 | 0);
     $208 = __THREW__;
     __THREW__ = 0;
     $209 = $208 & 1;
     if ($209) {
      break L16;
     }
     $210 = $h;
     $211 = $w;
     $212 = $210 * $211;
     $213 = $a;
     $214 = $213 + $212;
     $a = $214;
     $215 = $i3;
     $216 = $7 + 20 | 0;
     $217 = SAFE_HEAP_LOAD($216 | 0, 4, 0) | 0 | 0;
     $218 = $217 + ($215 * 12 | 0) | 0;
     {}
     SAFE_HEAP_STORE($218 | 0, SAFE_HEAP_LOAD($c | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($218 + 4 | 0, SAFE_HEAP_LOAD($c + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $219 = $a;
     $220 = $i3;
     $221 = $7 + 20 | 0;
     $222 = SAFE_HEAP_LOAD($221 | 0, 4, 0) | 0 | 0;
     $223 = $222 + ($220 * 12 | 0) | 0;
     $224 = $223 + 8 | 0;
     SAFE_HEAP_STORE_D($224 | 0, +$219, 4);
     $225 = $i3;
     $226 = $7 + 24 | 0;
     $227 = SAFE_HEAP_LOAD($226 | 0, 4, 0) | 0 | 0;
     $228 = $227 + ($225 * 12 | 0) | 0;
     {}
     SAFE_HEAP_STORE($228 | 0, SAFE_HEAP_LOAD($v | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($228 + 4 | 0, SAFE_HEAP_LOAD($v + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $229 = $w;
     $230 = $i3;
     $231 = $7 + 24 | 0;
     $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
     $233 = $232 + ($230 * 12 | 0) | 0;
     $234 = $233 + 8 | 0;
     SAFE_HEAP_STORE_D($234 | 0, +$229, 4);
     $235 = $i3;
     $236 = $7 + 8 | 0;
     $237 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
     $238 = $237 + ($235 << 2) | 0;
     $239 = SAFE_HEAP_LOAD($238 | 0, 4, 0) | 0 | 0;
     $body = $239;
     $240 = $body;
     $241 = $240 + 28 | 0;
     $242 = $241 + 16 | 0;
     {}
     SAFE_HEAP_STORE($242 | 0, SAFE_HEAP_LOAD($c | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($242 + 4 | 0, SAFE_HEAP_LOAD($c + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $243 = $a;
     $244 = $body;
     $245 = $244 + 28 | 0;
     $246 = $245 + 28 | 0;
     SAFE_HEAP_STORE_D($246 | 0, +$243, 4);
     $247 = $body;
     $248 = $247 + 64 | 0;
     {}
     SAFE_HEAP_STORE($248 | 0, SAFE_HEAP_LOAD($v | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($248 + 4 | 0, SAFE_HEAP_LOAD($v + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $249 = $w;
     $250 = $body;
     $251 = $250 + 72 | 0;
     SAFE_HEAP_STORE_D($251 | 0, +$249, 4);
     $252 = $body;
     __THREW__ = 0;
     invoke_vi(157, $252 | 0);
     $253 = __THREW__;
     __THREW__ = 0;
     $254 = $253 & 1;
     if ($254) {
      break L16;
     }
     $255 = $i3;
     $256 = $255 + 1 | 0;
     $i3 = $256;
    }
    $257 = $contactSolver + 40 | 0;
    $258 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
    __THREW__ = 0;
    invoke_vii(158, $7 | 0, $258 | 0);
    $259 = __THREW__;
    __THREW__ = 0;
    $260 = $259 & 1;
    if (!$260) {
     __ZN15b2ContactSolverD2Ev($contactSolver);
     STACKTOP = sp;
     return;
    }
   }
  }
 } while (0);
 $85 = ___cxa_find_matching_catch() | 0;
 $86 = tempRet0;
 $4 = $85;
 $5 = $86;
 __ZN15b2ContactSolverD2Ev($contactSolver);
 $87 = $4;
 $88 = $5;
 ___resumeException($87 | 0);
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$$$i$i$i = 0, $$$$i$i$i28 = 0, $$$i$i$i = 0, $$$i$i$i27 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$57 = 0, $$6 = 0, $$68 = 0, $$pre$i = 0;
 var $$pre$i32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $op1 = 0, $op2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $op2 = sp + 84 | 0;
 $op1 = sp + 72 | 0;
 $0 = sp + 60 | 0;
 $1 = sp + 48 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 $7 = ($6 | 0) == ($first | 0);
 L1 : do {
  if ($7) {
   $$0 = $first;
  } else {
   $8 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6, $last, $db) | 0;
   $9 = ($8 | 0) == ($6 | 0);
   $10 = $db + 4 | 0;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   if ($9) {
    $153 = $11 + -24 | 0;
    $155 = $11;
    while (1) {
     $154 = $155 + -24 | 0;
     SAFE_HEAP_STORE($10 | 0, $154 | 0, 4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($154);
     $$pre$i32 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
     $156 = ($$pre$i32 | 0) == ($153 | 0);
     if ($156) {
      $$0 = $first;
      break L1;
     } else {
      $155 = $$pre$i32;
     }
    }
   }
   $12 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
   $13 = $11;
   $14 = $12;
   $15 = $13 - $14 | 0;
   $16 = ($15 | 0) / 24 & -1;
   $17 = $16 >>> 0 < 2;
   if ($17) {
    $$0 = $first;
   } else {
    $18 = $11 + -24 | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $18);
    $19 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
    $20 = $19 + -24 | 0;
    $22 = $19;
    while (1) {
     $21 = $22 + -24 | 0;
     SAFE_HEAP_STORE($10 | 0, $21 | 0, 4);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$pre$i = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
     $23 = ($$pre$i | 0) == ($20 | 0);
     if ($23) {
      break;
     } else {
      $22 = $$pre$i;
     }
    }
    $24 = $19 + -48 | 0;
    __THREW__ = 0;
    invoke_vii(232, $op1 | 0, $24 | 0);
    $25 = __THREW__;
    __THREW__ = 0;
    $26 = $25 & 1;
    if ($26) {
     $57 = ___cxa_find_matching_catch() | 0;
     $58 = tempRet0;
     $$6 = $58;
     $$68 = $57;
    } else {
     $27 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
     $28 = $27 + -24 | 0;
     $29 = SAFE_HEAP_LOAD($28 >> 0 | 0, 1, 0) | 0 | 0;
     $30 = $29 & 1;
     $31 = $30 << 24 >> 24 == 0;
     if ($31) {
      $35 = $28 + 1 | 0;
      SAFE_HEAP_STORE($35 >> 0 | 0, 0 | 0, 1);
      SAFE_HEAP_STORE($28 >> 0 | 0, 0 | 0, 1);
     } else {
      $32 = $27 + -16 | 0;
      $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
      SAFE_HEAP_STORE($33 >> 0 | 0, 0 | 0, 1);
      $34 = $27 + -20 | 0;
      SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
     }
     $36 = SAFE_HEAP_LOAD($op >> 0 | 0, 1, 0) | 0 | 0;
     $37 = $36 & 1;
     $38 = $37 << 24 >> 24 == 0;
     $39 = $op + 4 | 0;
     $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
     $41 = $36 & 255;
     $42 = $41 >>> 1;
     $43 = $38 ? $42 : $40;
     $44 = $op + 8 | 0;
     $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
     $46 = $op + 1 | 0;
     $47 = $38 ? $46 : $45;
     $48 = $43 >>> 0 > 1;
     $49 = $48 ? 1 : $43;
     $50 = _memcmp($47, 10371, $49) | 0;
     $51 = ($50 | 0) == 0;
     $52 = ($43 | 0) == 0;
     $$$i$i$i = $48 & 1;
     $$$$i$i$i = $52 ? -1 : $$$i$i$i;
     $53 = $51 ? $$$$i$i$i : $50;
     $54 = ($53 | 0) == 0;
     if ($54) {
      __THREW__ = 0;
      invoke_vii(234, $28 | 0, 40);
      $55 = __THREW__;
      __THREW__ = 0;
      $56 = $55 & 1;
      if ($56) {
       label = 13;
      } else {
       label = 14;
      }
     } else {
      label = 14;
     }
     L21 : do {
      if ((label | 0) == 14) {
       __THREW__ = 0;
       invoke_viii(243, $5 | 0, 10307 | 0, $op1 | 0);
       $61 = __THREW__;
       __THREW__ = 0;
       $62 = $61 & 1;
       if ($62) {
        label = 13;
       } else {
        __THREW__ = 0;
        $63 = invoke_iii(228, $5 | 0, 11600 | 0) | 0;
        $64 = __THREW__;
        __THREW__ = 0;
        $65 = $64 & 1;
        if ($65) {
         $141 = ___cxa_find_matching_catch() | 0;
         $142 = tempRet0;
         $$4 = $142;
         $$46 = $141;
        } else {
         {}
         SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($63 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($63 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
         $66 = $63 + 4 | 0;
         SAFE_HEAP_STORE($66 | 0, 0 | 0, 4);
         $67 = $63 + 8 | 0;
         SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
         $68 = SAFE_HEAP_LOAD($op >> 0 | 0, 1, 0) | 0 | 0;
         $69 = $68 & 1;
         $70 = $69 << 24 >> 24 == 0;
         $71 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
         $72 = $70 ? $46 : $71;
         $73 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
         $74 = $68 & 255;
         $75 = $74 >>> 1;
         $76 = $70 ? $75 : $73;
         __THREW__ = 0;
         $77 = invoke_iiii(222, $4 | 0, $72 | 0, $76 | 0) | 0;
         $78 = __THREW__;
         __THREW__ = 0;
         $79 = $78 & 1;
         if ($79) {
          $143 = ___cxa_find_matching_catch() | 0;
          $144 = tempRet0;
          $$3 = $144;
          $$35 = $143;
         } else {
          {}
          SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($77 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($77 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($77 | 0, 0 | 0, 4);
          $80 = $77 + 4 | 0;
          SAFE_HEAP_STORE($80 | 0, 0 | 0, 4);
          $81 = $77 + 8 | 0;
          SAFE_HEAP_STORE($81 | 0, 0 | 0, 4);
          __THREW__ = 0;
          $82 = invoke_iii(228, $3 | 0, 10209 | 0) | 0;
          $83 = __THREW__;
          __THREW__ = 0;
          $84 = $83 & 1;
          if ($84) {
           $145 = ___cxa_find_matching_catch() | 0;
           $146 = tempRet0;
           $$2 = $146;
           $$24 = $145;
          } else {
           {}
           SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($82 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($82 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
           SAFE_HEAP_STORE($82 | 0, 0 | 0, 4);
           $85 = $82 + 4 | 0;
           SAFE_HEAP_STORE($85 | 0, 0 | 0, 4);
           $86 = $82 + 8 | 0;
           SAFE_HEAP_STORE($86 | 0, 0 | 0, 4);
           $87 = SAFE_HEAP_LOAD($op2 >> 0 | 0, 1, 0) | 0 | 0;
           $88 = $87 & 1;
           $89 = $88 << 24 >> 24 == 0;
           $90 = $op2 + 8 | 0;
           $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
           $92 = $op2 + 1 | 0;
           $93 = $89 ? $92 : $91;
           $94 = $op2 + 4 | 0;
           $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
           $96 = $87 & 255;
           $97 = $96 >>> 1;
           $98 = $89 ? $97 : $95;
           __THREW__ = 0;
           $99 = invoke_iiii(222, $2 | 0, $93 | 0, $98 | 0) | 0;
           $100 = __THREW__;
           __THREW__ = 0;
           $101 = $100 & 1;
           if ($101) {
            $147 = ___cxa_find_matching_catch() | 0;
            $148 = tempRet0;
            $$1 = $148;
            $$13 = $147;
           } else {
            {}
            SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($99 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($99 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($99 | 0, 0 | 0, 4);
            $102 = $99 + 4 | 0;
            SAFE_HEAP_STORE($102 | 0, 0 | 0, 4);
            $103 = $99 + 8 | 0;
            SAFE_HEAP_STORE($103 | 0, 0 | 0, 4);
            __THREW__ = 0;
            $104 = invoke_iii(228, $1 | 0, 10212 | 0) | 0;
            $105 = __THREW__;
            __THREW__ = 0;
            $106 = $105 & 1;
            do {
             if ($106) {
              $149 = ___cxa_find_matching_catch() | 0;
              $150 = tempRet0;
              $$01 = $150;
              $$02 = $149;
             } else {
              {}
              SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($104 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($104 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($104 | 0, 0 | 0, 4);
              $107 = $104 + 4 | 0;
              SAFE_HEAP_STORE($107 | 0, 0 | 0, 4);
              $108 = $104 + 8 | 0;
              SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
              $109 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
              $110 = $109 & 1;
              $111 = $110 << 24 >> 24 == 0;
              $112 = $0 + 8 | 0;
              $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
              $114 = $0 + 1 | 0;
              $115 = $111 ? $114 : $113;
              $116 = $0 + 4 | 0;
              $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
              $118 = $109 & 255;
              $119 = $118 >>> 1;
              $120 = $111 ? $119 : $117;
              __THREW__ = 0;
              invoke_iiii(222, $28 | 0, $115 | 0, $120 | 0) | 0;
              $121 = __THREW__;
              __THREW__ = 0;
              $122 = $121 & 1;
              if ($122) {
               $151 = ___cxa_find_matching_catch() | 0;
               $152 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
               $$01 = $152;
               $$02 = $151;
               break;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
              $123 = SAFE_HEAP_LOAD($op >> 0 | 0, 1, 0) | 0 | 0;
              $124 = $123 & 1;
              $125 = $124 << 24 >> 24 == 0;
              $126 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
              $127 = $123 & 255;
              $128 = $127 >>> 1;
              $129 = $125 ? $128 : $126;
              $130 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
              $131 = $125 ? $46 : $130;
              $132 = $129 >>> 0 > 1;
              $133 = $132 ? 1 : $129;
              $134 = _memcmp($131, 10371, $133) | 0;
              $135 = ($134 | 0) == 0;
              $136 = ($129 | 0) == 0;
              $$$i$i$i27 = $132 & 1;
              $$$$i$i$i28 = $136 ? -1 : $$$i$i$i27;
              $137 = $135 ? $$$$i$i$i28 : $134;
              $138 = ($137 | 0) == 0;
              if ($138) {
               __THREW__ = 0;
               invoke_vii(234, $28 | 0, 41);
               $139 = __THREW__;
               __THREW__ = 0;
               $140 = $139 & 1;
               if ($140) {
                label = 13;
                break L21;
               }
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
              $$0 = $8;
              break L1;
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$1 = $$01;
            $$13 = $$02;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$2 = $$1;
           $$24 = $$13;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$3 = $$2;
          $$35 = $$24;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$4 = $$3;
         $$46 = $$35;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $$5 = $$4;
        $$57 = $$46;
       }
      }
     } while (0);
     if ((label | 0) == 13) {
      $59 = ___cxa_find_matching_catch() | 0;
      $60 = tempRet0;
      $$5 = $60;
      $$57 = $59;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
     $$6 = $$5;
     $$68 = $$57;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
    ___resumeException($$68 | 0);
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN13b2DynamicTree10InsertLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aabb = 0, $aabb1 = 0, $aabb2 = 0, $aabb3 = 0, $area = 0.0, $child1 = 0, $child16 = 0, $child2 = 0, $child27 = 0, $combinedAABB = 0, $combinedArea = 0.0, $cost = 0.0, $cost1 = 0.0, $cost2 = 0.0;
 var $index = 0, $inheritanceCost = 0.0, $leafAABB = 0, $newArea = 0.0, $newArea5 = 0.0, $newParent = 0, $oldArea = 0.0, $oldArea4 = 0.0, $oldParent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $leafAABB = sp + 160 | 0;
 $combinedAABB = sp + 128 | 0;
 $aabb = sp + 96 | 0;
 $aabb1 = sp + 80 | 0;
 $aabb2 = sp + 48 | 0;
 $aabb3 = sp + 32 | 0;
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = $2 + 24 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4 + 1 | 0;
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) == -1;
 $8 = $1;
 if ($7) {
  SAFE_HEAP_STORE($2 | 0, $8 | 0, 4);
  $9 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $10 = $2 + 4 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11 + ($9 * 36 | 0) | 0;
  $13 = $12 + 20 | 0;
  SAFE_HEAP_STORE($13 | 0, -1 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $14 = $2 + 4 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 + ($8 * 36 | 0) | 0;
 {}
 SAFE_HEAP_STORE($leafAABB | 0, SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($leafAABB + 4 | 0, SAFE_HEAP_LOAD($16 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($leafAABB + 8 | 0, SAFE_HEAP_LOAD($16 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($leafAABB + 12 | 0, SAFE_HEAP_LOAD($16 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $17 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $index = $17;
 while (1) {
  $18 = $index;
  $19 = $2 + 4 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $20 + ($18 * 36 | 0) | 0;
  $22 = __ZNK10b2TreeNode6IsLeafEv($21) | 0;
  $23 = $22 & 1;
  $24 = ($23 | 0) == 0;
  if (!$24) {
   break;
  }
  $25 = $index;
  $26 = $2 + 4 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 + ($25 * 36 | 0) | 0;
  $29 = $28 + 24 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $child1 = $30;
  $31 = $index;
  $32 = $2 + 4 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 + ($31 * 36 | 0) | 0;
  $35 = $34 + 28 | 0;
  $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
  $child2 = $36;
  $37 = $index;
  $38 = $2 + 4 | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = $39 + ($37 * 36 | 0) | 0;
  $41 = +__ZNK6b2AABB12GetPerimeterEv($40);
  $area = $41;
  __ZN6b2AABBC2Ev($combinedAABB);
  $42 = $index;
  $43 = $2 + 4 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = $44 + ($42 * 36 | 0) | 0;
  __ZN6b2AABB7CombineERKS_S1_($combinedAABB, $45, $leafAABB);
  $46 = +__ZNK6b2AABB12GetPerimeterEv($combinedAABB);
  $combinedArea = $46;
  $47 = $combinedArea;
  $48 = 2.0 * $47;
  $cost = $48;
  $49 = $combinedArea;
  $50 = $area;
  $51 = $49 - $50;
  $52 = 2.0 * $51;
  $inheritanceCost = $52;
  $53 = $child1;
  $54 = $2 + 4 | 0;
  $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
  $56 = $55 + ($53 * 36 | 0) | 0;
  $57 = __ZNK10b2TreeNode6IsLeafEv($56) | 0;
  if ($57) {
   __ZN6b2AABBC2Ev($aabb);
   $58 = $child1;
   $59 = $2 + 4 | 0;
   $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
   $61 = $60 + ($58 * 36 | 0) | 0;
   __ZN6b2AABB7CombineERKS_S1_($aabb, $leafAABB, $61);
   $62 = +__ZNK6b2AABB12GetPerimeterEv($aabb);
   $63 = $inheritanceCost;
   $64 = $62 + $63;
   $cost1 = $64;
  } else {
   __ZN6b2AABBC2Ev($aabb1);
   $65 = $child1;
   $66 = $2 + 4 | 0;
   $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
   $68 = $67 + ($65 * 36 | 0) | 0;
   __ZN6b2AABB7CombineERKS_S1_($aabb1, $leafAABB, $68);
   $69 = $child1;
   $70 = $2 + 4 | 0;
   $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
   $72 = $71 + ($69 * 36 | 0) | 0;
   $73 = +__ZNK6b2AABB12GetPerimeterEv($72);
   $oldArea = $73;
   $74 = +__ZNK6b2AABB12GetPerimeterEv($aabb1);
   $newArea = $74;
   $75 = $newArea;
   $76 = $oldArea;
   $77 = $75 - $76;
   $78 = $inheritanceCost;
   $79 = $77 + $78;
   $cost1 = $79;
  }
  $80 = $child2;
  $81 = $2 + 4 | 0;
  $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
  $83 = $82 + ($80 * 36 | 0) | 0;
  $84 = __ZNK10b2TreeNode6IsLeafEv($83) | 0;
  if ($84) {
   __ZN6b2AABBC2Ev($aabb2);
   $85 = $child2;
   $86 = $2 + 4 | 0;
   $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
   $88 = $87 + ($85 * 36 | 0) | 0;
   __ZN6b2AABB7CombineERKS_S1_($aabb2, $leafAABB, $88);
   $89 = +__ZNK6b2AABB12GetPerimeterEv($aabb2);
   $90 = $inheritanceCost;
   $91 = $89 + $90;
   $cost2 = $91;
  } else {
   __ZN6b2AABBC2Ev($aabb3);
   $92 = $child2;
   $93 = $2 + 4 | 0;
   $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
   $95 = $94 + ($92 * 36 | 0) | 0;
   __ZN6b2AABB7CombineERKS_S1_($aabb3, $leafAABB, $95);
   $96 = $child2;
   $97 = $2 + 4 | 0;
   $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
   $99 = $98 + ($96 * 36 | 0) | 0;
   $100 = +__ZNK6b2AABB12GetPerimeterEv($99);
   $oldArea4 = $100;
   $101 = +__ZNK6b2AABB12GetPerimeterEv($aabb3);
   $newArea5 = $101;
   $102 = $newArea5;
   $103 = $oldArea4;
   $104 = $102 - $103;
   $105 = $inheritanceCost;
   $106 = $104 + $105;
   $cost2 = $106;
  }
  $107 = $cost;
  $108 = $cost1;
  $109 = $107 < $108;
  if ($109) {
   $110 = $cost;
   $111 = $cost2;
   $112 = $110 < $111;
   if ($112) {
    break;
   }
  }
  $113 = $cost1;
  $114 = $cost2;
  $115 = $113 < $114;
  if ($115) {
   $116 = $child1;
   $index = $116;
   continue;
  } else {
   $117 = $child2;
   $index = $117;
   continue;
  }
 }
 $118 = $index;
 $sibling = $118;
 $119 = $sibling;
 $120 = $2 + 4 | 0;
 $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $122 = $121 + ($119 * 36 | 0) | 0;
 $123 = $122 + 20 | 0;
 $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
 $oldParent = $124;
 $125 = __ZN13b2DynamicTree12AllocateNodeEv($2) | 0;
 $newParent = $125;
 $126 = $oldParent;
 $127 = $newParent;
 $128 = $2 + 4 | 0;
 $129 = SAFE_HEAP_LOAD($128 | 0, 4, 0) | 0 | 0;
 $130 = $129 + ($127 * 36 | 0) | 0;
 $131 = $130 + 20 | 0;
 SAFE_HEAP_STORE($131 | 0, $126 | 0, 4);
 $132 = $newParent;
 $133 = $2 + 4 | 0;
 $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
 $135 = $134 + ($132 * 36 | 0) | 0;
 $136 = $135 + 16 | 0;
 SAFE_HEAP_STORE($136 | 0, 0 | 0, 4);
 $137 = $newParent;
 $138 = $2 + 4 | 0;
 $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
 $140 = $139 + ($137 * 36 | 0) | 0;
 $141 = $sibling;
 $142 = $2 + 4 | 0;
 $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
 $144 = $143 + ($141 * 36 | 0) | 0;
 __ZN6b2AABB7CombineERKS_S1_($140, $leafAABB, $144);
 $145 = $sibling;
 $146 = $2 + 4 | 0;
 $147 = SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0;
 $148 = $147 + ($145 * 36 | 0) | 0;
 $149 = $148 + 32 | 0;
 $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
 $151 = $150 + 1 | 0;
 $152 = $newParent;
 $153 = $2 + 4 | 0;
 $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
 $155 = $154 + ($152 * 36 | 0) | 0;
 $156 = $155 + 32 | 0;
 SAFE_HEAP_STORE($156 | 0, $151 | 0, 4);
 $157 = $oldParent;
 $158 = ($157 | 0) != -1;
 if ($158) {
  $159 = $oldParent;
  $160 = $2 + 4 | 0;
  $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
  $162 = $161 + ($159 * 36 | 0) | 0;
  $163 = $162 + 24 | 0;
  $164 = SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0;
  $165 = $sibling;
  $166 = ($164 | 0) == ($165 | 0);
  $167 = $newParent;
  $168 = $oldParent;
  $169 = $2 + 4 | 0;
  $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
  $171 = $170 + ($168 * 36 | 0) | 0;
  if ($166) {
   $172 = $171 + 24 | 0;
   SAFE_HEAP_STORE($172 | 0, $167 | 0, 4);
  } else {
   $173 = $171 + 28 | 0;
   SAFE_HEAP_STORE($173 | 0, $167 | 0, 4);
  }
  $174 = $sibling;
  $175 = $newParent;
  $176 = $2 + 4 | 0;
  $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
  $178 = $177 + ($175 * 36 | 0) | 0;
  $179 = $178 + 24 | 0;
  SAFE_HEAP_STORE($179 | 0, $174 | 0, 4);
  $180 = $1;
  $181 = $newParent;
  $182 = $2 + 4 | 0;
  $183 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
  $184 = $183 + ($181 * 36 | 0) | 0;
  $185 = $184 + 28 | 0;
  SAFE_HEAP_STORE($185 | 0, $180 | 0, 4);
  $186 = $newParent;
  $187 = $sibling;
  $188 = $2 + 4 | 0;
  $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
  $190 = $189 + ($187 * 36 | 0) | 0;
  $191 = $190 + 20 | 0;
  SAFE_HEAP_STORE($191 | 0, $186 | 0, 4);
  $192 = $newParent;
  $193 = $1;
  $194 = $2 + 4 | 0;
  $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
  $196 = $195 + ($193 * 36 | 0) | 0;
  $197 = $196 + 20 | 0;
  SAFE_HEAP_STORE($197 | 0, $192 | 0, 4);
 } else {
  $198 = $sibling;
  $199 = $newParent;
  $200 = $2 + 4 | 0;
  $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
  $202 = $201 + ($199 * 36 | 0) | 0;
  $203 = $202 + 24 | 0;
  SAFE_HEAP_STORE($203 | 0, $198 | 0, 4);
  $204 = $1;
  $205 = $newParent;
  $206 = $2 + 4 | 0;
  $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
  $208 = $207 + ($205 * 36 | 0) | 0;
  $209 = $208 + 28 | 0;
  SAFE_HEAP_STORE($209 | 0, $204 | 0, 4);
  $210 = $newParent;
  $211 = $sibling;
  $212 = $2 + 4 | 0;
  $213 = SAFE_HEAP_LOAD($212 | 0, 4, 0) | 0 | 0;
  $214 = $213 + ($211 * 36 | 0) | 0;
  $215 = $214 + 20 | 0;
  SAFE_HEAP_STORE($215 | 0, $210 | 0, 4);
  $216 = $newParent;
  $217 = $1;
  $218 = $2 + 4 | 0;
  $219 = SAFE_HEAP_LOAD($218 | 0, 4, 0) | 0 | 0;
  $220 = $219 + ($217 * 36 | 0) | 0;
  $221 = $220 + 20 | 0;
  SAFE_HEAP_STORE($221 | 0, $216 | 0, 4);
  $222 = $newParent;
  SAFE_HEAP_STORE($2 | 0, $222 | 0, 4);
 }
 $223 = $1;
 $224 = $2 + 4 | 0;
 $225 = SAFE_HEAP_LOAD($224 | 0, 4, 0) | 0 | 0;
 $226 = $225 + ($223 * 36 | 0) | 0;
 $227 = $226 + 20 | 0;
 $228 = SAFE_HEAP_LOAD($227 | 0, 4, 0) | 0 | 0;
 $index = $228;
 while (1) {
  $229 = $index;
  $230 = ($229 | 0) != -1;
  if (!$230) {
   label = 29;
   break;
  }
  $231 = $index;
  $232 = __ZN13b2DynamicTree7BalanceEi($2, $231) | 0;
  $index = $232;
  $233 = $index;
  $234 = $2 + 4 | 0;
  $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
  $236 = $235 + ($233 * 36 | 0) | 0;
  $237 = $236 + 24 | 0;
  $238 = SAFE_HEAP_LOAD($237 | 0, 4, 0) | 0 | 0;
  $child16 = $238;
  $239 = $index;
  $240 = $2 + 4 | 0;
  $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
  $242 = $241 + ($239 * 36 | 0) | 0;
  $243 = $242 + 28 | 0;
  $244 = SAFE_HEAP_LOAD($243 | 0, 4, 0) | 0 | 0;
  $child27 = $244;
  $245 = $child16;
  $246 = ($245 | 0) != -1;
  if (!$246) {
   label = 25;
   break;
  }
  $247 = $child27;
  $248 = ($247 | 0) != -1;
  if (!$248) {
   label = 27;
   break;
  }
  $249 = $child16;
  $250 = $2 + 4 | 0;
  $251 = SAFE_HEAP_LOAD($250 | 0, 4, 0) | 0 | 0;
  $252 = $251 + ($249 * 36 | 0) | 0;
  $253 = $252 + 32 | 0;
  $254 = SAFE_HEAP_LOAD($253 | 0, 4, 0) | 0 | 0;
  $255 = $child27;
  $256 = $2 + 4 | 0;
  $257 = SAFE_HEAP_LOAD($256 | 0, 4, 0) | 0 | 0;
  $258 = $257 + ($255 * 36 | 0) | 0;
  $259 = $258 + 32 | 0;
  $260 = SAFE_HEAP_LOAD($259 | 0, 4, 0) | 0 | 0;
  $261 = __Z5b2MaxIiET_S0_S0_($254, $260) | 0;
  $262 = 1 + $261 | 0;
  $263 = $index;
  $264 = $2 + 4 | 0;
  $265 = SAFE_HEAP_LOAD($264 | 0, 4, 0) | 0 | 0;
  $266 = $265 + ($263 * 36 | 0) | 0;
  $267 = $266 + 32 | 0;
  SAFE_HEAP_STORE($267 | 0, $262 | 0, 4);
  $268 = $index;
  $269 = $2 + 4 | 0;
  $270 = SAFE_HEAP_LOAD($269 | 0, 4, 0) | 0 | 0;
  $271 = $270 + ($268 * 36 | 0) | 0;
  $272 = $child16;
  $273 = $2 + 4 | 0;
  $274 = SAFE_HEAP_LOAD($273 | 0, 4, 0) | 0 | 0;
  $275 = $274 + ($272 * 36 | 0) | 0;
  $276 = $child27;
  $277 = $2 + 4 | 0;
  $278 = SAFE_HEAP_LOAD($277 | 0, 4, 0) | 0 | 0;
  $279 = $278 + ($276 * 36 | 0) | 0;
  __ZN6b2AABB7CombineERKS_S1_($271, $275, $279);
  $280 = $index;
  $281 = $2 + 4 | 0;
  $282 = SAFE_HEAP_LOAD($281 | 0, 4, 0) | 0 | 0;
  $283 = $282 + ($280 * 36 | 0) | 0;
  $284 = $283 + 20 | 0;
  $285 = SAFE_HEAP_LOAD($284 | 0, 4, 0) | 0 | 0;
  $index = $285;
 }
 if ((label | 0) == 25) {
  ___assert_fail(4611 | 0, 4215 | 0, 304, 4626 | 0);
 } else if ((label | 0) == 27) {
  ___assert_fail(4637 | 0, 4215 | 0, 305, 4626 | 0);
 } else if ((label | 0) == 29) {
  STACKTOP = sp;
  return;
 }
}

function __Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput($output, $input) {
 $output = $output | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $a1 = 0.0, $a2 = 0.0, $cache = 0, $distanceInput = 0, $distanceOutput = 0;
 var $done = 0, $fcn = 0, $indexA = 0, $indexB = 0, $iter = 0, $k_maxIterations = 0, $proxyA = 0, $proxyB = 0, $pushBackIter = 0, $rootIterCount = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, $sweepA = 0, $sweepB = 0, $t = 0.0, $t1 = 0.0, $t2 = 0.0, $tMax = 0.0, $target = 0.0;
 var $time = 0.0, $timer = 0, $tolerance = 0.0, $totalRadius = 0.0, $xfA = 0, $xfB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $timer = sp + 429 | 0;
 $sweepA = sp + 376 | 0;
 $sweepB = sp + 340 | 0;
 $cache = sp + 300 | 0;
 $distanceInput = sp + 208 | 0;
 $xfA = sp + 192 | 0;
 $xfB = sp + 176 | 0;
 $distanceOutput = sp + 152 | 0;
 $fcn = sp + 48 | 0;
 $indexA = sp + 36 | 0;
 $indexB = sp + 32 | 0;
 $0 = $output;
 $1 = $input;
 __ZN7b2TimerC2Ev($timer);
 $2 = SAFE_HEAP_LOAD(836 | 0, 4, 0) | 0 | 0;
 $3 = $2 + 1 | 0;
 SAFE_HEAP_STORE(836 | 0, $3 | 0, 4);
 $4 = $0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $1;
 $6 = $5 + 128 | 0;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $0;
 $9 = $8 + 4 | 0;
 SAFE_HEAP_STORE_D($9 | 0, +$7, 4);
 $10 = $1;
 $proxyA = $10;
 $11 = $1;
 $12 = $11 + 28 | 0;
 $proxyB = $12;
 $13 = $1;
 $14 = $13 + 56 | 0;
 dest = $sweepA;
 src = $14;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $15 = $1;
 $16 = $15 + 92 | 0;
 dest = $sweepB;
 src = $16;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN7b2Sweep9NormalizeEv($sweepA);
 __ZN7b2Sweep9NormalizeEv($sweepB);
 $17 = $1;
 $18 = $17 + 128 | 0;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $tMax = $19;
 $20 = $proxyA;
 $21 = $20 + 24 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $proxyB;
 $24 = $23 + 24 | 0;
 $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
 $26 = $22 + $25;
 $totalRadius = $26;
 $27 = $totalRadius;
 $28 = $27 - .014999999664723873;
 $29 = +__Z5b2MaxIfET_S0_S0_(.004999999888241291, $28);
 $target = $29;
 $tolerance = 1.2499999720603228e-003;
 $30 = $target;
 $31 = $tolerance;
 $32 = $30 > $31;
 if (!$32) {
  ___assert_fail(4921 | 0, 4940 | 0, 279, 4999 | 0);
 }
 $t1 = 0.0;
 $k_maxIterations = 20;
 $iter = 0;
 $33 = $cache + 4 | 0;
 SAFE_HEAP_STORE($33 | 0, 0 | 0, 2);
 __ZN15b2DistanceInputC2Ev($distanceInput);
 $34 = $1;
 {}
 SAFE_HEAP_STORE($distanceInput | 0, SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 4 | 0, SAFE_HEAP_LOAD($34 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 8 | 0, SAFE_HEAP_LOAD($34 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 12 | 0, SAFE_HEAP_LOAD($34 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 16 | 0, SAFE_HEAP_LOAD($34 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 20 | 0, SAFE_HEAP_LOAD($34 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($distanceInput + 24 | 0, SAFE_HEAP_LOAD($34 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
 $35 = $distanceInput + 28 | 0;
 $36 = $1;
 $37 = $36 + 28 | 0;
 {}
 SAFE_HEAP_STORE($35 | 0, SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 4 | 0, SAFE_HEAP_LOAD($37 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 8 | 0, SAFE_HEAP_LOAD($37 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 12 | 0, SAFE_HEAP_LOAD($37 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 16 | 0, SAFE_HEAP_LOAD($37 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 20 | 0, SAFE_HEAP_LOAD($37 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 24 | 0, SAFE_HEAP_LOAD($37 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
 $38 = $distanceInput + 88 | 0;
 SAFE_HEAP_STORE($38 >> 0 | 0, 0 | 0, 1);
 while (1) {
  __ZN11b2TransformC2Ev($xfA);
  __ZN11b2TransformC2Ev($xfB);
  $39 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepA, $xfA, $39);
  $40 = $t1;
  __ZNK7b2Sweep12GetTransformEP11b2Transformf($sweepB, $xfB, $40);
  $41 = $distanceInput + 56 | 0;
  {}
  SAFE_HEAP_STORE($41 | 0, SAFE_HEAP_LOAD($xfA | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($41 + 4 | 0, SAFE_HEAP_LOAD($xfA + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($41 + 8 | 0, SAFE_HEAP_LOAD($xfA + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($41 + 12 | 0, SAFE_HEAP_LOAD($xfA + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  $42 = $distanceInput + 72 | 0;
  {}
  SAFE_HEAP_STORE($42 | 0, SAFE_HEAP_LOAD($xfB | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($42 + 4 | 0, SAFE_HEAP_LOAD($xfB + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($42 + 8 | 0, SAFE_HEAP_LOAD($xfB + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($42 + 12 | 0, SAFE_HEAP_LOAD($xfB + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  __ZN16b2DistanceOutputC2Ev($distanceOutput);
  __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($distanceOutput, $cache, $distanceInput);
  $43 = $distanceOutput + 16 | 0;
  $44 = +(+SAFE_HEAP_LOAD_D($43 | 0, 4));
  $45 = $44 <= 0.0;
  if ($45) {
   label = 5;
   break;
  }
  $49 = $distanceOutput + 16 | 0;
  $50 = +(+SAFE_HEAP_LOAD_D($49 | 0, 4));
  $51 = $target;
  $52 = $tolerance;
  $53 = $51 + $52;
  $54 = $50 < $53;
  if ($54) {
   label = 7;
   break;
  }
  __ZN20b2SeparationFunctionC2Ev($fcn);
  $59 = $proxyA;
  $60 = $proxyB;
  $61 = $t1;
  +__ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($fcn, $cache, $59, $sweepA, $60, $sweepB, $61);
  $done = 0;
  $62 = $tMax;
  $t2 = $62;
  $pushBackIter = 0;
  while (1) {
   $63 = $t2;
   $64 = +__ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($fcn, $indexA, $indexB, $63);
   $s2 = $64;
   $65 = $s2;
   $66 = $target;
   $67 = $tolerance;
   $68 = $66 + $67;
   $69 = $65 > $68;
   if ($69) {
    label = 10;
    break;
   }
   $74 = $s2;
   $75 = $target;
   $76 = $tolerance;
   $77 = $75 - $76;
   $78 = $74 > $77;
   if ($78) {
    label = 12;
    break;
   }
   $80 = SAFE_HEAP_LOAD($indexA | 0, 4, 0) | 0 | 0;
   $81 = SAFE_HEAP_LOAD($indexB | 0, 4, 0) | 0 | 0;
   $82 = $t1;
   $83 = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $80, $81, $82);
   $s1 = $83;
   $84 = $s1;
   $85 = $target;
   $86 = $tolerance;
   $87 = $85 - $86;
   $88 = $84 < $87;
   if ($88) {
    label = 14;
    break;
   }
   $93 = $s1;
   $94 = $target;
   $95 = $tolerance;
   $96 = $94 + $95;
   $97 = $93 <= $96;
   if ($97) {
    label = 16;
    break;
   }
   $rootIterCount = 0;
   $102 = $t1;
   $a1 = $102;
   $103 = $t2;
   $a2 = $103;
   while (1) {
    $104 = $rootIterCount;
    $105 = $104 & 1;
    $106 = ($105 | 0) != 0;
    $107 = $a1;
    if ($106) {
     $108 = $target;
     $109 = $s1;
     $110 = $108 - $109;
     $111 = $a2;
     $112 = $a1;
     $113 = $111 - $112;
     $114 = $110 * $113;
     $115 = $s2;
     $116 = $s1;
     $117 = $115 - $116;
     $118 = $114 / $117;
     $119 = $107 + $118;
     $t = $119;
    } else {
     $120 = $a2;
     $121 = $107 + $120;
     $122 = .5 * $121;
     $t = $122;
    }
    $123 = $rootIterCount;
    $124 = $123 + 1 | 0;
    $rootIterCount = $124;
    $125 = SAFE_HEAP_LOAD(848 | 0, 4, 0) | 0 | 0;
    $126 = $125 + 1 | 0;
    SAFE_HEAP_STORE(848 | 0, $126 | 0, 4);
    $127 = SAFE_HEAP_LOAD($indexA | 0, 4, 0) | 0 | 0;
    $128 = SAFE_HEAP_LOAD($indexB | 0, 4, 0) | 0 | 0;
    $129 = $t;
    $130 = +__ZNK20b2SeparationFunction8EvaluateEiif($fcn, $127, $128, $129);
    $s = $130;
    $131 = $s;
    $132 = $target;
    $133 = $131 - $132;
    $134 = +__Z5b2AbsIfET_S0_($133);
    $135 = $tolerance;
    $136 = $134 < $135;
    if ($136) {
     label = 22;
     break;
    }
    $138 = $s;
    $139 = $target;
    $140 = $138 > $139;
    $141 = $t;
    if ($140) {
     $a1 = $141;
     $142 = $s;
     $s1 = $142;
    } else {
     $a2 = $141;
     $143 = $s;
     $s2 = $143;
    }
    $144 = $rootIterCount;
    $145 = ($144 | 0) == 50;
    if ($145) {
     break;
    }
   }
   if ((label | 0) == 22) {
    label = 0;
    $137 = $t;
    $t2 = $137;
   }
   $146 = SAFE_HEAP_LOAD(852 | 0, 4, 0) | 0 | 0;
   $147 = $rootIterCount;
   $148 = __Z5b2MaxIiET_S0_S0_($146, $147) | 0;
   SAFE_HEAP_STORE(852 | 0, $148 | 0, 4);
   $149 = $pushBackIter;
   $150 = $149 + 1 | 0;
   $pushBackIter = $150;
   $151 = $pushBackIter;
   $152 = ($151 | 0) == 8;
   if ($152) {
    break;
   }
  }
  if ((label | 0) == 10) {
   label = 0;
   $70 = $0;
   SAFE_HEAP_STORE($70 | 0, 4 | 0, 4);
   $71 = $tMax;
   $72 = $0;
   $73 = $72 + 4 | 0;
   SAFE_HEAP_STORE_D($73 | 0, +$71, 4);
   $done = 1;
  } else if ((label | 0) == 12) {
   label = 0;
   $79 = $t2;
   $t1 = $79;
  } else if ((label | 0) == 14) {
   label = 0;
   $89 = $0;
   SAFE_HEAP_STORE($89 | 0, 1 | 0, 4);
   $90 = $t1;
   $91 = $0;
   $92 = $91 + 4 | 0;
   SAFE_HEAP_STORE_D($92 | 0, +$90, 4);
   $done = 1;
  } else if ((label | 0) == 16) {
   label = 0;
   $98 = $0;
   SAFE_HEAP_STORE($98 | 0, 3 | 0, 4);
   $99 = $t1;
   $100 = $0;
   $101 = $100 + 4 | 0;
   SAFE_HEAP_STORE_D($101 | 0, +$99, 4);
   $done = 1;
  }
  $153 = $iter;
  $154 = $153 + 1 | 0;
  $iter = $154;
  $155 = SAFE_HEAP_LOAD(840 | 0, 4, 0) | 0 | 0;
  $156 = $155 + 1 | 0;
  SAFE_HEAP_STORE(840 | 0, $156 | 0, 4);
  $157 = $done;
  $158 = $157 & 1;
  if ($158) {
   label = 31;
   break;
  }
  $159 = $iter;
  $160 = ($159 | 0) == 20;
  if ($160) {
   label = 30;
   break;
  }
 }
 if ((label | 0) == 5) {
  $46 = $0;
  SAFE_HEAP_STORE($46 | 0, 2 | 0, 4);
  $47 = $0;
  $48 = $47 + 4 | 0;
  SAFE_HEAP_STORE_D($48 | 0, +(0.0), 4);
  $165 = SAFE_HEAP_LOAD(844 | 0, 4, 0) | 0 | 0;
  $166 = $iter;
  $167 = __Z5b2MaxIiET_S0_S0_($165, $166) | 0;
  SAFE_HEAP_STORE(844 | 0, $167 | 0, 4);
  $168 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $time = $168;
  $169 = +(+SAFE_HEAP_LOAD_D(832 | 0, 4));
  $170 = $time;
  $171 = +__Z5b2MaxIfET_S0_S0_($169, $170);
  SAFE_HEAP_STORE_D(832 | 0, +$171, 4);
  $172 = $time;
  $173 = +(+SAFE_HEAP_LOAD_D(828 | 0, 4));
  $174 = $173 + $172;
  SAFE_HEAP_STORE_D(828 | 0, +$174, 4);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 7) {
  $55 = $0;
  SAFE_HEAP_STORE($55 | 0, 3 | 0, 4);
  $56 = $t1;
  $57 = $0;
  $58 = $57 + 4 | 0;
  SAFE_HEAP_STORE_D($58 | 0, +$56, 4);
  $165 = SAFE_HEAP_LOAD(844 | 0, 4, 0) | 0 | 0;
  $166 = $iter;
  $167 = __Z5b2MaxIiET_S0_S0_($165, $166) | 0;
  SAFE_HEAP_STORE(844 | 0, $167 | 0, 4);
  $168 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $time = $168;
  $169 = +(+SAFE_HEAP_LOAD_D(832 | 0, 4));
  $170 = $time;
  $171 = +__Z5b2MaxIfET_S0_S0_($169, $170);
  SAFE_HEAP_STORE_D(832 | 0, +$171, 4);
  $172 = $time;
  $173 = +(+SAFE_HEAP_LOAD_D(828 | 0, 4));
  $174 = $173 + $172;
  SAFE_HEAP_STORE_D(828 | 0, +$174, 4);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 30) {
  $161 = $0;
  SAFE_HEAP_STORE($161 | 0, 1 | 0, 4);
  $162 = $t1;
  $163 = $0;
  $164 = $163 + 4 | 0;
  SAFE_HEAP_STORE_D($164 | 0, +$162, 4);
  $165 = SAFE_HEAP_LOAD(844 | 0, 4, 0) | 0 | 0;
  $166 = $iter;
  $167 = __Z5b2MaxIiET_S0_S0_($165, $166) | 0;
  SAFE_HEAP_STORE(844 | 0, $167 | 0, 4);
  $168 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $time = $168;
  $169 = +(+SAFE_HEAP_LOAD_D(832 | 0, 4));
  $170 = $time;
  $171 = +__Z5b2MaxIfET_S0_S0_($169, $170);
  SAFE_HEAP_STORE_D(832 | 0, +$171, 4);
  $172 = $time;
  $173 = +(+SAFE_HEAP_LOAD_D(828 | 0, 4));
  $174 = $173 + $172;
  SAFE_HEAP_STORE_D(828 | 0, +$174, 4);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 31) {
  $165 = SAFE_HEAP_LOAD(844 | 0, 4, 0) | 0 | 0;
  $166 = $iter;
  $167 = __Z5b2MaxIiET_S0_S0_($165, $166) | 0;
  SAFE_HEAP_STORE(844 | 0, $167 | 0, 4);
  $168 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
  $time = $168;
  $169 = +(+SAFE_HEAP_LOAD_D(832 | 0, 4));
  $170 = $time;
  $171 = +__Z5b2MaxIfET_S0_S0_($169, $170);
  SAFE_HEAP_STORE_D(832 | 0, +$171, 4);
  $172 = $time;
  $173 = +(+SAFE_HEAP_LOAD_D(828 | 0, 4));
  $174 = $173 + $172;
  SAFE_HEAP_STORE_D(828 | 0, +$174, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i18 = 0, $$0$i$i1027 = 0, $$0$i$i24 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i23 = 0, $__p$0$i$i926 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i7 = 0, $__v$i$i = 0, $__v$i$i17 = 0, $cv = 0, $cv1 = 0;
 var $scevgep2$i$i = 0, $scevgep2$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i17 = sp + 128 | 0;
 $__v$i$i = sp + 108 | 0;
 $cv = sp + 104 | 0;
 $0 = sp + 80 | 0;
 $1 = sp + 64 | 0;
 $2 = sp + 52 | 0;
 $cv1 = sp + 48 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = $last;
 $7 = $first;
 $8 = $6 - $7 | 0;
 $9 = ($8 | 0) > 2;
 L1 : do {
  if ($9) {
   $10 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 << 24 >> 24 == 102;
   if ($11) {
    $12 = $first + 1 | 0;
    $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
    switch ($13 << 24 >> 24) {
    case 112:
     {
      $14 = $first + 2 | 0;
      $15 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($14, $last, $cv) | 0;
      $16 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($15, $last) | 0;
      $17 = ($16 | 0) == ($last | 0);
      if ($17) {
       $$0 = $first;
       break L1;
      }
      $18 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
      $19 = $18 << 24 >> 24 == 95;
      if (!$19) {
       $$0 = $first;
       break L1;
      }
      $20 = $15;
      $21 = $16;
      $22 = $21 - $20 | 0;
      $23 = $22 >>> 0 > 4294967279;
      if ($23) {
       __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
      }
      $24 = $22 >>> 0 < 11;
      if ($24) {
       $25 = $22 << 1;
       $26 = $25 & 255;
       SAFE_HEAP_STORE($2 >> 0 | 0, $26 | 0, 1);
       $27 = $2 + 1 | 0;
       $__p$0$ph$i$i = $27;
      } else {
       $28 = $22 + 16 | 0;
       $29 = $28 & -16;
       $30 = _malloc($29) | 0;
       $31 = $2 + 8 | 0;
       SAFE_HEAP_STORE($31 | 0, $30 | 0, 4);
       $32 = $29 | 1;
       SAFE_HEAP_STORE($2 | 0, $32 | 0, 4);
       $33 = $2 + 4 | 0;
       SAFE_HEAP_STORE($33 | 0, $22 | 0, 4);
       $__p$0$ph$i$i = $30;
      }
      $34 = ($15 | 0) == ($16 | 0);
      if (!$34) {
       $$0$i$i24 = $15;
       $__p$0$i$i23 = $__p$0$ph$i$i;
       while (1) {
        $35 = SAFE_HEAP_LOAD($$0$i$i24 >> 0 | 0, 1, 0) | 0 | 0;
        SAFE_HEAP_STORE($__p$0$i$i23 >> 0 | 0, $35 | 0, 1);
        $36 = $$0$i$i24 + 1 | 0;
        $37 = $__p$0$i$i23 + 1 | 0;
        $38 = ($36 | 0) == ($16 | 0);
        if ($38) {
         break;
        } else {
         $$0$i$i24 = $36;
         $__p$0$i$i23 = $37;
        }
       }
      }
      $scevgep2$i$i = $__p$0$ph$i$i + $22 | 0;
      SAFE_HEAP_STORE($scevgep2$i$i >> 0 | 0, 0 | 0, 1);
      __THREW__ = 0;
      $39 = invoke_iiii(227, $2 | 0, 0, 11742 | 0) | 0;
      $40 = __THREW__;
      __THREW__ = 0;
      $41 = $40 & 1;
      do {
       if ($41) {
        $73 = ___cxa_find_matching_catch() | 0;
        $74 = tempRet0;
        $$01 = $73;
        $$02 = $74;
       } else {
        {}
        SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($39 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($39 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($39 | 0, 0 | 0, 4);
        $42 = $39 + 4 | 0;
        SAFE_HEAP_STORE($42 | 0, 0 | 0, 4);
        $43 = $39 + 8 | 0;
        SAFE_HEAP_STORE($43 | 0, 0 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
        $44 = $db + 4 | 0;
        $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
        $46 = $db + 8 | 0;
        $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
        $48 = $45 >>> 0 < $47 >>> 0;
        if ($48) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($45, $0);
         $49 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
         $50 = $49 + 24 | 0;
         SAFE_HEAP_STORE($44 | 0, $50 | 0, 4);
        } else {
         $51 = $db + 12 | 0;
         $52 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $53 = $45;
         $54 = $52;
         $55 = $53 - $54 | 0;
         $56 = ($55 | 0) / 24 & -1;
         $57 = $56 + 1 | 0;
         $58 = ($55 | 0) < -24;
         if ($58) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $59 = __THREW__;
          __THREW__ = 0;
          $60 = ___cxa_find_matching_catch() | 0;
          $61 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $$01 = $60;
          $$02 = $61;
          break;
         }
         $62 = $47;
         $63 = $62 - $54 | 0;
         $64 = ($63 | 0) / 24 & -1;
         $65 = $64 >>> 0 < 1073741823;
         if ($65) {
          $66 = $64 << 1;
          $67 = $66 >>> 0 < $57 >>> 0;
          $68 = $67 ? $57 : $66;
          $$0$i$i$i = $68;
         } else {
          $$0$i$i$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $56, $51);
         $69 = $__v$i$i + 8 | 0;
         $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70, $0);
         $71 = $70 + 24 | 0;
         SAFE_HEAP_STORE($69 | 0, $71 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $72 = $16 + 1 | 0;
        $$0 = $72;
        break L1;
       }
      } while (0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
      $$2 = $$01;
      $$24 = $$02;
      break;
     }
    case 76:
     {
      $75 = $first + 2 | 0;
      $76 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($75, $last) | 0;
      $77 = ($76 | 0) == ($last | 0);
      if ($77) {
       $$0 = $first;
       break L1;
      }
      $78 = SAFE_HEAP_LOAD($76 >> 0 | 0, 1, 0) | 0 | 0;
      $79 = $78 << 24 >> 24 == 112;
      if (!$79) {
       $$0 = $first;
       break L1;
      }
      $80 = $76 + 1 | 0;
      $81 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($80, $last, $cv1) | 0;
      $82 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($81, $last) | 0;
      $83 = ($82 | 0) == ($last | 0);
      if ($83) {
       $$0 = $first;
       break L1;
      }
      $84 = SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 0) | 0 | 0;
      $85 = $84 << 24 >> 24 == 95;
      if (!$85) {
       $$0 = $first;
       break L1;
      }
      $86 = $81;
      $87 = $82;
      $88 = $87 - $86 | 0;
      $89 = $88 >>> 0 > 4294967279;
      if ($89) {
       __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
      }
      $90 = $88 >>> 0 < 11;
      if ($90) {
       $91 = $88 << 1;
       $92 = $91 & 255;
       SAFE_HEAP_STORE($5 >> 0 | 0, $92 | 0, 1);
       $93 = $5 + 1 | 0;
       $__p$0$ph$i$i7 = $93;
      } else {
       $94 = $88 + 16 | 0;
       $95 = $94 & -16;
       $96 = _malloc($95) | 0;
       $97 = $5 + 8 | 0;
       SAFE_HEAP_STORE($97 | 0, $96 | 0, 4);
       $98 = $95 | 1;
       SAFE_HEAP_STORE($5 | 0, $98 | 0, 4);
       $99 = $5 + 4 | 0;
       SAFE_HEAP_STORE($99 | 0, $88 | 0, 4);
       $__p$0$ph$i$i7 = $96;
      }
      $100 = ($81 | 0) == ($82 | 0);
      if (!$100) {
       $$0$i$i1027 = $81;
       $__p$0$i$i926 = $__p$0$ph$i$i7;
       while (1) {
        $101 = SAFE_HEAP_LOAD($$0$i$i1027 >> 0 | 0, 1, 0) | 0 | 0;
        SAFE_HEAP_STORE($__p$0$i$i926 >> 0 | 0, $101 | 0, 1);
        $102 = $$0$i$i1027 + 1 | 0;
        $103 = $__p$0$i$i926 + 1 | 0;
        $104 = ($102 | 0) == ($82 | 0);
        if ($104) {
         break;
        } else {
         $$0$i$i1027 = $102;
         $__p$0$i$i926 = $103;
        }
       }
      }
      $scevgep2$i$i11 = $__p$0$ph$i$i7 + $88 | 0;
      SAFE_HEAP_STORE($scevgep2$i$i11 >> 0 | 0, 0 | 0, 1);
      __THREW__ = 0;
      $105 = invoke_iiii(227, $5 | 0, 0, 11742 | 0) | 0;
      $106 = __THREW__;
      __THREW__ = 0;
      $107 = $106 & 1;
      do {
       if ($107) {
        $139 = ___cxa_find_matching_catch() | 0;
        $140 = tempRet0;
        $$1 = $139;
        $$13 = $140;
       } else {
        {}
        SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($105 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($4 + 8 | 0, SAFE_HEAP_LOAD($105 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
        SAFE_HEAP_STORE($105 | 0, 0 | 0, 4);
        $108 = $105 + 4 | 0;
        SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
        $109 = $105 + 8 | 0;
        SAFE_HEAP_STORE($109 | 0, 0 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3, $4);
        $110 = $db + 4 | 0;
        $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
        $112 = $db + 8 | 0;
        $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
        $114 = $111 >>> 0 < $113 >>> 0;
        if ($114) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($111, $3);
         $115 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
         $116 = $115 + 24 | 0;
         SAFE_HEAP_STORE($110 | 0, $116 | 0, 4);
        } else {
         $117 = $db + 12 | 0;
         $118 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $119 = $111;
         $120 = $118;
         $121 = $119 - $120 | 0;
         $122 = ($121 | 0) / 24 & -1;
         $123 = $122 + 1 | 0;
         $124 = ($121 | 0) < -24;
         if ($124) {
          __THREW__ = 0;
          invoke_vi(238, $db | 0);
          $125 = __THREW__;
          __THREW__ = 0;
          $126 = ___cxa_find_matching_catch() | 0;
          $127 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          $$1 = $126;
          $$13 = $127;
          break;
         }
         $128 = $113;
         $129 = $128 - $120 | 0;
         $130 = ($129 | 0) / 24 & -1;
         $131 = $130 >>> 0 < 1073741823;
         if ($131) {
          $132 = $130 << 1;
          $133 = $132 >>> 0 < $123 >>> 0;
          $134 = $133 ? $123 : $132;
          $$0$i$i$i18 = $134;
         } else {
          $$0$i$i$i18 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17, $$0$i$i$i18, $122, $117);
         $135 = $__v$i$i17 + 8 | 0;
         $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136, $3);
         $137 = $136 + 24 | 0;
         SAFE_HEAP_STORE($135 | 0, $137 | 0, 4);
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i17);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $138 = $82 + 1 | 0;
        $$0 = $138;
        break L1;
       }
      } while (0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$2 = $$1;
      $$24 = $$13;
      break;
     }
    default:
     {
      $$0 = $first;
      break L1;
     }
    }
    ___resumeException($$2 | 0);
   } else {
    $$0 = $first;
   }
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first, $last, $db, $status) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 $status = $status | 0;
 var $$0$i = 0, $$0$i$i$i11 = 0, $$0$i2 = 0, $$01$i = 0, $$03$i = 0, $$1$i = 0, $$12$i = 0, $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0$i$i$i10 = 0, $__p$0$ph$i$i$i = 0, $i$0$i16 = 0, $isdigit$i = 0, $isdigit3$i = 0, $isdigittmp$i = 0, $isdigittmp2$i = 0, $or$cond = 0, $or$cond1 = 0, $scevgep2$i$i$i = 0, $t$0 = 0, $t$0$i15 = 0, $t$0$i15$lcssa20 = 0;
 var $t$1$i$ph = 0, $t$1$i12 = 0, $t$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = $first >>> 0 < $last >>> 0;
 L1 : do {
  if ($3) {
   $4 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $5 = $4 << 24 >> 24 == 95;
   L3 : do {
    if ($5) {
     $6 = $last;
     $7 = $first;
     $8 = $6 - $7 | 0;
     $9 = ($8 | 0) > 3;
     if (!$9) {
      SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
      break L1;
     }
     $10 = $first + 1 | 0;
     $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
     switch ($11 << 24 >> 24) {
     case 90:
      {
       $12 = $first + 2 | 0;
       $13 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12, $last, $db) | 0;
       $14 = ($13 | 0) == ($12 | 0);
       $15 = ($13 | 0) == ($last | 0);
       $or$cond = $14 | $15;
       if ($or$cond) {
        $t$0 = $13;
       } else {
        $16 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
        $17 = $16 << 24 >> 24 == 46;
        if ($17) {
         $18 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
         $19 = $db + 4 | 0;
         $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
         $21 = ($18 | 0) == ($20 | 0);
         L13 : do {
          if ($21) {
           $$03$i = $13;
          } else {
           $22 = $20 + -24 | 0;
           $23 = $13;
           $24 = $6 - $23 | 0;
           $25 = $24 >>> 0 > 4294967279;
           if ($25) {
            __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
           }
           $26 = $24 >>> 0 < 11;
           if ($26) {
            $27 = $24 << 1;
            $28 = $27 & 255;
            SAFE_HEAP_STORE($2 >> 0 | 0, $28 | 0, 1);
            $29 = $2 + 1 | 0;
            $__p$0$ph$i$i$i = $29;
           } else {
            $30 = $24 + 16 | 0;
            $31 = $30 & -16;
            $32 = _malloc($31) | 0;
            $33 = $2 + 8 | 0;
            SAFE_HEAP_STORE($33 | 0, $32 | 0, 4);
            $34 = $31 | 1;
            SAFE_HEAP_STORE($2 | 0, $34 | 0, 4);
            $35 = $2 + 4 | 0;
            SAFE_HEAP_STORE($35 | 0, $24 | 0, 4);
            $__p$0$ph$i$i$i = $32;
           }
           $36 = ($13 | 0) == ($last | 0);
           if (!$36) {
            $$0$i$i$i11 = $13;
            $__p$0$i$i$i10 = $__p$0$ph$i$i$i;
            while (1) {
             $37 = SAFE_HEAP_LOAD($$0$i$i$i11 >> 0 | 0, 1, 0) | 0 | 0;
             SAFE_HEAP_STORE($__p$0$i$i$i10 >> 0 | 0, $37 | 0, 1);
             $38 = $$0$i$i$i11 + 1 | 0;
             $39 = $__p$0$i$i$i10 + 1 | 0;
             $40 = ($38 | 0) == ($last | 0);
             if ($40) {
              break;
             } else {
              $$0$i$i$i11 = $38;
              $__p$0$i$i$i10 = $39;
             }
            }
           }
           $scevgep2$i$i$i = $__p$0$ph$i$i$i + $24 | 0;
           SAFE_HEAP_STORE($scevgep2$i$i$i >> 0 | 0, 0 | 0, 1);
           __THREW__ = 0;
           $41 = invoke_iiii(227, $2 | 0, 0, 10209 | 0) | 0;
           $42 = __THREW__;
           __THREW__ = 0;
           $43 = $42 & 1;
           if ($43) {
            $65 = ___cxa_find_matching_catch() | 0;
            $66 = tempRet0;
            $$1$i = $66;
            $$12$i = $65;
           } else {
            {}
            SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($41 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($41 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
            SAFE_HEAP_STORE($41 | 0, 0 | 0, 4);
            $44 = $41 + 4 | 0;
            SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
            $45 = $41 + 8 | 0;
            SAFE_HEAP_STORE($45 | 0, 0 | 0, 4);
            __THREW__ = 0;
            $46 = invoke_iii(228, $1 | 0, 10212 | 0) | 0;
            $47 = __THREW__;
            __THREW__ = 0;
            $48 = $47 & 1;
            do {
             if ($48) {
              $67 = ___cxa_find_matching_catch() | 0;
              $68 = tempRet0;
              $$0$i = $68;
              $$01$i = $67;
             } else {
              {}
              SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($46 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($46 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
              SAFE_HEAP_STORE($46 | 0, 0 | 0, 4);
              $49 = $46 + 4 | 0;
              SAFE_HEAP_STORE($49 | 0, 0 | 0, 4);
              $50 = $46 + 8 | 0;
              SAFE_HEAP_STORE($50 | 0, 0 | 0, 4);
              $51 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
              $52 = $51 & 1;
              $53 = $52 << 24 >> 24 == 0;
              $54 = $0 + 8 | 0;
              $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
              $56 = $0 + 1 | 0;
              $57 = $53 ? $56 : $55;
              $58 = $0 + 4 | 0;
              $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
              $60 = $51 & 255;
              $61 = $60 >>> 1;
              $62 = $53 ? $61 : $59;
              __THREW__ = 0;
              invoke_iiii(222, $22 | 0, $57 | 0, $62 | 0) | 0;
              $63 = __THREW__;
              __THREW__ = 0;
              $64 = $63 & 1;
              if ($64) {
               $69 = ___cxa_find_matching_catch() | 0;
               $70 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
               $$0$i = $70;
               $$01$i = $69;
               break;
              } else {
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
               $$03$i = $last;
               break L13;
              }
             }
            } while (0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$1$i = $$0$i;
            $$12$i = $$01$i;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           ___resumeException($$12$i | 0);
          }
         } while (0);
         $t$0 = $$03$i;
        } else {
         $t$0 = $13;
        }
       }
       $71 = ($t$0 | 0) == ($last | 0);
       if ($71) {
        break L3;
       }
       SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
       break L1;
       break;
      }
     case 95:
      {
       $72 = $first + 2 | 0;
       $73 = SAFE_HEAP_LOAD($72 >> 0 | 0, 1, 0) | 0 | 0;
       $74 = $73 << 24 >> 24 == 95;
       if ($74) {
        $75 = $first + 3 | 0;
        $76 = SAFE_HEAP_LOAD($75 >> 0 | 0, 1, 0) | 0 | 0;
        $77 = $76 << 24 >> 24 == 90;
        if ($77) {
         $78 = $first + 4 | 0;
         $79 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($78, $last, $db) | 0;
         $80 = ($79 | 0) == ($78 | 0);
         $81 = ($79 | 0) == ($last | 0);
         $or$cond1 = $80 | $81;
         if ($or$cond1) {
          SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
          break L1;
         }
         $82 = $79;
         $83 = $6 - $82 | 0;
         $84 = ($83 | 0) > 12;
         L46 : do {
          if ($84) {
           $i$0$i16 = 0;
           $t$0$i15 = $79;
           while (1) {
            $85 = SAFE_HEAP_LOAD($t$0$i15 >> 0 | 0, 1, 0) | 0 | 0;
            $86 = 10214 + $i$0$i16 | 0;
            $87 = SAFE_HEAP_LOAD($86 >> 0 | 0, 1, 0) | 0 | 0;
            $88 = $85 << 24 >> 24 == $87 << 24 >> 24;
            if (!$88) {
             $$0$i2 = $79;
             break L46;
            }
            $89 = $i$0$i16 + 1 | 0;
            $90 = $t$0$i15 + 1 | 0;
            $91 = ($89 | 0) < 13;
            if ($91) {
             $i$0$i16 = $89;
             $t$0$i15 = $90;
            } else {
             $$lcssa = $90;
             $t$0$i15$lcssa20 = $t$0$i15;
             break;
            }
           }
           $92 = ($$lcssa | 0) == ($last | 0);
           L51 : do {
            if ($92) {
             $t$2$i = $last;
            } else {
             $93 = SAFE_HEAP_LOAD($$lcssa >> 0 | 0, 1, 0) | 0 | 0;
             $94 = $93 << 24 >> 24 == 95;
             if ($94) {
              $95 = $t$0$i15$lcssa20 + 2 | 0;
              $96 = ($95 | 0) == ($last | 0);
              if ($96) {
               $$0$i2 = $79;
               break L46;
              }
              $97 = SAFE_HEAP_LOAD($95 >> 0 | 0, 1, 0) | 0 | 0;
              $98 = $97 << 24 >> 24;
              $isdigittmp2$i = $98 + -48 | 0;
              $isdigit3$i = $isdigittmp2$i >>> 0 < 10;
              if (!$isdigit3$i) {
               $$0$i2 = $79;
               break L46;
              }
              $99 = $t$0$i15$lcssa20 + 3 | 0;
              $t$1$i$ph = $99;
             } else {
              $t$1$i$ph = $$lcssa;
             }
             $100 = ($t$1$i$ph | 0) == ($last | 0);
             if ($100) {
              $t$2$i = $last;
             } else {
              $t$1$i12 = $t$1$i$ph;
              while (1) {
               $101 = SAFE_HEAP_LOAD($t$1$i12 >> 0 | 0, 1, 0) | 0 | 0;
               $102 = $101 << 24 >> 24;
               $isdigittmp$i = $102 + -48 | 0;
               $isdigit$i = $isdigittmp$i >>> 0 < 10;
               if (!$isdigit$i) {
                $t$2$i = $t$1$i12;
                break L51;
               }
               $103 = $t$1$i12 + 1 | 0;
               $104 = ($103 | 0) == ($last | 0);
               if ($104) {
                $t$2$i = $last;
                break;
               } else {
                $t$1$i12 = $103;
               }
              }
             }
            }
           } while (0);
           $105 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
           $106 = $db + 4 | 0;
           $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
           $108 = ($105 | 0) == ($107 | 0);
           if ($108) {
            $$0$i2 = $79;
           } else {
            $109 = $107 + -24 | 0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($109, 0, 10228) | 0;
            $$0$i2 = $t$2$i;
           }
          } else {
           $$0$i2 = $79;
          }
         } while (0);
         $110 = ($$0$i2 | 0) == ($last | 0);
         if ($110) {
          break L3;
         }
         SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
         break L1;
        }
       }
       break;
      }
     default:
      {}
     }
     SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
     break L1;
    } else {
     $111 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $112 = ($111 | 0) == ($last | 0);
     if (!$112) {
      SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
      break L1;
     }
    }
   } while (0);
   $$pr = SAFE_HEAP_LOAD($status | 0, 4, 0) | 0 | 0;
   $113 = ($$pr | 0) == 0;
   if ($113) {
    $114 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
    $115 = $db + 4 | 0;
    $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
    $117 = ($114 | 0) == ($116 | 0);
    if ($117) {
     SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
    }
   }
  } else {
   SAFE_HEAP_STORE($status | 0, -2 | 0, 4);
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactSolverC2EP18b2ContactSolverDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0, $contact = 0, $cp = 0, $fixtureA = 0, $fixtureB = 0, $i = 0, $j = 0, $manifold = 0, $pc = 0, $pointCount = 0, $radiusA = 0.0, $radiusB = 0.0, $shapeA = 0;
 var $shapeB = 0, $vc = 0, $vcp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $def;
 $2 = $0;
 $3 = $1;
 {}
 SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($3 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 12 | 0, SAFE_HEAP_LOAD($3 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 16 | 0, SAFE_HEAP_LOAD($3 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 20 | 0, SAFE_HEAP_LOAD($3 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 $4 = $1;
 $5 = $4 + 40 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $2 + 32 | 0;
 SAFE_HEAP_STORE($7 | 0, $6 | 0, 4);
 $8 = $1;
 $9 = $8 + 28 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $2 + 48 | 0;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 $12 = $2 + 32 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $2 + 48 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 * 88 | 0;
 $17 = __ZN16b2StackAllocator8AllocateEi($13, $16) | 0;
 $18 = $2 + 36 | 0;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = $2 + 32 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $2 + 48 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $22 * 156 | 0;
 $24 = __ZN16b2StackAllocator8AllocateEi($20, $23) | 0;
 $25 = $2 + 40 | 0;
 SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
 $26 = $1;
 $27 = $26 + 32 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $2 + 24 | 0;
 SAFE_HEAP_STORE($29 | 0, $28 | 0, 4);
 $30 = $1;
 $31 = $30 + 36 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $2 + 28 | 0;
 SAFE_HEAP_STORE($33 | 0, $32 | 0, 4);
 $34 = $1;
 $35 = $34 + 24 | 0;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = $2 + 44 | 0;
 SAFE_HEAP_STORE($37 | 0, $36 | 0, 4);
 $i = 0;
 while (1) {
  $38 = $i;
  $39 = $2 + 48 | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = ($38 | 0) < ($40 | 0);
  if (!$41) {
   label = 12;
   break;
  }
  $42 = $i;
  $43 = $2 + 44 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = $44 + ($42 << 2) | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $contact = $46;
  $47 = $contact;
  $48 = $47 + 48 | 0;
  $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
  $fixtureA = $49;
  $50 = $contact;
  $51 = $50 + 52 | 0;
  $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
  $fixtureB = $52;
  $53 = $fixtureA;
  $54 = __ZN9b2Fixture8GetShapeEv($53) | 0;
  $shapeA = $54;
  $55 = $fixtureB;
  $56 = __ZN9b2Fixture8GetShapeEv($55) | 0;
  $shapeB = $56;
  $57 = $shapeA;
  $58 = $57 + 8 | 0;
  $59 = +(+SAFE_HEAP_LOAD_D($58 | 0, 4));
  $radiusA = $59;
  $60 = $shapeB;
  $61 = $60 + 8 | 0;
  $62 = +(+SAFE_HEAP_LOAD_D($61 | 0, 4));
  $radiusB = $62;
  $63 = $fixtureA;
  $64 = __ZN9b2Fixture7GetBodyEv($63) | 0;
  $bodyA = $64;
  $65 = $fixtureB;
  $66 = __ZN9b2Fixture7GetBodyEv($65) | 0;
  $bodyB = $66;
  $67 = $contact;
  $68 = __ZN9b2Contact11GetManifoldEv($67) | 0;
  $manifold = $68;
  $69 = $manifold;
  $70 = $69 + 60 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
  $pointCount = $71;
  $72 = $pointCount;
  $73 = ($72 | 0) > 0;
  if (!$73) {
   label = 4;
   break;
  }
  $74 = $2 + 40 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = $i;
  $77 = $75 + ($76 * 156 | 0) | 0;
  $vc = $77;
  $78 = $contact;
  $79 = $78 + 136 | 0;
  $80 = +(+SAFE_HEAP_LOAD_D($79 | 0, 4));
  $81 = $vc;
  $82 = $81 + 136 | 0;
  SAFE_HEAP_STORE_D($82 | 0, +$80, 4);
  $83 = $contact;
  $84 = $83 + 140 | 0;
  $85 = +(+SAFE_HEAP_LOAD_D($84 | 0, 4));
  $86 = $vc;
  $87 = $86 + 140 | 0;
  SAFE_HEAP_STORE_D($87 | 0, +$85, 4);
  $88 = $contact;
  $89 = $88 + 144 | 0;
  $90 = +(+SAFE_HEAP_LOAD_D($89 | 0, 4));
  $91 = $vc;
  $92 = $91 + 144 | 0;
  SAFE_HEAP_STORE_D($92 | 0, +$90, 4);
  $93 = $bodyA;
  $94 = $93 + 8 | 0;
  $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
  $96 = $vc;
  $97 = $96 + 112 | 0;
  SAFE_HEAP_STORE($97 | 0, $95 | 0, 4);
  $98 = $bodyB;
  $99 = $98 + 8 | 0;
  $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
  $101 = $vc;
  $102 = $101 + 116 | 0;
  SAFE_HEAP_STORE($102 | 0, $100 | 0, 4);
  $103 = $bodyA;
  $104 = $103 + 120 | 0;
  $105 = +(+SAFE_HEAP_LOAD_D($104 | 0, 4));
  $106 = $vc;
  $107 = $106 + 120 | 0;
  SAFE_HEAP_STORE_D($107 | 0, +$105, 4);
  $108 = $bodyB;
  $109 = $108 + 120 | 0;
  $110 = +(+SAFE_HEAP_LOAD_D($109 | 0, 4));
  $111 = $vc;
  $112 = $111 + 124 | 0;
  SAFE_HEAP_STORE_D($112 | 0, +$110, 4);
  $113 = $bodyA;
  $114 = $113 + 128 | 0;
  $115 = +(+SAFE_HEAP_LOAD_D($114 | 0, 4));
  $116 = $vc;
  $117 = $116 + 128 | 0;
  SAFE_HEAP_STORE_D($117 | 0, +$115, 4);
  $118 = $bodyB;
  $119 = $118 + 128 | 0;
  $120 = +(+SAFE_HEAP_LOAD_D($119 | 0, 4));
  $121 = $vc;
  $122 = $121 + 132 | 0;
  SAFE_HEAP_STORE_D($122 | 0, +$120, 4);
  $123 = $i;
  $124 = $vc;
  $125 = $124 + 152 | 0;
  SAFE_HEAP_STORE($125 | 0, $123 | 0, 4);
  $126 = $pointCount;
  $127 = $vc;
  $128 = $127 + 148 | 0;
  SAFE_HEAP_STORE($128 | 0, $126 | 0, 4);
  $129 = $vc;
  $130 = $129 + 96 | 0;
  __ZN7b2Mat227SetZeroEv($130);
  $131 = $vc;
  $132 = $131 + 80 | 0;
  __ZN7b2Mat227SetZeroEv($132);
  $133 = $2 + 36 | 0;
  $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
  $135 = $i;
  $136 = $134 + ($135 * 88 | 0) | 0;
  $pc = $136;
  $137 = $bodyA;
  $138 = $137 + 8 | 0;
  $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
  $140 = $pc;
  $141 = $140 + 32 | 0;
  SAFE_HEAP_STORE($141 | 0, $139 | 0, 4);
  $142 = $bodyB;
  $143 = $142 + 8 | 0;
  $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
  $145 = $pc;
  $146 = $145 + 36 | 0;
  SAFE_HEAP_STORE($146 | 0, $144 | 0, 4);
  $147 = $bodyA;
  $148 = $147 + 120 | 0;
  $149 = +(+SAFE_HEAP_LOAD_D($148 | 0, 4));
  $150 = $pc;
  $151 = $150 + 40 | 0;
  SAFE_HEAP_STORE_D($151 | 0, +$149, 4);
  $152 = $bodyB;
  $153 = $152 + 120 | 0;
  $154 = +(+SAFE_HEAP_LOAD_D($153 | 0, 4));
  $155 = $pc;
  $156 = $155 + 44 | 0;
  SAFE_HEAP_STORE_D($156 | 0, +$154, 4);
  $157 = $pc;
  $158 = $157 + 48 | 0;
  $159 = $bodyA;
  $160 = $159 + 28 | 0;
  {}
  SAFE_HEAP_STORE($158 | 0, SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($158 + 4 | 0, SAFE_HEAP_LOAD($160 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $161 = $pc;
  $162 = $161 + 56 | 0;
  $163 = $bodyB;
  $164 = $163 + 28 | 0;
  {}
  SAFE_HEAP_STORE($162 | 0, SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($162 + 4 | 0, SAFE_HEAP_LOAD($164 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $165 = $bodyA;
  $166 = $165 + 128 | 0;
  $167 = +(+SAFE_HEAP_LOAD_D($166 | 0, 4));
  $168 = $pc;
  $169 = $168 + 64 | 0;
  SAFE_HEAP_STORE_D($169 | 0, +$167, 4);
  $170 = $bodyB;
  $171 = $170 + 128 | 0;
  $172 = +(+SAFE_HEAP_LOAD_D($171 | 0, 4));
  $173 = $pc;
  $174 = $173 + 68 | 0;
  SAFE_HEAP_STORE_D($174 | 0, +$172, 4);
  $175 = $pc;
  $176 = $175 + 16 | 0;
  $177 = $manifold;
  $178 = $177 + 40 | 0;
  {}
  SAFE_HEAP_STORE($176 | 0, SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($176 + 4 | 0, SAFE_HEAP_LOAD($178 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $179 = $pc;
  $180 = $179 + 24 | 0;
  $181 = $manifold;
  $182 = $181 + 48 | 0;
  {}
  SAFE_HEAP_STORE($180 | 0, SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($180 + 4 | 0, SAFE_HEAP_LOAD($182 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $183 = $pointCount;
  $184 = $pc;
  $185 = $184 + 84 | 0;
  SAFE_HEAP_STORE($185 | 0, $183 | 0, 4);
  $186 = $radiusA;
  $187 = $pc;
  $188 = $187 + 76 | 0;
  SAFE_HEAP_STORE_D($188 | 0, +$186, 4);
  $189 = $radiusB;
  $190 = $pc;
  $191 = $190 + 80 | 0;
  SAFE_HEAP_STORE_D($191 | 0, +$189, 4);
  $192 = $manifold;
  $193 = $192 + 56 | 0;
  $194 = SAFE_HEAP_LOAD($193 | 0, 4, 0) | 0 | 0;
  $195 = $pc;
  $196 = $195 + 72 | 0;
  SAFE_HEAP_STORE($196 | 0, $194 | 0, 4);
  $j = 0;
  while (1) {
   $197 = $j;
   $198 = $pointCount;
   $199 = ($197 | 0) < ($198 | 0);
   if (!$199) {
    break;
   }
   $200 = $manifold;
   $201 = $j;
   $202 = $200 + ($201 * 20 | 0) | 0;
   $cp = $202;
   $203 = $vc;
   $204 = $j;
   $205 = $203 + ($204 * 36 | 0) | 0;
   $vcp = $205;
   $206 = $2 + 20 | 0;
   $207 = SAFE_HEAP_LOAD($206 >> 0 | 0, 1, 0) | 0 | 0;
   $208 = $207 & 1;
   if ($208) {
    $209 = $2 + 8 | 0;
    $210 = +(+SAFE_HEAP_LOAD_D($209 | 0, 4));
    $211 = $cp;
    $212 = $211 + 8 | 0;
    $213 = +(+SAFE_HEAP_LOAD_D($212 | 0, 4));
    $214 = $210 * $213;
    $215 = $vcp;
    $216 = $215 + 16 | 0;
    SAFE_HEAP_STORE_D($216 | 0, +$214, 4);
    $217 = $2 + 8 | 0;
    $218 = +(+SAFE_HEAP_LOAD_D($217 | 0, 4));
    $219 = $cp;
    $220 = $219 + 12 | 0;
    $221 = +(+SAFE_HEAP_LOAD_D($220 | 0, 4));
    $222 = $218 * $221;
    $223 = $vcp;
    $224 = $223 + 20 | 0;
    SAFE_HEAP_STORE_D($224 | 0, +$222, 4);
   } else {
    $225 = $vcp;
    $226 = $225 + 16 | 0;
    SAFE_HEAP_STORE_D($226 | 0, +(0.0), 4);
    $227 = $vcp;
    $228 = $227 + 20 | 0;
    SAFE_HEAP_STORE_D($228 | 0, +(0.0), 4);
   }
   $229 = $vcp;
   __ZN6b2Vec27SetZeroEv($229);
   $230 = $vcp;
   $231 = $230 + 8 | 0;
   __ZN6b2Vec27SetZeroEv($231);
   $232 = $vcp;
   $233 = $232 + 24 | 0;
   SAFE_HEAP_STORE_D($233 | 0, +(0.0), 4);
   $234 = $vcp;
   $235 = $234 + 28 | 0;
   SAFE_HEAP_STORE_D($235 | 0, +(0.0), 4);
   $236 = $vcp;
   $237 = $236 + 32 | 0;
   SAFE_HEAP_STORE_D($237 | 0, +(0.0), 4);
   $238 = $j;
   $239 = $pc;
   $240 = $239 + ($238 << 3) | 0;
   $241 = $cp;
   {}
   SAFE_HEAP_STORE($240 | 0, SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($240 + 4 | 0, SAFE_HEAP_LOAD($241 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $242 = $j;
   $243 = $242 + 1 | 0;
   $j = $243;
  }
  $244 = $i;
  $245 = $244 + 1 | 0;
  $i = $245;
 }
 if ((label | 0) == 4) {
  ___assert_fail(7010 | 0, 6052 | 0, 74, 7025 | 0);
 } else if ((label | 0) == 12) {
  STACKTOP = sp;
  return;
 }
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
 $5 = $1 & 3;
 $notlhs = $p >>> 0 >= $4 >>> 0;
 $notrhs = ($5 | 0) != 1;
 $or$cond$not = $notrhs & $notlhs;
 $6 = $p >>> 0 < $3 >>> 0;
 $or$cond30 = $or$cond$not & $6;
 if (!$or$cond30) {
  _abort();
 }
 $$sum2728 = $2 | 4;
 $7 = $p + $$sum2728 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 & 1;
 $10 = ($9 | 0) == 0;
 if ($10) {
  _abort();
 }
 $11 = ($5 | 0) == 0;
 if ($11) {
  $12 = $nb >>> 0 < 256;
  if ($12) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $13 = $nb + 4 | 0;
  $14 = $2 >>> 0 < $13 >>> 0;
  if (!$14) {
   $15 = $2 - $nb | 0;
   $16 = SAFE_HEAP_LOAD(2556 | 0, 4, 0) | 0 | 0;
   $17 = $16 << 1;
   $18 = $15 >>> 0 > $17 >>> 0;
   if (!$18) {
    $newp$0 = $p;
    return $newp$0 | 0;
   }
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $19 = $2 >>> 0 < $nb >>> 0;
 if (!$19) {
  $20 = $2 - $nb | 0;
  $21 = $20 >>> 0 > 15;
  if (!$21) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $22 = $p + $nb | 0;
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  SAFE_HEAP_STORE($0 | 0, $25 | 0, 4);
  $$sum23 = $nb + 4 | 0;
  $26 = $p + $$sum23 | 0;
  $27 = $20 | 3;
  SAFE_HEAP_STORE($26 | 0, $27 | 0, 4);
  $28 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $29 = $28 | 1;
  SAFE_HEAP_STORE($7 | 0, $29 | 0, 4);
  _dispose_chunk($22, $20);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $30 = SAFE_HEAP_LOAD(2100 | 0, 4, 0) | 0 | 0;
 $31 = ($3 | 0) == ($30 | 0);
 if ($31) {
  $32 = SAFE_HEAP_LOAD(2088 | 0, 4, 0) | 0 | 0;
  $33 = $32 + $2 | 0;
  $34 = $33 >>> 0 > $nb >>> 0;
  if (!$34) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  $36 = $p + $nb | 0;
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  SAFE_HEAP_STORE($0 | 0, $39 | 0, 4);
  $$sum22 = $nb + 4 | 0;
  $40 = $p + $$sum22 | 0;
  $41 = $35 | 1;
  SAFE_HEAP_STORE($40 | 0, $41 | 0, 4);
  SAFE_HEAP_STORE(2100 | 0, $36 | 0, 4);
  SAFE_HEAP_STORE(2088 | 0, $35 | 0, 4);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $42 = SAFE_HEAP_LOAD(2096 | 0, 4, 0) | 0 | 0;
 $43 = ($3 | 0) == ($42 | 0);
 if ($43) {
  $44 = SAFE_HEAP_LOAD(2084 | 0, 4, 0) | 0 | 0;
  $45 = $44 + $2 | 0;
  $46 = $45 >>> 0 < $nb >>> 0;
  if ($46) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  $48 = $47 >>> 0 > 15;
  if ($48) {
   $49 = $p + $nb | 0;
   $50 = $p + $45 | 0;
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   SAFE_HEAP_STORE($0 | 0, $53 | 0, 4);
   $$sum19 = $nb + 4 | 0;
   $54 = $p + $$sum19 | 0;
   $55 = $47 | 1;
   SAFE_HEAP_STORE($54 | 0, $55 | 0, 4);
   SAFE_HEAP_STORE($50 | 0, $47 | 0, 4);
   $$sum20 = $45 + 4 | 0;
   $56 = $p + $$sum20 | 0;
   $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
   $58 = $57 & -2;
   SAFE_HEAP_STORE($56 | 0, $58 | 0, 4);
   $storemerge = $49;
   $storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   SAFE_HEAP_STORE($0 | 0, $61 | 0, 4);
   $$sum17 = $45 + 4 | 0;
   $62 = $p + $$sum17 | 0;
   $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
   $64 = $63 | 1;
   SAFE_HEAP_STORE($62 | 0, $64 | 0, 4);
   $storemerge = 0;
   $storemerge21 = 0;
  }
  SAFE_HEAP_STORE(2084 | 0, $storemerge21 | 0, 4);
  SAFE_HEAP_STORE(2096 | 0, $storemerge | 0, 4);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $65 = $8 & 2;
 $66 = ($65 | 0) == 0;
 if (!$66) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $67 = $8 & -8;
 $68 = $67 + $2 | 0;
 $69 = $68 >>> 0 < $nb >>> 0;
 if ($69) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 $72 = $8 >>> 0 < 256;
 do {
  if ($72) {
   $$sum15 = $2 + 8 | 0;
   $73 = $p + $$sum15 | 0;
   $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
   $$sum16 = $2 + 12 | 0;
   $75 = $p + $$sum16 | 0;
   $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
   $77 = $71 << 1;
   $78 = 2116 + ($77 << 2) | 0;
   $79 = ($74 | 0) == ($78 | 0);
   if (!$79) {
    $80 = $74 >>> 0 < $4 >>> 0;
    if ($80) {
     _abort();
    }
    $81 = $74 + 12 | 0;
    $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
    $83 = ($82 | 0) == ($3 | 0);
    if (!$83) {
     _abort();
    }
   }
   $84 = ($76 | 0) == ($74 | 0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = SAFE_HEAP_LOAD(2076 | 0, 4, 0) | 0 | 0;
    $88 = $87 & $86;
    SAFE_HEAP_STORE(2076 | 0, $88 | 0, 4);
    break;
   }
   $89 = ($76 | 0) == ($78 | 0);
   if ($89) {
    $$pre = $76 + 8 | 0;
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = $76 >>> 0 < $4 >>> 0;
    if ($90) {
     _abort();
    }
    $91 = $76 + 8 | 0;
    $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
    $93 = ($92 | 0) == ($3 | 0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
    }
   }
   $94 = $74 + 12 | 0;
   SAFE_HEAP_STORE($94 | 0, $76 | 0, 4);
   SAFE_HEAP_STORE($$pre$phiZ2D | 0, $74 | 0, 4);
  } else {
   $$sum = $2 + 24 | 0;
   $95 = $p + $$sum | 0;
   $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
   $$sum2 = $2 + 12 | 0;
   $97 = $p + $$sum2 | 0;
   $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
   $99 = ($98 | 0) == ($3 | 0);
   do {
    if ($99) {
     $$sum4 = $2 + 20 | 0;
     $109 = $p + $$sum4 | 0;
     $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
     $111 = ($110 | 0) == (0 | 0);
     if ($111) {
      $$sum3 = $2 + 16 | 0;
      $112 = $p + $$sum3 | 0;
      $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
      $114 = ($113 | 0) == (0 | 0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;
       $RP$0 = $112;
      }
     } else {
      $R$0 = $110;
      $RP$0 = $109;
     }
     while (1) {
      $115 = $R$0 + 20 | 0;
      $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
      $117 = ($116 | 0) == (0 | 0);
      if (!$117) {
       $R$0 = $116;
       $RP$0 = $115;
       continue;
      }
      $118 = $R$0 + 16 | 0;
      $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
      $120 = ($119 | 0) == (0 | 0);
      if ($120) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;
       $RP$0 = $118;
      }
     }
     $121 = $RP$0$lcssa >>> 0 < $4 >>> 0;
     if ($121) {
      _abort();
     } else {
      SAFE_HEAP_STORE($RP$0$lcssa | 0, 0 | 0, 4);
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = $2 + 8 | 0;
     $100 = $p + $$sum14 | 0;
     $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
     $102 = $101 >>> 0 < $4 >>> 0;
     if ($102) {
      _abort();
     }
     $103 = $101 + 12 | 0;
     $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
     $105 = ($104 | 0) == ($3 | 0);
     if (!$105) {
      _abort();
     }
     $106 = $98 + 8 | 0;
     $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
     $108 = ($107 | 0) == ($3 | 0);
     if ($108) {
      SAFE_HEAP_STORE($103 | 0, $98 | 0, 4);
      SAFE_HEAP_STORE($106 | 0, $101 | 0, 4);
      $R$1 = $98;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $122 = ($96 | 0) == (0 | 0);
   if (!$122) {
    $$sum11 = $2 + 28 | 0;
    $123 = $p + $$sum11 | 0;
    $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
    $125 = 2380 + ($124 << 2) | 0;
    $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
    $127 = ($3 | 0) == ($126 | 0);
    if ($127) {
     SAFE_HEAP_STORE($125 | 0, $R$1 | 0, 4);
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = SAFE_HEAP_LOAD(2080 | 0, 4, 0) | 0 | 0;
      $131 = $130 & $129;
      SAFE_HEAP_STORE(2080 | 0, $131 | 0, 4);
      break;
     }
    } else {
     $132 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $133 = $96 >>> 0 < $132 >>> 0;
     if ($133) {
      _abort();
     }
     $134 = $96 + 16 | 0;
     $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
     $136 = ($135 | 0) == ($3 | 0);
     if ($136) {
      SAFE_HEAP_STORE($134 | 0, $R$1 | 0, 4);
     } else {
      $137 = $96 + 20 | 0;
      SAFE_HEAP_STORE($137 | 0, $R$1 | 0, 4);
     }
     $138 = ($R$1 | 0) == (0 | 0);
     if ($138) {
      break;
     }
    }
    $139 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
    $140 = $R$1 >>> 0 < $139 >>> 0;
    if ($140) {
     _abort();
    }
    $141 = $R$1 + 24 | 0;
    SAFE_HEAP_STORE($141 | 0, $96 | 0, 4);
    $$sum12 = $2 + 16 | 0;
    $142 = $p + $$sum12 | 0;
    $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
    $144 = ($143 | 0) == (0 | 0);
    do {
     if (!$144) {
      $145 = $143 >>> 0 < $139 >>> 0;
      if ($145) {
       _abort();
      } else {
       $146 = $R$1 + 16 | 0;
       SAFE_HEAP_STORE($146 | 0, $143 | 0, 4);
       $147 = $143 + 24 | 0;
       SAFE_HEAP_STORE($147 | 0, $R$1 | 0, 4);
       break;
      }
     }
    } while (0);
    $$sum13 = $2 + 20 | 0;
    $148 = $p + $$sum13 | 0;
    $149 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
    $150 = ($149 | 0) == (0 | 0);
    if (!$150) {
     $151 = SAFE_HEAP_LOAD(2092 | 0, 4, 0) | 0 | 0;
     $152 = $149 >>> 0 < $151 >>> 0;
     if ($152) {
      _abort();
     } else {
      $153 = $R$1 + 20 | 0;
      SAFE_HEAP_STORE($153 | 0, $149 | 0, 4);
      $154 = $149 + 24 | 0;
      SAFE_HEAP_STORE($154 | 0, $R$1 | 0, 4);
      break;
     }
    }
   }
  }
 } while (0);
 $155 = $70 >>> 0 < 16;
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  SAFE_HEAP_STORE($0 | 0, $158 | 0, 4);
  $$sum910 = $68 | 4;
  $159 = $p + $$sum910 | 0;
  $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
  $161 = $160 | 1;
  SAFE_HEAP_STORE($159 | 0, $161 | 0, 4);
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  $162 = $p + $nb | 0;
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  SAFE_HEAP_STORE($0 | 0, $165 | 0, 4);
  $$sum5 = $nb + 4 | 0;
  $166 = $p + $$sum5 | 0;
  $167 = $70 | 3;
  SAFE_HEAP_STORE($166 | 0, $167 | 0, 4);
  $$sum78 = $68 | 4;
  $168 = $p + $$sum78 | 0;
  $169 = SAFE_HEAP_LOAD($168 | 0, 4, 0) | 0 | 0;
  $170 = $169 | 1;
  SAFE_HEAP_STORE($168 | 0, $170 | 0, 4);
  _dispose_chunk($162, $70);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__16__sortIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0;
 var $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__first;
 $1 = $__last;
 $2 = $__comp;
 $__limit = 30;
 L1 : while (1) {
  $3 = $1;
  $4 = $0;
  $5 = $3;
  $6 = $4;
  $7 = $5 - $6 | 0;
  $8 = ($7 | 0) / 8 & -1;
  $__len = $8;
  $9 = $__len;
  switch ($9 | 0) {
  case 2:
   {
    label = 3;
    break L1;
    break;
   }
  case 3:
   {
    label = 5;
    break L1;
    break;
   }
  case 4:
   {
    label = 6;
    break L1;
    break;
   }
  case 5:
   {
    label = 7;
    break L1;
    break;
   }
  case 1:
  case 0:
   {
    label = 49;
    break L1;
    break;
   }
  default:
   {}
  }
  $41 = $__len;
  $42 = ($41 | 0) <= 30;
  $43 = $0;
  if ($42) {
   label = 9;
   break;
  }
  $__m = $43;
  $46 = $1;
  $__lm1 = $46;
  $47 = $__lm1;
  $48 = $47 + -8 | 0;
  $__lm1 = $48;
  $49 = $__len;
  $50 = ($49 | 0) >= 1e3;
  $51 = $__len;
  $52 = ($51 | 0) / 2 & -1;
  $__delta = $52;
  $53 = $__delta;
  $54 = $__m;
  $55 = $54 + ($53 << 3) | 0;
  $__m = $55;
  if ($50) {
   $56 = $__delta;
   $57 = ($56 | 0) / 2 & -1;
   $__delta = $57;
   $58 = $0;
   $59 = $0;
   $60 = $__delta;
   $61 = $59 + ($60 << 3) | 0;
   $62 = $__m;
   $63 = $__m;
   $64 = $__delta;
   $65 = $63 + ($64 << 3) | 0;
   $66 = $__lm1;
   $67 = $2;
   $68 = __ZNSt3__17__sort5IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_SA_T_($58, $61, $62, $65, $66, $67) | 0;
   $__n_swaps = $68;
  } else {
   $69 = $0;
   $70 = $__m;
   $71 = $__lm1;
   $72 = $2;
   $73 = __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($69, $70, $71, $72) | 0;
   $__n_swaps = $73;
  }
  $74 = $0;
  $__i = $74;
  $75 = $__lm1;
  $__j = $75;
  $76 = $2;
  $77 = $__i;
  $78 = $__m;
  $79 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($76, $77, $78) | 0;
  do {
   if (!$79) {
    while (1) {
     $80 = $__i;
     $81 = $__j;
     $82 = $81 + -8 | 0;
     $__j = $82;
     $83 = ($80 | 0) == ($82 | 0);
     if ($83) {
      break;
     }
     $130 = $2;
     $131 = $__j;
     $132 = $__m;
     $133 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($130, $131, $132) | 0;
     if ($133) {
      label = 28;
      break;
     }
    }
    if ((label | 0) == 28) {
     label = 0;
     $134 = $__i;
     $135 = $__j;
     __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($134, $135);
     $136 = $__n_swaps;
     $137 = $136 + 1 | 0;
     $__n_swaps = $137;
     break;
    }
    $84 = $__i;
    $85 = $84 + 8 | 0;
    $__i = $85;
    $86 = $1;
    $__j = $86;
    $87 = $2;
    $88 = $0;
    $89 = $__j;
    $90 = $89 + -8 | 0;
    $__j = $90;
    $91 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($87, $88, $90) | 0;
    if (!$91) {
     while (1) {
      $92 = $__i;
      $93 = $__j;
      $94 = ($92 | 0) == ($93 | 0);
      if ($94) {
       label = 49;
       break L1;
      }
      $95 = $2;
      $96 = $0;
      $97 = $__i;
      $98 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($95, $96, $97) | 0;
      $99 = $__i;
      if ($98) {
       break;
      }
      $105 = $99 + 8 | 0;
      $__i = $105;
     }
     $100 = $__j;
     __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($99, $100);
     $101 = $__n_swaps;
     $102 = $101 + 1 | 0;
     $__n_swaps = $102;
     $103 = $__i;
     $104 = $103 + 8 | 0;
     $__i = $104;
    }
    $106 = $__i;
    $107 = $__j;
    $108 = ($106 | 0) == ($107 | 0);
    if ($108) {
     label = 49;
     break L1;
    }
    while (1) {
     $109 = $2;
     $110 = $0;
     $111 = $__i;
     $112 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($109, $110, $111) | 0;
     $113 = $112 ^ 1;
     if ($113) {
      $114 = $__i;
      $115 = $114 + 8 | 0;
      $__i = $115;
      continue;
     }
     while (1) {
      $116 = $2;
      $117 = $0;
      $118 = $__j;
      $119 = $118 + -8 | 0;
      $__j = $119;
      $120 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($116, $117, $119) | 0;
      if (!$120) {
       break;
      }
     }
     $121 = $__i;
     $122 = $__j;
     $123 = $121 >>> 0 >= $122 >>> 0;
     $124 = $__i;
     if ($123) {
      break;
     }
     $125 = $__j;
     __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($124, $125);
     $126 = $__n_swaps;
     $127 = $126 + 1 | 0;
     $__n_swaps = $127;
     $128 = $__i;
     $129 = $128 + 8 | 0;
     $__i = $129;
    }
    $0 = $124;
    continue L1;
   }
  } while (0);
  $138 = $__i;
  $139 = $138 + 8 | 0;
  $__i = $139;
  $140 = $__i;
  $141 = $__j;
  $142 = $140 >>> 0 < $141 >>> 0;
  L33 : do {
   if ($142) {
    while (1) {
     $143 = $2;
     $144 = $__i;
     $145 = $__m;
     $146 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($143, $144, $145) | 0;
     if ($146) {
      $147 = $__i;
      $148 = $147 + 8 | 0;
      $__i = $148;
      continue;
     }
     while (1) {
      $149 = $2;
      $150 = $__j;
      $151 = $150 + -8 | 0;
      $__j = $151;
      $152 = $__m;
      $153 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($149, $151, $152) | 0;
      $154 = $153 ^ 1;
      if (!$154) {
       break;
      }
     }
     $155 = $__i;
     $156 = $__j;
     $157 = $155 >>> 0 > $156 >>> 0;
     if ($157) {
      break L33;
     }
     $158 = $__i;
     $159 = $__j;
     __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($158, $159);
     $160 = $__n_swaps;
     $161 = $160 + 1 | 0;
     $__n_swaps = $161;
     $162 = $__m;
     $163 = $__i;
     $164 = ($162 | 0) == ($163 | 0);
     if ($164) {
      $165 = $__j;
      $__m = $165;
     }
     $166 = $__i;
     $167 = $166 + 8 | 0;
     $__i = $167;
    }
   }
  } while (0);
  $168 = $__i;
  $169 = $__m;
  $170 = ($168 | 0) != ($169 | 0);
  if ($170) {
   $171 = $2;
   $172 = $__m;
   $173 = $__i;
   $174 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($171, $172, $173) | 0;
   if ($174) {
    $175 = $__i;
    $176 = $__m;
    __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($175, $176);
    $177 = $__n_swaps;
    $178 = $177 + 1 | 0;
    $__n_swaps = $178;
   }
  }
  $179 = $__n_swaps;
  $180 = ($179 | 0) == 0;
  do {
   if ($180) {
    $181 = $0;
    $182 = $__i;
    $183 = $2;
    $184 = __ZNSt3__127__insertion_sort_incompleteIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEbT0_SA_T_($181, $182, $183) | 0;
    $185 = $184 & 1;
    $__fs = $185;
    $186 = $__i;
    $187 = $186 + 8 | 0;
    $188 = $1;
    $189 = $2;
    $190 = __ZNSt3__127__insertion_sort_incompleteIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEbT0_SA_T_($187, $188, $189) | 0;
    $191 = $__fs;
    $192 = $191 & 1;
    if ($190) {
     if ($192) {
      label = 49;
      break L1;
     }
     $193 = $__i;
     $1 = $193;
     continue L1;
    } else {
     if (!$192) {
      break;
     }
     $194 = $__i;
     $195 = $194 + 8 | 0;
     $__i = $195;
     $0 = $195;
     continue L1;
    }
   }
  } while (0);
  $196 = $__i;
  $197 = $0;
  $198 = $196;
  $199 = $197;
  $200 = $198 - $199 | 0;
  $201 = ($200 | 0) / 8 & -1;
  $202 = $1;
  $203 = $__i;
  $204 = $202;
  $205 = $203;
  $206 = $204 - $205 | 0;
  $207 = ($206 | 0) / 8 & -1;
  $208 = ($201 | 0) < ($207 | 0);
  if ($208) {
   $209 = $0;
   $210 = $__i;
   $211 = $2;
   __ZNSt3__16__sortIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($209, $210, $211);
   $212 = $__i;
   $213 = $212 + 8 | 0;
   $__i = $213;
   $0 = $213;
   continue;
  } else {
   $214 = $__i;
   $215 = $214 + 8 | 0;
   $216 = $1;
   $217 = $2;
   __ZNSt3__16__sortIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($215, $216, $217);
   $218 = $__i;
   $1 = $218;
   continue;
  }
 }
 if ((label | 0) == 3) {
  $10 = $2;
  $11 = $1;
  $12 = $11 + -8 | 0;
  $1 = $12;
  $13 = $0;
  $14 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($10, $12, $13) | 0;
  if (!$14) {
   STACKTOP = sp;
   return;
  }
  $15 = $0;
  $16 = $1;
  __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($15, $16);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 5) {
  $17 = $0;
  $18 = $0;
  $19 = $18 + 8 | 0;
  $20 = $1;
  $21 = $20 + -8 | 0;
  $1 = $21;
  $22 = $2;
  __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($17, $19, $21, $22) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 6) {
  $23 = $0;
  $24 = $0;
  $25 = $24 + 8 | 0;
  $26 = $0;
  $27 = $26 + 16 | 0;
  $28 = $1;
  $29 = $28 + -8 | 0;
  $1 = $29;
  $30 = $2;
  __ZNSt3__17__sort4IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_T_($23, $25, $27, $29, $30) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 7) {
  $31 = $0;
  $32 = $0;
  $33 = $32 + 8 | 0;
  $34 = $0;
  $35 = $34 + 16 | 0;
  $36 = $0;
  $37 = $36 + 24 | 0;
  $38 = $1;
  $39 = $38 + -8 | 0;
  $1 = $39;
  $40 = $2;
  __ZNSt3__17__sort5IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_SA_T_($31, $33, $35, $37, $39, $40) | 0;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 9) {
  $44 = $1;
  $45 = $2;
  __ZNSt3__118__insertion_sort_3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($43, $44, $45);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 49) {
  STACKTOP = sp;
  return;
 }
}

function __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($manifold, $polyA, $xfA, $polyB, $xfB) {
 $manifold = $manifold | 0;
 $polyA = $polyA | 0;
 $xfA = $xfA | 0;
 $polyB = $polyB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0;
 var $cf = 0, $clipPoints1 = 0, $clipPoints2 = 0, $count1 = 0, $cp = 0, $edge1 = 0, $edgeA = 0, $edgeB = 0, $flip = 0, $frontOffset = 0.0, $i = 0, $incidentEdge = 0, $iv1 = 0, $iv2 = 0, $k_tol = 0.0, $localNormal = 0, $localTangent = 0, $normal = 0, $np = 0, $planePoint = 0;
 var $pointCount = 0, $poly1 = 0, $poly2 = 0, $separation = 0.0, $separationA = 0.0, $separationB = 0.0, $sideOffset1 = 0.0, $sideOffset2 = 0.0, $tangent = 0, $totalRadius = 0.0, $v11 = 0, $v12 = 0, $vertices1 = 0, $xf1 = 0, $xf2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $edgeA = sp + 284 | 0;
 $edgeB = sp + 276 | 0;
 $xf1 = sp + 248 | 0;
 $xf2 = sp + 232 | 0;
 $incidentEdge = sp + 200 | 0;
 $v11 = sp + 176 | 0;
 $v12 = sp + 168 | 0;
 $localTangent = sp + 160 | 0;
 $localNormal = sp + 152 | 0;
 $planePoint = sp + 144 | 0;
 $5 = sp + 136 | 0;
 $tangent = sp + 128 | 0;
 $normal = sp + 120 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 104 | 0;
 $clipPoints1 = sp + 64 | 0;
 $clipPoints2 = sp + 40 | 0;
 $8 = sp + 24 | 0;
 $9 = sp;
 $cf = sp + 312 | 0;
 $0 = $manifold;
 $1 = $polyA;
 $2 = $xfA;
 $3 = $polyB;
 $4 = $xfB;
 $10 = $0;
 $11 = $10 + 60 | 0;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $12 = $1;
 $13 = $12 + 8 | 0;
 $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
 $15 = $3;
 $16 = $15 + 8 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $14 + $17;
 $totalRadius = $18;
 SAFE_HEAP_STORE($edgeA | 0, 0 | 0, 4);
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeA, $19, $20, $21, $22);
 $separationA = $23;
 $24 = $separationA;
 $25 = $totalRadius;
 $26 = $24 > $25;
 if ($26) {
  STACKTOP = sp;
  return;
 }
 SAFE_HEAP_STORE($edgeB | 0, 0 | 0, 4);
 $27 = $3;
 $28 = $4;
 $29 = $1;
 $30 = $2;
 $31 = +__ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeB, $27, $28, $29, $30);
 $separationB = $31;
 $32 = $separationB;
 $33 = $totalRadius;
 $34 = $32 > $33;
 if ($34) {
  STACKTOP = sp;
  return;
 }
 __ZN11b2TransformC2Ev($xf1);
 __ZN11b2TransformC2Ev($xf2);
 $k_tol = 5.000000237487257e-004;
 $35 = $separationB;
 $36 = $separationA;
 $37 = $36 + 5.000000237487257e-004;
 $38 = $35 > $37;
 if ($38) {
  $39 = $3;
  $poly1 = $39;
  $40 = $1;
  $poly2 = $40;
  $41 = $4;
  {}
  SAFE_HEAP_STORE($xf1 | 0, SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 4 | 0, SAFE_HEAP_LOAD($41 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 8 | 0, SAFE_HEAP_LOAD($41 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 12 | 0, SAFE_HEAP_LOAD($41 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  $42 = $2;
  {}
  SAFE_HEAP_STORE($xf2 | 0, SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 4 | 0, SAFE_HEAP_LOAD($42 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 8 | 0, SAFE_HEAP_LOAD($42 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 12 | 0, SAFE_HEAP_LOAD($42 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  $43 = SAFE_HEAP_LOAD($edgeB | 0, 4, 0) | 0 | 0;
  $edge1 = $43;
  $44 = $0;
  $45 = $44 + 56 | 0;
  SAFE_HEAP_STORE($45 | 0, 2 | 0, 4);
  $flip = 1;
 } else {
  $46 = $1;
  $poly1 = $46;
  $47 = $3;
  $poly2 = $47;
  $48 = $2;
  {}
  SAFE_HEAP_STORE($xf1 | 0, SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 4 | 0, SAFE_HEAP_LOAD($48 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 8 | 0, SAFE_HEAP_LOAD($48 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf1 + 12 | 0, SAFE_HEAP_LOAD($48 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  $49 = $4;
  {}
  SAFE_HEAP_STORE($xf2 | 0, SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 4 | 0, SAFE_HEAP_LOAD($49 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 8 | 0, SAFE_HEAP_LOAD($49 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($xf2 + 12 | 0, SAFE_HEAP_LOAD($49 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
  $50 = SAFE_HEAP_LOAD($edgeA | 0, 4, 0) | 0 | 0;
  $edge1 = $50;
  $51 = $0;
  $52 = $51 + 56 | 0;
  SAFE_HEAP_STORE($52 | 0, 1 | 0, 4);
  $flip = 0;
 }
 $53 = $incidentEdge + 24 | 0;
 $54 = $incidentEdge;
 while (1) {
  __ZN12b2ClipVertexC2Ev($54);
  $55 = $54 + 12 | 0;
  $56 = ($55 | 0) == ($53 | 0);
  if ($56) {
   break;
  } else {
   $54 = $55;
  }
 }
 $57 = $poly1;
 $58 = $edge1;
 $59 = $poly2;
 __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($incidentEdge, $57, $xf1, $58, $59, $xf2);
 $60 = $poly1;
 $61 = $60 + 148 | 0;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $count1 = $62;
 $63 = $poly1;
 $64 = $63 + 20 | 0;
 $vertices1 = $64;
 $65 = $edge1;
 $iv1 = $65;
 $66 = $edge1;
 $67 = $66 + 1 | 0;
 $68 = $count1;
 $69 = ($67 | 0) < ($68 | 0);
 $70 = $edge1;
 $71 = $70 + 1 | 0;
 $72 = $69 ? $71 : 0;
 $iv2 = $72;
 $73 = $iv1;
 $74 = $vertices1;
 $75 = $74 + ($73 << 3) | 0;
 {}
 SAFE_HEAP_STORE($v11 | 0, SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v11 + 4 | 0, SAFE_HEAP_LOAD($75 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $76 = $iv2;
 $77 = $vertices1;
 $78 = $77 + ($76 << 3) | 0;
 {}
 SAFE_HEAP_STORE($v12 | 0, SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v12 + 4 | 0, SAFE_HEAP_LOAD($78 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZmiRK6b2Vec2S1_($localTangent, $v12, $v11);
 +__ZN6b2Vec29NormalizeEv($localTangent);
 __Z7b2CrossRK6b2Vec2f($localNormal, $localTangent, 1.0);
 __ZplRK6b2Vec2S1_($5, $v11, $v12);
 __ZmlfRK6b2Vec2($planePoint, .5, $5);
 $79 = $xf1 + 8 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($tangent, $79, $localTangent);
 __Z7b2CrossRK6b2Vec2f($normal, $tangent, 1.0);
 __Z5b2MulRK11b2TransformRK6b2Vec2($6, $xf1, $v11);
 {}
 SAFE_HEAP_STORE($v11 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v11 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __Z5b2MulRK11b2TransformRK6b2Vec2($7, $xf1, $v12);
 {}
 SAFE_HEAP_STORE($v12 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v12 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $80 = +__Z5b2DotRK6b2Vec2S1_($normal, $v11);
 $frontOffset = $80;
 $81 = +__Z5b2DotRK6b2Vec2S1_($tangent, $v11);
 $82 = -$81;
 $83 = $totalRadius;
 $84 = $82 + $83;
 $sideOffset1 = $84;
 $85 = +__Z5b2DotRK6b2Vec2S1_($tangent, $v12);
 $86 = $totalRadius;
 $87 = $85 + $86;
 $sideOffset2 = $87;
 $88 = $clipPoints1 + 24 | 0;
 $89 = $clipPoints1;
 while (1) {
  __ZN12b2ClipVertexC2Ev($89);
  $90 = $89 + 12 | 0;
  $91 = ($90 | 0) == ($88 | 0);
  if ($91) {
   break;
  } else {
   $89 = $90;
  }
 }
 $92 = $clipPoints2 + 24 | 0;
 $93 = $clipPoints2;
 while (1) {
  __ZN12b2ClipVertexC2Ev($93);
  $94 = $93 + 12 | 0;
  $95 = ($94 | 0) == ($92 | 0);
  if ($95) {
   break;
  } else {
   $93 = $94;
  }
 }
 __ZNK6b2Vec2ngEv($8, $tangent);
 $96 = $sideOffset1;
 $97 = $iv1;
 $98 = __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints1, $incidentEdge, $8, $96, $97) | 0;
 $np = $98;
 $99 = $np;
 $100 = ($99 | 0) < 2;
 if ($100) {
  STACKTOP = sp;
  return;
 }
 $101 = $sideOffset2;
 $102 = $iv2;
 $103 = __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($clipPoints2, $clipPoints1, $tangent, $101, $102) | 0;
 $np = $103;
 $104 = $np;
 $105 = ($104 | 0) < 2;
 if ($105) {
  STACKTOP = sp;
  return;
 }
 $106 = $0;
 $107 = $106 + 40 | 0;
 {}
 SAFE_HEAP_STORE($107 | 0, SAFE_HEAP_LOAD($localNormal | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($107 + 4 | 0, SAFE_HEAP_LOAD($localNormal + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $108 = $0;
 $109 = $108 + 48 | 0;
 {}
 SAFE_HEAP_STORE($109 | 0, SAFE_HEAP_LOAD($planePoint | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($109 + 4 | 0, SAFE_HEAP_LOAD($planePoint + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $pointCount = 0;
 $i = 0;
 while (1) {
  $110 = $i;
  $111 = ($110 | 0) < 2;
  if (!$111) {
   break;
  }
  $112 = $i;
  $113 = $clipPoints2 + ($112 * 12 | 0) | 0;
  $114 = +__Z5b2DotRK6b2Vec2S1_($normal, $113);
  $115 = $frontOffset;
  $116 = $114 - $115;
  $separation = $116;
  $117 = $separation;
  $118 = $totalRadius;
  $119 = $117 <= $118;
  if ($119) {
   $120 = $0;
   $121 = $pointCount;
   $122 = $120 + ($121 * 20 | 0) | 0;
   $cp = $122;
   $123 = $cp;
   $124 = $i;
   $125 = $clipPoints2 + ($124 * 12 | 0) | 0;
   __Z6b2MulTRK11b2TransformRK6b2Vec2($9, $xf2, $125);
   {}
   SAFE_HEAP_STORE($123 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($123 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $126 = $cp;
   $127 = $126 + 16 | 0;
   $128 = $i;
   $129 = $clipPoints2 + ($128 * 12 | 0) | 0;
   $130 = $129 + 8 | 0;
   {}
   SAFE_HEAP_STORE($127 | 0, SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0 | 0, 4);
   $131 = $flip;
   $132 = $131 << 24 >> 24 != 0;
   if ($132) {
    $133 = $cp;
    $134 = $133 + 16 | 0;
    {}
    SAFE_HEAP_STORE($cf >> 0 | 0, SAFE_HEAP_LOAD($134 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($cf + 1 >> 0 | 0, SAFE_HEAP_LOAD($134 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($cf + 2 >> 0 | 0, SAFE_HEAP_LOAD($134 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($cf + 3 >> 0 | 0, SAFE_HEAP_LOAD($134 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    $135 = $cf + 1 | 0;
    $136 = SAFE_HEAP_LOAD($135 >> 0 | 0, 1, 0) | 0 | 0;
    $137 = $cp;
    $138 = $137 + 16 | 0;
    SAFE_HEAP_STORE($138 >> 0 | 0, $136 | 0, 1);
    $139 = SAFE_HEAP_LOAD($cf >> 0 | 0, 1, 0) | 0 | 0;
    $140 = $cp;
    $141 = $140 + 16 | 0;
    $142 = $141 + 1 | 0;
    SAFE_HEAP_STORE($142 >> 0 | 0, $139 | 0, 1);
    $143 = $cf + 3 | 0;
    $144 = SAFE_HEAP_LOAD($143 >> 0 | 0, 1, 0) | 0 | 0;
    $145 = $cp;
    $146 = $145 + 16 | 0;
    $147 = $146 + 2 | 0;
    SAFE_HEAP_STORE($147 >> 0 | 0, $144 | 0, 1);
    $148 = $cf + 2 | 0;
    $149 = SAFE_HEAP_LOAD($148 >> 0 | 0, 1, 0) | 0 | 0;
    $150 = $cp;
    $151 = $150 + 16 | 0;
    $152 = $151 + 3 | 0;
    SAFE_HEAP_STORE($152 >> 0 | 0, $149 | 0, 1);
   }
   $153 = $pointCount;
   $154 = $153 + 1 | 0;
   $pointCount = $154;
  }
  $155 = $i;
  $156 = $155 + 1 | 0;
  $i = $156;
 }
 $157 = $pointCount;
 $158 = $0;
 $159 = $158 + 60 | 0;
 SAFE_HEAP_STORE($159 | 0, $157 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$$$i$i$i = 0, $$$i$i$i = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i8 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i7 = 0, $c$0 = 0, $c$0$in$lcssa = 0, $c$0$in29 = 0, $c$026 = 0, $isdigit = 0, $isdigit5 = 0, $isdigit528 = 0;
 var $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp427 = 0, $isdigittmp431 = 0, $n$0$lcssa = 0, $n$030 = 0, $r = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i7 = sp + 108 | 0;
 $__v$i$i = sp + 88 | 0;
 $r = sp + 76 | 0;
 $0 = sp + 64 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 $4 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($4) {
   $$02 = $first;
  } else {
   $5 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $6 = $5 << 24 >> 24;
   $isdigittmp = $6 + -48 | 0;
   $isdigit = $isdigittmp >>> 0 < 10;
   if ($isdigit) {
    $7 = $first + 1 | 0;
    $8 = ($7 | 0) == ($last | 0);
    if ($8) {
     $$02 = $first;
    } else {
     $c$026 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
     $9 = $c$026 << 24 >> 24;
     $isdigittmp427 = $9 + -48 | 0;
     $isdigit528 = $isdigittmp427 >>> 0 < 10;
     if ($isdigit528) {
      $c$0$in29 = $7;
      $isdigittmp431 = $isdigittmp427;
      $n$030 = $isdigittmp;
      while (1) {
       $10 = $c$0$in29 + 1 | 0;
       $11 = ($10 | 0) == ($last | 0);
       if ($11) {
        $$02 = $first;
        break L1;
       }
       $12 = $n$030 * 10 | 0;
       $13 = $isdigittmp431 + $12 | 0;
       $c$0 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
       $14 = $c$0 << 24 >> 24;
       $isdigittmp4 = $14 + -48 | 0;
       $isdigit5 = $isdigittmp4 >>> 0 < 10;
       if ($isdigit5) {
        $c$0$in29 = $10;
        $isdigittmp431 = $isdigittmp4;
        $n$030 = $13;
       } else {
        $$lcssa = $c$0$in29;
        $c$0$in$lcssa = $10;
        $n$0$lcssa = $13;
        break;
       }
      }
     } else {
      $$lcssa = $first;
      $c$0$in$lcssa = $7;
      $n$0$lcssa = $isdigittmp;
     }
     $15 = $last;
     $16 = $c$0$in$lcssa;
     $17 = $15 - $16 | 0;
     $18 = $17 >>> 0 < $n$0$lcssa >>> 0;
     if ($18) {
      $$02 = $first;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r, $c$0$in$lcssa, $n$0$lcssa);
      $19 = SAFE_HEAP_LOAD($r >> 0 | 0, 1, 0) | 0 | 0;
      $20 = $19 & 1;
      $21 = $20 << 24 >> 24 == 0;
      $22 = $r + 4 | 0;
      $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
      $24 = $19 & 255;
      $25 = $24 >>> 1;
      $26 = $21 ? $25 : $23;
      $27 = $r + 8 | 0;
      $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
      $29 = $r + 1 | 0;
      $30 = $21 ? $29 : $28;
      $31 = $26 >>> 0 < 10;
      $32 = $31 ? $26 : 10;
      __THREW__ = 0;
      invoke_viii(237, $0 | 0, $30 | 0, $32 | 0);
      $33 = __THREW__;
      __THREW__ = 0;
      $34 = $33 & 1;
      do {
       if ($34) {
        $89 = ___cxa_find_matching_catch() | 0;
        $90 = tempRet0;
        $$0 = $90;
        $$01 = $89;
       } else {
        $35 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
        $36 = $35 & 1;
        $37 = $36 << 24 >> 24 == 0;
        $38 = $0 + 4 | 0;
        $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
        $40 = $35 & 255;
        $41 = $40 >>> 1;
        $42 = $37 ? $41 : $39;
        $43 = $0 + 8 | 0;
        $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
        $45 = $0 + 1 | 0;
        $46 = $37 ? $45 : $44;
        $47 = $42 >>> 0 > 10;
        $48 = $47 ? 10 : $42;
        $49 = _memcmp($46, 11321, $48) | 0;
        $50 = ($49 | 0) == 0;
        $51 = $42 >>> 0 < 10;
        $$$i$i$i = $47 & 1;
        $$$$i$i$i = $51 ? -1 : $$$i$i$i;
        $52 = $50 ? $$$$i$i$i : $49;
        $53 = ($52 | 0) == 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        if ($53) {
         $54 = _malloc(32) | 0;
         $55 = $1 + 8 | 0;
         SAFE_HEAP_STORE($55 | 0, $54 | 0, 4);
         SAFE_HEAP_STORE($1 | 0, 33 | 0, 4);
         $56 = $1 + 4 | 0;
         SAFE_HEAP_STORE($56 | 0, 21 | 0, 4);
         dest = $54;
         src = 11332;
         stop = dest + 21 | 0;
         do {
          SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
          dest = dest + 1 | 0;
          src = src + 1 | 0;
         } while ((dest | 0) < (stop | 0));
         $57 = $54 + 21 | 0;
         SAFE_HEAP_STORE($57 >> 0 | 0, 0 | 0, 1);
         $58 = $1 + 12 | 0;
         SAFE_HEAP_STORE($58 | 0, 0 | 0, 4);
         $59 = $58 + 4 | 0;
         SAFE_HEAP_STORE($59 | 0, 0 | 0, 4);
         $60 = $58 + 8 | 0;
         SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
         $61 = $db + 4 | 0;
         $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
         $63 = $db + 8 | 0;
         $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
         $65 = $62 >>> 0 < $64 >>> 0;
         if ($65) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62, $1);
          $66 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
          $67 = $66 + 24 | 0;
          SAFE_HEAP_STORE($61 | 0, $67 | 0, 4);
         } else {
          $68 = $db + 12 | 0;
          $69 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $70 = $62;
          $71 = $69;
          $72 = $70 - $71 | 0;
          $73 = ($72 | 0) / 24 & -1;
          $74 = $73 + 1 | 0;
          $75 = ($72 | 0) < -24;
          if ($75) {
           __THREW__ = 0;
           invoke_vi(238, $db | 0);
           $76 = __THREW__;
           __THREW__ = 0;
           $77 = ___cxa_find_matching_catch() | 0;
           $78 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
           $$0 = $78;
           $$01 = $77;
           break;
          }
          $79 = $64;
          $80 = $79 - $71 | 0;
          $81 = ($80 | 0) / 24 & -1;
          $82 = $81 >>> 0 < 1073741823;
          if ($82) {
           $83 = $81 << 1;
           $84 = $83 >>> 0 < $74 >>> 0;
           $85 = $84 ? $74 : $83;
           $$0$i$i$i = $85;
          } else {
           $$0$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $73, $68);
          $86 = $__v$i$i + 8 | 0;
          $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($87, $1);
          $88 = $87 + 24 | 0;
          SAFE_HEAP_STORE($86 | 0, $88 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        } else {
         {}
         SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($r | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($r + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($r + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($r | 0, 0 | 0, 4);
         $91 = $r + 4 | 0;
         SAFE_HEAP_STORE($91 | 0, 0 | 0, 4);
         $92 = $r + 8 | 0;
         SAFE_HEAP_STORE($92 | 0, 0 | 0, 4);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2, $3);
         $93 = $db + 4 | 0;
         $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
         $95 = $db + 8 | 0;
         $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
         $97 = $94 >>> 0 < $96 >>> 0;
         if ($97) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($94, $2);
          $98 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
          $99 = $98 + 24 | 0;
          SAFE_HEAP_STORE($93 | 0, $99 | 0, 4);
         } else {
          $100 = $db + 12 | 0;
          $101 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $102 = $94;
          $103 = $101;
          $104 = $102 - $103 | 0;
          $105 = ($104 | 0) / 24 & -1;
          $106 = $105 + 1 | 0;
          $107 = ($104 | 0) < -24;
          if ($107) {
           __THREW__ = 0;
           invoke_vi(238, $db | 0);
           $108 = __THREW__;
           __THREW__ = 0;
           $109 = ___cxa_find_matching_catch() | 0;
           $110 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$0 = $110;
           $$01 = $109;
           break;
          }
          $111 = $96;
          $112 = $111 - $103 | 0;
          $113 = ($112 | 0) / 24 & -1;
          $114 = $113 >>> 0 < 1073741823;
          if ($114) {
           $115 = $113 << 1;
           $116 = $115 >>> 0 < $106 >>> 0;
           $117 = $116 ? $106 : $115;
           $$0$i$i$i8 = $117;
          } else {
           $$0$i$i$i8 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i7, $$0$i$i$i8, $105, $100);
          $118 = $__v$i$i7 + 8 | 0;
          $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($119, $2);
          $120 = $119 + 24 | 0;
          SAFE_HEAP_STORE($118 | 0, $120 | 0, 4);
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i7);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i7);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        }
        $$sum = $n$0$lcssa + 1 | 0;
        $121 = $$lcssa + $$sum | 0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
        $$02 = $121;
        break L1;
       }
      } while (0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
      ___resumeException($$01 | 0);
     }
    }
   } else {
    $$02 = $first;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$02 | 0;
}

function __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input) {
 $output = $output | 0;
 $cache = $cache | 0;
 $input = $input | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $distanceSqr1 = 0.0, $distanceSqr2 = 0.0, $duplicate = 0;
 var $i = 0, $i1 = 0, $iter = 0, $k_maxIters = 0, $normal = 0, $p = 0, $p2 = 0, $proxyA = 0, $proxyB = 0, $rA = 0.0, $rB = 0.0, $saveA = 0, $saveB = 0, $saveCount = 0, $simplex = 0, $transformA = 0, $transformB = 0, $vertex = 0, $vertices = 0, $wBLocal = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $transformA = sp + 320 | 0;
 $transformB = sp + 304 | 0;
 $simplex = sp + 192 | 0;
 $saveA = sp + 172 | 0;
 $saveB = sp + 160 | 0;
 $p = sp + 136 | 0;
 $d = sp + 120 | 0;
 $3 = sp + 104 | 0;
 $4 = sp + 96 | 0;
 $5 = sp + 88 | 0;
 $wBLocal = sp + 80 | 0;
 $6 = sp + 72 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 56 | 0;
 $normal = sp + 32 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 16 | 0;
 $p2 = sp + 8 | 0;
 $11 = sp;
 $0 = $output;
 $1 = $cache;
 $2 = $input;
 $12 = SAFE_HEAP_LOAD(816 | 0, 4, 0) | 0 | 0;
 $13 = $12 + 1 | 0;
 SAFE_HEAP_STORE(816 | 0, $13 | 0, 4);
 $14 = $2;
 $proxyA = $14;
 $15 = $2;
 $16 = $15 + 28 | 0;
 $proxyB = $16;
 $17 = $2;
 $18 = $17 + 56 | 0;
 {}
 SAFE_HEAP_STORE($transformA | 0, SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformA + 4 | 0, SAFE_HEAP_LOAD($18 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformA + 8 | 0, SAFE_HEAP_LOAD($18 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformA + 12 | 0, SAFE_HEAP_LOAD($18 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $19 = $2;
 $20 = $19 + 72 | 0;
 {}
 SAFE_HEAP_STORE($transformB | 0, SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformB + 4 | 0, SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformB + 8 | 0, SAFE_HEAP_LOAD($20 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($transformB + 12 | 0, SAFE_HEAP_LOAD($20 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZN9b2SimplexC2Ev($simplex);
 $21 = $1;
 $22 = $proxyA;
 $23 = $proxyB;
 __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($simplex, $21, $22, $transformA, $23, $transformB);
 $vertices = $simplex;
 $k_maxIters = 20;
 $saveCount = 0;
 $distanceSqr1 = 34028234663852886.0e22;
 $iter = 0;
 L1 : while (1) {
  $24 = $iter;
  $25 = ($24 | 0) < 20;
  if (!$25) {
   break;
  }
  $26 = $simplex + 108 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $saveCount = $27;
  $i = 0;
  while (1) {
   $28 = $i;
   $29 = $saveCount;
   $30 = ($28 | 0) < ($29 | 0);
   if (!$30) {
    break;
   }
   $31 = $i;
   $32 = $vertices;
   $33 = $32 + ($31 * 36 | 0) | 0;
   $34 = $33 + 28 | 0;
   $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
   $36 = $i;
   $37 = $saveA + ($36 << 2) | 0;
   SAFE_HEAP_STORE($37 | 0, $35 | 0, 4);
   $38 = $i;
   $39 = $vertices;
   $40 = $39 + ($38 * 36 | 0) | 0;
   $41 = $40 + 32 | 0;
   $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
   $43 = $i;
   $44 = $saveB + ($43 << 2) | 0;
   SAFE_HEAP_STORE($44 | 0, $42 | 0, 4);
   $45 = $i;
   $46 = $45 + 1 | 0;
   $i = $46;
  }
  $47 = $simplex + 108 | 0;
  $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  switch ($48 | 0) {
  case 1:
   {
    break;
   }
  case 2:
   {
    __ZN9b2Simplex6Solve2Ev($simplex);
    break;
   }
  case 3:
   {
    __ZN9b2Simplex6Solve3Ev($simplex);
    break;
   }
  default:
   {
    label = 9;
    break L1;
   }
  }
  $49 = $simplex + 108 | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = ($50 | 0) == 3;
  if ($51) {
   break;
  }
  __ZNK9b2Simplex15GetClosestPointEv($p, $simplex);
  $52 = +__ZNK6b2Vec213LengthSquaredEv($p);
  $distanceSqr2 = $52;
  $53 = $distanceSqr2;
  $distanceSqr1 = $53;
  __ZNK9b2Simplex18GetSearchDirectionEv($d, $simplex);
  $54 = +__ZNK6b2Vec213LengthSquaredEv($d);
  $55 = $54 < 1.4210854715202004e-014;
  if ($55) {
   break;
  }
  $56 = $vertices;
  $57 = $simplex + 108 | 0;
  $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
  $59 = $56 + ($58 * 36 | 0) | 0;
  $vertex = $59;
  $60 = $proxyA;
  $61 = $transformA + 8 | 0;
  __ZNK6b2Vec2ngEv($4, $d);
  __Z6b2MulTRK5b2RotRK6b2Vec2($3, $61, $4);
  $62 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($60, $3) | 0;
  $63 = $vertex;
  $64 = $63 + 28 | 0;
  SAFE_HEAP_STORE($64 | 0, $62 | 0, 4);
  $65 = $vertex;
  $66 = $proxyA;
  $67 = $vertex;
  $68 = $67 + 28 | 0;
  $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
  $70 = __ZNK15b2DistanceProxy9GetVertexEi($66, $69) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($5, $transformA, $70);
  {}
  SAFE_HEAP_STORE($65 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($65 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __ZN6b2Vec2C2Ev($wBLocal);
  $71 = $proxyB;
  $72 = $transformB + 8 | 0;
  __Z6b2MulTRK5b2RotRK6b2Vec2($6, $72, $d);
  $73 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($71, $6) | 0;
  $74 = $vertex;
  $75 = $74 + 32 | 0;
  SAFE_HEAP_STORE($75 | 0, $73 | 0, 4);
  $76 = $vertex;
  $77 = $76 + 8 | 0;
  $78 = $proxyB;
  $79 = $vertex;
  $80 = $79 + 32 | 0;
  $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
  $82 = __ZNK15b2DistanceProxy9GetVertexEi($78, $81) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($7, $transformB, $82);
  {}
  SAFE_HEAP_STORE($77 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($77 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $83 = $vertex;
  $84 = $83 + 16 | 0;
  $85 = $vertex;
  $86 = $85 + 8 | 0;
  $87 = $vertex;
  __ZmiRK6b2Vec2S1_($8, $86, $87);
  {}
  SAFE_HEAP_STORE($84 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($84 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $88 = $iter;
  $89 = $88 + 1 | 0;
  $iter = $89;
  $90 = SAFE_HEAP_LOAD(820 | 0, 4, 0) | 0 | 0;
  $91 = $90 + 1 | 0;
  SAFE_HEAP_STORE(820 | 0, $91 | 0, 4);
  $duplicate = 0;
  $i1 = 0;
  while (1) {
   $92 = $i1;
   $93 = $saveCount;
   $94 = ($92 | 0) < ($93 | 0);
   if (!$94) {
    break;
   }
   $95 = $vertex;
   $96 = $95 + 28 | 0;
   $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
   $98 = $i1;
   $99 = $saveA + ($98 << 2) | 0;
   $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
   $101 = ($97 | 0) == ($100 | 0);
   if ($101) {
    $102 = $vertex;
    $103 = $102 + 32 | 0;
    $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
    $105 = $i1;
    $106 = $saveB + ($105 << 2) | 0;
    $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
    $108 = ($104 | 0) == ($107 | 0);
    if ($108) {
     label = 16;
     break;
    }
   }
   $109 = $i1;
   $110 = $109 + 1 | 0;
   $i1 = $110;
  }
  if ((label | 0) == 16) {
   label = 0;
   $duplicate = 1;
  }
  $111 = $duplicate;
  $112 = $111 & 1;
  if ($112) {
   break;
  }
  $113 = $simplex + 108 | 0;
  $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
  $115 = $114 + 1 | 0;
  SAFE_HEAP_STORE($113 | 0, $115 | 0, 4);
 }
 if ((label | 0) == 9) {
  ___assert_fail(11365 | 0, 4438 | 0, 497, 4493 | 0);
 }
 $116 = SAFE_HEAP_LOAD(824 | 0, 4, 0) | 0 | 0;
 $117 = $iter;
 $118 = __Z5b2MaxIiET_S0_S0_($116, $117) | 0;
 SAFE_HEAP_STORE(824 | 0, $118 | 0, 4);
 $119 = $0;
 $120 = $0;
 $121 = $120 + 8 | 0;
 __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($simplex, $119, $121);
 $122 = $0;
 $123 = $0;
 $124 = $123 + 8 | 0;
 $125 = +__Z10b2DistanceRK6b2Vec2S1_($122, $124);
 $126 = $0;
 $127 = $126 + 16 | 0;
 SAFE_HEAP_STORE_D($127 | 0, +$125, 4);
 $128 = $iter;
 $129 = $0;
 $130 = $129 + 20 | 0;
 SAFE_HEAP_STORE($130 | 0, $128 | 0, 4);
 $131 = $1;
 __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($simplex, $131);
 $132 = $2;
 $133 = $132 + 88 | 0;
 $134 = SAFE_HEAP_LOAD($133 >> 0 | 0, 1, 0) | 0 | 0;
 $135 = $134 & 1;
 if (!$135) {
  STACKTOP = sp;
  return;
 }
 $136 = $proxyA;
 $137 = $136 + 24 | 0;
 $138 = +(+SAFE_HEAP_LOAD_D($137 | 0, 4));
 $rA = $138;
 $139 = $proxyB;
 $140 = $139 + 24 | 0;
 $141 = +(+SAFE_HEAP_LOAD_D($140 | 0, 4));
 $rB = $141;
 $142 = $0;
 $143 = $142 + 16 | 0;
 $144 = +(+SAFE_HEAP_LOAD_D($143 | 0, 4));
 $145 = $rA;
 $146 = $rB;
 $147 = $145 + $146;
 $148 = $144 > $147;
 if ($148) {
  $149 = $0;
  $150 = $149 + 16 | 0;
  $151 = +(+SAFE_HEAP_LOAD_D($150 | 0, 4));
  $152 = $151 > 1.1920928955078125e-007;
  if ($152) {
   $153 = $rA;
   $154 = $rB;
   $155 = $153 + $154;
   $156 = $0;
   $157 = $156 + 16 | 0;
   $158 = +(+SAFE_HEAP_LOAD_D($157 | 0, 4));
   $159 = $158 - $155;
   SAFE_HEAP_STORE_D($157 | 0, +$159, 4);
   $160 = $0;
   $161 = $160 + 8 | 0;
   $162 = $0;
   __ZmiRK6b2Vec2S1_($normal, $161, $162);
   +__ZN6b2Vec29NormalizeEv($normal);
   $163 = $0;
   $164 = $rA;
   __ZmlfRK6b2Vec2($9, $164, $normal);
   __ZN6b2Vec2pLERKS_($163, $9);
   $165 = $0;
   $166 = $165 + 8 | 0;
   $167 = $rB;
   __ZmlfRK6b2Vec2($10, $167, $normal);
   __ZN6b2Vec2mIERKS_($166, $10);
   STACKTOP = sp;
   return;
  }
 }
 $168 = $0;
 $169 = $0;
 $170 = $169 + 8 | 0;
 __ZplRK6b2Vec2S1_($11, $168, $170);
 __ZmlfRK6b2Vec2($p2, .5, $11);
 $171 = $0;
 {}
 SAFE_HEAP_STORE($171 | 0, SAFE_HEAP_LOAD($p2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($171 + 4 | 0, SAFE_HEAP_LOAD($p2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $172 = $0;
 $173 = $172 + 8 | 0;
 {}
 SAFE_HEAP_STORE($173 | 0, SAFE_HEAP_LOAD($p2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($173 + 4 | 0, SAFE_HEAP_LOAD($p2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $174 = $0;
 $175 = $174 + 16 | 0;
 SAFE_HEAP_STORE_D($175 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZN20b2SeparationFunction10InitializeEPK14b2SimplexCachePK15b2DistanceProxyRK7b2SweepS5_S8_f($this, $cache, $proxyA, $sweepA, $proxyB, $sweepB, $t1) {
 $this = $this | 0;
 $cache = $cache | 0;
 $proxyA = $proxyA | 0;
 $sweepA = $sweepA | 0;
 $proxyB = $proxyB | 0;
 $sweepB = $sweepB | 0;
 $t1 = +$t1;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $count = 0, $localPointA = 0, $localPointA1 = 0, $localPointA2 = 0, $localPointA25 = 0, $localPointB = 0, $localPointB1 = 0, $localPointB2 = 0, $localPointB8 = 0, $normal = 0, $normal6 = 0, $or$cond = 0, $pointA = 0, $pointA3 = 0, $pointA7 = 0, $pointB = 0, $pointB1 = 0, $pointB9 = 0, $s = 0.0, $s10 = 0.0;
 var $s4 = 0.0, $xfA = 0, $xfB = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xfA = sp + 272 | 0;
 $xfB = sp + 256 | 0;
 $localPointA = sp + 248 | 0;
 $localPointB = sp + 240 | 0;
 $pointA = sp + 232 | 0;
 $pointB = sp + 224 | 0;
 $8 = sp + 216 | 0;
 $localPointB1 = sp + 200 | 0;
 $localPointB2 = sp + 192 | 0;
 $9 = sp + 184 | 0;
 $10 = sp + 176 | 0;
 $normal = sp + 168 | 0;
 $11 = sp + 160 | 0;
 $12 = sp + 152 | 0;
 $pointB1 = sp + 144 | 0;
 $localPointA2 = sp + 136 | 0;
 $pointA3 = sp + 128 | 0;
 $13 = sp + 112 | 0;
 $14 = sp + 104 | 0;
 $localPointA1 = sp + 96 | 0;
 $localPointA25 = sp + 88 | 0;
 $15 = sp + 80 | 0;
 $16 = sp + 72 | 0;
 $normal6 = sp + 64 | 0;
 $17 = sp + 56 | 0;
 $18 = sp + 48 | 0;
 $pointA7 = sp + 40 | 0;
 $localPointB8 = sp + 32 | 0;
 $pointB9 = sp + 24 | 0;
 $19 = sp + 8 | 0;
 $20 = sp;
 $1 = $this;
 $2 = $cache;
 $3 = $proxyA;
 $4 = $sweepA;
 $5 = $proxyB;
 $6 = $sweepB;
 $7 = $t1;
 $21 = $1;
 $22 = $3;
 SAFE_HEAP_STORE($21 | 0, $22 | 0, 4);
 $23 = $5;
 $24 = $21 + 4 | 0;
 SAFE_HEAP_STORE($24 | 0, $23 | 0, 4);
 $25 = $2;
 $26 = $25 + 4 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 2, 0) | 0 | 0;
 $28 = $27 & 65535;
 $count = $28;
 $29 = $count;
 $30 = 0 < ($29 | 0);
 $31 = $count;
 $32 = ($31 | 0) < 3;
 $or$cond = $30 & $32;
 if (!$or$cond) {
  ___assert_fail(7990 | 0, 4940 | 0, 52, 5014 | 0);
 }
 $33 = $21 + 8 | 0;
 $34 = $4;
 dest = $33;
 src = $34;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $35 = $21 + 44 | 0;
 $36 = $6;
 dest = $35;
 src = $36;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $37 = $21 + 8 | 0;
 $38 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($37, $xfA, $38);
 $39 = $21 + 44 | 0;
 $40 = $7;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($39, $xfB, $40);
 $41 = $count;
 $42 = ($41 | 0) == 1;
 if ($42) {
  $43 = $21 + 80 | 0;
  SAFE_HEAP_STORE($43 | 0, 0 | 0, 4);
  $44 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $45 = $2;
  $46 = $45 + 6 | 0;
  $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
  $48 = $47 & 255;
  $49 = __ZNK15b2DistanceProxy9GetVertexEi($44, $48) | 0;
  {}
  SAFE_HEAP_STORE($localPointA | 0, SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointA + 4 | 0, SAFE_HEAP_LOAD($49 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $50 = $21 + 4 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $2;
  $53 = $52 + 9 | 0;
  $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $54 & 255;
  $56 = __ZNK15b2DistanceProxy9GetVertexEi($51, $55) | 0;
  {}
  SAFE_HEAP_STORE($localPointB | 0, SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointB + 4 | 0, SAFE_HEAP_LOAD($56 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
  $57 = $21 + 92 | 0;
  __ZmiRK6b2Vec2S1_($8, $pointB, $pointA);
  {}
  SAFE_HEAP_STORE($57 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($57 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $58 = $21 + 92 | 0;
  $59 = +__ZN6b2Vec29NormalizeEv($58);
  $s = $59;
  $60 = $s;
  $0 = $60;
  $139 = $0;
  STACKTOP = sp;
  return +$139;
 }
 $61 = $2;
 $62 = $61 + 6 | 0;
 $63 = SAFE_HEAP_LOAD($62 >> 0 | 0, 1, 0) | 0 | 0;
 $64 = $63 & 255;
 $65 = $2;
 $66 = $65 + 6 | 0;
 $67 = $66 + 1 | 0;
 $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
 $69 = $68 & 255;
 $70 = ($64 | 0) == ($69 | 0);
 $71 = $21 + 80 | 0;
 if ($70) {
  SAFE_HEAP_STORE($71 | 0, 2 | 0, 4);
  $72 = $5;
  $73 = $2;
  $74 = $73 + 9 | 0;
  $75 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0;
  $76 = $75 & 255;
  $77 = __ZNK15b2DistanceProxy9GetVertexEi($72, $76) | 0;
  {}
  SAFE_HEAP_STORE($localPointB1 | 0, SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointB1 + 4 | 0, SAFE_HEAP_LOAD($77 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $78 = $5;
  $79 = $2;
  $80 = $79 + 9 | 0;
  $81 = $80 + 1 | 0;
  $82 = SAFE_HEAP_LOAD($81 >> 0 | 0, 1, 0) | 0 | 0;
  $83 = $82 & 255;
  $84 = __ZNK15b2DistanceProxy9GetVertexEi($78, $83) | 0;
  {}
  SAFE_HEAP_STORE($localPointB2 | 0, SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointB2 + 4 | 0, SAFE_HEAP_LOAD($84 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $85 = $21 + 92 | 0;
  __ZmiRK6b2Vec2S1_($10, $localPointB2, $localPointB1);
  __Z7b2CrossRK6b2Vec2f($9, $10, 1.0);
  {}
  SAFE_HEAP_STORE($85 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($85 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $86 = $21 + 92 | 0;
  +__ZN6b2Vec29NormalizeEv($86);
  $87 = $xfB + 8 | 0;
  $88 = $21 + 92 | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($normal, $87, $88);
  $89 = $21 + 84 | 0;
  __ZplRK6b2Vec2S1_($12, $localPointB1, $localPointB2);
  __ZmlfRK6b2Vec2($11, .5, $12);
  {}
  SAFE_HEAP_STORE($89 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($89 + 4 | 0, SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $90 = $21 + 84 | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB1, $xfB, $90);
  $91 = $3;
  $92 = $2;
  $93 = $92 + 6 | 0;
  $94 = SAFE_HEAP_LOAD($93 >> 0 | 0, 1, 0) | 0 | 0;
  $95 = $94 & 255;
  $96 = __ZNK15b2DistanceProxy9GetVertexEi($91, $95) | 0;
  {}
  SAFE_HEAP_STORE($localPointA2 | 0, SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointA2 + 4 | 0, SAFE_HEAP_LOAD($96 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA3, $xfA, $localPointA2);
  __ZmiRK6b2Vec2S1_($13, $pointA3, $pointB1);
  $97 = +__Z5b2DotRK6b2Vec2S1_($13, $normal);
  $s4 = $97;
  $98 = $s4;
  $99 = $98 < 0.0;
  if ($99) {
   $100 = $21 + 92 | 0;
   $101 = $21 + 92 | 0;
   __ZNK6b2Vec2ngEv($14, $101);
   {}
   SAFE_HEAP_STORE($100 | 0, SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($100 + 4 | 0, SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $102 = $s4;
   $103 = -$102;
   $s4 = $103;
  }
  $104 = $s4;
  $0 = $104;
  $139 = $0;
  STACKTOP = sp;
  return +$139;
 } else {
  SAFE_HEAP_STORE($71 | 0, 1 | 0, 4);
  $105 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $106 = $2;
  $107 = $106 + 6 | 0;
  $108 = SAFE_HEAP_LOAD($107 >> 0 | 0, 1, 0) | 0 | 0;
  $109 = $108 & 255;
  $110 = __ZNK15b2DistanceProxy9GetVertexEi($105, $109) | 0;
  {}
  SAFE_HEAP_STORE($localPointA1 | 0, SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointA1 + 4 | 0, SAFE_HEAP_LOAD($110 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $111 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $112 = $2;
  $113 = $112 + 6 | 0;
  $114 = $113 + 1 | 0;
  $115 = SAFE_HEAP_LOAD($114 >> 0 | 0, 1, 0) | 0 | 0;
  $116 = $115 & 255;
  $117 = __ZNK15b2DistanceProxy9GetVertexEi($111, $116) | 0;
  {}
  SAFE_HEAP_STORE($localPointA25 | 0, SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointA25 + 4 | 0, SAFE_HEAP_LOAD($117 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $118 = $21 + 92 | 0;
  __ZmiRK6b2Vec2S1_($16, $localPointA25, $localPointA1);
  __Z7b2CrossRK6b2Vec2f($15, $16, 1.0);
  {}
  SAFE_HEAP_STORE($118 | 0, SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($118 + 4 | 0, SAFE_HEAP_LOAD($15 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $119 = $21 + 92 | 0;
  +__ZN6b2Vec29NormalizeEv($119);
  $120 = $xfA + 8 | 0;
  $121 = $21 + 92 | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $120, $121);
  $122 = $21 + 84 | 0;
  __ZplRK6b2Vec2S1_($18, $localPointA1, $localPointA25);
  __ZmlfRK6b2Vec2($17, .5, $18);
  {}
  SAFE_HEAP_STORE($122 | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($122 + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $123 = $21 + 84 | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointA7, $xfA, $123);
  $124 = $21 + 4 | 0;
  $125 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
  $126 = $2;
  $127 = $126 + 9 | 0;
  $128 = SAFE_HEAP_LOAD($127 >> 0 | 0, 1, 0) | 0 | 0;
  $129 = $128 & 255;
  $130 = __ZNK15b2DistanceProxy9GetVertexEi($125, $129) | 0;
  {}
  SAFE_HEAP_STORE($localPointB8 | 0, SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localPointB8 + 4 | 0, SAFE_HEAP_LOAD($130 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z5b2MulRK11b2TransformRK6b2Vec2($pointB9, $xfB, $localPointB8);
  __ZmiRK6b2Vec2S1_($19, $pointB9, $pointA7);
  $131 = +__Z5b2DotRK6b2Vec2S1_($19, $normal6);
  $s10 = $131;
  $132 = $s10;
  $133 = $132 < 0.0;
  if ($133) {
   $134 = $21 + 92 | 0;
   $135 = $21 + 92 | 0;
   __ZNK6b2Vec2ngEv($20, $135);
   {}
   SAFE_HEAP_STORE($134 | 0, SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($134 + 4 | 0, SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $136 = $s10;
   $137 = -$136;
   $s10 = $137;
  }
  $138 = $s10;
  $0 = $138;
  $139 = $0;
  STACKTOP = sp;
  return +$139;
 }
 return +(0.0);
}

function ___cxa_demangle($mangled_name, $buf, $n, $status) {
 $mangled_name = $mangled_name | 0;
 $buf = $buf | 0;
 $n = $n | 0;
 $status = $status | 0;
 var $$0 = 0, $$028 = 0, $$1 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $a = 0, $db = 0, $internal_status = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i = sp + 4184 | 0;
 $a = sp;
 $db = sp + 4120 | 0;
 $internal_status = sp + 4112 | 0;
 $0 = ($mangled_name | 0) == (0 | 0);
 L1 : do {
  if ($0) {
   label = 3;
  } else {
   $1 = ($buf | 0) != (0 | 0);
   $2 = ($n | 0) == (0 | 0);
   $or$cond = $1 & $2;
   if ($or$cond) {
    label = 3;
   } else {
    if ($1) {
     $4 = SAFE_HEAP_LOAD($n | 0, 4, 0) | 0 | 0;
     $86 = $4;
    } else {
     $86 = 0;
    }
    $5 = $a + 4096 | 0;
    SAFE_HEAP_STORE($5 | 0, $a | 0, 4);
    $6 = $a;
    SAFE_HEAP_STORE($db | 0, 0 | 0, 4);
    $7 = $db + 4 | 0;
    SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
    $8 = $db + 8 | 0;
    SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
    $9 = $db + 12 | 0;
    SAFE_HEAP_STORE($9 | 0, $6 | 0, 4);
    $10 = $db + 16 | 0;
    SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
    $11 = $db + 20 | 0;
    SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
    $12 = $db + 24 | 0;
    SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
    $13 = $db + 28 | 0;
    SAFE_HEAP_STORE($13 | 0, $6 | 0, 4);
    $14 = $db + 32 | 0;
    SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
    $15 = $db + 36 | 0;
    SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
    $16 = $db + 40 | 0;
    SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
    $17 = $db + 44 | 0;
    SAFE_HEAP_STORE($17 | 0, $6 | 0, 4);
    $18 = $db + 48 | 0;
    $19 = $db + 61 | 0;
    {}
    SAFE_HEAP_STORE($18 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($18 + 4 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($18 + 8 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($18 + 12 >> 0 | 0, 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($19 >> 0 | 0, 1 | 0, 1);
    $20 = $db + 32 | 0;
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i, 1, 0, $17);
    $21 = $__v$i$i + 8 | 0;
    $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE($22 | 0, 0 | 0, 4);
    $23 = $22 + 4 | 0;
    SAFE_HEAP_STORE($23 | 0, 0 | 0, 4);
    $24 = $22 + 8 | 0;
    SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
    $25 = $22 + 12 | 0;
    SAFE_HEAP_STORE($25 | 0, $6 | 0, 4);
    $26 = $22 + 16 | 0;
    SAFE_HEAP_STORE($21 | 0, $26 | 0, 4);
    __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($20, $__v$i$i);
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
    $27 = $db + 62 | 0;
    SAFE_HEAP_STORE($27 >> 0 | 0, 0 | 0, 1);
    $28 = $db + 63 | 0;
    SAFE_HEAP_STORE($28 >> 0 | 0, 1 | 0, 1);
    SAFE_HEAP_STORE($internal_status | 0, 0 | 0, 4);
    $29 = _strlen($mangled_name) | 0;
    $30 = $mangled_name + $29 | 0;
    __THREW__ = 0;
    invoke_viiii(221, $mangled_name | 0, $30 | 0, $db | 0, $internal_status | 0);
    $31 = __THREW__;
    __THREW__ = 0;
    $32 = $31 & 1;
    L7 : do {
     if (!$32) {
      $33 = SAFE_HEAP_LOAD($internal_status | 0, 4, 0) | 0 | 0;
      $34 = ($33 | 0) != 0;
      $35 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
      $36 = $35 << 24 >> 24 == 0;
      $or$cond6 = $34 | $36;
      do {
       if ($or$cond6) {
        $62 = $33;
        label = 19;
       } else {
        $37 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
        $38 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
        $39 = ($37 | 0) == ($38 | 0);
        if ($39) {
         label = 20;
        } else {
         $40 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
         $41 = $37 + 4 | 0;
         $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
         $43 = ($40 | 0) == ($42 | 0);
         if ($43) {
          label = 20;
         } else {
          SAFE_HEAP_STORE($27 >> 0 | 0, 0 | 0, 1);
          SAFE_HEAP_STORE($19 >> 0 | 0, 0 | 0, 1);
          $44 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $45 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
          $46 = ($45 | 0) == ($44 | 0);
          if (!$46) {
           $48 = $45;
           while (1) {
            $47 = $48 + -24 | 0;
            SAFE_HEAP_STORE($7 | 0, $47 | 0, 4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
            $49 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
            $50 = ($49 | 0) == ($44 | 0);
            if ($50) {
             break;
            } else {
             $48 = $49;
            }
           }
          }
          $51 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
          $52 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
          $53 = ($52 | 0) == ($51 | 0);
          if (!$53) {
           $55 = $52;
           while (1) {
            $54 = $55 + -16 | 0;
            SAFE_HEAP_STORE($11 | 0, $54 | 0, 4);
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($54);
            $56 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
            $57 = ($56 | 0) == ($51 | 0);
            if ($57) {
             break;
            } else {
             $55 = $56;
            }
           }
          }
          __THREW__ = 0;
          invoke_viiii(221, $mangled_name | 0, $30 | 0, $db | 0, $internal_status | 0);
          $58 = __THREW__;
          __THREW__ = 0;
          $59 = $58 & 1;
          if ($59) {
           break L7;
          }
          $60 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
          $61 = $60 << 24 >> 24 == 0;
          if ($61) {
           $$pr$pre = SAFE_HEAP_LOAD($internal_status | 0, 4, 0) | 0 | 0;
           $62 = $$pr$pre;
           label = 19;
           break;
          } else {
           SAFE_HEAP_STORE($internal_status | 0, -2 | 0, 4);
           $$1 = 0;
           $118 = -2;
           break;
          }
         }
        }
       }
      } while (0);
      if ((label | 0) == 19) {
       $63 = ($62 | 0) == 0;
       if ($63) {
        label = 20;
       } else {
        $$1 = 0;
        $118 = $62;
       }
      }
      do {
       if ((label | 0) == 20) {
        $64 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
        $65 = $64 + -24 | 0;
        $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
        $67 = $66 & 1;
        $68 = $67 << 24 >> 24 == 0;
        if ($68) {
         $71 = $66 & 255;
         $72 = $71 >>> 1;
         $83 = $72;
        } else {
         $69 = $64 + -20 | 0;
         $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
         $83 = $70;
        }
        $73 = $64 + -12 | 0;
        $74 = SAFE_HEAP_LOAD($73 >> 0 | 0, 1, 0) | 0 | 0;
        $75 = $74 & 1;
        $76 = $75 << 24 >> 24 == 0;
        if ($76) {
         $79 = $74 & 255;
         $80 = $79 >>> 1;
         $82 = $80;
        } else {
         $77 = $64 + -8 | 0;
         $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
         $82 = $78;
        }
        $81 = $82 + $83 | 0;
        $84 = $81 + 1 | 0;
        $85 = $84 >>> 0 > $86 >>> 0;
        if ($85) {
         $87 = _realloc($buf, $84) | 0;
         $88 = ($87 | 0) == (0 | 0);
         if ($88) {
          SAFE_HEAP_STORE($internal_status | 0, -1 | 0, 4);
          $$1 = 0;
          $118 = -1;
          break;
         }
         if ($2) {
          $$028 = $87;
         } else {
          SAFE_HEAP_STORE($n | 0, $84 | 0, 4);
          $$028 = $87;
         }
        } else {
         $89 = ($buf | 0) == (0 | 0);
         if ($89) {
          $$1 = 0;
          $118 = 0;
          break;
         } else {
          $$028 = $buf;
         }
        }
        $90 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
        $91 = $90 + -24 | 0;
        $92 = $90 + -12 | 0;
        $93 = SAFE_HEAP_LOAD($92 >> 0 | 0, 1, 0) | 0 | 0;
        $94 = $93 & 1;
        $95 = $94 << 24 >> 24 == 0;
        $96 = $90 + -4 | 0;
        $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
        $98 = $92 + 1 | 0;
        $99 = $95 ? $98 : $97;
        $100 = $90 + -8 | 0;
        $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
        $102 = $93 & 255;
        $103 = $102 >>> 1;
        $104 = $95 ? $103 : $101;
        __THREW__ = 0;
        invoke_iiii(222, $91 | 0, $99 | 0, $104 | 0) | 0;
        $105 = __THREW__;
        __THREW__ = 0;
        $106 = $105 & 1;
        if ($106) {
         break L7;
        }
        $107 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
        $108 = $107 + -24 | 0;
        $109 = SAFE_HEAP_LOAD($108 >> 0 | 0, 1, 0) | 0 | 0;
        $110 = $109 & 1;
        $111 = $110 << 24 >> 24 == 0;
        if ($111) {
         $114 = $108 + 1 | 0;
         $115 = $114;
        } else {
         $112 = $107 + -16 | 0;
         $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
         $115 = $113;
        }
        _memcpy($$028 | 0, $115 | 0, $81 | 0) | 0;
        $116 = $$028 + $81 | 0;
        SAFE_HEAP_STORE($116 >> 0 | 0, 0 | 0, 1);
        $$1 = $$028;
        $118 = 0;
       }
      } while (0);
      $117 = ($status | 0) == (0 | 0);
      if (!$117) {
       SAFE_HEAP_STORE($status | 0, $118 | 0, 4);
      }
      __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
      $$0 = $$1;
      break L1;
     }
    } while (0);
    $119 = ___cxa_find_matching_catch() | 0;
    $120 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
    ___resumeException($119 | 0);
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $3 = ($status | 0) == (0 | 0);
  if ($3) {
   $$0 = 0;
  } else {
   SAFE_HEAP_STORE($status | 0, -3 | 0, 4);
   $$0 = 0;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $edgeA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $A = 0, $A1 = 0, $A2 = 0, $B = 0, $B1 = 0, $B2 = 0, $P = 0, $P1 = 0, $P4 = 0, $Q = 0, $cf = 0, $d = 0, $d2 = 0, $d5 = 0, $dd = 0.0, $dd3 = 0.0, $dd6 = 0.0, $den = 0.0, $e = 0;
 var $e1 = 0, $e2 = 0, $n = 0, $radius = 0.0, $u = 0.0, $u1 = 0.0, $v = 0.0, $v2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $Q = sp + 272 | 0;
 $5 = sp + 264 | 0;
 $A = sp + 256 | 0;
 $B = sp + 248 | 0;
 $e = sp + 240 | 0;
 $6 = sp + 224 | 0;
 $7 = sp + 208 | 0;
 $cf = sp + 300 | 0;
 $P = sp + 192 | 0;
 $d = sp + 184 | 0;
 $A1 = sp + 168 | 0;
 $B1 = sp + 160 | 0;
 $e1 = sp + 152 | 0;
 $8 = sp + 136 | 0;
 $P1 = sp + 128 | 0;
 $d2 = sp + 120 | 0;
 $B2 = sp + 104 | 0;
 $A2 = sp + 96 | 0;
 $e2 = sp + 88 | 0;
 $9 = sp + 72 | 0;
 $P4 = sp + 56 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 32 | 0;
 $d5 = sp + 24 | 0;
 $n = sp + 8 | 0;
 $13 = sp;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $14 = $0;
 $15 = $14 + 60 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 $16 = $2;
 $17 = $4;
 $18 = $3;
 $19 = $18 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($5, $17, $19);
 __Z6b2MulTRK11b2TransformRK6b2Vec2($Q, $16, $5);
 $20 = $1;
 $21 = $20 + 12 | 0;
 {}
 SAFE_HEAP_STORE($A | 0, SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($A + 4 | 0, SAFE_HEAP_LOAD($21 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $22 = $1;
 $23 = $22 + 20 | 0;
 {}
 SAFE_HEAP_STORE($B | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($B + 4 | 0, SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZmiRK6b2Vec2S1_($e, $B, $A);
 __ZmiRK6b2Vec2S1_($6, $B, $Q);
 $24 = +__Z5b2DotRK6b2Vec2S1_($e, $6);
 $u = $24;
 __ZmiRK6b2Vec2S1_($7, $Q, $A);
 $25 = +__Z5b2DotRK6b2Vec2S1_($e, $7);
 $v = $25;
 $26 = $1;
 $27 = $26 + 8 | 0;
 $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
 $29 = $3;
 $30 = $29 + 8 | 0;
 $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
 $32 = $28 + $31;
 $radius = $32;
 $33 = $cf + 1 | 0;
 SAFE_HEAP_STORE($33 >> 0 | 0, 0 | 0, 1);
 $34 = $cf + 3 | 0;
 SAFE_HEAP_STORE($34 >> 0 | 0, 0 | 0, 1);
 $35 = $v;
 $36 = $35 <= 0.0;
 if ($36) {
  {}
  SAFE_HEAP_STORE($P | 0, SAFE_HEAP_LOAD($A | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($P + 4 | 0, SAFE_HEAP_LOAD($A + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __ZmiRK6b2Vec2S1_($d, $Q, $P);
  $37 = +__Z5b2DotRK6b2Vec2S1_($d, $d);
  $dd = $37;
  $38 = $dd;
  $39 = $radius;
  $40 = $radius;
  $41 = $39 * $40;
  $42 = $38 > $41;
  if ($42) {
   STACKTOP = sp;
   return;
  }
  $43 = $1;
  $44 = $43 + 44 | 0;
  $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
  $46 = $45 & 1;
  if ($46) {
   $47 = $1;
   $48 = $47 + 28 | 0;
   {}
   SAFE_HEAP_STORE($A1 | 0, SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($A1 + 4 | 0, SAFE_HEAP_LOAD($48 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   {}
   SAFE_HEAP_STORE($B1 | 0, SAFE_HEAP_LOAD($A | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($B1 + 4 | 0, SAFE_HEAP_LOAD($A + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZmiRK6b2Vec2S1_($e1, $B1, $A1);
   __ZmiRK6b2Vec2S1_($8, $B1, $Q);
   $49 = +__Z5b2DotRK6b2Vec2S1_($e1, $8);
   $u1 = $49;
   $50 = $u1;
   $51 = $50 > 0.0;
   if ($51) {
    STACKTOP = sp;
    return;
   }
  }
  SAFE_HEAP_STORE($cf >> 0 | 0, 0 | 0, 1);
  $52 = $cf + 2 | 0;
  SAFE_HEAP_STORE($52 >> 0 | 0, 0 | 0, 1);
  $53 = $0;
  $54 = $53 + 60 | 0;
  SAFE_HEAP_STORE($54 | 0, 1 | 0, 4);
  $55 = $0;
  $56 = $55 + 56 | 0;
  SAFE_HEAP_STORE($56 | 0, 0 | 0, 4);
  $57 = $0;
  $58 = $57 + 40 | 0;
  __ZN6b2Vec27SetZeroEv($58);
  $59 = $0;
  $60 = $59 + 48 | 0;
  {}
  SAFE_HEAP_STORE($60 | 0, SAFE_HEAP_LOAD($P | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($60 + 4 | 0, SAFE_HEAP_LOAD($P + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $61 = $0;
  $62 = $61 + 16 | 0;
  SAFE_HEAP_STORE($62 | 0, 0 | 0, 4);
  $63 = $0;
  $64 = $63 + 16 | 0;
  {}
  SAFE_HEAP_STORE($64 >> 0 | 0, SAFE_HEAP_LOAD($cf >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($64 + 1 >> 0 | 0, SAFE_HEAP_LOAD($cf + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($64 + 2 >> 0 | 0, SAFE_HEAP_LOAD($cf + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($64 + 3 >> 0 | 0, SAFE_HEAP_LOAD($cf + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $65 = $0;
  $66 = $3;
  $67 = $66 + 12 | 0;
  {}
  SAFE_HEAP_STORE($65 | 0, SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($65 + 4 | 0, SAFE_HEAP_LOAD($67 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $68 = $u;
 $69 = $68 <= 0.0;
 if ($69) {
  {}
  SAFE_HEAP_STORE($P1 | 0, SAFE_HEAP_LOAD($B | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($P1 + 4 | 0, SAFE_HEAP_LOAD($B + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __ZmiRK6b2Vec2S1_($d2, $Q, $P1);
  $70 = +__Z5b2DotRK6b2Vec2S1_($d2, $d2);
  $dd3 = $70;
  $71 = $dd3;
  $72 = $radius;
  $73 = $radius;
  $74 = $72 * $73;
  $75 = $71 > $74;
  if ($75) {
   STACKTOP = sp;
   return;
  }
  $76 = $1;
  $77 = $76 + 45 | 0;
  $78 = SAFE_HEAP_LOAD($77 >> 0 | 0, 1, 0) | 0 | 0;
  $79 = $78 & 1;
  if ($79) {
   $80 = $1;
   $81 = $80 + 36 | 0;
   {}
   SAFE_HEAP_STORE($B2 | 0, SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($B2 + 4 | 0, SAFE_HEAP_LOAD($81 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   {}
   SAFE_HEAP_STORE($A2 | 0, SAFE_HEAP_LOAD($B | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($A2 + 4 | 0, SAFE_HEAP_LOAD($B + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZmiRK6b2Vec2S1_($e2, $B2, $A2);
   __ZmiRK6b2Vec2S1_($9, $Q, $A2);
   $82 = +__Z5b2DotRK6b2Vec2S1_($e2, $9);
   $v2 = $82;
   $83 = $v2;
   $84 = $83 > 0.0;
   if ($84) {
    STACKTOP = sp;
    return;
   }
  }
  SAFE_HEAP_STORE($cf >> 0 | 0, 1 | 0, 1);
  $85 = $cf + 2 | 0;
  SAFE_HEAP_STORE($85 >> 0 | 0, 0 | 0, 1);
  $86 = $0;
  $87 = $86 + 60 | 0;
  SAFE_HEAP_STORE($87 | 0, 1 | 0, 4);
  $88 = $0;
  $89 = $88 + 56 | 0;
  SAFE_HEAP_STORE($89 | 0, 0 | 0, 4);
  $90 = $0;
  $91 = $90 + 40 | 0;
  __ZN6b2Vec27SetZeroEv($91);
  $92 = $0;
  $93 = $92 + 48 | 0;
  {}
  SAFE_HEAP_STORE($93 | 0, SAFE_HEAP_LOAD($P1 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($93 + 4 | 0, SAFE_HEAP_LOAD($P1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $94 = $0;
  $95 = $94 + 16 | 0;
  SAFE_HEAP_STORE($95 | 0, 0 | 0, 4);
  $96 = $0;
  $97 = $96 + 16 | 0;
  {}
  SAFE_HEAP_STORE($97 >> 0 | 0, SAFE_HEAP_LOAD($cf >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($97 + 1 >> 0 | 0, SAFE_HEAP_LOAD($cf + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($97 + 2 >> 0 | 0, SAFE_HEAP_LOAD($cf + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($97 + 3 >> 0 | 0, SAFE_HEAP_LOAD($cf + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $98 = $0;
  $99 = $3;
  $100 = $99 + 12 | 0;
  {}
  SAFE_HEAP_STORE($98 | 0, SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($98 + 4 | 0, SAFE_HEAP_LOAD($100 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $101 = +__Z5b2DotRK6b2Vec2S1_($e, $e);
 $den = $101;
 $102 = $den;
 $103 = $102 > 0.0;
 if (!$103) {
  ___assert_fail(4309 | 0, 4320 | 0, 127, 4378 | 0);
 }
 $104 = $den;
 $105 = 1.0 / $104;
 $106 = $u;
 __ZmlfRK6b2Vec2($11, $106, $A);
 $107 = $v;
 __ZmlfRK6b2Vec2($12, $107, $B);
 __ZplRK6b2Vec2S1_($10, $11, $12);
 __ZmlfRK6b2Vec2($P4, $105, $10);
 __ZmiRK6b2Vec2S1_($d5, $Q, $P4);
 $108 = +__Z5b2DotRK6b2Vec2S1_($d5, $d5);
 $dd6 = $108;
 $109 = $dd6;
 $110 = $radius;
 $111 = $radius;
 $112 = $110 * $111;
 $113 = $109 > $112;
 if ($113) {
  STACKTOP = sp;
  return;
 }
 $114 = $e + 4 | 0;
 $115 = +(+SAFE_HEAP_LOAD_D($114 | 0, 4));
 $116 = -$115;
 $117 = +(+SAFE_HEAP_LOAD_D($e | 0, 4));
 __ZN6b2Vec2C2Eff($n, $116, $117);
 __ZmiRK6b2Vec2S1_($13, $Q, $A);
 $118 = +__Z5b2DotRK6b2Vec2S1_($n, $13);
 $119 = $118 < 0.0;
 if ($119) {
  $120 = +(+SAFE_HEAP_LOAD_D($n | 0, 4));
  $121 = -$120;
  $122 = $n + 4 | 0;
  $123 = +(+SAFE_HEAP_LOAD_D($122 | 0, 4));
  $124 = -$123;
  __ZN6b2Vec23SetEff($n, $121, $124);
 }
 +__ZN6b2Vec29NormalizeEv($n);
 SAFE_HEAP_STORE($cf >> 0 | 0, 0 | 0, 1);
 $125 = $cf + 2 | 0;
 SAFE_HEAP_STORE($125 >> 0 | 0, 1 | 0, 1);
 $126 = $0;
 $127 = $126 + 60 | 0;
 SAFE_HEAP_STORE($127 | 0, 1 | 0, 4);
 $128 = $0;
 $129 = $128 + 56 | 0;
 SAFE_HEAP_STORE($129 | 0, 1 | 0, 4);
 $130 = $0;
 $131 = $130 + 40 | 0;
 {}
 SAFE_HEAP_STORE($131 | 0, SAFE_HEAP_LOAD($n | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($131 + 4 | 0, SAFE_HEAP_LOAD($n + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $132 = $0;
 $133 = $132 + 48 | 0;
 {}
 SAFE_HEAP_STORE($133 | 0, SAFE_HEAP_LOAD($A | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($133 + 4 | 0, SAFE_HEAP_LOAD($A + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $134 = $0;
 $135 = $134 + 16 | 0;
 SAFE_HEAP_STORE($135 | 0, 0 | 0, 4);
 $136 = $0;
 $137 = $136 + 16 | 0;
 {}
 SAFE_HEAP_STORE($137 >> 0 | 0, SAFE_HEAP_LOAD($cf >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($137 + 1 >> 0 | 0, SAFE_HEAP_LOAD($cf + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($137 + 2 >> 0 | 0, SAFE_HEAP_LOAD($cf + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($137 + 3 >> 0 | 0, SAFE_HEAP_LOAD($cf + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $138 = $0;
 $139 = $3;
 $140 = $139 + 12 | 0;
 {}
 SAFE_HEAP_STORE($138 | 0, SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($138 + 4 | 0, SAFE_HEAP_LOAD($140 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $type >>> 0 > 20;
 L1 : do {
  if (!$0) {
   do {
    switch ($type | 0) {
    case 9:
     {
      $arglist_current = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $1 = $arglist_current;
      $2 = 0 + 4 | 0;
      $expanded28 = $2;
      $expanded = $expanded28 - 1 | 0;
      $3 = $1 + $expanded | 0;
      $4 = 0 + 4 | 0;
      $expanded32 = $4;
      $expanded31 = $expanded32 - 1 | 0;
      $expanded30 = $expanded31 ^ -1;
      $5 = $3 & $expanded30;
      $6 = $5;
      $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
      $arglist_next = $6 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next | 0, 4);
      SAFE_HEAP_STORE($arg | 0, $7 | 0, 4);
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $8 = $arglist_current2;
      $9 = 0 + 4 | 0;
      $expanded35 = $9;
      $expanded34 = $expanded35 - 1 | 0;
      $10 = $8 + $expanded34 | 0;
      $11 = 0 + 4 | 0;
      $expanded39 = $11;
      $expanded38 = $expanded39 - 1 | 0;
      $expanded37 = $expanded38 ^ -1;
      $12 = $10 & $expanded37;
      $13 = $12;
      $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
      $arglist_next3 = $13 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next3 | 0, 4);
      $15 = ($14 | 0) < 0;
      $16 = $15 << 31 >> 31;
      $17 = $arg;
      $18 = $17;
      SAFE_HEAP_STORE($18 | 0, $14 | 0, 4);
      $19 = $17 + 4 | 0;
      $20 = $19;
      SAFE_HEAP_STORE($20 | 0, $16 | 0, 4);
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $21 = $arglist_current5;
      $22 = 0 + 4 | 0;
      $expanded42 = $22;
      $expanded41 = $expanded42 - 1 | 0;
      $23 = $21 + $expanded41 | 0;
      $24 = 0 + 4 | 0;
      $expanded46 = $24;
      $expanded45 = $expanded46 - 1 | 0;
      $expanded44 = $expanded45 ^ -1;
      $25 = $23 & $expanded44;
      $26 = $25;
      $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
      $arglist_next6 = $26 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next6 | 0, 4);
      $28 = $arg;
      $29 = $28;
      SAFE_HEAP_STORE($29 | 0, $27 | 0, 4);
      $30 = $28 + 4 | 0;
      $31 = $30;
      SAFE_HEAP_STORE($31 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $32 = $arglist_current8;
      $33 = 0 + 8 | 0;
      $expanded49 = $33;
      $expanded48 = $expanded49 - 1 | 0;
      $34 = $32 + $expanded48 | 0;
      $35 = 0 + 8 | 0;
      $expanded53 = $35;
      $expanded52 = $expanded53 - 1 | 0;
      $expanded51 = $expanded52 ^ -1;
      $36 = $34 & $expanded51;
      $37 = $36;
      $38 = $37;
      $39 = $38;
      $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
      $41 = $38 + 4 | 0;
      $42 = $41;
      $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
      $arglist_next9 = $37 + 8 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next9 | 0, 4);
      $44 = $arg;
      $45 = $44;
      SAFE_HEAP_STORE($45 | 0, $40 | 0, 4);
      $46 = $44 + 4 | 0;
      $47 = $46;
      SAFE_HEAP_STORE($47 | 0, $43 | 0, 4);
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $48 = $arglist_current11;
      $49 = 0 + 4 | 0;
      $expanded56 = $49;
      $expanded55 = $expanded56 - 1 | 0;
      $50 = $48 + $expanded55 | 0;
      $51 = 0 + 4 | 0;
      $expanded60 = $51;
      $expanded59 = $expanded60 - 1 | 0;
      $expanded58 = $expanded59 ^ -1;
      $52 = $50 & $expanded58;
      $53 = $52;
      $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
      $arglist_next12 = $53 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next12 | 0, 4);
      $55 = $54 & 65535;
      $56 = $55 << 16 >> 16;
      $57 = ($56 | 0) < 0;
      $58 = $57 << 31 >> 31;
      $59 = $arg;
      $60 = $59;
      SAFE_HEAP_STORE($60 | 0, $56 | 0, 4);
      $61 = $59 + 4 | 0;
      $62 = $61;
      SAFE_HEAP_STORE($62 | 0, $58 | 0, 4);
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $63 = $arglist_current14;
      $64 = 0 + 4 | 0;
      $expanded63 = $64;
      $expanded62 = $expanded63 - 1 | 0;
      $65 = $63 + $expanded62 | 0;
      $66 = 0 + 4 | 0;
      $expanded67 = $66;
      $expanded66 = $expanded67 - 1 | 0;
      $expanded65 = $expanded66 ^ -1;
      $67 = $65 & $expanded65;
      $68 = $67;
      $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
      $arglist_next15 = $68 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next15 | 0, 4);
      $$mask1 = $69 & 65535;
      $70 = $arg;
      $71 = $70;
      SAFE_HEAP_STORE($71 | 0, $$mask1 | 0, 4);
      $72 = $70 + 4 | 0;
      $73 = $72;
      SAFE_HEAP_STORE($73 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $74 = $arglist_current17;
      $75 = 0 + 4 | 0;
      $expanded70 = $75;
      $expanded69 = $expanded70 - 1 | 0;
      $76 = $74 + $expanded69 | 0;
      $77 = 0 + 4 | 0;
      $expanded74 = $77;
      $expanded73 = $expanded74 - 1 | 0;
      $expanded72 = $expanded73 ^ -1;
      $78 = $76 & $expanded72;
      $79 = $78;
      $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
      $arglist_next18 = $79 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next18 | 0, 4);
      $81 = $80 & 255;
      $82 = $81 << 24 >> 24;
      $83 = ($82 | 0) < 0;
      $84 = $83 << 31 >> 31;
      $85 = $arg;
      $86 = $85;
      SAFE_HEAP_STORE($86 | 0, $82 | 0, 4);
      $87 = $85 + 4 | 0;
      $88 = $87;
      SAFE_HEAP_STORE($88 | 0, $84 | 0, 4);
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $89 = $arglist_current20;
      $90 = 0 + 4 | 0;
      $expanded77 = $90;
      $expanded76 = $expanded77 - 1 | 0;
      $91 = $89 + $expanded76 | 0;
      $92 = 0 + 4 | 0;
      $expanded81 = $92;
      $expanded80 = $expanded81 - 1 | 0;
      $expanded79 = $expanded80 ^ -1;
      $93 = $91 & $expanded79;
      $94 = $93;
      $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
      $arglist_next21 = $94 + 4 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next21 | 0, 4);
      $$mask = $95 & 255;
      $96 = $arg;
      $97 = $96;
      SAFE_HEAP_STORE($97 | 0, $$mask | 0, 4);
      $98 = $96 + 4 | 0;
      $99 = $98;
      SAFE_HEAP_STORE($99 | 0, 0 | 0, 4);
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $100 = $arglist_current23;
      $101 = 0 + 8 | 0;
      $expanded84 = $101;
      $expanded83 = $expanded84 - 1 | 0;
      $102 = $100 + $expanded83 | 0;
      $103 = 0 + 8 | 0;
      $expanded88 = $103;
      $expanded87 = $expanded88 - 1 | 0;
      $expanded86 = $expanded87 ^ -1;
      $104 = $102 & $expanded86;
      $105 = $104;
      $106 = +(+SAFE_HEAP_LOAD_D($105 | 0, 8));
      $arglist_next24 = $105 + 8 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next24 | 0, 4);
      SAFE_HEAP_STORE_D($arg | 0, +$106, 8);
      break L1;
      break;
     }
    case 18:
     {
      $arglist_current26 = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
      $107 = $arglist_current26;
      $108 = 0 + 8 | 0;
      $expanded91 = $108;
      $expanded90 = $expanded91 - 1 | 0;
      $109 = $107 + $expanded90 | 0;
      $110 = 0 + 8 | 0;
      $expanded95 = $110;
      $expanded94 = $expanded95 - 1 | 0;
      $expanded93 = $expanded94 ^ -1;
      $111 = $109 & $expanded93;
      $112 = $111;
      $113 = +(+SAFE_HEAP_LOAD_D($112 | 0, 8));
      $arglist_next27 = $112 + 8 | 0;
      SAFE_HEAP_STORE($ap | 0, $arglist_next27 | 0, 4);
      SAFE_HEAP_STORE_D($arg | 0, +$113, 8);
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $lit, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $lit = $lit | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i5 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i4 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v$i$i4 = sp + 68 | 0;
 $__v$i$i = sp + 48 | 0;
 $0 = sp + 24 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) | 0;
 $4 = ($3 | 0) == ($first | 0);
 $5 = ($3 | 0) == ($last | 0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$1 = $first;
 } else {
  $6 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
  $7 = $6 << 24 >> 24 == 69;
  if ($7) {
   $8 = SAFE_HEAP_LOAD($lit >> 0 | 0, 1, 0) | 0 | 0;
   $9 = $8 & 1;
   $10 = $9 << 24 >> 24 == 0;
   $11 = $lit + 4 | 0;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = $8 & 255;
   $14 = $13 >>> 1;
   $15 = $10 ? $14 : $12;
   $16 = $15 >>> 0 > 3;
   L4 : do {
    if ($16) {
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($2, 10307, $lit);
     __THREW__ = 0;
     $17 = invoke_iii(228, $2 | 0, 10212 | 0) | 0;
     $18 = __THREW__;
     __THREW__ = 0;
     $19 = $18 & 1;
     do {
      if ($19) {
       $50 = ___cxa_find_matching_catch() | 0;
       $51 = tempRet0;
       $$0 = $51;
       $$01 = $50;
      } else {
       {}
       SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($17 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
       $20 = $17 + 4 | 0;
       SAFE_HEAP_STORE($20 | 0, 0 | 0, 4);
       $21 = $17 + 8 | 0;
       SAFE_HEAP_STORE($21 | 0, 0 | 0, 4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
       $22 = $db + 4 | 0;
       $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
       $24 = $db + 8 | 0;
       $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
       $26 = $23 >>> 0 < $25 >>> 0;
       if ($26) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23, $0);
        $27 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
        $28 = $27 + 24 | 0;
        SAFE_HEAP_STORE($22 | 0, $28 | 0, 4);
       } else {
        $29 = $db + 12 | 0;
        $30 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
        $31 = $23;
        $32 = $30;
        $33 = $31 - $32 | 0;
        $34 = ($33 | 0) / 24 & -1;
        $35 = $34 + 1 | 0;
        $36 = ($33 | 0) < -24;
        if ($36) {
         __THREW__ = 0;
         invoke_vi(238, $db | 0);
         $37 = __THREW__;
         __THREW__ = 0;
         $38 = ___cxa_find_matching_catch() | 0;
         $39 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         $$0 = $39;
         $$01 = $38;
         break;
        }
        $40 = $25;
        $41 = $40 - $32 | 0;
        $42 = ($41 | 0) / 24 & -1;
        $43 = $42 >>> 0 < 1073741823;
        if ($43) {
         $44 = $42 << 1;
         $45 = $44 >>> 0 < $35 >>> 0;
         $46 = $45 ? $35 : $44;
         $$0$i$i$i = $46;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i, $$0$i$i$i, $34, $29);
        $47 = $__v$i$i + 8 | 0;
        $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48, $0);
        $49 = $48 + 24 | 0;
        SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       break L4;
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
     ___resumeException($$01 | 0);
    } else {
     $52 = $db + 4 | 0;
     $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
     $54 = $db + 8 | 0;
     $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
     $56 = $53 >>> 0 < $55 >>> 0;
     if ($56) {
      {}
      SAFE_HEAP_STORE($53 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 + 4 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 + 8 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 + 12 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 + 16 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 + 20 | 0, 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($53 | 0, 0 | 0, 4);
      $57 = $53 + 4 | 0;
      SAFE_HEAP_STORE($57 | 0, 0 | 0, 4);
      $58 = $53 + 8 | 0;
      SAFE_HEAP_STORE($58 | 0, 0 | 0, 4);
      $59 = $53 + 12 | 0;
      SAFE_HEAP_STORE($59 | 0, 0 | 0, 4);
      $60 = $59 + 4 | 0;
      SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
      $61 = $59 + 8 | 0;
      SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
      $62 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
      $63 = $62 + 24 | 0;
      SAFE_HEAP_STORE($52 | 0, $63 | 0, 4);
      break;
     }
     $64 = $db + 12 | 0;
     $65 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
     $66 = $53;
     $67 = $65;
     $68 = $66 - $67 | 0;
     $69 = ($68 | 0) / 24 & -1;
     $70 = $69 + 1 | 0;
     $71 = ($68 | 0) < -24;
     if ($71) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
     }
     $72 = $55;
     $73 = $72 - $67 | 0;
     $74 = ($73 | 0) / 24 & -1;
     $75 = $74 >>> 0 < 1073741823;
     if ($75) {
      $76 = $74 << 1;
      $77 = $76 >>> 0 < $70 >>> 0;
      $78 = $77 ? $70 : $76;
      $$0$i$i$i5 = $78;
     } else {
      $$0$i$i$i5 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4, $$0$i$i$i5, $69, $64);
     $79 = $__v$i$i4 + 8 | 0;
     $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
     {}
     SAFE_HEAP_STORE($80 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 + 4 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 + 8 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 + 12 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 + 16 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 + 20 | 0, 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($80 | 0, 0 | 0, 4);
     $81 = $80 + 4 | 0;
     SAFE_HEAP_STORE($81 | 0, 0 | 0, 4);
     $82 = $80 + 8 | 0;
     SAFE_HEAP_STORE($82 | 0, 0 | 0, 4);
     $83 = $80 + 12 | 0;
     SAFE_HEAP_STORE($83 | 0, 0 | 0, 4);
     $84 = $83 + 4 | 0;
     SAFE_HEAP_STORE($84 | 0, 0 | 0, 4);
     $85 = $83 + 8 | 0;
     SAFE_HEAP_STORE($85 | 0, 0 | 0, 4);
     $86 = $80 + 24 | 0;
     SAFE_HEAP_STORE($79 | 0, $86 | 0, 4);
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db, $__v$i$i4);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
    }
   } while (0);
   $87 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $88 = $87 << 24 >> 24 == 110;
   $89 = $db + 4 | 0;
   if ($88) {
    $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
    $91 = $90 + -24 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($91, 45);
    $92 = $first + 1 | 0;
    $$02 = $92;
   } else {
    $$02 = $first;
   }
   $93 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
   $94 = $93 + -24 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($94, $$02, $3);
   $95 = SAFE_HEAP_LOAD($lit >> 0 | 0, 1, 0) | 0 | 0;
   $96 = $95 & 1;
   $97 = $96 << 24 >> 24 == 0;
   $98 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $99 = $95 & 255;
   $100 = $99 >>> 1;
   $101 = $97 ? $100 : $98;
   $102 = $101 >>> 0 < 4;
   if ($102) {
    $103 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
    $104 = $103 + -24 | 0;
    $105 = $lit + 8 | 0;
    $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
    $107 = $lit + 1 | 0;
    $108 = $97 ? $107 : $106;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($104, $108, $101) | 0;
   }
   $109 = $3 + 1 | 0;
   $$1 = $109;
  } else {
   $$1 = $first;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 L1 : do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     SAFE_HEAP_STORE($6 | 0, $path_below | 0, 4);
    }
   }
  } else {
   $9 = SAFE_HEAP_LOAD($info | 0, 4, 0) | 0 | 0;
   $10 = ($this | 0) == ($9 | 0);
   if (!$10) {
    $57 = $this + 16 | 0;
    $58 = $this + 12 | 0;
    $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
    $60 = ($this + 16 | 0) + ($59 << 3) | 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57, $info, $current_ptr, $path_below, $use_strcmp);
    $61 = $this + 24 | 0;
    $62 = ($59 | 0) > 1;
    if (!$62) {
     break;
    }
    $63 = $this + 8 | 0;
    $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
    $65 = $64 & 2;
    $66 = ($65 | 0) == 0;
    if ($66) {
     $67 = $info + 36 | 0;
     $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
     $69 = ($68 | 0) == 1;
     if (!$69) {
      $75 = $64 & 1;
      $76 = ($75 | 0) == 0;
      if ($76) {
       $79 = $info + 54 | 0;
       $p2$2 = $61;
       while (1) {
        $88 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
        $89 = $88 << 24 >> 24 == 0;
        if (!$89) {
         break L1;
        }
        $90 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
        $91 = ($90 | 0) == 1;
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
        $92 = $p2$2 + 8 | 0;
        $93 = $92 >>> 0 < $60 >>> 0;
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = $info + 24 | 0;
      $78 = $info + 54 | 0;
      $p2$1 = $61;
      while (1) {
       $80 = SAFE_HEAP_LOAD($78 >> 0 | 0, 1, 0) | 0 | 0;
       $81 = $80 << 24 >> 24 == 0;
       if (!$81) {
        break L1;
       }
       $82 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
       $83 = ($82 | 0) == 1;
       if ($83) {
        $84 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
        $85 = ($84 | 0) == 1;
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
       $86 = $p2$1 + 8 | 0;
       $87 = $86 >>> 0 < $60 >>> 0;
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = $info + 54 | 0;
    $p2$0 = $61;
    while (1) {
     $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
     $72 = $71 << 24 >> 24 == 0;
     if (!$72) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
     $73 = $p2$0 + 8 | 0;
     $74 = $73 >>> 0 < $60 >>> 0;
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = $info + 16 | 0;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = ($12 | 0) == ($current_ptr | 0);
   if (!$13) {
    $14 = $info + 20 | 0;
    $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $16 = ($15 | 0) == ($current_ptr | 0);
    if (!$16) {
     $19 = $info + 32 | 0;
     SAFE_HEAP_STORE($19 | 0, $path_below | 0, 4);
     $20 = $info + 44 | 0;
     $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
     $22 = ($21 | 0) == 4;
     if ($22) {
      break;
     }
     $23 = $this + 12 | 0;
     $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
     $25 = ($this + 16 | 0) + ($24 << 3) | 0;
     $26 = $info + 52 | 0;
     $27 = $info + 53 | 0;
     $28 = $info + 54 | 0;
     $29 = $this + 8 | 0;
     $30 = $info + 24 | 0;
     $31 = ($24 | 0) > 0;
     L34 : do {
      if ($31) {
       $32 = $this + 16 | 0;
       $does_dst_type_point_to_our_static_type$0$off023 = 0;
       $is_dst_type_derived_from_static_type$0$off025 = 0;
       $p$024 = $32;
       while (1) {
        SAFE_HEAP_STORE($26 >> 0 | 0, 0 | 0, 1);
        SAFE_HEAP_STORE($27 >> 0 | 0, 0 | 0, 1);
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
        $33 = SAFE_HEAP_LOAD($28 >> 0 | 0, 1, 0) | 0 | 0;
        $34 = $33 << 24 >> 24 == 0;
        if (!$34) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L34;
        }
        $35 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
        $36 = $35 << 24 >> 24 == 0;
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;
          $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
          $38 = $37 << 24 >> 24 == 0;
          if ($38) {
           $44 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
           $45 = $44 & 1;
           $46 = ($45 | 0) == 0;
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;
            $is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L34;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;
            $is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
          $40 = ($39 | 0) == 1;
          if ($40) {
           break L34;
          }
          $41 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
          $42 = $41 & 2;
          $43 = ($42 | 0) == 0;
          if ($43) {
           break L34;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;
           $is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while (0);
        $47 = $p$024 + 8 | 0;
        $48 = $47 >>> 0 < $25 >>> 0;
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;
         $is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;
         $p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
         $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;
       $is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while (0);
     do {
      if ((label | 0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        SAFE_HEAP_STORE($14 | 0, $current_ptr | 0, 4);
        $49 = $info + 40 | 0;
        $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
        $51 = $50 + 1 | 0;
        SAFE_HEAP_STORE($49 | 0, $51 | 0, 4);
        $52 = $info + 36 | 0;
        $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
        $54 = ($53 | 0) == 1;
        if ($54) {
         $55 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
         $56 = ($55 | 0) == 2;
         if ($56) {
          SAFE_HEAP_STORE($28 >> 0 | 0, 1 | 0, 1);
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label | 0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       SAFE_HEAP_STORE($20 | 0, 4 | 0, 4);
       break L1;
      }
     } while (0);
     SAFE_HEAP_STORE($20 | 0, 3 | 0, 4);
     break;
    }
   }
   $17 = ($path_below | 0) == 1;
   if ($17) {
    $18 = $info + 32 | 0;
    SAFE_HEAP_STORE($18 | 0, 1 | 0, 4);
   }
  }
 } while (0);
 return;
}

function __ZN15b2ContactSolver27SolveTOIPositionConstraintsEii($this, $toiIndexA, $toiIndexB) {
 $this = $this | 0;
 $toiIndexA = $toiIndexA | 0;
 $toiIndexB = $toiIndexB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0;
 var $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0, $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0;
 var $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $localCenterA = sp + 240 | 0;
 $localCenterB = sp + 232 | 0;
 $cA = sp + 200 | 0;
 $cB = sp + 184 | 0;
 $xfA = sp + 160 | 0;
 $xfB = sp + 144 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 128 | 0;
 $5 = sp + 120 | 0;
 $6 = sp + 112 | 0;
 $psm = sp + 88 | 0;
 $normal = sp + 80 | 0;
 $point = sp + 72 | 0;
 $rA = sp + 56 | 0;
 $rB = sp + 48 | 0;
 $P = sp + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $0 = $this;
 $1 = $toiIndexA;
 $2 = $toiIndexB;
 $9 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $9 + 48 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = ($10 | 0) < ($12 | 0);
  if (!$13) {
   break;
  }
  $14 = $9 + 36 | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = $i;
  $17 = $15 + ($16 * 88 | 0) | 0;
  $pc = $17;
  $18 = $pc;
  $19 = $18 + 32 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $indexA = $20;
  $21 = $pc;
  $22 = $21 + 36 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $indexB = $23;
  $24 = $pc;
  $25 = $24 + 48 | 0;
  {}
  SAFE_HEAP_STORE($localCenterA | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterA + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $26 = $pc;
  $27 = $26 + 56 | 0;
  {}
  SAFE_HEAP_STORE($localCenterB | 0, SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterB + 4 | 0, SAFE_HEAP_LOAD($27 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $28 = $pc;
  $29 = $28 + 84 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $pointCount = $30;
  $mA = 0.0;
  $iA = 0.0;
  $31 = $indexA;
  $32 = $1;
  $33 = ($31 | 0) == ($32 | 0);
  if ($33) {
   label = 5;
  } else {
   $34 = $indexA;
   $35 = $2;
   $36 = ($34 | 0) == ($35 | 0);
   if ($36) {
    label = 5;
   }
  }
  if ((label | 0) == 5) {
   label = 0;
   $37 = $pc;
   $38 = $37 + 40 | 0;
   $39 = +(+SAFE_HEAP_LOAD_D($38 | 0, 4));
   $mA = $39;
   $40 = $pc;
   $41 = $40 + 64 | 0;
   $42 = +(+SAFE_HEAP_LOAD_D($41 | 0, 4));
   $iA = $42;
  }
  $mB = 0.0;
  $iB = 0.0;
  $43 = $indexB;
  $44 = $1;
  $45 = ($43 | 0) == ($44 | 0);
  if ($45) {
   label = 8;
  } else {
   $46 = $indexB;
   $47 = $2;
   $48 = ($46 | 0) == ($47 | 0);
   if ($48) {
    label = 8;
   }
  }
  if ((label | 0) == 8) {
   label = 0;
   $49 = $pc;
   $50 = $49 + 44 | 0;
   $51 = +(+SAFE_HEAP_LOAD_D($50 | 0, 4));
   $mB = $51;
   $52 = $pc;
   $53 = $52 + 68 | 0;
   $54 = +(+SAFE_HEAP_LOAD_D($53 | 0, 4));
   $iB = $54;
  }
  $55 = $indexA;
  $56 = $9 + 24 | 0;
  $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
  $58 = $57 + ($55 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cA | 0, SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cA + 4 | 0, SAFE_HEAP_LOAD($58 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $59 = $indexA;
  $60 = $9 + 24 | 0;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = $61 + ($59 * 12 | 0) | 0;
  $63 = $62 + 8 | 0;
  $64 = +(+SAFE_HEAP_LOAD_D($63 | 0, 4));
  $aA = $64;
  $65 = $indexB;
  $66 = $9 + 24 | 0;
  $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
  $68 = $67 + ($65 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cB | 0, SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cB + 4 | 0, SAFE_HEAP_LOAD($68 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $69 = $indexB;
  $70 = $9 + 24 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
  $72 = $71 + ($69 * 12 | 0) | 0;
  $73 = $72 + 8 | 0;
  $74 = +(+SAFE_HEAP_LOAD_D($73 | 0, 4));
  $aB = $74;
  $j = 0;
  while (1) {
   $75 = $j;
   $76 = $pointCount;
   $77 = ($75 | 0) < ($76 | 0);
   if (!$77) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $78 = $xfA + 8 | 0;
   $79 = $aA;
   __ZN5b2Rot3SetEf($78, $79);
   $80 = $xfB + 8 | 0;
   $81 = $aB;
   __ZN5b2Rot3SetEf($80, $81);
   $82 = $xfA + 8 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($4, $82, $localCenterA);
   __ZmiRK6b2Vec2S1_($3, $cA, $4);
   {}
   SAFE_HEAP_STORE($xfA | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($xfA + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $83 = $xfB + 8 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($6, $83, $localCenterB);
   __ZmiRK6b2Vec2S1_($5, $cB, $6);
   {}
   SAFE_HEAP_STORE($xfB | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($xfB + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $84 = $pc;
   $85 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $84, $xfA, $xfB, $85);
   {}
   SAFE_HEAP_STORE($normal | 0, SAFE_HEAP_LOAD($psm | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($normal + 4 | 0, SAFE_HEAP_LOAD($psm + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $86 = $psm + 8 | 0;
   {}
   SAFE_HEAP_STORE($point | 0, SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($point + 4 | 0, SAFE_HEAP_LOAD($86 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $87 = $psm + 16 | 0;
   $88 = +(+SAFE_HEAP_LOAD_D($87 | 0, 4));
   $separation = $88;
   __ZmiRK6b2Vec2S1_($rA, $point, $cA);
   __ZmiRK6b2Vec2S1_($rB, $point, $cB);
   $89 = $minSeparation;
   $90 = $separation;
   $91 = +__Z5b2MinIfET_S0_S0_($89, $90);
   $minSeparation = $91;
   $92 = $separation;
   $93 = $92 + .004999999888241291;
   $94 = .75 * $93;
   $95 = +__Z7b2ClampIfET_S0_S0_S0_($94, -.20000000298023224, 0.0);
   $C = $95;
   $96 = +__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
   $rnA = $96;
   $97 = +__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
   $rnB = $97;
   $98 = $mA;
   $99 = $mB;
   $100 = $98 + $99;
   $101 = $iA;
   $102 = $rnA;
   $103 = $101 * $102;
   $104 = $rnA;
   $105 = $103 * $104;
   $106 = $100 + $105;
   $107 = $iB;
   $108 = $rnB;
   $109 = $107 * $108;
   $110 = $rnB;
   $111 = $109 * $110;
   $112 = $106 + $111;
   $K = $112;
   $113 = $K;
   $114 = $113 > 0.0;
   if ($114) {
    $115 = $C;
    $116 = -$115;
    $117 = $K;
    $118 = $116 / $117;
    $119 = $118;
   } else {
    $119 = 0.0;
   }
   $impulse = $119;
   $120 = $impulse;
   __ZmlfRK6b2Vec2($P, $120, $normal);
   $121 = $mA;
   __ZmlfRK6b2Vec2($7, $121, $P);
   __ZN6b2Vec2mIERKS_($cA, $7);
   $122 = $iA;
   $123 = +__Z7b2CrossRK6b2Vec2S1_($rA, $P);
   $124 = $122 * $123;
   $125 = $aA;
   $126 = $125 - $124;
   $aA = $126;
   $127 = $mB;
   __ZmlfRK6b2Vec2($8, $127, $P);
   __ZN6b2Vec2pLERKS_($cB, $8);
   $128 = $iB;
   $129 = +__Z7b2CrossRK6b2Vec2S1_($rB, $P);
   $130 = $128 * $129;
   $131 = $aB;
   $132 = $131 + $130;
   $aB = $132;
   $133 = $j;
   $134 = $133 + 1 | 0;
   $j = $134;
  }
  $135 = $indexA;
  $136 = $9 + 24 | 0;
  $137 = SAFE_HEAP_LOAD($136 | 0, 4, 0) | 0 | 0;
  $138 = $137 + ($135 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($138 | 0, SAFE_HEAP_LOAD($cA | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($138 + 4 | 0, SAFE_HEAP_LOAD($cA + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $139 = $aA;
  $140 = $indexA;
  $141 = $9 + 24 | 0;
  $142 = SAFE_HEAP_LOAD($141 | 0, 4, 0) | 0 | 0;
  $143 = $142 + ($140 * 12 | 0) | 0;
  $144 = $143 + 8 | 0;
  SAFE_HEAP_STORE_D($144 | 0, +$139, 4);
  $145 = $indexB;
  $146 = $9 + 24 | 0;
  $147 = SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0;
  $148 = $147 + ($145 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($148 | 0, SAFE_HEAP_LOAD($cB | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($148 + 4 | 0, SAFE_HEAP_LOAD($cB + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $149 = $aB;
  $150 = $indexB;
  $151 = $9 + 24 | 0;
  $152 = SAFE_HEAP_LOAD($151 | 0, 4, 0) | 0 | 0;
  $153 = $152 + ($150 * 12 | 0) | 0;
  $154 = $153 + 8 | 0;
  SAFE_HEAP_STORE_D($154 | 0, +$149, 4);
  $155 = $i;
  $156 = $155 + 1 | 0;
  $i = $156;
 }
 $157 = $minSeparation;
 $158 = $157 >= -.007499999832361937;
 STACKTOP = sp;
 return $158 | 0;
}

function __ZN16b2ContactManager7AddPairEPvS0_($this, $proxyUserDataA, $proxyUserDataB) {
 $this = $this | 0;
 $proxyUserDataA = $proxyUserDataA | 0;
 $proxyUserDataB = $proxyUserDataB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0, $c = 0, $edge = 0, $fA = 0, $fB = 0, $fixtureA = 0, $fixtureB = 0, $iA = 0, $iB = 0, $indexA = 0, $indexB = 0, $proxyA = 0, $proxyB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyUserDataA;
 $2 = $proxyUserDataB;
 $3 = $0;
 $4 = $1;
 $proxyA = $4;
 $5 = $2;
 $proxyB = $5;
 $6 = $proxyA;
 $7 = $6 + 16 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $fixtureA = $8;
 $9 = $proxyB;
 $10 = $9 + 16 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $fixtureB = $11;
 $12 = $proxyA;
 $13 = $12 + 20 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $indexA = $14;
 $15 = $proxyB;
 $16 = $15 + 20 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $indexB = $17;
 $18 = $fixtureA;
 $19 = __ZN9b2Fixture7GetBodyEv($18) | 0;
 $bodyA = $19;
 $20 = $fixtureB;
 $21 = __ZN9b2Fixture7GetBodyEv($20) | 0;
 $bodyB = $21;
 $22 = $bodyA;
 $23 = $bodyB;
 $24 = ($22 | 0) == ($23 | 0);
 if ($24) {
  STACKTOP = sp;
  return;
 }
 $25 = $bodyB;
 $26 = __ZN6b2Body14GetContactListEv($25) | 0;
 $edge = $26;
 while (1) {
  $27 = $edge;
  $28 = ($27 | 0) != (0 | 0);
  if (!$28) {
   label = 14;
   break;
  }
  $29 = $edge;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $bodyA;
  $32 = ($30 | 0) == ($31 | 0);
  if ($32) {
   $33 = $edge;
   $34 = $33 + 4 | 0;
   $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
   $36 = __ZN9b2Contact11GetFixtureAEv($35) | 0;
   $fA = $36;
   $37 = $edge;
   $38 = $37 + 4 | 0;
   $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
   $40 = __ZN9b2Contact11GetFixtureBEv($39) | 0;
   $fB = $40;
   $41 = $edge;
   $42 = $41 + 4 | 0;
   $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
   $44 = __ZNK9b2Contact14GetChildIndexAEv($43) | 0;
   $iA = $44;
   $45 = $edge;
   $46 = $45 + 4 | 0;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = __ZNK9b2Contact14GetChildIndexBEv($47) | 0;
   $iB = $48;
   $49 = $fA;
   $50 = $fixtureA;
   $51 = ($49 | 0) == ($50 | 0);
   if ($51) {
    $52 = $fB;
    $53 = $fixtureB;
    $54 = ($52 | 0) == ($53 | 0);
    if ($54) {
     $55 = $iA;
     $56 = $indexA;
     $57 = ($55 | 0) == ($56 | 0);
     if ($57) {
      $58 = $iB;
      $59 = $indexB;
      $60 = ($58 | 0) == ($59 | 0);
      if ($60) {
       label = 28;
       break;
      }
     }
    }
   }
   $61 = $fA;
   $62 = $fixtureB;
   $63 = ($61 | 0) == ($62 | 0);
   if ($63) {
    $64 = $fB;
    $65 = $fixtureA;
    $66 = ($64 | 0) == ($65 | 0);
    if ($66) {
     $67 = $iA;
     $68 = $indexB;
     $69 = ($67 | 0) == ($68 | 0);
     if ($69) {
      $70 = $iB;
      $71 = $indexA;
      $72 = ($70 | 0) == ($71 | 0);
      if ($72) {
       label = 28;
       break;
      }
     }
    }
   }
  }
  $73 = $edge;
  $74 = $73 + 12 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $edge = $75;
 }
 if ((label | 0) == 14) {
  $76 = $bodyB;
  $77 = $bodyA;
  $78 = __ZNK6b2Body13ShouldCollideEPKS_($76, $77) | 0;
  $79 = $78 & 1;
  $80 = ($79 | 0) == 0;
  if ($80) {
   STACKTOP = sp;
   return;
  }
  $81 = $3 + 68 | 0;
  $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
  $83 = ($82 | 0) != (0 | 0);
  if ($83) {
   $84 = $3 + 68 | 0;
   $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
   $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
   $87 = $86 + 8 | 0;
   $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
   $89 = $fixtureA;
   $90 = $fixtureB;
   $91 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($88 | 0, 255 | 0) | 0) & 255]($85, $89, $90) | 0;
   $92 = $91 & 1;
   $93 = ($92 | 0) == 0;
   if ($93) {
    STACKTOP = sp;
    return;
   }
  }
  $94 = $fixtureA;
  $95 = $indexA;
  $96 = $fixtureB;
  $97 = $indexB;
  $98 = $3 + 76 | 0;
  $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
  $100 = __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($94, $95, $96, $97, $99) | 0;
  $c = $100;
  $101 = $c;
  $102 = ($101 | 0) == (0 | 0);
  if ($102) {
   STACKTOP = sp;
   return;
  }
  $103 = $c;
  $104 = __ZN9b2Contact11GetFixtureAEv($103) | 0;
  $fixtureA = $104;
  $105 = $c;
  $106 = __ZN9b2Contact11GetFixtureBEv($105) | 0;
  $fixtureB = $106;
  $107 = $c;
  $108 = __ZNK9b2Contact14GetChildIndexAEv($107) | 0;
  $indexA = $108;
  $109 = $c;
  $110 = __ZNK9b2Contact14GetChildIndexBEv($109) | 0;
  $indexB = $110;
  $111 = $fixtureA;
  $112 = __ZN9b2Fixture7GetBodyEv($111) | 0;
  $bodyA = $112;
  $113 = $fixtureB;
  $114 = __ZN9b2Fixture7GetBodyEv($113) | 0;
  $bodyB = $114;
  $115 = $c;
  $116 = $115 + 8 | 0;
  SAFE_HEAP_STORE($116 | 0, 0 | 0, 4);
  $117 = $3 + 60 | 0;
  $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
  $119 = $c;
  $120 = $119 + 12 | 0;
  SAFE_HEAP_STORE($120 | 0, $118 | 0, 4);
  $121 = $3 + 60 | 0;
  $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
  $123 = ($122 | 0) != (0 | 0);
  if ($123) {
   $124 = $c;
   $125 = $3 + 60 | 0;
   $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
   $127 = $126 + 8 | 0;
   SAFE_HEAP_STORE($127 | 0, $124 | 0, 4);
  }
  $128 = $c;
  $129 = $3 + 60 | 0;
  SAFE_HEAP_STORE($129 | 0, $128 | 0, 4);
  $130 = $c;
  $131 = $c;
  $132 = $131 + 16 | 0;
  $133 = $132 + 4 | 0;
  SAFE_HEAP_STORE($133 | 0, $130 | 0, 4);
  $134 = $bodyB;
  $135 = $c;
  $136 = $135 + 16 | 0;
  SAFE_HEAP_STORE($136 | 0, $134 | 0, 4);
  $137 = $c;
  $138 = $137 + 16 | 0;
  $139 = $138 + 8 | 0;
  SAFE_HEAP_STORE($139 | 0, 0 | 0, 4);
  $140 = $bodyA;
  $141 = $140 + 112 | 0;
  $142 = SAFE_HEAP_LOAD($141 | 0, 4, 0) | 0 | 0;
  $143 = $c;
  $144 = $143 + 16 | 0;
  $145 = $144 + 12 | 0;
  SAFE_HEAP_STORE($145 | 0, $142 | 0, 4);
  $146 = $bodyA;
  $147 = $146 + 112 | 0;
  $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
  $149 = ($148 | 0) != (0 | 0);
  if ($149) {
   $150 = $c;
   $151 = $150 + 16 | 0;
   $152 = $bodyA;
   $153 = $152 + 112 | 0;
   $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
   $155 = $154 + 8 | 0;
   SAFE_HEAP_STORE($155 | 0, $151 | 0, 4);
  }
  $156 = $c;
  $157 = $156 + 16 | 0;
  $158 = $bodyA;
  $159 = $158 + 112 | 0;
  SAFE_HEAP_STORE($159 | 0, $157 | 0, 4);
  $160 = $c;
  $161 = $c;
  $162 = $161 + 32 | 0;
  $163 = $162 + 4 | 0;
  SAFE_HEAP_STORE($163 | 0, $160 | 0, 4);
  $164 = $bodyA;
  $165 = $c;
  $166 = $165 + 32 | 0;
  SAFE_HEAP_STORE($166 | 0, $164 | 0, 4);
  $167 = $c;
  $168 = $167 + 32 | 0;
  $169 = $168 + 8 | 0;
  SAFE_HEAP_STORE($169 | 0, 0 | 0, 4);
  $170 = $bodyB;
  $171 = $170 + 112 | 0;
  $172 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
  $173 = $c;
  $174 = $173 + 32 | 0;
  $175 = $174 + 12 | 0;
  SAFE_HEAP_STORE($175 | 0, $172 | 0, 4);
  $176 = $bodyB;
  $177 = $176 + 112 | 0;
  $178 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0;
  $179 = ($178 | 0) != (0 | 0);
  if ($179) {
   $180 = $c;
   $181 = $180 + 32 | 0;
   $182 = $bodyB;
   $183 = $182 + 112 | 0;
   $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
   $185 = $184 + 8 | 0;
   SAFE_HEAP_STORE($185 | 0, $181 | 0, 4);
  }
  $186 = $c;
  $187 = $186 + 32 | 0;
  $188 = $bodyB;
  $189 = $188 + 112 | 0;
  SAFE_HEAP_STORE($189 | 0, $187 | 0, 4);
  $190 = $fixtureA;
  $191 = __ZNK9b2Fixture8IsSensorEv($190) | 0;
  $192 = $191 & 1;
  $193 = ($192 | 0) == 0;
  if ($193) {
   $194 = $fixtureB;
   $195 = __ZNK9b2Fixture8IsSensorEv($194) | 0;
   $196 = $195 & 1;
   $197 = ($196 | 0) == 0;
   if ($197) {
    $198 = $bodyA;
    __ZN6b2Body8SetAwakeEb($198, 1);
    $199 = $bodyB;
    __ZN6b2Body8SetAwakeEb($199, 1);
   }
  }
  $200 = $3 + 64 | 0;
  $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
  $202 = $201 + 1 | 0;
  SAFE_HEAP_STORE($200 | 0, $202 | 0, 4);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 28) {
  STACKTOP = sp;
  return;
 }
}

function __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($manifold, $polygonA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $polygonA = $polygonA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cLocal = 0, $faceCenter = 0;
 var $i = 0, $normalIndex = 0, $normals = 0, $radius = 0.0, $s = 0.0, $s1 = 0.0, $separation = 0.0, $u1 = 0.0, $u2 = 0.0, $v1 = 0, $v2 = 0, $vertIndex1 = 0, $vertIndex2 = 0, $vertexCount = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp + 184 | 0;
 $cLocal = sp + 176 | 0;
 $5 = sp + 136 | 0;
 $v1 = sp + 120 | 0;
 $v2 = sp + 112 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 56 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 32 | 0;
 $faceCenter = sp + 24 | 0;
 $14 = sp + 16 | 0;
 $15 = sp;
 $0 = $manifold;
 $1 = $polygonA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $16 = $0;
 $17 = $16 + 60 | 0;
 SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
 $18 = $4;
 $19 = $3;
 $20 = $19 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($c, $18, $20);
 $21 = $2;
 __Z6b2MulTRK11b2TransformRK6b2Vec2($cLocal, $21, $c);
 $normalIndex = 0;
 $separation = -34028234663852886.0e22;
 $22 = $1;
 $23 = $22 + 8 | 0;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 $25 = $3;
 $26 = $25 + 8 | 0;
 $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
 $28 = $24 + $27;
 $radius = $28;
 $29 = $1;
 $30 = $29 + 148 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $vertexCount = $31;
 $32 = $1;
 $33 = $32 + 20 | 0;
 $vertices = $33;
 $34 = $1;
 $35 = $34 + 84 | 0;
 $normals = $35;
 $i = 0;
 while (1) {
  $36 = $i;
  $37 = $vertexCount;
  $38 = ($36 | 0) < ($37 | 0);
  if (!$38) {
   break;
  }
  $39 = $i;
  $40 = $normals;
  $41 = $40 + ($39 << 3) | 0;
  $42 = $i;
  $43 = $vertices;
  $44 = $43 + ($42 << 3) | 0;
  __ZmiRK6b2Vec2S1_($5, $cLocal, $44);
  $45 = +__Z5b2DotRK6b2Vec2S1_($41, $5);
  $s = $45;
  $46 = $s;
  $47 = $radius;
  $48 = $46 > $47;
  if ($48) {
   label = 17;
   break;
  }
  $49 = $s;
  $50 = $separation;
  $51 = $49 > $50;
  if ($51) {
   $52 = $s;
   $separation = $52;
   $53 = $i;
   $normalIndex = $53;
  }
  $54 = $i;
  $55 = $54 + 1 | 0;
  $i = $55;
 }
 if ((label | 0) == 17) {
  STACKTOP = sp;
  return;
 }
 $56 = $normalIndex;
 $vertIndex1 = $56;
 $57 = $vertIndex1;
 $58 = $57 + 1 | 0;
 $59 = $vertexCount;
 $60 = ($58 | 0) < ($59 | 0);
 $61 = $vertIndex1;
 $62 = $61 + 1 | 0;
 $63 = $60 ? $62 : 0;
 $vertIndex2 = $63;
 $64 = $vertIndex1;
 $65 = $vertices;
 $66 = $65 + ($64 << 3) | 0;
 {}
 SAFE_HEAP_STORE($v1 | 0, SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v1 + 4 | 0, SAFE_HEAP_LOAD($66 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $67 = $vertIndex2;
 $68 = $vertices;
 $69 = $68 + ($67 << 3) | 0;
 {}
 SAFE_HEAP_STORE($v2 | 0, SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v2 + 4 | 0, SAFE_HEAP_LOAD($69 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $70 = $separation;
 $71 = $70 < 1.1920928955078125e-007;
 if ($71) {
  $72 = $0;
  $73 = $72 + 60 | 0;
  SAFE_HEAP_STORE($73 | 0, 1 | 0, 4);
  $74 = $0;
  $75 = $74 + 56 | 0;
  SAFE_HEAP_STORE($75 | 0, 1 | 0, 4);
  $76 = $0;
  $77 = $76 + 40 | 0;
  $78 = $normalIndex;
  $79 = $normals;
  $80 = $79 + ($78 << 3) | 0;
  {}
  SAFE_HEAP_STORE($77 | 0, SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($77 + 4 | 0, SAFE_HEAP_LOAD($80 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $81 = $0;
  $82 = $81 + 48 | 0;
  __ZplRK6b2Vec2S1_($7, $v1, $v2);
  __ZmlfRK6b2Vec2($6, .5, $7);
  {}
  SAFE_HEAP_STORE($82 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($82 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $83 = $0;
  $84 = $3;
  $85 = $84 + 12 | 0;
  {}
  SAFE_HEAP_STORE($83 | 0, SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($83 + 4 | 0, SAFE_HEAP_LOAD($85 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $86 = $0;
  $87 = $86 + 16 | 0;
  SAFE_HEAP_STORE($87 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
 __ZmiRK6b2Vec2S1_($8, $cLocal, $v1);
 __ZmiRK6b2Vec2S1_($9, $v2, $v1);
 $88 = +__Z5b2DotRK6b2Vec2S1_($8, $9);
 $u1 = $88;
 __ZmiRK6b2Vec2S1_($10, $cLocal, $v2);
 __ZmiRK6b2Vec2S1_($11, $v1, $v2);
 $89 = +__Z5b2DotRK6b2Vec2S1_($10, $11);
 $u2 = $89;
 $90 = $u1;
 $91 = $90 <= 0.0;
 if ($91) {
  $92 = +__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v1);
  $93 = $radius;
  $94 = $radius;
  $95 = $93 * $94;
  $96 = $92 > $95;
  if ($96) {
   STACKTOP = sp;
   return;
  }
  $97 = $0;
  $98 = $97 + 60 | 0;
  SAFE_HEAP_STORE($98 | 0, 1 | 0, 4);
  $99 = $0;
  $100 = $99 + 56 | 0;
  SAFE_HEAP_STORE($100 | 0, 1 | 0, 4);
  $101 = $0;
  $102 = $101 + 40 | 0;
  __ZmiRK6b2Vec2S1_($12, $cLocal, $v1);
  {}
  SAFE_HEAP_STORE($102 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($102 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $103 = $0;
  $104 = $103 + 40 | 0;
  +__ZN6b2Vec29NormalizeEv($104);
  $105 = $0;
  $106 = $105 + 48 | 0;
  {}
  SAFE_HEAP_STORE($106 | 0, SAFE_HEAP_LOAD($v1 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($106 + 4 | 0, SAFE_HEAP_LOAD($v1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $107 = $0;
  $108 = $3;
  $109 = $108 + 12 | 0;
  {}
  SAFE_HEAP_STORE($107 | 0, SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($107 + 4 | 0, SAFE_HEAP_LOAD($109 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $110 = $0;
  $111 = $110 + 16 | 0;
  SAFE_HEAP_STORE($111 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $112 = $u2;
 $113 = $112 <= 0.0;
 if ($113) {
  $114 = +__Z17b2DistanceSquaredRK6b2Vec2S1_($cLocal, $v2);
  $115 = $radius;
  $116 = $radius;
  $117 = $115 * $116;
  $118 = $114 > $117;
  if ($118) {
   STACKTOP = sp;
   return;
  }
  $119 = $0;
  $120 = $119 + 60 | 0;
  SAFE_HEAP_STORE($120 | 0, 1 | 0, 4);
  $121 = $0;
  $122 = $121 + 56 | 0;
  SAFE_HEAP_STORE($122 | 0, 1 | 0, 4);
  $123 = $0;
  $124 = $123 + 40 | 0;
  __ZmiRK6b2Vec2S1_($13, $cLocal, $v2);
  {}
  SAFE_HEAP_STORE($124 | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($124 + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $125 = $0;
  $126 = $125 + 40 | 0;
  +__ZN6b2Vec29NormalizeEv($126);
  $127 = $0;
  $128 = $127 + 48 | 0;
  {}
  SAFE_HEAP_STORE($128 | 0, SAFE_HEAP_LOAD($v2 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($128 + 4 | 0, SAFE_HEAP_LOAD($v2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $129 = $0;
  $130 = $3;
  $131 = $130 + 12 | 0;
  {}
  SAFE_HEAP_STORE($129 | 0, SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($129 + 4 | 0, SAFE_HEAP_LOAD($131 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $132 = $0;
  $133 = $132 + 16 | 0;
  SAFE_HEAP_STORE($133 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  __ZplRK6b2Vec2S1_($14, $v1, $v2);
  __ZmlfRK6b2Vec2($faceCenter, .5, $14);
  __ZmiRK6b2Vec2S1_($15, $cLocal, $faceCenter);
  $134 = $vertIndex1;
  $135 = $normals;
  $136 = $135 + ($134 << 3) | 0;
  $137 = +__Z5b2DotRK6b2Vec2S1_($15, $136);
  $s1 = $137;
  $138 = $s1;
  $139 = $radius;
  $140 = $138 > $139;
  if ($140) {
   STACKTOP = sp;
   return;
  }
  $141 = $0;
  $142 = $141 + 60 | 0;
  SAFE_HEAP_STORE($142 | 0, 1 | 0, 4);
  $143 = $0;
  $144 = $143 + 56 | 0;
  SAFE_HEAP_STORE($144 | 0, 1 | 0, 4);
  $145 = $0;
  $146 = $145 + 40 | 0;
  $147 = $vertIndex1;
  $148 = $normals;
  $149 = $148 + ($147 << 3) | 0;
  {}
  SAFE_HEAP_STORE($146 | 0, SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($146 + 4 | 0, SAFE_HEAP_LOAD($149 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $150 = $0;
  $151 = $150 + 48 | 0;
  {}
  SAFE_HEAP_STORE($151 | 0, SAFE_HEAP_LOAD($faceCenter | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($151 + 4 | 0, SAFE_HEAP_LOAD($faceCenter + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $152 = $0;
  $153 = $3;
  $154 = $153 + 12 | 0;
  {}
  SAFE_HEAP_STORE($152 | 0, SAFE_HEAP_LOAD($154 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($152 + 4 | 0, SAFE_HEAP_LOAD($154 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $155 = $0;
  $156 = $155 + 16 | 0;
  SAFE_HEAP_STORE($156 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    SAFE_HEAP_STORE($rem | 0, ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0) | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    SAFE_HEAP_STORE($rem | 0, $66 & $n_sroa_0_0_extract_trunc | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  SAFE_HEAP_STORE($rem | 0, 0 | $r_sroa_0_1_lcssa | 0, 4);
  SAFE_HEAP_STORE($rem + 4 | 0, $r_sroa_1_1_lcssa | 0 | 0, 4);
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZN15b2ContactSolver24SolvePositionConstraintsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $C = 0.0, $K = 0.0, $P = 0, $aA = 0.0, $aB = 0.0, $cA = 0, $cB = 0, $i = 0, $iA = 0.0, $iB = 0.0, $impulse = 0.0, $indexA = 0, $indexB = 0, $j = 0, $localCenterA = 0;
 var $localCenterB = 0, $mA = 0.0, $mB = 0.0, $minSeparation = 0.0, $normal = 0, $pc = 0, $point = 0, $pointCount = 0, $psm = 0, $rA = 0, $rB = 0, $rnA = 0.0, $rnB = 0.0, $separation = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $localCenterA = sp + 240 | 0;
 $localCenterB = sp + 224 | 0;
 $cA = sp + 200 | 0;
 $cB = sp + 184 | 0;
 $xfA = sp + 160 | 0;
 $xfB = sp + 144 | 0;
 $1 = sp + 136 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 112 | 0;
 $psm = sp + 88 | 0;
 $normal = sp + 80 | 0;
 $point = sp + 72 | 0;
 $rA = sp + 56 | 0;
 $rB = sp + 48 | 0;
 $P = sp + 16 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $0 = $this;
 $7 = $0;
 $minSeparation = 0.0;
 $i = 0;
 while (1) {
  $8 = $i;
  $9 = $7 + 48 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   break;
  }
  $12 = $7 + 36 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $i;
  $15 = $13 + ($14 * 88 | 0) | 0;
  $pc = $15;
  $16 = $pc;
  $17 = $16 + 32 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $indexA = $18;
  $19 = $pc;
  $20 = $19 + 36 | 0;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $indexB = $21;
  $22 = $pc;
  $23 = $22 + 48 | 0;
  {}
  SAFE_HEAP_STORE($localCenterA | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterA + 4 | 0, SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $24 = $pc;
  $25 = $24 + 40 | 0;
  $26 = +(+SAFE_HEAP_LOAD_D($25 | 0, 4));
  $mA = $26;
  $27 = $pc;
  $28 = $27 + 64 | 0;
  $29 = +(+SAFE_HEAP_LOAD_D($28 | 0, 4));
  $iA = $29;
  $30 = $pc;
  $31 = $30 + 56 | 0;
  {}
  SAFE_HEAP_STORE($localCenterB | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($localCenterB + 4 | 0, SAFE_HEAP_LOAD($31 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $32 = $pc;
  $33 = $32 + 44 | 0;
  $34 = +(+SAFE_HEAP_LOAD_D($33 | 0, 4));
  $mB = $34;
  $35 = $pc;
  $36 = $35 + 68 | 0;
  $37 = +(+SAFE_HEAP_LOAD_D($36 | 0, 4));
  $iB = $37;
  $38 = $pc;
  $39 = $38 + 84 | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $pointCount = $40;
  $41 = $indexA;
  $42 = $7 + 24 | 0;
  $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
  $44 = $43 + ($41 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cA | 0, SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cA + 4 | 0, SAFE_HEAP_LOAD($44 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $45 = $indexA;
  $46 = $7 + 24 | 0;
  $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
  $48 = $47 + ($45 * 12 | 0) | 0;
  $49 = $48 + 8 | 0;
  $50 = +(+SAFE_HEAP_LOAD_D($49 | 0, 4));
  $aA = $50;
  $51 = $indexB;
  $52 = $7 + 24 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + ($51 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($cB | 0, SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($cB + 4 | 0, SAFE_HEAP_LOAD($54 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $55 = $indexB;
  $56 = $7 + 24 | 0;
  $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
  $58 = $57 + ($55 * 12 | 0) | 0;
  $59 = $58 + 8 | 0;
  $60 = +(+SAFE_HEAP_LOAD_D($59 | 0, 4));
  $aB = $60;
  $j = 0;
  while (1) {
   $61 = $j;
   $62 = $pointCount;
   $63 = ($61 | 0) < ($62 | 0);
   if (!$63) {
    break;
   }
   __ZN11b2TransformC2Ev($xfA);
   __ZN11b2TransformC2Ev($xfB);
   $64 = $xfA + 8 | 0;
   $65 = $aA;
   __ZN5b2Rot3SetEf($64, $65);
   $66 = $xfB + 8 | 0;
   $67 = $aB;
   __ZN5b2Rot3SetEf($66, $67);
   $68 = $xfA + 8 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($2, $68, $localCenterA);
   __ZmiRK6b2Vec2S1_($1, $cA, $2);
   {}
   SAFE_HEAP_STORE($xfA | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($xfA + 4 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $69 = $xfB + 8 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($4, $69, $localCenterB);
   __ZmiRK6b2Vec2S1_($3, $cB, $4);
   {}
   SAFE_HEAP_STORE($xfB | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($xfB + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZN24b2PositionSolverManifoldC2Ev($psm);
   $70 = $pc;
   $71 = $j;
   __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($psm, $70, $xfA, $xfB, $71);
   {}
   SAFE_HEAP_STORE($normal | 0, SAFE_HEAP_LOAD($psm | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($normal + 4 | 0, SAFE_HEAP_LOAD($psm + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $72 = $psm + 8 | 0;
   {}
   SAFE_HEAP_STORE($point | 0, SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($point + 4 | 0, SAFE_HEAP_LOAD($72 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $73 = $psm + 16 | 0;
   $74 = +(+SAFE_HEAP_LOAD_D($73 | 0, 4));
   $separation = $74;
   __ZmiRK6b2Vec2S1_($rA, $point, $cA);
   __ZmiRK6b2Vec2S1_($rB, $point, $cB);
   $75 = $minSeparation;
   $76 = $separation;
   $77 = +__Z5b2MinIfET_S0_S0_($75, $76);
   $minSeparation = $77;
   $78 = $separation;
   $79 = $78 + .004999999888241291;
   $80 = .20000000298023224 * $79;
   $81 = +__Z7b2ClampIfET_S0_S0_S0_($80, -.20000000298023224, 0.0);
   $C = $81;
   $82 = +__Z7b2CrossRK6b2Vec2S1_($rA, $normal);
   $rnA = $82;
   $83 = +__Z7b2CrossRK6b2Vec2S1_($rB, $normal);
   $rnB = $83;
   $84 = $mA;
   $85 = $mB;
   $86 = $84 + $85;
   $87 = $iA;
   $88 = $rnA;
   $89 = $87 * $88;
   $90 = $rnA;
   $91 = $89 * $90;
   $92 = $86 + $91;
   $93 = $iB;
   $94 = $rnB;
   $95 = $93 * $94;
   $96 = $rnB;
   $97 = $95 * $96;
   $98 = $92 + $97;
   $K = $98;
   $99 = $K;
   $100 = $99 > 0.0;
   if ($100) {
    $101 = $C;
    $102 = -$101;
    $103 = $K;
    $104 = $102 / $103;
    $105 = $104;
   } else {
    $105 = 0.0;
   }
   $impulse = $105;
   $106 = $impulse;
   __ZmlfRK6b2Vec2($P, $106, $normal);
   $107 = $mA;
   __ZmlfRK6b2Vec2($5, $107, $P);
   __ZN6b2Vec2mIERKS_($cA, $5);
   $108 = $iA;
   $109 = +__Z7b2CrossRK6b2Vec2S1_($rA, $P);
   $110 = $108 * $109;
   $111 = $aA;
   $112 = $111 - $110;
   $aA = $112;
   $113 = $mB;
   __ZmlfRK6b2Vec2($6, $113, $P);
   __ZN6b2Vec2pLERKS_($cB, $6);
   $114 = $iB;
   $115 = +__Z7b2CrossRK6b2Vec2S1_($rB, $P);
   $116 = $114 * $115;
   $117 = $aB;
   $118 = $117 + $116;
   $aB = $118;
   $119 = $j;
   $120 = $119 + 1 | 0;
   $j = $120;
  }
  $121 = $indexA;
  $122 = $7 + 24 | 0;
  $123 = SAFE_HEAP_LOAD($122 | 0, 4, 0) | 0 | 0;
  $124 = $123 + ($121 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($124 | 0, SAFE_HEAP_LOAD($cA | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($124 + 4 | 0, SAFE_HEAP_LOAD($cA + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $125 = $aA;
  $126 = $indexA;
  $127 = $7 + 24 | 0;
  $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
  $129 = $128 + ($126 * 12 | 0) | 0;
  $130 = $129 + 8 | 0;
  SAFE_HEAP_STORE_D($130 | 0, +$125, 4);
  $131 = $indexB;
  $132 = $7 + 24 | 0;
  $133 = SAFE_HEAP_LOAD($132 | 0, 4, 0) | 0 | 0;
  $134 = $133 + ($131 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($134 | 0, SAFE_HEAP_LOAD($cB | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($134 + 4 | 0, SAFE_HEAP_LOAD($cB + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $135 = $aB;
  $136 = $indexB;
  $137 = $7 + 24 | 0;
  $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
  $139 = $138 + ($136 * 12 | 0) | 0;
  $140 = $139 + 8 | 0;
  SAFE_HEAP_STORE_D($140 | 0, +$135, 4);
  $141 = $i;
  $142 = $141 + 1 | 0;
  $i = $142;
 }
 $143 = $minSeparation;
 $144 = $143 >= -.014999999664723873;
 STACKTOP = sp;
 return $144 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $$04 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 36 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 $4 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 $5 = ($4 | 0) == ($first | 0);
 L1 : do {
  if ($5) {
   $$04 = $first;
  } else {
   $6 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
   $7 = $db + 4 | 0;
   $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
   $9 = ($6 | 0) == ($8 | 0);
   if ($9) {
    $$04 = $first;
   } else {
    $10 = $8 + -24 | 0;
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($2, $op, 10307);
    $11 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $12 = $11 + -24 | 0;
    __THREW__ = 0;
    invoke_vii(232, $3 | 0, $12 | 0);
    $13 = __THREW__;
    __THREW__ = 0;
    $14 = $13 & 1;
    if ($14) {
     $83 = ___cxa_find_matching_catch() | 0;
     $84 = tempRet0;
     $$2 = $84;
     $$23 = $83;
    } else {
     $15 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
     $16 = $15 & 1;
     $17 = $16 << 24 >> 24 == 0;
     $18 = $3 + 8 | 0;
     $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $20 = $3 + 1 | 0;
     $21 = $17 ? $20 : $19;
     $22 = $3 + 4 | 0;
     $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
     $24 = $15 & 255;
     $25 = $24 >>> 1;
     $26 = $17 ? $25 : $23;
     __THREW__ = 0;
     $27 = invoke_iiii(222, $2 | 0, $21 | 0, $26 | 0) | 0;
     $28 = __THREW__;
     __THREW__ = 0;
     $29 = $28 & 1;
     do {
      if ($29) {
       $85 = ___cxa_find_matching_catch() | 0;
       $86 = tempRet0;
       $$1 = $86;
       $$12 = $85;
      } else {
       {}
       SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($27 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($27 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
       $30 = $27 + 4 | 0;
       SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
       $31 = $27 + 8 | 0;
       SAFE_HEAP_STORE($31 | 0, 0 | 0, 4);
       __THREW__ = 0;
       $32 = invoke_iii(228, $1 | 0, 10212 | 0) | 0;
       $33 = __THREW__;
       __THREW__ = 0;
       $34 = $33 & 1;
       if ($34) {
        $87 = ___cxa_find_matching_catch() | 0;
        $88 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        $$1 = $88;
        $$12 = $87;
        break;
       }
       {}
       SAFE_HEAP_STORE($0 | 0, SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($0 + 4 | 0, SAFE_HEAP_LOAD($32 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($0 + 8 | 0, SAFE_HEAP_LOAD($32 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($32 | 0, 0 | 0, 4);
       $35 = $32 + 4 | 0;
       SAFE_HEAP_STORE($35 | 0, 0 | 0, 4);
       $36 = $32 + 8 | 0;
       SAFE_HEAP_STORE($36 | 0, 0 | 0, 4);
       $37 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
       $38 = $37 & 1;
       $39 = $38 << 24 >> 24 == 0;
       do {
        if ($39) {
         $40 = $10 + 1 | 0;
         SAFE_HEAP_STORE($40 >> 0 | 0, 0 | 0, 1);
         SAFE_HEAP_STORE($10 >> 0 | 0, 0 | 0, 1);
        } else {
         $41 = $8 + -16 | 0;
         $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
         SAFE_HEAP_STORE($42 >> 0 | 0, 0 | 0, 1);
         $43 = $8 + -20 | 0;
         SAFE_HEAP_STORE($43 | 0, 0 | 0, 4);
         $$pre$i$i$i = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
         $44 = $$pre$i$i$i & 1;
         $45 = $44 << 24 >> 24 == 0;
         if ($45) {
          $50 = $$pre$i$i$i;
          $59 = 10;
         } else {
          $46 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
          $47 = $46 & -2;
          $phitmp$i$i$i$i$i$i = $47 + -1 | 0;
          $48 = $46 & 255;
          $50 = $48;
          $59 = $phitmp$i$i$i$i$i$i;
         }
         $49 = $50 & 1;
         $51 = $49 << 24 >> 24 == 0;
         if ($51) {
          $52 = $50 & 255;
          $53 = $52 >>> 1;
          $54 = ($50 & 255) < 22;
          if ($54) {
           $57 = 10;
           $78 = $53;
           $89 = 1;
          } else {
           $55 = $53 + 16 | 0;
           $56 = $55 & 240;
           $phitmp$i2$i$i$i$i$i = $56 + -1 | 0;
           $57 = $phitmp$i2$i$i$i$i$i;
           $78 = $53;
           $89 = 1;
          }
         } else {
          $57 = 10;
          $78 = 0;
          $89 = 0;
         }
         $58 = ($57 | 0) == ($59 | 0);
         if (!$58) {
          $60 = ($57 | 0) == 10;
          if ($60) {
           $65 = $10 + 1 | 0;
           $66 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
           if ($89) {
            $67 = $50 & 255;
            $68 = $67 >>> 1;
            $69 = $68 + 1 | 0;
            _memcpy($65 | 0, $66 | 0, $69 | 0) | 0;
            _free($66);
           } else {
            $74 = SAFE_HEAP_LOAD($66 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($65 >> 0 | 0, $74 | 0, 1);
            _free($66);
           }
           $79 = $78 << 1;
           $80 = $79 & 255;
           SAFE_HEAP_STORE($10 >> 0 | 0, $80 | 0, 1);
           break;
          }
          $61 = $57 >>> 0 <= $59 >>> 0;
          $62 = $57 + 1 | 0;
          $63 = _malloc($62) | 0;
          $64 = ($63 | 0) == (0 | 0);
          $or$cond$i$i$i$i$i = $61 & $64;
          if (!$or$cond$i$i$i$i$i) {
           if ($89) {
            $70 = $10 + 1 | 0;
            $71 = $50 & 255;
            $72 = $71 >>> 1;
            $73 = $72 + 1 | 0;
            _memcpy($63 | 0, $70 | 0, $73 | 0) | 0;
           } else {
            $75 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
            $76 = SAFE_HEAP_LOAD($75 >> 0 | 0, 1, 0) | 0 | 0;
            SAFE_HEAP_STORE($63 >> 0 | 0, $76 | 0, 1);
            _free($75);
           }
           $77 = $62 | 1;
           SAFE_HEAP_STORE($10 | 0, $77 | 0, 4);
           SAFE_HEAP_STORE($43 | 0, $78 | 0, 4);
           SAFE_HEAP_STORE($41 | 0, $63 | 0, 4);
          }
         }
        }
       } while (0);
       {}
       SAFE_HEAP_STORE($10 | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($10 + 4 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($10 + 8 | 0, SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
       SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
       $81 = $0 + 4 | 0;
       SAFE_HEAP_STORE($81 | 0, 0 | 0, 4);
       $82 = $0 + 8 | 0;
       SAFE_HEAP_STORE($82 | 0, 0 | 0, 4);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$04 = $4;
       break L1;
      }
     } while (0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $$1;
     $$23 = $$12;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    ___resumeException($$23 | 0);
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$04 | 0;
}

function __ZN6b2BodyC2EPK9b2BodyDefP7b2World($this, $bd, $world) {
 $this = $this | 0;
 $bd = $bd | 0;
 $world = $world | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $bd;
 $2 = $world;
 $3 = $0;
 $4 = $3 + 12 | 0;
 __ZN11b2TransformC2Ev($4);
 $5 = $3 + 28 | 0;
 __ZN7b2SweepC2Ev($5);
 $6 = $3 + 64 | 0;
 __ZN6b2Vec2C2Ev($6);
 $7 = $3 + 76 | 0;
 __ZN6b2Vec2C2Ev($7);
 $8 = $1;
 $9 = $8 + 4 | 0;
 $10 = __ZNK6b2Vec27IsValidEv($9) | 0;
 if (!$10) {
  ___assert_fail(5342 | 0, 5365 | 0, 27, 5415 | 0);
 }
 $11 = $1;
 $12 = $11 + 16 | 0;
 $13 = __ZNK6b2Vec27IsValidEv($12) | 0;
 if (!$13) {
  ___assert_fail(5422 | 0, 5365 | 0, 28, 5415 | 0);
 }
 $14 = $1;
 $15 = $14 + 12 | 0;
 $16 = +(+SAFE_HEAP_LOAD_D($15 | 0, 4));
 $17 = __Z9b2IsValidf($16) | 0;
 if (!$17) {
  ___assert_fail(5451 | 0, 5365 | 0, 29, 5415 | 0);
 }
 $18 = $1;
 $19 = $18 + 24 | 0;
 $20 = +(+SAFE_HEAP_LOAD_D($19 | 0, 4));
 $21 = __Z9b2IsValidf($20) | 0;
 if (!$21) {
  ___assert_fail(5472 | 0, 5365 | 0, 30, 5415 | 0);
 }
 $22 = $1;
 $23 = $22 + 32 | 0;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 $25 = __Z9b2IsValidf($24) | 0;
 if (!$25) {
  ___assert_fail(5503 | 0, 5365 | 0, 31, 5415 | 0);
 }
 $26 = $1;
 $27 = $26 + 32 | 0;
 $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
 $29 = $28 >= 0.0;
 if (!$29) {
  ___assert_fail(5503 | 0, 5365 | 0, 31, 5415 | 0);
 }
 $30 = $1;
 $31 = $30 + 28 | 0;
 $32 = +(+SAFE_HEAP_LOAD_D($31 | 0, 4));
 $33 = __Z9b2IsValidf($32) | 0;
 if (!$33) {
  ___assert_fail(5563 | 0, 5365 | 0, 32, 5415 | 0);
 }
 $34 = $1;
 $35 = $34 + 28 | 0;
 $36 = +(+SAFE_HEAP_LOAD_D($35 | 0, 4));
 $37 = $36 >= 0.0;
 if (!$37) {
  ___assert_fail(5563 | 0, 5365 | 0, 32, 5415 | 0);
 }
 $38 = $3 + 4 | 0;
 SAFE_HEAP_STORE($38 | 0, 0 | 0, 2);
 $39 = $1;
 $40 = $39 + 39 | 0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $41 & 1;
 if ($42) {
  $43 = $3 + 4 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 2, 0) | 0 | 0;
  $45 = $44 & 65535;
  $46 = $45 | 8;
  $47 = $46 & 65535;
  SAFE_HEAP_STORE($43 | 0, $47 | 0, 2);
 }
 $48 = $1;
 $49 = $48 + 38 | 0;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 1;
 if ($51) {
  $52 = $3 + 4 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 2, 0) | 0 | 0;
  $54 = $53 & 65535;
  $55 = $54 | 16;
  $56 = $55 & 65535;
  SAFE_HEAP_STORE($52 | 0, $56 | 0, 2);
 }
 $57 = $1;
 $58 = $57 + 36 | 0;
 $59 = SAFE_HEAP_LOAD($58 >> 0 | 0, 1, 0) | 0 | 0;
 $60 = $59 & 1;
 if ($60) {
  $61 = $3 + 4 | 0;
  $62 = SAFE_HEAP_LOAD($61 | 0, 2, 0) | 0 | 0;
  $63 = $62 & 65535;
  $64 = $63 | 4;
  $65 = $64 & 65535;
  SAFE_HEAP_STORE($61 | 0, $65 | 0, 2);
 }
 $66 = $1;
 $67 = $66 + 37 | 0;
 $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
 $69 = $68 & 1;
 if ($69) {
  $70 = $3 + 4 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 2, 0) | 0 | 0;
  $72 = $71 & 65535;
  $73 = $72 | 2;
  $74 = $73 & 65535;
  SAFE_HEAP_STORE($70 | 0, $74 | 0, 2);
 }
 $75 = $1;
 $76 = $75 + 40 | 0;
 $77 = SAFE_HEAP_LOAD($76 >> 0 | 0, 1, 0) | 0 | 0;
 $78 = $77 & 1;
 if ($78) {
  $79 = $3 + 4 | 0;
  $80 = SAFE_HEAP_LOAD($79 | 0, 2, 0) | 0 | 0;
  $81 = $80 & 65535;
  $82 = $81 | 32;
  $83 = $82 & 65535;
  SAFE_HEAP_STORE($79 | 0, $83 | 0, 2);
 }
 $84 = $2;
 $85 = $3 + 88 | 0;
 SAFE_HEAP_STORE($85 | 0, $84 | 0, 4);
 $86 = $3 + 12 | 0;
 $87 = $1;
 $88 = $87 + 4 | 0;
 {}
 SAFE_HEAP_STORE($86 | 0, SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($86 + 4 | 0, SAFE_HEAP_LOAD($88 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $89 = $3 + 12 | 0;
 $90 = $89 + 8 | 0;
 $91 = $1;
 $92 = $91 + 12 | 0;
 $93 = +(+SAFE_HEAP_LOAD_D($92 | 0, 4));
 __ZN5b2Rot3SetEf($90, $93);
 $94 = $3 + 28 | 0;
 __ZN6b2Vec27SetZeroEv($94);
 $95 = $3 + 28 | 0;
 $96 = $95 + 8 | 0;
 $97 = $3 + 12 | 0;
 {}
 SAFE_HEAP_STORE($96 | 0, SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($96 + 4 | 0, SAFE_HEAP_LOAD($97 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $98 = $3 + 28 | 0;
 $99 = $98 + 16 | 0;
 $100 = $3 + 12 | 0;
 {}
 SAFE_HEAP_STORE($99 | 0, SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($99 + 4 | 0, SAFE_HEAP_LOAD($100 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $101 = $1;
 $102 = $101 + 12 | 0;
 $103 = +(+SAFE_HEAP_LOAD_D($102 | 0, 4));
 $104 = $3 + 28 | 0;
 $105 = $104 + 24 | 0;
 SAFE_HEAP_STORE_D($105 | 0, +$103, 4);
 $106 = $1;
 $107 = $106 + 12 | 0;
 $108 = +(+SAFE_HEAP_LOAD_D($107 | 0, 4));
 $109 = $3 + 28 | 0;
 $110 = $109 + 28 | 0;
 SAFE_HEAP_STORE_D($110 | 0, +$108, 4);
 $111 = $3 + 28 | 0;
 $112 = $111 + 32 | 0;
 SAFE_HEAP_STORE_D($112 | 0, +(0.0), 4);
 $113 = $3 + 108 | 0;
 SAFE_HEAP_STORE($113 | 0, 0 | 0, 4);
 $114 = $3 + 112 | 0;
 SAFE_HEAP_STORE($114 | 0, 0 | 0, 4);
 $115 = $3 + 92 | 0;
 SAFE_HEAP_STORE($115 | 0, 0 | 0, 4);
 $116 = $3 + 96 | 0;
 SAFE_HEAP_STORE($116 | 0, 0 | 0, 4);
 $117 = $3 + 64 | 0;
 $118 = $1;
 $119 = $118 + 16 | 0;
 {}
 SAFE_HEAP_STORE($117 | 0, SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($117 + 4 | 0, SAFE_HEAP_LOAD($119 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $120 = $1;
 $121 = $120 + 24 | 0;
 $122 = +(+SAFE_HEAP_LOAD_D($121 | 0, 4));
 $123 = $3 + 72 | 0;
 SAFE_HEAP_STORE_D($123 | 0, +$122, 4);
 $124 = $1;
 $125 = $124 + 28 | 0;
 $126 = +(+SAFE_HEAP_LOAD_D($125 | 0, 4));
 $127 = $3 + 132 | 0;
 SAFE_HEAP_STORE_D($127 | 0, +$126, 4);
 $128 = $1;
 $129 = $128 + 32 | 0;
 $130 = +(+SAFE_HEAP_LOAD_D($129 | 0, 4));
 $131 = $3 + 136 | 0;
 SAFE_HEAP_STORE_D($131 | 0, +$130, 4);
 $132 = $1;
 $133 = $132 + 48 | 0;
 $134 = +(+SAFE_HEAP_LOAD_D($133 | 0, 4));
 $135 = $3 + 140 | 0;
 SAFE_HEAP_STORE_D($135 | 0, +$134, 4);
 $136 = $3 + 76 | 0;
 __ZN6b2Vec27SetZeroEv($136);
 $137 = $3 + 84 | 0;
 SAFE_HEAP_STORE_D($137 | 0, +(0.0), 4);
 $138 = $3 + 144 | 0;
 SAFE_HEAP_STORE_D($138 | 0, +(0.0), 4);
 $139 = $1;
 $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $140 | 0, 4);
 $141 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $142 = ($141 | 0) == 2;
 $143 = $3 + 116 | 0;
 if ($142) {
  SAFE_HEAP_STORE_D($143 | 0, +(1.0), 4);
  $144 = $3 + 120 | 0;
  SAFE_HEAP_STORE_D($144 | 0, +(1.0), 4);
  $146 = $3 + 124 | 0;
  SAFE_HEAP_STORE_D($146 | 0, +(0.0), 4);
  $147 = $3 + 128 | 0;
  SAFE_HEAP_STORE_D($147 | 0, +(0.0), 4);
  $148 = $1;
  $149 = $148 + 44 | 0;
  $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
  $151 = $3 + 148 | 0;
  SAFE_HEAP_STORE($151 | 0, $150 | 0, 4);
  $152 = $3 + 100 | 0;
  SAFE_HEAP_STORE($152 | 0, 0 | 0, 4);
  $153 = $3 + 104 | 0;
  SAFE_HEAP_STORE($153 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  SAFE_HEAP_STORE_D($143 | 0, +(0.0), 4);
  $145 = $3 + 120 | 0;
  SAFE_HEAP_STORE_D($145 | 0, +(0.0), 4);
  $146 = $3 + 124 | 0;
  SAFE_HEAP_STORE_D($146 | 0, +(0.0), 4);
  $147 = $3 + 128 | 0;
  SAFE_HEAP_STORE_D($147 | 0, +(0.0), 4);
  $148 = $1;
  $149 = $148 + 44 | 0;
  $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
  $151 = $3 + 148 | 0;
  SAFE_HEAP_STORE($151 | 0, $150 | 0, 4);
  $152 = $3 + 100 | 0;
  SAFE_HEAP_STORE($152 | 0, 0 | 0, 4);
  $153 = $3 + 104 | 0;
  SAFE_HEAP_STORE($153 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZN9b2Simplex6Solve3Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $d123_1 = 0.0;
 var $d123_2 = 0.0, $d123_3 = 0.0, $d12_1 = 0.0, $d12_2 = 0.0, $d13_1 = 0.0, $d13_2 = 0.0, $d23_1 = 0.0, $d23_2 = 0.0, $e12 = 0, $e13 = 0, $e23 = 0, $inv_d12 = 0.0, $inv_d123 = 0.0, $inv_d13 = 0.0, $inv_d23 = 0.0, $n123 = 0.0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $w1 = 0, $w1e12 = 0.0, $w1e13 = 0.0, $w2 = 0, $w2e12 = 0.0, $w2e23 = 0.0, $w3 = 0, $w3e13 = 0.0, $w3e23 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $w1 = sp + 120 | 0;
 $w2 = sp + 112 | 0;
 $w3 = sp + 104 | 0;
 $e12 = sp + 96 | 0;
 $e13 = sp + 72 | 0;
 $e23 = sp + 48 | 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 {}
 SAFE_HEAP_STORE($w1 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($w1 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $3 = $1 + 36 | 0;
 $4 = $3 + 16 | 0;
 {}
 SAFE_HEAP_STORE($w2 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($w2 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $5 = $1 + 72 | 0;
 $6 = $5 + 16 | 0;
 {}
 SAFE_HEAP_STORE($w3 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($w3 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
 $7 = +__Z5b2DotRK6b2Vec2S1_($w1, $e12);
 $w1e12 = $7;
 $8 = +__Z5b2DotRK6b2Vec2S1_($w2, $e12);
 $w2e12 = $8;
 $9 = $w2e12;
 $d12_1 = $9;
 $10 = $w1e12;
 $11 = -$10;
 $d12_2 = $11;
 __ZmiRK6b2Vec2S1_($e13, $w3, $w1);
 $12 = +__Z5b2DotRK6b2Vec2S1_($w1, $e13);
 $w1e13 = $12;
 $13 = +__Z5b2DotRK6b2Vec2S1_($w3, $e13);
 $w3e13 = $13;
 $14 = $w3e13;
 $d13_1 = $14;
 $15 = $w1e13;
 $16 = -$15;
 $d13_2 = $16;
 __ZmiRK6b2Vec2S1_($e23, $w3, $w2);
 $17 = +__Z5b2DotRK6b2Vec2S1_($w2, $e23);
 $w2e23 = $17;
 $18 = +__Z5b2DotRK6b2Vec2S1_($w3, $e23);
 $w3e23 = $18;
 $19 = $w3e23;
 $d23_1 = $19;
 $20 = $w2e23;
 $21 = -$20;
 $d23_2 = $21;
 $22 = +__Z7b2CrossRK6b2Vec2S1_($e12, $e13);
 $n123 = $22;
 $23 = $n123;
 $24 = +__Z7b2CrossRK6b2Vec2S1_($w2, $w3);
 $25 = $23 * $24;
 $d123_1 = $25;
 $26 = $n123;
 $27 = +__Z7b2CrossRK6b2Vec2S1_($w3, $w1);
 $28 = $26 * $27;
 $d123_2 = $28;
 $29 = $n123;
 $30 = +__Z7b2CrossRK6b2Vec2S1_($w1, $w2);
 $31 = $29 * $30;
 $d123_3 = $31;
 $32 = $d12_2;
 $33 = $32 <= 0.0;
 $34 = $d13_2;
 $35 = $34 <= 0.0;
 $or$cond = $33 & $35;
 if ($or$cond) {
  $36 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($36 | 0, +(1.0), 4);
  $37 = $1 + 108 | 0;
  SAFE_HEAP_STORE($37 | 0, 1 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $38 = $d12_1;
 $39 = $38 > 0.0;
 $40 = $d12_2;
 $41 = $40 > 0.0;
 $or$cond3 = $39 & $41;
 $42 = $d123_3;
 $43 = $42 <= 0.0;
 $or$cond5 = $or$cond3 & $43;
 if ($or$cond5) {
  $44 = $d12_1;
  $45 = $d12_2;
  $46 = $44 + $45;
  $47 = 1.0 / $46;
  $inv_d12 = $47;
  $48 = $d12_1;
  $49 = $inv_d12;
  $50 = $48 * $49;
  $51 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($51 | 0, +$50, 4);
  $52 = $d12_2;
  $53 = $inv_d12;
  $54 = $52 * $53;
  $55 = $1 + 36 | 0;
  $56 = $55 + 24 | 0;
  SAFE_HEAP_STORE_D($56 | 0, +$54, 4);
  $57 = $1 + 108 | 0;
  SAFE_HEAP_STORE($57 | 0, 2 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $58 = $d13_1;
 $59 = $58 > 0.0;
 $60 = $d13_2;
 $61 = $60 > 0.0;
 $or$cond7 = $59 & $61;
 $62 = $d123_2;
 $63 = $62 <= 0.0;
 $or$cond9 = $or$cond7 & $63;
 if ($or$cond9) {
  $64 = $d13_1;
  $65 = $d13_2;
  $66 = $64 + $65;
  $67 = 1.0 / $66;
  $inv_d13 = $67;
  $68 = $d13_1;
  $69 = $inv_d13;
  $70 = $68 * $69;
  $71 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($71 | 0, +$70, 4);
  $72 = $d13_2;
  $73 = $inv_d13;
  $74 = $72 * $73;
  $75 = $1 + 72 | 0;
  $76 = $75 + 24 | 0;
  SAFE_HEAP_STORE_D($76 | 0, +$74, 4);
  $77 = $1 + 108 | 0;
  SAFE_HEAP_STORE($77 | 0, 2 | 0, 4);
  $78 = $1 + 36 | 0;
  $79 = $1 + 72 | 0;
  dest = $78;
  src = $79;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $80 = $d12_1;
 $81 = $80 <= 0.0;
 $82 = $d23_2;
 $83 = $82 <= 0.0;
 $or$cond11 = $81 & $83;
 if ($or$cond11) {
  $84 = $1 + 36 | 0;
  $85 = $84 + 24 | 0;
  SAFE_HEAP_STORE_D($85 | 0, +(1.0), 4);
  $86 = $1 + 108 | 0;
  SAFE_HEAP_STORE($86 | 0, 1 | 0, 4);
  $87 = $1 + 36 | 0;
  dest = $1;
  src = $87;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $88 = $d13_1;
 $89 = $88 <= 0.0;
 $90 = $d23_1;
 $91 = $90 <= 0.0;
 $or$cond13 = $89 & $91;
 if ($or$cond13) {
  $92 = $1 + 72 | 0;
  $93 = $92 + 24 | 0;
  SAFE_HEAP_STORE_D($93 | 0, +(1.0), 4);
  $94 = $1 + 108 | 0;
  SAFE_HEAP_STORE($94 | 0, 1 | 0, 4);
  $95 = $1 + 72 | 0;
  dest = $1;
  src = $95;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $96 = $d23_1;
 $97 = $96 > 0.0;
 $98 = $d23_2;
 $99 = $98 > 0.0;
 $or$cond15 = $97 & $99;
 $100 = $d123_1;
 $101 = $100 <= 0.0;
 $or$cond17 = $or$cond15 & $101;
 if ($or$cond17) {
  $102 = $d23_1;
  $103 = $d23_2;
  $104 = $102 + $103;
  $105 = 1.0 / $104;
  $inv_d23 = $105;
  $106 = $d23_1;
  $107 = $inv_d23;
  $108 = $106 * $107;
  $109 = $1 + 36 | 0;
  $110 = $109 + 24 | 0;
  SAFE_HEAP_STORE_D($110 | 0, +$108, 4);
  $111 = $d23_2;
  $112 = $inv_d23;
  $113 = $111 * $112;
  $114 = $1 + 72 | 0;
  $115 = $114 + 24 | 0;
  SAFE_HEAP_STORE_D($115 | 0, +$113, 4);
  $116 = $1 + 108 | 0;
  SAFE_HEAP_STORE($116 | 0, 2 | 0, 4);
  $117 = $1 + 72 | 0;
  dest = $1;
  src = $117;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 } else {
  $118 = $d123_1;
  $119 = $d123_2;
  $120 = $118 + $119;
  $121 = $d123_3;
  $122 = $120 + $121;
  $123 = 1.0 / $122;
  $inv_d123 = $123;
  $124 = $d123_1;
  $125 = $inv_d123;
  $126 = $124 * $125;
  $127 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($127 | 0, +$126, 4);
  $128 = $d123_2;
  $129 = $inv_d123;
  $130 = $128 * $129;
  $131 = $1 + 36 | 0;
  $132 = $131 + 24 | 0;
  SAFE_HEAP_STORE_D($132 | 0, +$130, 4);
  $133 = $d123_3;
  $134 = $inv_d123;
  $135 = $133 * $134;
  $136 = $1 + 72 | 0;
  $137 = $136 + 24 | 0;
  SAFE_HEAP_STORE_D($137 | 0, +$135, 4);
  $138 = $1 + 108 | 0;
  SAFE_HEAP_STORE($138 | 0, 3 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZN9b2Contact6UpdateEP17b2ContactListener($this, $listener) {
 $this = $this | 0;
 $listener = $listener | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0;
 var $bodyA = 0, $bodyB = 0, $i = 0, $id2 = 0, $j = 0, $mp1 = 0, $mp2 = 0, $oldManifold = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $sensor = 0, $sensorA = 0, $sensorB = 0, $shapeA = 0, $shapeB = 0, $touching = 0, $wasTouching = 0, $xfA = 0, $xfB = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $oldManifold = sp + 48 | 0;
 $id2 = sp + 8 | 0;
 $0 = $this;
 $1 = $listener;
 $2 = $0;
 $3 = $2 + 64 | 0;
 dest = $oldManifold;
 src = $3;
 stop = dest + 64 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $4 = $2 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 | 4;
 SAFE_HEAP_STORE($4 | 0, $6 | 0, 4);
 $touching = 0;
 $7 = $2 + 4 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 & 2;
 $10 = ($9 | 0) == 2;
 $11 = $10 & 1;
 $wasTouching = $11;
 $12 = $2 + 48 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = __ZNK9b2Fixture8IsSensorEv($13) | 0;
 $15 = $14 & 1;
 $sensorA = $15;
 $16 = $2 + 52 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = __ZNK9b2Fixture8IsSensorEv($17) | 0;
 $19 = $18 & 1;
 $sensorB = $19;
 $20 = $sensorA;
 $21 = $20 & 1;
 $22 = $sensorB;
 $23 = $22 & 1;
 $24 = $21 ? 1 : $23;
 $25 = $24 & 1;
 $sensor = $25;
 $26 = $2 + 48 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = __ZN9b2Fixture7GetBodyEv($27) | 0;
 $bodyA = $28;
 $29 = $2 + 52 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = __ZN9b2Fixture7GetBodyEv($30) | 0;
 $bodyB = $31;
 $32 = $bodyA;
 $33 = __ZNK6b2Body12GetTransformEv($32) | 0;
 $xfA = $33;
 $34 = $bodyB;
 $35 = __ZNK6b2Body12GetTransformEv($34) | 0;
 $xfB = $35;
 $36 = $sensor;
 $37 = $36 & 1;
 if ($37) {
  $38 = $2 + 48 | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = __ZN9b2Fixture8GetShapeEv($39) | 0;
  $shapeA = $40;
  $41 = $2 + 52 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = __ZN9b2Fixture8GetShapeEv($42) | 0;
  $shapeB = $43;
  $44 = $shapeA;
  $45 = $2 + 56 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $shapeB;
  $48 = $2 + 60 | 0;
  $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
  $50 = $xfA;
  $51 = $xfB;
  $52 = __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($44, $46, $47, $49, $50, $51) | 0;
  $53 = $52 & 1;
  $touching = $53;
  $54 = $2 + 64 | 0;
  $55 = $54 + 60 | 0;
  SAFE_HEAP_STORE($55 | 0, 0 | 0, 4);
 } else {
  $56 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
  $58 = $2 + 64 | 0;
  $59 = $xfA;
  $60 = $xfB;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($57 | 0, 255 | 0) | 0) & 255]($2, $58, $59, $60);
  $61 = $2 + 64 | 0;
  $62 = $61 + 60 | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = ($63 | 0) > 0;
  $65 = $64 & 1;
  $touching = $65;
  $i = 0;
  while (1) {
   $66 = $i;
   $67 = $2 + 64 | 0;
   $68 = $67 + 60 | 0;
   $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
   $70 = ($66 | 0) < ($69 | 0);
   if (!$70) {
    break;
   }
   $71 = $2 + 64 | 0;
   $72 = $i;
   $73 = $71 + ($72 * 20 | 0) | 0;
   $mp2 = $73;
   $74 = $mp2;
   $75 = $74 + 8 | 0;
   SAFE_HEAP_STORE_D($75 | 0, +(0.0), 4);
   $76 = $mp2;
   $77 = $76 + 12 | 0;
   SAFE_HEAP_STORE_D($77 | 0, +(0.0), 4);
   $78 = $mp2;
   $79 = $78 + 16 | 0;
   {}
   SAFE_HEAP_STORE($id2 | 0, SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0 | 0, 4);
   $j = 0;
   while (1) {
    $80 = $j;
    $81 = $oldManifold + 60 | 0;
    $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
    $83 = ($80 | 0) < ($82 | 0);
    if (!$83) {
     break;
    }
    $84 = $j;
    $85 = $oldManifold + ($84 * 20 | 0) | 0;
    $mp1 = $85;
    $86 = $mp1;
    $87 = $86 + 16 | 0;
    $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
    $89 = SAFE_HEAP_LOAD($id2 | 0, 4, 0) | 0 | 0;
    $90 = ($88 | 0) == ($89 | 0);
    if ($90) {
     label = 8;
     break;
    }
    $101 = $j;
    $102 = $101 + 1 | 0;
    $j = $102;
   }
   if ((label | 0) == 8) {
    label = 0;
    $91 = $mp1;
    $92 = $91 + 8 | 0;
    $93 = +(+SAFE_HEAP_LOAD_D($92 | 0, 4));
    $94 = $mp2;
    $95 = $94 + 8 | 0;
    SAFE_HEAP_STORE_D($95 | 0, +$93, 4);
    $96 = $mp1;
    $97 = $96 + 12 | 0;
    $98 = +(+SAFE_HEAP_LOAD_D($97 | 0, 4));
    $99 = $mp2;
    $100 = $99 + 12 | 0;
    SAFE_HEAP_STORE_D($100 | 0, +$98, 4);
   }
   $103 = $i;
   $104 = $103 + 1 | 0;
   $i = $104;
  }
  $105 = $touching;
  $106 = $105 & 1;
  $107 = $106 & 1;
  $108 = $wasTouching;
  $109 = $108 & 1;
  $110 = $109 & 1;
  $111 = ($107 | 0) != ($110 | 0);
  if ($111) {
   $112 = $bodyA;
   __ZN6b2Body8SetAwakeEb($112, 1);
   $113 = $bodyB;
   __ZN6b2Body8SetAwakeEb($113, 1);
  }
 }
 $114 = $touching;
 $115 = $114 & 1;
 $116 = $2 + 4 | 0;
 $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
 if ($115) {
  $118 = $117 | 2;
  SAFE_HEAP_STORE($116 | 0, $118 | 0, 4);
 } else {
  $119 = $117 & -3;
  SAFE_HEAP_STORE($116 | 0, $119 | 0, 4);
 }
 $120 = $wasTouching;
 $121 = $120 & 1;
 $122 = $121 & 1;
 $123 = ($122 | 0) == 0;
 if ($123) {
  $124 = $touching;
  $125 = $124 & 1;
  $126 = $125 & 1;
  $127 = ($126 | 0) == 1;
  $128 = $1;
  $129 = ($128 | 0) != (0 | 0);
  $or$cond = $127 & $129;
  if ($or$cond) {
   $130 = $1;
   $131 = SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0;
   $132 = $131 + 8 | 0;
   $133 = SAFE_HEAP_LOAD($132 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($133 | 0, 255 | 0) | 0) & 255]($130, $2);
  }
 }
 $134 = $wasTouching;
 $135 = $134 & 1;
 $136 = $135 & 1;
 $137 = ($136 | 0) == 1;
 if ($137) {
  $138 = $touching;
  $139 = $138 & 1;
  $140 = $139 & 1;
  $141 = ($140 | 0) == 0;
  $142 = $1;
  $143 = ($142 | 0) != (0 | 0);
  $or$cond3 = $141 & $143;
  if ($or$cond3) {
   $144 = $1;
   $145 = SAFE_HEAP_LOAD($144 | 0, 4, 0) | 0 | 0;
   $146 = $145 + 12 | 0;
   $147 = SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($147 | 0, 255 | 0) | 0) & 255]($144, $2);
  }
 }
 $148 = $sensor;
 $149 = $148 & 1;
 $150 = $149 & 1;
 $151 = ($150 | 0) == 0;
 if (!$151) {
  STACKTOP = sp;
  return;
 }
 $152 = $touching;
 $153 = $152 & 1;
 $154 = $1;
 $155 = ($154 | 0) != (0 | 0);
 $or$cond5 = $153 & $155;
 if (!$or$cond5) {
  STACKTOP = sp;
  return;
 }
 $156 = $1;
 $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
 $158 = $157 + 16 | 0;
 $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK($159 | 0, 255 | 0) | 0) & 255]($156, $2, $oldManifold);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $$pre$i = 0, $$pre$i4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $args = 0;
 var $args3 = 0, $first$ = 0, $t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 12 | 0;
 $args3 = sp;
 $0 = $last;
 $1 = $first;
 $2 = $0 - $1 | 0;
 $3 = ($2 | 0) > 1;
 L1 : do {
  if ($3) {
   $4 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   L3 : do {
    switch ($4 << 24 >> 24) {
    case 100:
    case 111:
     {
      $5 = $first + 1 | 0;
      $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
      $7 = $6 << 24 >> 24 == 110;
      if ($7) {
       $8 = $4 << 24 >> 24 == 111;
       $9 = $first + 2 | 0;
       if (!$8) {
        $45 = ($9 | 0) == ($last | 0);
        if ($45) {
         $$0$i = $last;
        } else {
         $46 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
         $47 = ($46 | 0) == ($9 | 0);
         if ($47) {
          $48 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
          $t$0$i = $48;
         } else {
          $t$0$i = $46;
         }
         $49 = ($t$0$i | 0) == ($9 | 0);
         if ($49) {
          $$0$i = $9;
         } else {
          $50 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
          $51 = $db + 4 | 0;
          $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
          $53 = ($50 | 0) == ($52 | 0);
          if ($53) {
           $$0$i = $9;
          } else {
           $54 = $52 + -24 | 0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($54, 0, 10521) | 0;
           $$0$i = $t$0$i;
          }
         }
        }
        $55 = ($$0$i | 0) == ($9 | 0);
        $first$ = $55 ? $first : $$0$i;
        STACKTOP = sp;
        return $first$ | 0;
       }
       $10 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9, $last, $db) | 0;
       $11 = ($10 | 0) == ($9 | 0);
       if ($11) {
        $$0 = $first;
        break L1;
       }
       $12 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10, $last, $db) | 0;
       $13 = ($12 | 0) == ($10 | 0);
       if ($13) {
        $$0 = $10;
        break L1;
       }
       $14 = $db + 4 | 0;
       $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
       $16 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
       $17 = $15;
       $18 = $16;
       $19 = $17 - $18 | 0;
       $20 = ($19 | 0) / 24 & -1;
       $21 = $20 >>> 0 < 2;
       if ($21) {
        $$0 = $12;
        break L1;
       }
       $22 = $15 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $22);
       $23 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
       $24 = $23 + -24 | 0;
       $26 = $23;
       while (1) {
        $25 = $26 + -24 | 0;
        SAFE_HEAP_STORE($14 | 0, $25 | 0, 4);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $$pre$i = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
        $27 = ($$pre$i | 0) == ($24 | 0);
        if ($27) {
         break;
        } else {
         $26 = $$pre$i;
        }
       }
       $28 = $23 + -48 | 0;
       $29 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
       $30 = $29 & 1;
       $31 = $30 << 24 >> 24 == 0;
       $32 = $args + 8 | 0;
       $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
       $34 = $args + 1 | 0;
       $35 = $31 ? $34 : $33;
       $36 = $args + 4 | 0;
       $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
       $38 = $29 & 255;
       $39 = $38 >>> 1;
       $40 = $31 ? $39 : $37;
       __THREW__ = 0;
       invoke_iiii(222, $28 | 0, $35 | 0, $40 | 0) | 0;
       $41 = __THREW__;
       __THREW__ = 0;
       $42 = $41 & 1;
       if ($42) {
        $43 = ___cxa_find_matching_catch() | 0;
        $44 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
        $$01 = $44;
        $$02 = $43;
        break L3;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
        $$0 = $12;
        break L1;
       }
      } else {
       label = 20;
      }
      break;
     }
    default:
     {
      label = 20;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 20) {
     $56 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $57 = ($56 | 0) == ($first | 0);
     if (!$57) {
      $$0 = $56;
      break L1;
     }
     $58 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $59 = ($58 | 0) == ($first | 0);
     if ($59) {
      $$0 = $first;
      break L1;
     }
     $60 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($58, $last, $db) | 0;
     $61 = ($60 | 0) == ($58 | 0);
     if ($61) {
      $$0 = $58;
      break L1;
     }
     $62 = $db + 4 | 0;
     $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
     $64 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
     $65 = $63;
     $66 = $64;
     $67 = $65 - $66 | 0;
     $68 = ($67 | 0) / 24 & -1;
     $69 = $68 >>> 0 < 2;
     if ($69) {
      $$0 = $60;
      break L1;
     }
     $70 = $63 + -24 | 0;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3, $70);
     $71 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
     $72 = $71 + -24 | 0;
     $74 = $71;
     while (1) {
      $73 = $74 + -24 | 0;
      SAFE_HEAP_STORE($62 | 0, $73 | 0, 4);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($73);
      $$pre$i4 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
      $75 = ($$pre$i4 | 0) == ($72 | 0);
      if ($75) {
       break;
      } else {
       $74 = $$pre$i4;
      }
     }
     $76 = $71 + -48 | 0;
     $77 = SAFE_HEAP_LOAD($args3 >> 0 | 0, 1, 0) | 0 | 0;
     $78 = $77 & 1;
     $79 = $78 << 24 >> 24 == 0;
     $80 = $args3 + 8 | 0;
     $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
     $82 = $args3 + 1 | 0;
     $83 = $79 ? $82 : $81;
     $84 = $args3 + 4 | 0;
     $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
     $86 = $77 & 255;
     $87 = $86 >>> 1;
     $88 = $79 ? $87 : $85;
     __THREW__ = 0;
     invoke_iiii(222, $76 | 0, $83 | 0, $88 | 0) | 0;
     $89 = __THREW__;
     __THREW__ = 0;
     $90 = $89 & 1;
     if ($90) {
      $91 = ___cxa_find_matching_catch() | 0;
      $92 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
      $$01 = $92;
      $$02 = $91;
      break;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
      $$0 = $60;
      break L1;
     }
    }
   } while (0);
   ___resumeException($$02 | 0);
  } else {
   $$0 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN15b2WorldManifold10InitializeEPK10b2ManifoldRK11b2TransformfS5_f($this, $manifold, $xfA, $radiusA, $xfB, $radiusB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $radiusA = +$radiusA;
 $xfB = $xfB | 0;
 $radiusB = +$radiusB;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $cA = 0, $cA1 = 0, $cA7 = 0, $cB = 0, $cB2 = 0, $cB6 = 0, $clipPoint = 0, $clipPoint5 = 0, $i = 0, $i4 = 0, $planePoint = 0, $planePoint3 = 0, $pointA = 0, $pointB = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pointA = sp + 272 | 0;
 $pointB = sp + 264 | 0;
 $6 = sp + 256 | 0;
 $cA = sp + 248 | 0;
 $7 = sp + 240 | 0;
 $cB = sp + 232 | 0;
 $8 = sp + 224 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 208 | 0;
 $11 = sp + 200 | 0;
 $12 = sp + 192 | 0;
 $planePoint = sp + 184 | 0;
 $clipPoint = sp + 168 | 0;
 $cA1 = sp + 160 | 0;
 $13 = sp + 152 | 0;
 $14 = sp + 144 | 0;
 $cB2 = sp + 136 | 0;
 $15 = sp + 128 | 0;
 $16 = sp + 120 | 0;
 $17 = sp + 112 | 0;
 $18 = sp + 104 | 0;
 $19 = sp + 96 | 0;
 $planePoint3 = sp + 88 | 0;
 $clipPoint5 = sp + 72 | 0;
 $cB6 = sp + 64 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 48 | 0;
 $cA7 = sp + 40 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 24 | 0;
 $24 = sp + 16 | 0;
 $25 = sp + 8 | 0;
 $26 = sp;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $radiusA;
 $4 = $xfB;
 $5 = $radiusB;
 $27 = $0;
 $28 = $1;
 $29 = $28 + 60 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = ($30 | 0) == 0;
 if ($31) {
  STACKTOP = sp;
  return;
 }
 $32 = $1;
 $33 = $32 + 56 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 switch ($34 | 0) {
 case 0:
  {
   __ZN6b2Vec23SetEff($27, 1.0, 0.0);
   $35 = $2;
   $36 = $1;
   $37 = $36 + 48 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $35, $37);
   $38 = $4;
   $39 = $1;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $38, $39);
   $40 = +__Z17b2DistanceSquaredRK6b2Vec2S1_($pointA, $pointB);
   $41 = $40 > 1.4210854715202004e-014;
   if ($41) {
    __ZmiRK6b2Vec2S1_($6, $pointB, $pointA);
    {}
    SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    +__ZN6b2Vec29NormalizeEv($27);
   }
   $42 = $3;
   __ZmlfRK6b2Vec2($7, $42, $27);
   __ZplRK6b2Vec2S1_($cA, $pointA, $7);
   $43 = $5;
   __ZmlfRK6b2Vec2($8, $43, $27);
   __ZmiRK6b2Vec2S1_($cB, $pointB, $8);
   $44 = $27 + 8 | 0;
   __ZplRK6b2Vec2S1_($10, $cA, $cB);
   __ZmlfRK6b2Vec2($9, .5, $10);
   {}
   SAFE_HEAP_STORE($44 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($44 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZmiRK6b2Vec2S1_($11, $cB, $cA);
   $45 = +__Z5b2DotRK6b2Vec2S1_($11, $27);
   $46 = $27 + 24 | 0;
   SAFE_HEAP_STORE_D($46 | 0, +$45, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $47 = $2;
   $48 = $47 + 8 | 0;
   $49 = $1;
   $50 = $49 + 40 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($12, $48, $50);
   {}
   SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $51 = $2;
   $52 = $1;
   $53 = $52 + 48 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $51, $53);
   $i = 0;
   while (1) {
    $54 = $i;
    $55 = $1;
    $56 = $55 + 60 | 0;
    $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
    $58 = ($54 | 0) < ($57 | 0);
    if (!$58) {
     break;
    }
    $59 = $4;
    $60 = $i;
    $61 = $1;
    $62 = $61 + ($60 * 20 | 0) | 0;
    __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $59, $62);
    $63 = $3;
    __ZmiRK6b2Vec2S1_($14, $clipPoint, $planePoint);
    $64 = +__Z5b2DotRK6b2Vec2S1_($14, $27);
    $65 = $63 - $64;
    __ZmlfRK6b2Vec2($13, $65, $27);
    __ZplRK6b2Vec2S1_($cA1, $clipPoint, $13);
    $66 = $5;
    __ZmlfRK6b2Vec2($15, $66, $27);
    __ZmiRK6b2Vec2S1_($cB2, $clipPoint, $15);
    $67 = $i;
    $68 = $27 + 8 | 0;
    $69 = $68 + ($67 << 3) | 0;
    __ZplRK6b2Vec2S1_($17, $cA1, $cB2);
    __ZmlfRK6b2Vec2($16, .5, $17);
    {}
    SAFE_HEAP_STORE($69 | 0, SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($69 + 4 | 0, SAFE_HEAP_LOAD($16 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    __ZmiRK6b2Vec2S1_($18, $cB2, $cA1);
    $70 = +__Z5b2DotRK6b2Vec2S1_($18, $27);
    $71 = $i;
    $72 = $27 + 24 | 0;
    $73 = $72 + ($71 << 2) | 0;
    SAFE_HEAP_STORE_D($73 | 0, +$70, 4);
    $74 = $i;
    $75 = $74 + 1 | 0;
    $i = $75;
   }
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $76 = $4;
   $77 = $76 + 8 | 0;
   $78 = $1;
   $79 = $78 + 40 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($19, $77, $79);
   {}
   SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($19 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $80 = $4;
   $81 = $1;
   $82 = $81 + 48 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint3, $80, $82);
   $i4 = 0;
   while (1) {
    $83 = $i4;
    $84 = $1;
    $85 = $84 + 60 | 0;
    $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
    $87 = ($83 | 0) < ($86 | 0);
    if (!$87) {
     break;
    }
    $88 = $2;
    $89 = $i4;
    $90 = $1;
    $91 = $90 + ($89 * 20 | 0) | 0;
    __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint5, $88, $91);
    $92 = $5;
    __ZmiRK6b2Vec2S1_($21, $clipPoint5, $planePoint3);
    $93 = +__Z5b2DotRK6b2Vec2S1_($21, $27);
    $94 = $92 - $93;
    __ZmlfRK6b2Vec2($20, $94, $27);
    __ZplRK6b2Vec2S1_($cB6, $clipPoint5, $20);
    $95 = $3;
    __ZmlfRK6b2Vec2($22, $95, $27);
    __ZmiRK6b2Vec2S1_($cA7, $clipPoint5, $22);
    $96 = $i4;
    $97 = $27 + 8 | 0;
    $98 = $97 + ($96 << 3) | 0;
    __ZplRK6b2Vec2S1_($24, $cA7, $cB6);
    __ZmlfRK6b2Vec2($23, .5, $24);
    {}
    SAFE_HEAP_STORE($98 | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($98 + 4 | 0, SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    __ZmiRK6b2Vec2S1_($25, $cA7, $cB6);
    $99 = +__Z5b2DotRK6b2Vec2S1_($25, $27);
    $100 = $i4;
    $101 = $27 + 24 | 0;
    $102 = $101 + ($100 << 2) | 0;
    SAFE_HEAP_STORE_D($102 | 0, +$99, 4);
    $103 = $i4;
    $104 = $103 + 1 | 0;
    $i4 = $104;
   }
   __ZNK6b2Vec2ngEv($26, $27);
   {}
   SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($26 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i9 = 0;
 var $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i4 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 do {
  if ($3) {
   $4 = $this + 1 | 0;
   SAFE_HEAP_STORE($4 >> 0 | 0, 0 | 0, 1);
   SAFE_HEAP_STORE($this >> 0 | 0, 0 | 0, 1);
  } else {
   $5 = $this + 8 | 0;
   $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($6 >> 0 | 0, 0 | 0, 1);
   $7 = $this + 4 | 0;
   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
   $$pre$i$i$i = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
   $8 = $$pre$i$i$i & 1;
   $9 = $8 << 24 >> 24 == 0;
   if ($9) {
    $14 = $$pre$i$i$i;
    $23 = 10;
   } else {
    $10 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
    $11 = $10 & -2;
    $phitmp$i$i$i$i$i$i = $11 + -1 | 0;
    $12 = $10 & 255;
    $14 = $12;
    $23 = $phitmp$i$i$i$i$i$i;
   }
   $13 = $14 & 1;
   $15 = $13 << 24 >> 24 == 0;
   if ($15) {
    $16 = $14 & 255;
    $17 = $16 >>> 1;
    $18 = ($14 & 255) < 22;
    if ($18) {
     $21 = 10;
     $42 = $17;
     $95 = 1;
    } else {
     $19 = $17 + 16 | 0;
     $20 = $19 & 240;
     $phitmp$i2$i$i$i$i$i = $20 + -1 | 0;
     $21 = $phitmp$i2$i$i$i$i$i;
     $42 = $17;
     $95 = 1;
    }
   } else {
    $21 = 10;
    $42 = 0;
    $95 = 0;
   }
   $22 = ($21 | 0) == ($23 | 0);
   if (!$22) {
    $24 = ($21 | 0) == 10;
    if ($24) {
     $29 = $this + 1 | 0;
     $30 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
     if ($95) {
      $31 = $14 & 255;
      $32 = $31 >>> 1;
      $33 = $32 + 1 | 0;
      _memcpy($29 | 0, $30 | 0, $33 | 0) | 0;
      _free($30);
     } else {
      $38 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
      SAFE_HEAP_STORE($29 >> 0 | 0, $38 | 0, 1);
      _free($30);
     }
     $43 = $42 << 1;
     $44 = $43 & 255;
     SAFE_HEAP_STORE($this >> 0 | 0, $44 | 0, 1);
     break;
    }
    $25 = $21 >>> 0 <= $23 >>> 0;
    $26 = $21 + 1 | 0;
    $27 = _malloc($26) | 0;
    $28 = ($27 | 0) == (0 | 0);
    $or$cond$i$i$i$i$i = $25 & $28;
    if (!$or$cond$i$i$i$i$i) {
     if ($95) {
      $34 = $this + 1 | 0;
      $35 = $14 & 255;
      $36 = $35 >>> 1;
      $37 = $36 + 1 | 0;
      _memcpy($27 | 0, $34 | 0, $37 | 0) | 0;
     } else {
      $39 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
      $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
      SAFE_HEAP_STORE($27 >> 0 | 0, $40 | 0, 1);
      _free($39);
     }
     $41 = $26 | 1;
     SAFE_HEAP_STORE($this | 0, $41 | 0, 4);
     SAFE_HEAP_STORE($7 | 0, $42 | 0, 4);
     SAFE_HEAP_STORE($5 | 0, $27 | 0, 4);
    }
   }
  }
 } while (0);
 {}
 SAFE_HEAP_STORE($this | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 4 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 8 | 0, SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $45 = $0 + 4 | 0;
 SAFE_HEAP_STORE($45 | 0, 0 | 0, 4);
 $46 = $0 + 8 | 0;
 SAFE_HEAP_STORE($46 | 0, 0 | 0, 4);
 $47 = $this + 12 | 0;
 $48 = $0 + 12 | 0;
 $49 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
 $50 = $49 & 1;
 $51 = $50 << 24 >> 24 == 0;
 do {
  if ($51) {
   $52 = $47 + 1 | 0;
   SAFE_HEAP_STORE($52 >> 0 | 0, 0 | 0, 1);
   SAFE_HEAP_STORE($47 >> 0 | 0, 0 | 0, 1);
  } else {
   $53 = $this + 20 | 0;
   $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($54 >> 0 | 0, 0 | 0, 1);
   $55 = $this + 16 | 0;
   SAFE_HEAP_STORE($55 | 0, 0 | 0, 4);
   $$pre$i$i$i2 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
   $56 = $$pre$i$i$i2 & 1;
   $57 = $56 << 24 >> 24 == 0;
   if ($57) {
    $62 = $$pre$i$i$i2;
    $71 = 10;
   } else {
    $58 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
    $59 = $58 & -2;
    $phitmp$i$i$i$i$i$i4 = $59 + -1 | 0;
    $60 = $58 & 255;
    $62 = $60;
    $71 = $phitmp$i$i$i$i$i$i4;
   }
   $61 = $62 & 1;
   $63 = $61 << 24 >> 24 == 0;
   if ($63) {
    $64 = $62 & 255;
    $65 = $64 >>> 1;
    $66 = ($62 & 255) < 22;
    if ($66) {
     $69 = 10;
     $90 = $65;
     $96 = 1;
    } else {
     $67 = $65 + 16 | 0;
     $68 = $67 & 240;
     $phitmp$i2$i$i$i$i$i7 = $68 + -1 | 0;
     $69 = $phitmp$i2$i$i$i$i$i7;
     $90 = $65;
     $96 = 1;
    }
   } else {
    $69 = 10;
    $90 = 0;
    $96 = 0;
   }
   $70 = ($69 | 0) == ($71 | 0);
   if (!$70) {
    $72 = ($69 | 0) == 10;
    if ($72) {
     $77 = $47 + 1 | 0;
     $78 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
     if ($96) {
      $79 = $62 & 255;
      $80 = $79 >>> 1;
      $81 = $80 + 1 | 0;
      _memcpy($77 | 0, $78 | 0, $81 | 0) | 0;
      _free($78);
     } else {
      $86 = SAFE_HEAP_LOAD($78 >> 0 | 0, 1, 0) | 0 | 0;
      SAFE_HEAP_STORE($77 >> 0 | 0, $86 | 0, 1);
      _free($78);
     }
     $91 = $90 << 1;
     $92 = $91 & 255;
     SAFE_HEAP_STORE($47 >> 0 | 0, $92 | 0, 1);
     break;
    }
    $73 = $69 >>> 0 <= $71 >>> 0;
    $74 = $69 + 1 | 0;
    $75 = _malloc($74) | 0;
    $76 = ($75 | 0) == (0 | 0);
    $or$cond$i$i$i$i$i9 = $73 & $76;
    if (!$or$cond$i$i$i$i$i9) {
     if ($96) {
      $82 = $47 + 1 | 0;
      $83 = $62 & 255;
      $84 = $83 >>> 1;
      $85 = $84 + 1 | 0;
      _memcpy($75 | 0, $82 | 0, $85 | 0) | 0;
     } else {
      $87 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
      $88 = SAFE_HEAP_LOAD($87 >> 0 | 0, 1, 0) | 0 | 0;
      SAFE_HEAP_STORE($75 >> 0 | 0, $88 | 0, 1);
      _free($87);
     }
     $89 = $74 | 1;
     SAFE_HEAP_STORE($47 | 0, $89 | 0, 4);
     SAFE_HEAP_STORE($55 | 0, $90 | 0, 4);
     SAFE_HEAP_STORE($53 | 0, $75 | 0, 4);
    }
   }
  }
 } while (0);
 {}
 SAFE_HEAP_STORE($47 | 0, SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($47 + 4 | 0, SAFE_HEAP_LOAD($48 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($47 + 8 | 0, SAFE_HEAP_LOAD($48 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($48 | 0, 0 | 0, 4);
 $93 = $48 + 4 | 0;
 SAFE_HEAP_STORE($93 | 0, 0 | 0, 4);
 $94 = $48 + 8 | 0;
 SAFE_HEAP_STORE($94 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $$$$i$i$i = 0, $$$$i$i$i11 = 0, $$$$i$i$i3 = 0, $$$i$i$i = 0, $$$i$i$i10 = 0, $$$i$i$i2 = 0, $$0$i$i27 = 0, $$lcssa = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__p$0$i$i26 = 0, $__p$0$ph$i$i = 0, $c$0$ph = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$1 = 0, $pe$1$pn = 0, $scevgep2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($s >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 $3 = $s + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $0 & 255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7 | 0) == 0;
 L1 : do {
  if ($8) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result, $s);
  } else {
   $9 = $s + 8 | 0;
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $11 = $s + 1 | 0;
   $12 = $2 ? $11 : $10;
   $13 = $7 >>> 0 > 11;
   $14 = $13 ? 11 : $7;
   $15 = _memcmp($12, 10439, $14) | 0;
   $16 = ($15 | 0) == 0;
   $17 = $7 >>> 0 < 11;
   $$$i$i$i = $13 & 1;
   $$$$i$i$i = $17 ? -1 : $$$i$i$i;
   $18 = $16 ? $$$$i$i$i : $15;
   $19 = ($18 | 0) == 0;
   if ($19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 11043, 70);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 11114, 12);
    break;
   }
   $20 = $7 >>> 0 > 12;
   $21 = $20 ? 12 : $7;
   $22 = _memcmp($12, 10451, $21) | 0;
   $23 = ($22 | 0) == 0;
   $24 = $7 >>> 0 < 12;
   $$$i$i$i2 = $20 & 1;
   $$$$i$i$i3 = $24 ? -1 : $$$i$i$i2;
   $25 = $23 ? $$$$i$i$i3 : $22;
   $26 = ($25 | 0) == 0;
   if ($26) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 11127, 49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 11177, 13);
    break;
   }
   $27 = _memcmp($12, 10464, $21) | 0;
   $28 = ($27 | 0) == 0;
   $29 = $28 ? $$$$i$i$i3 : $27;
   $30 = ($29 | 0) == 0;
   if ($30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 11191, 49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 11241, 13);
    break;
   }
   $31 = $7 >>> 0 > 13;
   $32 = $31 ? 13 : $7;
   $33 = _memcmp($12, 10477, $32) | 0;
   $34 = ($33 | 0) == 0;
   $35 = $7 >>> 0 < 13;
   $$$i$i$i10 = $31 & 1;
   $$$$i$i$i11 = $35 ? -1 : $$$i$i$i10;
   $36 = $34 ? $$$$i$i$i11 : $33;
   $37 = ($36 | 0) == 0;
   if ($37) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s, 11255, 50);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result, 11306, 14);
    break;
   }
   $38 = $12 + $7 | 0;
   $$sum = $7 + -1 | 0;
   $39 = $12 + $$sum | 0;
   $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
   $41 = $40 << 24 >> 24 == 62;
   L16 : do {
    if ($41) {
     $c$0$ph = 1;
     $pe$0$ph = $38;
     L17 : while (1) {
      $pe$0 = $pe$0$ph;
      L19 : while (1) {
       $42 = $pe$0 + -1 | 0;
       $43 = ($42 | 0) == ($12 | 0);
       if ($43) {
        break L17;
       }
       $46 = $pe$0 + -2 | 0;
       $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
       switch ($47 << 24 >> 24) {
       case 60:
        {
         $$lcssa = $46;
         $$lcssa32 = $42;
         label = 16;
         break L19;
         break;
        }
       case 62:
        {
         $$lcssa33 = $42;
         label = 17;
         break L19;
         break;
        }
       default:
        {
         $pe$0 = $42;
        }
       }
      }
      if ((label | 0) == 16) {
       label = 0;
       $48 = $c$0$ph + -1 | 0;
       $49 = ($48 | 0) == 0;
       if ($49) {
        $pe$1 = $$lcssa;
        break L16;
       } else {
        $c$0$ph = $48;
        $pe$0$ph = $$lcssa32;
        continue;
       }
      } else if ((label | 0) == 17) {
       label = 0;
       $50 = $c$0$ph + 1 | 0;
       $c$0$ph = $50;
       $pe$0$ph = $$lcssa33;
       continue;
      }
     }
     SAFE_HEAP_STORE($agg$result | 0, 0 | 0, 4);
     $44 = $agg$result + 4 | 0;
     SAFE_HEAP_STORE($44 | 0, 0 | 0, 4);
     $45 = $agg$result + 8 | 0;
     SAFE_HEAP_STORE($45 | 0, 0 | 0, 4);
     break L1;
    } else {
     $pe$1 = $38;
    }
   } while (0);
   $pe$1$pn = $pe$1;
   while (1) {
    $p0$0 = $pe$1$pn + -1 | 0;
    $51 = ($p0$0 | 0) == ($12 | 0);
    if ($51) {
     $p0$1 = $12;
     break;
    }
    $52 = SAFE_HEAP_LOAD($p0$0 >> 0 | 0, 1, 0) | 0 | 0;
    $53 = $52 << 24 >> 24 == 58;
    if ($53) {
     $p0$1 = $pe$1$pn;
     break;
    } else {
     $pe$1$pn = $p0$0;
    }
   }
   $54 = $p0$1;
   $55 = $pe$1;
   $56 = $55 - $54 | 0;
   $57 = $56 >>> 0 > 4294967279;
   if ($57) {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
   }
   $58 = $56 >>> 0 < 11;
   if ($58) {
    $59 = $56 << 1;
    $60 = $59 & 255;
    SAFE_HEAP_STORE($agg$result >> 0 | 0, $60 | 0, 1);
    $61 = $agg$result + 1 | 0;
    $__p$0$ph$i$i = $61;
   } else {
    $62 = $56 + 16 | 0;
    $63 = $62 & -16;
    $64 = _malloc($63) | 0;
    $65 = $agg$result + 8 | 0;
    SAFE_HEAP_STORE($65 | 0, $64 | 0, 4);
    $66 = $63 | 1;
    SAFE_HEAP_STORE($agg$result | 0, $66 | 0, 4);
    $67 = $agg$result + 4 | 0;
    SAFE_HEAP_STORE($67 | 0, $56 | 0, 4);
    $__p$0$ph$i$i = $64;
   }
   $68 = ($p0$1 | 0) == ($pe$1 | 0);
   if (!$68) {
    $$0$i$i27 = $p0$1;
    $__p$0$i$i26 = $__p$0$ph$i$i;
    while (1) {
     $69 = SAFE_HEAP_LOAD($$0$i$i27 >> 0 | 0, 1, 0) | 0 | 0;
     SAFE_HEAP_STORE($__p$0$i$i26 >> 0 | 0, $69 | 0, 1);
     $70 = $$0$i$i27 + 1 | 0;
     $71 = $__p$0$i$i26 + 1 | 0;
     $72 = ($70 | 0) == ($pe$1 | 0);
     if ($72) {
      break;
     } else {
      $$0$i$i27 = $70;
      $__p$0$i$i26 = $71;
     }
    }
   }
   $scevgep2$i$i = $__p$0$ph$i$i + $56 | 0;
   SAFE_HEAP_STORE($scevgep2$i$i >> 0 | 0, 0 | 0, 1);
  }
 } while (0);
 return;
}

function __ZN9b2Simplex9ReadCacheEPK14b2SimplexCachePK15b2DistanceProxyRK11b2TransformS5_S8_($this, $cache, $proxyA, $transformA, $proxyB, $transformB) {
 $this = $this | 0;
 $cache = $cache | 0;
 $proxyA = $proxyA | 0;
 $transformA = $transformA | 0;
 $proxyB = $proxyB | 0;
 $transformB = $transformB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $metric1 = 0.0, $metric2 = 0.0, $or$cond = 0, $v = 0, $v1 = 0, $vertices = 0, $wALocal = 0;
 var $wALocal2 = 0, $wBLocal = 0, $wBLocal3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $wALocal = sp + 88 | 0;
 $wBLocal = sp + 80 | 0;
 $6 = sp + 72 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 56 | 0;
 $wALocal2 = sp + 32 | 0;
 $wBLocal3 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 8 | 0;
 $11 = sp;
 $0 = $this;
 $1 = $cache;
 $2 = $proxyA;
 $3 = $transformA;
 $4 = $proxyB;
 $5 = $transformB;
 $12 = $0;
 $13 = $1;
 $14 = $13 + 4 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 2, 0) | 0 | 0;
 $16 = $15 & 65535;
 $17 = ($16 | 0) <= 3;
 if (!$17) {
  ___assert_fail(8166 | 0, 4438 | 0, 102, 8184 | 0);
 }
 $18 = $1;
 $19 = $18 + 4 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 2, 0) | 0 | 0;
 $21 = $20 & 65535;
 $22 = $12 + 108 | 0;
 SAFE_HEAP_STORE($22 | 0, $21 | 0, 4);
 $vertices = $12;
 $i = 0;
 while (1) {
  $23 = $i;
  $24 = $12 + 108 | 0;
  $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
  $26 = ($23 | 0) < ($25 | 0);
  if (!$26) {
   break;
  }
  $27 = $vertices;
  $28 = $i;
  $29 = $27 + ($28 * 36 | 0) | 0;
  $v = $29;
  $30 = $i;
  $31 = $1;
  $32 = $31 + 6 | 0;
  $33 = $32 + $30 | 0;
  $34 = SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 0;
  $35 = $34 & 255;
  $36 = $v;
  $37 = $36 + 28 | 0;
  SAFE_HEAP_STORE($37 | 0, $35 | 0, 4);
  $38 = $i;
  $39 = $1;
  $40 = $39 + 9 | 0;
  $41 = $40 + $38 | 0;
  $42 = SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0;
  $43 = $42 & 255;
  $44 = $v;
  $45 = $44 + 32 | 0;
  SAFE_HEAP_STORE($45 | 0, $43 | 0, 4);
  $46 = $2;
  $47 = $v;
  $48 = $47 + 28 | 0;
  $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
  $50 = __ZNK15b2DistanceProxy9GetVertexEi($46, $49) | 0;
  {}
  SAFE_HEAP_STORE($wALocal | 0, SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($wALocal + 4 | 0, SAFE_HEAP_LOAD($50 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $51 = $4;
  $52 = $v;
  $53 = $52 + 32 | 0;
  $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
  $55 = __ZNK15b2DistanceProxy9GetVertexEi($51, $54) | 0;
  {}
  SAFE_HEAP_STORE($wBLocal | 0, SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($wBLocal + 4 | 0, SAFE_HEAP_LOAD($55 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $56 = $v;
  $57 = $3;
  __Z5b2MulRK11b2TransformRK6b2Vec2($6, $57, $wALocal);
  {}
  SAFE_HEAP_STORE($56 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($56 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $58 = $v;
  $59 = $58 + 8 | 0;
  $60 = $5;
  __Z5b2MulRK11b2TransformRK6b2Vec2($7, $60, $wBLocal);
  {}
  SAFE_HEAP_STORE($59 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($59 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $61 = $v;
  $62 = $61 + 16 | 0;
  $63 = $v;
  $64 = $63 + 8 | 0;
  $65 = $v;
  __ZmiRK6b2Vec2S1_($8, $64, $65);
  {}
  SAFE_HEAP_STORE($62 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($62 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $66 = $v;
  $67 = $66 + 24 | 0;
  SAFE_HEAP_STORE_D($67 | 0, +(0.0), 4);
  $68 = $i;
  $69 = $68 + 1 | 0;
  $i = $69;
 }
 $70 = $12 + 108 | 0;
 $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
 $72 = ($71 | 0) > 1;
 do {
  if ($72) {
   $73 = $1;
   $74 = +(+SAFE_HEAP_LOAD_D($73 | 0, 4));
   $metric1 = $74;
   $75 = +__ZNK9b2Simplex9GetMetricEv($12);
   $metric2 = $75;
   $76 = $metric2;
   $77 = $metric1;
   $78 = .5 * $77;
   $79 = $76 < $78;
   if (!$79) {
    $80 = $metric1;
    $81 = 2.0 * $80;
    $82 = $metric2;
    $83 = $81 < $82;
    $84 = $metric2;
    $85 = $84 < 1.1920928955078125e-007;
    $or$cond = $83 | $85;
    if (!$or$cond) {
     break;
    }
   }
   $86 = $12 + 108 | 0;
   SAFE_HEAP_STORE($86 | 0, 0 | 0, 4);
  }
 } while (0);
 $87 = $12 + 108 | 0;
 $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
 $89 = ($88 | 0) == 0;
 if (!$89) {
  STACKTOP = sp;
  return;
 }
 $90 = $vertices;
 $v1 = $90;
 $91 = $v1;
 $92 = $91 + 28 | 0;
 SAFE_HEAP_STORE($92 | 0, 0 | 0, 4);
 $93 = $v1;
 $94 = $93 + 32 | 0;
 SAFE_HEAP_STORE($94 | 0, 0 | 0, 4);
 $95 = $2;
 $96 = __ZNK15b2DistanceProxy9GetVertexEi($95, 0) | 0;
 {}
 SAFE_HEAP_STORE($wALocal2 | 0, SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($wALocal2 + 4 | 0, SAFE_HEAP_LOAD($96 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $97 = $4;
 $98 = __ZNK15b2DistanceProxy9GetVertexEi($97, 0) | 0;
 {}
 SAFE_HEAP_STORE($wBLocal3 | 0, SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($wBLocal3 + 4 | 0, SAFE_HEAP_LOAD($98 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $99 = $v1;
 $100 = $3;
 __Z5b2MulRK11b2TransformRK6b2Vec2($9, $100, $wALocal2);
 {}
 SAFE_HEAP_STORE($99 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($99 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $101 = $v1;
 $102 = $101 + 8 | 0;
 $103 = $5;
 __Z5b2MulRK11b2TransformRK6b2Vec2($10, $103, $wBLocal3);
 {}
 SAFE_HEAP_STORE($102 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($102 + 4 | 0, SAFE_HEAP_LOAD($10 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $104 = $v1;
 $105 = $104 + 16 | 0;
 $106 = $v1;
 $107 = $106 + 8 | 0;
 $108 = $v1;
 __ZmiRK6b2Vec2S1_($11, $107, $108);
 {}
 SAFE_HEAP_STORE($105 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($105 + 4 | 0, SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $109 = $v1;
 $110 = $109 + 24 | 0;
 SAFE_HEAP_STORE_D($110 | 0, +(1.0), 4);
 $111 = $12 + 108 | 0;
 SAFE_HEAP_STORE($111 | 0, 1 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body13ResetMassDataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $f = 0, $localCenter = 0;
 var $massData = 0, $oldCenter = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $localCenter = sp + 64 | 0;
 $massData = sp + 40 | 0;
 $1 = sp + 32 | 0;
 $oldCenter = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 $6 = $5 + 116 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +(0.0), 4);
 $7 = $5 + 120 | 0;
 SAFE_HEAP_STORE_D($7 | 0, +(0.0), 4);
 $8 = $5 + 124 | 0;
 SAFE_HEAP_STORE_D($8 | 0, +(0.0), 4);
 $9 = $5 + 128 | 0;
 SAFE_HEAP_STORE_D($9 | 0, +(0.0), 4);
 $10 = $5 + 28 | 0;
 __ZN6b2Vec27SetZeroEv($10);
 $11 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $12 = ($11 | 0) == 0;
 if (!$12) {
  $13 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $14 = ($13 | 0) == 1;
  if (!$14) {
   $26 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   $27 = ($26 | 0) == 2;
   if (!$27) {
    ___assert_fail(5650 | 0, 5365 | 0, 304, 5675 | 0);
   }
   {}
   SAFE_HEAP_STORE($localCenter | 0, SAFE_HEAP_LOAD(912 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localCenter + 4 | 0, SAFE_HEAP_LOAD(912 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $28 = $5 + 100 | 0;
   $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
   $f = $29;
   while (1) {
    $30 = $f;
    $31 = ($30 | 0) != (0 | 0);
    if (!$31) {
     break;
    }
    $32 = $f;
    $33 = +(+SAFE_HEAP_LOAD_D($32 | 0, 4));
    $34 = $33 == 0.0;
    if (!$34) {
     __ZN10b2MassDataC2Ev($massData);
     $35 = $f;
     __ZNK9b2Fixture11GetMassDataEP10b2MassData($35, $massData);
     $36 = +(+SAFE_HEAP_LOAD_D($massData | 0, 4));
     $37 = $5 + 116 | 0;
     $38 = +(+SAFE_HEAP_LOAD_D($37 | 0, 4));
     $39 = $38 + $36;
     SAFE_HEAP_STORE_D($37 | 0, +$39, 4);
     $40 = +(+SAFE_HEAP_LOAD_D($massData | 0, 4));
     $41 = $massData + 4 | 0;
     __ZmlfRK6b2Vec2($1, $40, $41);
     __ZN6b2Vec2pLERKS_($localCenter, $1);
     $42 = $massData + 12 | 0;
     $43 = +(+SAFE_HEAP_LOAD_D($42 | 0, 4));
     $44 = $5 + 124 | 0;
     $45 = +(+SAFE_HEAP_LOAD_D($44 | 0, 4));
     $46 = $45 + $43;
     SAFE_HEAP_STORE_D($44 | 0, +$46, 4);
    }
    $47 = $f;
    $48 = $47 + 4 | 0;
    $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
    $f = $49;
   }
   $50 = $5 + 116 | 0;
   $51 = +(+SAFE_HEAP_LOAD_D($50 | 0, 4));
   $52 = $51 > 0.0;
   $53 = $5 + 116 | 0;
   if ($52) {
    $54 = +(+SAFE_HEAP_LOAD_D($53 | 0, 4));
    $55 = 1.0 / $54;
    $56 = $5 + 120 | 0;
    SAFE_HEAP_STORE_D($56 | 0, +$55, 4);
    $57 = $5 + 120 | 0;
    $58 = +(+SAFE_HEAP_LOAD_D($57 | 0, 4));
    __ZN6b2Vec2mLEf($localCenter, $58);
   } else {
    SAFE_HEAP_STORE_D($53 | 0, +(1.0), 4);
    $59 = $5 + 120 | 0;
    SAFE_HEAP_STORE_D($59 | 0, +(1.0), 4);
   }
   $60 = $5 + 124 | 0;
   $61 = +(+SAFE_HEAP_LOAD_D($60 | 0, 4));
   $62 = $61 > 0.0;
   do {
    if ($62) {
     $63 = $5 + 4 | 0;
     $64 = SAFE_HEAP_LOAD($63 | 0, 2, 0) | 0 | 0;
     $65 = $64 & 65535;
     $66 = $65 & 16;
     $67 = ($66 | 0) == 0;
     if ($67) {
      $68 = $5 + 116 | 0;
      $69 = +(+SAFE_HEAP_LOAD_D($68 | 0, 4));
      $70 = +__Z5b2DotRK6b2Vec2S1_($localCenter, $localCenter);
      $71 = $69 * $70;
      $72 = $5 + 124 | 0;
      $73 = +(+SAFE_HEAP_LOAD_D($72 | 0, 4));
      $74 = $73 - $71;
      SAFE_HEAP_STORE_D($72 | 0, +$74, 4);
      $75 = $5 + 124 | 0;
      $76 = +(+SAFE_HEAP_LOAD_D($75 | 0, 4));
      $77 = $76 > 0.0;
      if ($77) {
       $78 = $5 + 124 | 0;
       $79 = +(+SAFE_HEAP_LOAD_D($78 | 0, 4));
       $80 = 1.0 / $79;
       $81 = $5 + 128 | 0;
       SAFE_HEAP_STORE_D($81 | 0, +$80, 4);
       break;
      } else {
       ___assert_fail(5689 | 0, 5365 | 0, 339, 5675 | 0);
      }
     } else {
      label = 19;
     }
    } else {
     label = 19;
    }
   } while (0);
   if ((label | 0) == 19) {
    $82 = $5 + 124 | 0;
    SAFE_HEAP_STORE_D($82 | 0, +(0.0), 4);
    $83 = $5 + 128 | 0;
    SAFE_HEAP_STORE_D($83 | 0, +(0.0), 4);
   }
   $84 = $5 + 28 | 0;
   $85 = $84 + 16 | 0;
   {}
   SAFE_HEAP_STORE($oldCenter | 0, SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($oldCenter + 4 | 0, SAFE_HEAP_LOAD($85 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $86 = $5 + 28 | 0;
   {}
   SAFE_HEAP_STORE($86 | 0, SAFE_HEAP_LOAD($localCenter | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($86 + 4 | 0, SAFE_HEAP_LOAD($localCenter + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $87 = $5 + 28 | 0;
   $88 = $87 + 8 | 0;
   $89 = $5 + 28 | 0;
   $90 = $89 + 16 | 0;
   $91 = $5 + 12 | 0;
   $92 = $5 + 28 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($2, $91, $92);
   {}
   SAFE_HEAP_STORE($90 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($90 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   {}
   SAFE_HEAP_STORE($88 | 0, SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($88 + 4 | 0, SAFE_HEAP_LOAD($90 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $93 = $5 + 64 | 0;
   $94 = $5 + 72 | 0;
   $95 = +(+SAFE_HEAP_LOAD_D($94 | 0, 4));
   $96 = $5 + 28 | 0;
   $97 = $96 + 16 | 0;
   __ZmiRK6b2Vec2S1_($4, $97, $oldCenter);
   __Z7b2CrossfRK6b2Vec2($3, $95, $4);
   __ZN6b2Vec2pLERKS_($93, $3);
   STACKTOP = sp;
   return;
  }
 }
 $15 = $5 + 28 | 0;
 $16 = $15 + 8 | 0;
 $17 = $5 + 12 | 0;
 {}
 SAFE_HEAP_STORE($16 | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($16 + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $18 = $5 + 28 | 0;
 $19 = $18 + 16 | 0;
 $20 = $5 + 12 | 0;
 {}
 SAFE_HEAP_STORE($19 | 0, SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($19 + 4 | 0, SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $21 = $5 + 28 | 0;
 $22 = $21 + 28 | 0;
 $23 = +(+SAFE_HEAP_LOAD_D($22 | 0, 4));
 $24 = $5 + 28 | 0;
 $25 = $24 + 24 | 0;
 SAFE_HEAP_STORE_D($25 | 0, +$23, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__127__insertion_sort_incompleteIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEbT0_SA_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 44 | 0;
 $__t = sp + 8 | 0;
 $1 = $__first;
 $2 = $__last;
 $3 = $__comp;
 $4 = $2;
 $5 = $1;
 $6 = $4;
 $7 = $5;
 $8 = $6 - $7 | 0;
 $9 = ($8 | 0) / 8 & -1;
 switch ($9 | 0) {
 case 1:
 case 0:
  {
   $$expand_i1_val = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $84 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $84 | 0;
   break;
  }
 case 2:
  {
   $10 = $3;
   $11 = $2;
   $12 = $11 + -8 | 0;
   $2 = $12;
   $13 = $1;
   $14 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($10, $12, $13) | 0;
   if ($14) {
    $15 = $1;
    $16 = $2;
    __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($15, $16);
   }
   $$expand_i1_val2 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $84 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $84 | 0;
   break;
  }
 case 3:
  {
   $17 = $1;
   $18 = $1;
   $19 = $18 + 8 | 0;
   $20 = $2;
   $21 = $20 + -8 | 0;
   $2 = $21;
   $22 = $3;
   __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($17, $19, $21, $22) | 0;
   $$expand_i1_val4 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val4 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $84 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $84 | 0;
   break;
  }
 case 4:
  {
   $23 = $1;
   $24 = $1;
   $25 = $24 + 8 | 0;
   $26 = $1;
   $27 = $26 + 16 | 0;
   $28 = $2;
   $29 = $28 + -8 | 0;
   $2 = $29;
   $30 = $3;
   __ZNSt3__17__sort4IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_T_($23, $25, $27, $29, $30) | 0;
   $$expand_i1_val6 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val6 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $84 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $84 | 0;
   break;
  }
 case 5:
  {
   $31 = $1;
   $32 = $1;
   $33 = $32 + 8 | 0;
   $34 = $1;
   $35 = $34 + 16 | 0;
   $36 = $1;
   $37 = $36 + 24 | 0;
   $38 = $2;
   $39 = $38 + -8 | 0;
   $2 = $39;
   $40 = $3;
   __ZNSt3__17__sort5IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_SA_T_($31, $33, $35, $37, $39, $40) | 0;
   $$expand_i1_val8 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val8 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $84 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $84 | 0;
   break;
  }
 default:
  {
   $41 = $1;
   $42 = $41 + 16 | 0;
   $__j = $42;
   $43 = $1;
   $44 = $1;
   $45 = $44 + 8 | 0;
   $46 = $__j;
   $47 = $3;
   __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($43, $45, $46, $47) | 0;
   $__limit = 8;
   $__count = 0;
   $48 = $__j;
   $49 = $48 + 8 | 0;
   $__i = $49;
   while (1) {
    $50 = $__i;
    $51 = $2;
    $52 = ($50 | 0) != ($51 | 0);
    if (!$52) {
     label = 18;
     break;
    }
    $53 = $3;
    $54 = $__i;
    $55 = $__j;
    $56 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($53, $54, $55) | 0;
    if ($56) {
     $57 = $__i;
     $58 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($57) | 0;
     {}
     SAFE_HEAP_STORE($__t | 0, SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($__t + 4 | 0, SAFE_HEAP_LOAD($58 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $59 = $__j;
     $__k = $59;
     $60 = $__i;
     $__j = $60;
     while (1) {
      $61 = $__j;
      $62 = $__k;
      $63 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($62) | 0;
      {}
      SAFE_HEAP_STORE($61 | 0, SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0 | 0, 4);
      SAFE_HEAP_STORE($61 + 4 | 0, SAFE_HEAP_LOAD($63 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
      $64 = $__k;
      $__j = $64;
      $65 = $__j;
      $66 = $1;
      $67 = ($65 | 0) != ($66 | 0);
      if (!$67) {
       break;
      }
      $68 = $3;
      $69 = $__k;
      $70 = $69 + -8 | 0;
      $__k = $70;
      $71 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($68, $__t, $70) | 0;
      if (!$71) {
       break;
      }
     }
     $72 = $__j;
     $73 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($__t) | 0;
     {}
     SAFE_HEAP_STORE($72 | 0, SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($72 + 4 | 0, SAFE_HEAP_LOAD($73 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     $74 = $__count;
     $75 = $74 + 1 | 0;
     $__count = $75;
     $76 = ($75 | 0) == 8;
     if ($76) {
      label = 16;
      break;
     }
    }
    $81 = $__i;
    $__j = $81;
    $82 = $__i;
    $83 = $82 + 8 | 0;
    $__i = $83;
   }
   if ((label | 0) == 16) {
    $77 = $__i;
    $78 = $77 + 8 | 0;
    $__i = $78;
    $79 = $2;
    $80 = ($78 | 0) == ($79 | 0);
    $$expand_i1_val10 = $80 & 1;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val10 | 0, 1);
    $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
    $84 = $$pre_trunc & 1;
    STACKTOP = sp;
    return $84 | 0;
   } else if ((label | 0) == 18) {
    $$expand_i1_val12 = 1;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val12 | 0, 1);
    $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
    $84 = $$pre_trunc & 1;
    STACKTOP = sp;
    return $84 | 0;
   }
  }
 }
 return 0 | 0;
}

function __ZNK20b2SeparationFunction17FindMinSeparationEPiS0_f($this, $indexA, $indexB, $t) {
 $this = $this | 0;
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, $axisA = 0, $axisA8 = 0, $axisB = 0, $axisB2 = 0, $localPointA = 0, $localPointA9 = 0, $localPointB = 0, $localPointB3 = 0;
 var $normal = 0, $normal6 = 0, $pointA = 0, $pointA1 = 0, $pointA10 = 0, $pointB = 0, $pointB4 = 0, $pointB7 = 0, $separation = 0.0, $separation11 = 0.0, $separation5 = 0.0, $xfA = 0, $xfB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xfA = sp + 216 | 0;
 $xfB = sp + 200 | 0;
 $axisA = sp + 192 | 0;
 $axisB = sp + 184 | 0;
 $5 = sp + 176 | 0;
 $localPointA = sp + 168 | 0;
 $localPointB = sp + 160 | 0;
 $pointA = sp + 152 | 0;
 $pointB = sp + 144 | 0;
 $6 = sp + 128 | 0;
 $normal = sp + 120 | 0;
 $pointA1 = sp + 112 | 0;
 $axisB2 = sp + 104 | 0;
 $7 = sp + 96 | 0;
 $localPointB3 = sp + 88 | 0;
 $pointB4 = sp + 80 | 0;
 $8 = sp + 64 | 0;
 $normal6 = sp + 56 | 0;
 $pointB7 = sp + 48 | 0;
 $axisA8 = sp + 40 | 0;
 $9 = sp + 32 | 0;
 $localPointA9 = sp + 24 | 0;
 $pointA10 = sp + 16 | 0;
 $10 = sp;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $11 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $12 = $11 + 8 | 0;
 $13 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($12, $xfA, $13);
 $14 = $11 + 44 | 0;
 $15 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($14, $xfB, $15);
 $16 = $11 + 80 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 switch ($17 | 0) {
 case 0:
  {
   $18 = $xfA + 8 | 0;
   $19 = $11 + 92 | 0;
   __Z6b2MulTRK5b2RotRK6b2Vec2($axisA, $18, $19);
   $20 = $xfB + 8 | 0;
   $21 = $11 + 92 | 0;
   __ZNK6b2Vec2ngEv($5, $21);
   __Z6b2MulTRK5b2RotRK6b2Vec2($axisB, $20, $5);
   $22 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $23 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($22, $axisA) | 0;
   $24 = $2;
   SAFE_HEAP_STORE($24 | 0, $23 | 0, 4);
   $25 = $11 + 4 | 0;
   $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
   $27 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($26, $axisB) | 0;
   $28 = $3;
   SAFE_HEAP_STORE($28 | 0, $27 | 0, 4);
   $29 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $30 = $2;
   $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
   $32 = __ZNK15b2DistanceProxy9GetVertexEi($29, $31) | 0;
   {}
   SAFE_HEAP_STORE($localPointA | 0, SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointA + 4 | 0, SAFE_HEAP_LOAD($32 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $33 = $11 + 4 | 0;
   $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
   $35 = $3;
   $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
   $37 = __ZNK15b2DistanceProxy9GetVertexEi($34, $36) | 0;
   {}
   SAFE_HEAP_STORE($localPointB | 0, SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointB + 4 | 0, SAFE_HEAP_LOAD($37 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
   __ZmiRK6b2Vec2S1_($6, $pointB, $pointA);
   $38 = $11 + 92 | 0;
   $39 = +__Z5b2DotRK6b2Vec2S1_($6, $38);
   $separation = $39;
   $40 = $separation;
   $0 = $40;
   $71 = $0;
   STACKTOP = sp;
   return +$71;
   break;
  }
 case 1:
  {
   $41 = $xfA + 8 | 0;
   $42 = $11 + 92 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($normal, $41, $42);
   $43 = $11 + 84 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $43);
   $44 = $xfB + 8 | 0;
   __ZNK6b2Vec2ngEv($7, $normal);
   __Z6b2MulTRK5b2RotRK6b2Vec2($axisB2, $44, $7);
   $45 = $2;
   SAFE_HEAP_STORE($45 | 0, -1 | 0, 4);
   $46 = $11 + 4 | 0;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($47, $axisB2) | 0;
   $49 = $3;
   SAFE_HEAP_STORE($49 | 0, $48 | 0, 4);
   $50 = $11 + 4 | 0;
   $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
   $52 = $3;
   $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
   $54 = __ZNK15b2DistanceProxy9GetVertexEi($51, $53) | 0;
   {}
   SAFE_HEAP_STORE($localPointB3 | 0, SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointB3 + 4 | 0, SAFE_HEAP_LOAD($54 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB4, $xfB, $localPointB3);
   __ZmiRK6b2Vec2S1_($8, $pointB4, $pointA1);
   $55 = +__Z5b2DotRK6b2Vec2S1_($8, $normal);
   $separation5 = $55;
   $56 = $separation5;
   $0 = $56;
   $71 = $0;
   STACKTOP = sp;
   return +$71;
   break;
  }
 case 2:
  {
   $57 = $xfB + 8 | 0;
   $58 = $11 + 92 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($normal6, $57, $58);
   $59 = $11 + 84 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB7, $xfB, $59);
   $60 = $xfA + 8 | 0;
   __ZNK6b2Vec2ngEv($9, $normal6);
   __Z6b2MulTRK5b2RotRK6b2Vec2($axisA8, $60, $9);
   $61 = $3;
   SAFE_HEAP_STORE($61 | 0, -1 | 0, 4);
   $62 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $63 = __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($62, $axisA8) | 0;
   $64 = $2;
   SAFE_HEAP_STORE($64 | 0, $63 | 0, 4);
   $65 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $66 = $2;
   $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
   $68 = __ZNK15b2DistanceProxy9GetVertexEi($65, $67) | 0;
   {}
   SAFE_HEAP_STORE($localPointA9 | 0, SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointA9 + 4 | 0, SAFE_HEAP_LOAD($68 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA10, $xfA, $localPointA9);
   __ZmiRK6b2Vec2S1_($10, $pointA10, $pointB7);
   $69 = +__Z5b2DotRK6b2Vec2S1_($10, $normal6);
   $separation11 = $69;
   $70 = $separation11;
   $0 = $70;
   $71 = $0;
   STACKTOP = sp;
   return +$71;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4940 | 0, 186, 7972 | 0);
  }
 }
 return +(0.0);
}

function __ZN16b2ContactManager7DestroyEP9b2Contact($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bodyA = 0, $bodyB = 0;
 var $fixtureA = 0, $fixtureB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 $4 = __ZN9b2Contact11GetFixtureAEv($3) | 0;
 $fixtureA = $4;
 $5 = $1;
 $6 = __ZN9b2Contact11GetFixtureBEv($5) | 0;
 $fixtureB = $6;
 $7 = $fixtureA;
 $8 = __ZN9b2Fixture7GetBodyEv($7) | 0;
 $bodyA = $8;
 $9 = $fixtureB;
 $10 = __ZN9b2Fixture7GetBodyEv($9) | 0;
 $bodyB = $10;
 $11 = $2 + 72 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($12 | 0) != (0 | 0);
 if ($13) {
  $14 = $1;
  $15 = __ZNK9b2Contact10IsTouchingEv($14) | 0;
  if ($15) {
   $16 = $2 + 72 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
   $19 = $18 + 12 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = $1;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($20 | 0, 255 | 0) | 0) & 255]($17, $21);
  }
 }
 $22 = $1;
 $23 = $22 + 8 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = ($24 | 0) != (0 | 0);
 if ($25) {
  $26 = $1;
  $27 = $26 + 12 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $1;
  $30 = $29 + 8 | 0;
  $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
  $32 = $31 + 12 | 0;
  SAFE_HEAP_STORE($32 | 0, $28 | 0, 4);
 }
 $33 = $1;
 $34 = $33 + 12 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = ($35 | 0) != (0 | 0);
 if ($36) {
  $37 = $1;
  $38 = $37 + 8 | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = $1;
  $41 = $40 + 12 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = $42 + 8 | 0;
  SAFE_HEAP_STORE($43 | 0, $39 | 0, 4);
 }
 $44 = $1;
 $45 = $2 + 60 | 0;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = ($44 | 0) == ($46 | 0);
 if ($47) {
  $48 = $1;
  $49 = $48 + 12 | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = $2 + 60 | 0;
  SAFE_HEAP_STORE($51 | 0, $50 | 0, 4);
 }
 $52 = $1;
 $53 = $52 + 16 | 0;
 $54 = $53 + 8 | 0;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $56 = ($55 | 0) != (0 | 0);
 if ($56) {
  $57 = $1;
  $58 = $57 + 16 | 0;
  $59 = $58 + 12 | 0;
  $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
  $61 = $1;
  $62 = $61 + 16 | 0;
  $63 = $62 + 8 | 0;
  $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
  $65 = $64 + 12 | 0;
  SAFE_HEAP_STORE($65 | 0, $60 | 0, 4);
 }
 $66 = $1;
 $67 = $66 + 16 | 0;
 $68 = $67 + 12 | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = ($69 | 0) != (0 | 0);
 if ($70) {
  $71 = $1;
  $72 = $71 + 16 | 0;
  $73 = $72 + 8 | 0;
  $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
  $75 = $1;
  $76 = $75 + 16 | 0;
  $77 = $76 + 12 | 0;
  $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
  $79 = $78 + 8 | 0;
  SAFE_HEAP_STORE($79 | 0, $74 | 0, 4);
 }
 $80 = $1;
 $81 = $80 + 16 | 0;
 $82 = $bodyA;
 $83 = $82 + 112 | 0;
 $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
 $85 = ($81 | 0) == ($84 | 0);
 if ($85) {
  $86 = $1;
  $87 = $86 + 16 | 0;
  $88 = $87 + 12 | 0;
  $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
  $90 = $bodyA;
  $91 = $90 + 112 | 0;
  SAFE_HEAP_STORE($91 | 0, $89 | 0, 4);
 }
 $92 = $1;
 $93 = $92 + 32 | 0;
 $94 = $93 + 8 | 0;
 $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
 $96 = ($95 | 0) != (0 | 0);
 if ($96) {
  $97 = $1;
  $98 = $97 + 32 | 0;
  $99 = $98 + 12 | 0;
  $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
  $101 = $1;
  $102 = $101 + 32 | 0;
  $103 = $102 + 8 | 0;
  $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
  $105 = $104 + 12 | 0;
  SAFE_HEAP_STORE($105 | 0, $100 | 0, 4);
 }
 $106 = $1;
 $107 = $106 + 32 | 0;
 $108 = $107 + 12 | 0;
 $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
 $110 = ($109 | 0) != (0 | 0);
 if ($110) {
  $111 = $1;
  $112 = $111 + 32 | 0;
  $113 = $112 + 8 | 0;
  $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
  $115 = $1;
  $116 = $115 + 32 | 0;
  $117 = $116 + 12 | 0;
  $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
  $119 = $118 + 8 | 0;
  SAFE_HEAP_STORE($119 | 0, $114 | 0, 4);
 }
 $120 = $1;
 $121 = $120 + 32 | 0;
 $122 = $bodyB;
 $123 = $122 + 112 | 0;
 $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
 $125 = ($121 | 0) == ($124 | 0);
 if (!$125) {
  $132 = $1;
  $133 = $2 + 76 | 0;
  $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
  __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132, $134);
  $135 = $2 + 64 | 0;
  $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
  $137 = $136 + -1 | 0;
  SAFE_HEAP_STORE($135 | 0, $137 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $126 = $1;
 $127 = $126 + 32 | 0;
 $128 = $127 + 12 | 0;
 $129 = SAFE_HEAP_LOAD($128 | 0, 4, 0) | 0 | 0;
 $130 = $bodyB;
 $131 = $130 + 112 | 0;
 SAFE_HEAP_STORE($131 | 0, $129 | 0, 4);
 $132 = $1;
 $133 = $2 + 76 | 0;
 $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
 __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($132, $134);
 $135 = $2 + 64 | 0;
 $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
 $137 = $136 + -1 | 0;
 SAFE_HEAP_STORE($135 | 0, $137 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactSolver9WarmStartEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $P = 0, $i = 0, $iA = 0.0, $iB = 0.0, $indexA = 0, $indexB = 0, $j = 0, $mA = 0.0, $mB = 0.0, $normal = 0, $pointCount = 0, $tangent = 0;
 var $vA = 0, $vB = 0, $vc = 0, $vcp = 0, $wA = 0.0, $wB = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vA = sp + 88 | 0;
 $vB = sp + 72 | 0;
 $normal = sp + 56 | 0;
 $tangent = sp + 48 | 0;
 $P = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 $i = 0;
 while (1) {
  $6 = $i;
  $7 = $5 + 48 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = ($6 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $5 + 40 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $i;
  $13 = $11 + ($12 * 156 | 0) | 0;
  $vc = $13;
  $14 = $vc;
  $15 = $14 + 112 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $indexA = $16;
  $17 = $vc;
  $18 = $17 + 116 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $indexB = $19;
  $20 = $vc;
  $21 = $20 + 120 | 0;
  $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
  $mA = $22;
  $23 = $vc;
  $24 = $23 + 128 | 0;
  $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
  $iA = $25;
  $26 = $vc;
  $27 = $26 + 124 | 0;
  $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
  $mB = $28;
  $29 = $vc;
  $30 = $29 + 132 | 0;
  $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
  $iB = $31;
  $32 = $vc;
  $33 = $32 + 148 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $pointCount = $34;
  $35 = $indexA;
  $36 = $5 + 28 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $37 + ($35 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vA | 0, SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vA + 4 | 0, SAFE_HEAP_LOAD($38 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $39 = $indexA;
  $40 = $5 + 28 | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = $41 + ($39 * 12 | 0) | 0;
  $43 = $42 + 8 | 0;
  $44 = +(+SAFE_HEAP_LOAD_D($43 | 0, 4));
  $wA = $44;
  $45 = $indexB;
  $46 = $5 + 28 | 0;
  $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
  $48 = $47 + ($45 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($vB | 0, SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($vB + 4 | 0, SAFE_HEAP_LOAD($48 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $49 = $indexB;
  $50 = $5 + 28 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $51 + ($49 * 12 | 0) | 0;
  $53 = $52 + 8 | 0;
  $54 = +(+SAFE_HEAP_LOAD_D($53 | 0, 4));
  $wB = $54;
  $55 = $vc;
  $56 = $55 + 72 | 0;
  {}
  SAFE_HEAP_STORE($normal | 0, SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($normal + 4 | 0, SAFE_HEAP_LOAD($56 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z7b2CrossRK6b2Vec2f($tangent, $normal, 1.0);
  $j = 0;
  while (1) {
   $57 = $j;
   $58 = $pointCount;
   $59 = ($57 | 0) < ($58 | 0);
   if (!$59) {
    break;
   }
   $60 = $vc;
   $61 = $j;
   $62 = $60 + ($61 * 36 | 0) | 0;
   $vcp = $62;
   $63 = $vcp;
   $64 = $63 + 16 | 0;
   $65 = +(+SAFE_HEAP_LOAD_D($64 | 0, 4));
   __ZmlfRK6b2Vec2($1, $65, $normal);
   $66 = $vcp;
   $67 = $66 + 20 | 0;
   $68 = +(+SAFE_HEAP_LOAD_D($67 | 0, 4));
   __ZmlfRK6b2Vec2($2, $68, $tangent);
   __ZplRK6b2Vec2S1_($P, $1, $2);
   $69 = $iA;
   $70 = $vcp;
   $71 = +__Z7b2CrossRK6b2Vec2S1_($70, $P);
   $72 = $69 * $71;
   $73 = $wA;
   $74 = $73 - $72;
   $wA = $74;
   $75 = $mA;
   __ZmlfRK6b2Vec2($3, $75, $P);
   __ZN6b2Vec2mIERKS_($vA, $3);
   $76 = $iB;
   $77 = $vcp;
   $78 = $77 + 8 | 0;
   $79 = +__Z7b2CrossRK6b2Vec2S1_($78, $P);
   $80 = $76 * $79;
   $81 = $wB;
   $82 = $81 + $80;
   $wB = $82;
   $83 = $mB;
   __ZmlfRK6b2Vec2($4, $83, $P);
   __ZN6b2Vec2pLERKS_($vB, $4);
   $84 = $j;
   $85 = $84 + 1 | 0;
   $j = $85;
  }
  $86 = $indexA;
  $87 = $5 + 28 | 0;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $89 = $88 + ($86 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($89 | 0, SAFE_HEAP_LOAD($vA | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($89 + 4 | 0, SAFE_HEAP_LOAD($vA + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $90 = $wA;
  $91 = $indexA;
  $92 = $5 + 28 | 0;
  $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
  $94 = $93 + ($91 * 12 | 0) | 0;
  $95 = $94 + 8 | 0;
  SAFE_HEAP_STORE_D($95 | 0, +$90, 4);
  $96 = $indexB;
  $97 = $5 + 28 | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
  $99 = $98 + ($96 * 12 | 0) | 0;
  {}
  SAFE_HEAP_STORE($99 | 0, SAFE_HEAP_LOAD($vB | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($99 + 4 | 0, SAFE_HEAP_LOAD($vB + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $100 = $wB;
  $101 = $indexB;
  $102 = $5 + 28 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $104 = $103 + ($101 * 12 | 0) | 0;
  $105 = $104 + 8 | 0;
  SAFE_HEAP_STORE_D($105 | 0, +$100, 4);
  $106 = $i;
  $107 = $106 + 1 | 0;
  $i = $107;
 }
 STACKTOP = sp;
 return;
}

function __ZN16b2BlockAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $block = 0, $block1 = 0, $blockCount = 0, $blockSize = 0, $chunk = 0, $i = 0, $index = 0, $last = 0, $next = 0, $oldChunks = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = ($4 | 0) == 0;
 if ($5) {
  $0 = 0;
  $119 = $0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $6 = $2;
 $7 = 0 < ($6 | 0);
 if (!$7) {
  ___assert_fail(3798 | 0, 3807 | 0, 102, 3865 | 0);
 }
 $8 = $2;
 $9 = ($8 | 0) > 640;
 $10 = $2;
 if ($9) {
  $11 = __Z7b2Alloci($10) | 0;
  $0 = $11;
  $119 = $0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $12 = 2856 + $10 | 0;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $index = $14;
 $15 = $index;
 $16 = 0 <= ($15 | 0);
 $17 = $index;
 $18 = ($17 | 0) < 14;
 $or$cond = $16 & $18;
 if (!$or$cond) {
  ___assert_fail(3874 | 0, 3807 | 0, 110, 3865 | 0);
 }
 $19 = $index;
 $20 = $3 + 12 | 0;
 $21 = $20 + ($19 << 2) | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = ($22 | 0) != (0 | 0);
 if ($23) {
  $24 = $index;
  $25 = $3 + 12 | 0;
  $26 = $25 + ($24 << 2) | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $block = $27;
  $28 = $block;
  $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
  $30 = $index;
  $31 = $3 + 12 | 0;
  $32 = $31 + ($30 << 2) | 0;
  SAFE_HEAP_STORE($32 | 0, $29 | 0, 4);
  $33 = $block;
  $0 = $33;
  $119 = $0;
  STACKTOP = sp;
  return $119 | 0;
 }
 $34 = $3 + 4 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $3 + 8 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = ($35 | 0) == ($37 | 0);
 if ($38) {
  $39 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $oldChunks = $39;
  $40 = $3 + 8 | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = $41 + 128 | 0;
  SAFE_HEAP_STORE($40 | 0, $42 | 0, 4);
  $43 = $3 + 8 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = $44 << 3;
  $46 = __Z7b2Alloci($45) | 0;
  SAFE_HEAP_STORE($3 | 0, $46 | 0, 4);
  $47 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $48 = $oldChunks;
  $49 = $3 + 4 | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = $50 << 3;
  _memcpy($47 | 0, $48 | 0, $51 | 0) | 0;
  $52 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $53 = $3 + 4 | 0;
  $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
  $55 = $52 + ($54 << 3) | 0;
  _memset($55 | 0, 0, 1024) | 0;
  $56 = $oldChunks;
  __Z6b2FreePv($56);
 }
 $57 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $58 = $3 + 4 | 0;
 $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
 $60 = $57 + ($59 << 3) | 0;
 $chunk = $60;
 $61 = __Z7b2Alloci(16384) | 0;
 $62 = $chunk;
 $63 = $62 + 4 | 0;
 SAFE_HEAP_STORE($63 | 0, $61 | 0, 4);
 $64 = $chunk;
 $65 = $64 + 4 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 _memset($66 | 0, -51, 16384) | 0;
 $67 = $index;
 $68 = 856 + ($67 << 2) | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $blockSize = $69;
 $70 = $blockSize;
 $71 = $chunk;
 SAFE_HEAP_STORE($71 | 0, $70 | 0, 4);
 $72 = $blockSize;
 $73 = 16384 / ($72 | 0) & -1;
 $blockCount = $73;
 $74 = $blockCount;
 $75 = $blockSize;
 $76 = Math_imul($74, $75) | 0;
 $77 = ($76 | 0) <= 16384;
 if (!$77) {
  ___assert_fail(3910 | 0, 3807 | 0, 138, 3865 | 0);
 }
 $i = 0;
 while (1) {
  $78 = $i;
  $79 = $blockCount;
  $80 = $79 - 1 | 0;
  $81 = ($78 | 0) < ($80 | 0);
  $82 = $chunk;
  $83 = $82 + 4 | 0;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $blockSize;
  if (!$81) {
   break;
  }
  $86 = $i;
  $87 = Math_imul($85, $86) | 0;
  $88 = $84 + $87 | 0;
  $block1 = $88;
  $89 = $chunk;
  $90 = $89 + 4 | 0;
  $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
  $92 = $blockSize;
  $93 = $i;
  $94 = $93 + 1 | 0;
  $95 = Math_imul($92, $94) | 0;
  $96 = $91 + $95 | 0;
  $next = $96;
  $97 = $next;
  $98 = $block1;
  SAFE_HEAP_STORE($98 | 0, $97 | 0, 4);
  $99 = $i;
  $100 = $99 + 1 | 0;
  $i = $100;
 }
 $101 = $blockCount;
 $102 = $101 - 1 | 0;
 $103 = Math_imul($85, $102) | 0;
 $104 = $84 + $103 | 0;
 $last = $104;
 $105 = $last;
 SAFE_HEAP_STORE($105 | 0, 0 | 0, 4);
 $106 = $chunk;
 $107 = $106 + 4 | 0;
 $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
 $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
 $110 = $index;
 $111 = $3 + 12 | 0;
 $112 = $111 + ($110 << 2) | 0;
 SAFE_HEAP_STORE($112 | 0, $109 | 0, 4);
 $113 = $3 + 4 | 0;
 $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
 $115 = $114 + 1 | 0;
 SAFE_HEAP_STORE($113 | 0, $115 | 0, 4);
 $116 = $chunk;
 $117 = $116 + 4 | 0;
 $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
 $0 = $118;
 $119 = $0;
 STACKTOP = sp;
 return $119 | 0;
}

function __ZN13b2DynamicTree10RemoveLeafEi($this, $leaf) {
 $this = $this | 0;
 $leaf = $leaf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $child1 = 0;
 var $child2 = 0, $grandParent = 0, $index = 0, $parent = 0, $sibling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $leaf;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $5 = ($3 | 0) == ($4 | 0);
 if ($5) {
  SAFE_HEAP_STORE($2 | 0, -1 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $6 = $1;
 $7 = $2 + 4 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + ($6 * 36 | 0) | 0;
 $10 = $9 + 20 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $parent = $11;
 $12 = $parent;
 $13 = $2 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $14 + ($12 * 36 | 0) | 0;
 $16 = $15 + 20 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $grandParent = $17;
 $18 = $parent;
 $19 = $2 + 4 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $20 + ($18 * 36 | 0) | 0;
 $22 = $21 + 24 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = $1;
 $25 = ($23 | 0) == ($24 | 0);
 $26 = $parent;
 $27 = $2 + 4 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $28 + ($26 * 36 | 0) | 0;
 if ($25) {
  $30 = $29 + 28 | 0;
  $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
  $sibling = $31;
 } else {
  $32 = $29 + 24 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $sibling = $33;
 }
 $34 = $grandParent;
 $35 = ($34 | 0) != -1;
 if (!$35) {
  $112 = $sibling;
  SAFE_HEAP_STORE($2 | 0, $112 | 0, 4);
  $113 = $sibling;
  $114 = $2 + 4 | 0;
  $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
  $116 = $115 + ($113 * 36 | 0) | 0;
  $117 = $116 + 20 | 0;
  SAFE_HEAP_STORE($117 | 0, -1 | 0, 4);
  $118 = $parent;
  __ZN13b2DynamicTree8FreeNodeEi($2, $118);
  STACKTOP = sp;
  return;
 }
 $36 = $grandParent;
 $37 = $2 + 4 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = $38 + ($36 * 36 | 0) | 0;
 $40 = $39 + 24 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $parent;
 $43 = ($41 | 0) == ($42 | 0);
 $44 = $sibling;
 $45 = $grandParent;
 $46 = $2 + 4 | 0;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 $48 = $47 + ($45 * 36 | 0) | 0;
 if ($43) {
  $49 = $48 + 24 | 0;
  SAFE_HEAP_STORE($49 | 0, $44 | 0, 4);
 } else {
  $50 = $48 + 28 | 0;
  SAFE_HEAP_STORE($50 | 0, $44 | 0, 4);
 }
 $51 = $grandParent;
 $52 = $sibling;
 $53 = $2 + 4 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $54 + ($52 * 36 | 0) | 0;
 $56 = $55 + 20 | 0;
 SAFE_HEAP_STORE($56 | 0, $51 | 0, 4);
 $57 = $parent;
 __ZN13b2DynamicTree8FreeNodeEi($2, $57);
 $58 = $grandParent;
 $index = $58;
 while (1) {
  $59 = $index;
  $60 = ($59 | 0) != -1;
  if (!$60) {
   break;
  }
  $61 = $index;
  $62 = __ZN13b2DynamicTree7BalanceEi($2, $61) | 0;
  $index = $62;
  $63 = $index;
  $64 = $2 + 4 | 0;
  $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
  $66 = $65 + ($63 * 36 | 0) | 0;
  $67 = $66 + 24 | 0;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $child1 = $68;
  $69 = $index;
  $70 = $2 + 4 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
  $72 = $71 + ($69 * 36 | 0) | 0;
  $73 = $72 + 28 | 0;
  $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
  $child2 = $74;
  $75 = $index;
  $76 = $2 + 4 | 0;
  $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
  $78 = $77 + ($75 * 36 | 0) | 0;
  $79 = $child1;
  $80 = $2 + 4 | 0;
  $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
  $82 = $81 + ($79 * 36 | 0) | 0;
  $83 = $child2;
  $84 = $2 + 4 | 0;
  $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
  $86 = $85 + ($83 * 36 | 0) | 0;
  __ZN6b2AABB7CombineERKS_S1_($78, $82, $86);
  $87 = $child1;
  $88 = $2 + 4 | 0;
  $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
  $90 = $89 + ($87 * 36 | 0) | 0;
  $91 = $90 + 32 | 0;
  $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $93 = $child2;
  $94 = $2 + 4 | 0;
  $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
  $96 = $95 + ($93 * 36 | 0) | 0;
  $97 = $96 + 32 | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
  $99 = __Z5b2MaxIiET_S0_S0_($92, $98) | 0;
  $100 = 1 + $99 | 0;
  $101 = $index;
  $102 = $2 + 4 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $104 = $103 + ($101 * 36 | 0) | 0;
  $105 = $104 + 32 | 0;
  SAFE_HEAP_STORE($105 | 0, $100 | 0, 4);
  $106 = $index;
  $107 = $2 + 4 | 0;
  $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
  $109 = $108 + ($106 * 36 | 0) | 0;
  $110 = $109 + 20 | 0;
  $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
  $index = $111;
 }
 STACKTOP = sp;
 return;
}

function __ZN24b2PositionSolverManifold10InitializeEP27b2ContactPositionConstraintRK11b2TransformS4_i($this, $pc, $xfA, $xfB, $index) {
 $this = $this | 0;
 $pc = $pc | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 $index = $index | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $clipPoint = 0, $clipPoint2 = 0, $planePoint = 0, $planePoint1 = 0, $pointA = 0, $pointB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pointA = sp + 112 | 0;
 $pointB = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 88 | 0;
 $7 = sp + 80 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 64 | 0;
 $planePoint = sp + 56 | 0;
 $clipPoint = sp + 48 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 32 | 0;
 $planePoint1 = sp + 24 | 0;
 $clipPoint2 = sp + 16 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $0 = $this;
 $1 = $pc;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $index;
 $14 = $0;
 $15 = $1;
 $16 = $15 + 84 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($17 | 0) > 0;
 if (!$18) {
  ___assert_fail(7890 | 0, 6052 | 0, 623, 5014 | 0);
 }
 $19 = $1;
 $20 = $19 + 72 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 switch ($21 | 0) {
 case 0:
  {
   $22 = $2;
   $23 = $1;
   $24 = $23 + 24 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $22, $24);
   $25 = $3;
   $26 = $1;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $25, $26);
   __ZmiRK6b2Vec2S1_($5, $pointB, $pointA);
   {}
   SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   +__ZN6b2Vec29NormalizeEv($14);
   $27 = $14 + 8 | 0;
   __ZplRK6b2Vec2S1_($7, $pointA, $pointB);
   __ZmlfRK6b2Vec2($6, .5, $7);
   {}
   SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZmiRK6b2Vec2S1_($8, $pointB, $pointA);
   $28 = +__Z5b2DotRK6b2Vec2S1_($8, $14);
   $29 = $1;
   $30 = $29 + 76 | 0;
   $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
   $32 = $28 - $31;
   $33 = $1;
   $34 = $33 + 80 | 0;
   $35 = +(+SAFE_HEAP_LOAD_D($34 | 0, 4));
   $36 = $32 - $35;
   $37 = $14 + 16 | 0;
   SAFE_HEAP_STORE_D($37 | 0, +$36, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $38 = $2;
   $39 = $38 + 8 | 0;
   $40 = $1;
   $41 = $40 + 16 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($9, $39, $41);
   {}
   SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $42 = $2;
   $43 = $1;
   $44 = $43 + 24 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint, $42, $44);
   $45 = $3;
   $46 = $4;
   $47 = $1;
   $48 = $47 + ($46 << 3) | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint, $45, $48);
   __ZmiRK6b2Vec2S1_($10, $clipPoint, $planePoint);
   $49 = +__Z5b2DotRK6b2Vec2S1_($10, $14);
   $50 = $1;
   $51 = $50 + 76 | 0;
   $52 = +(+SAFE_HEAP_LOAD_D($51 | 0, 4));
   $53 = $49 - $52;
   $54 = $1;
   $55 = $54 + 80 | 0;
   $56 = +(+SAFE_HEAP_LOAD_D($55 | 0, 4));
   $57 = $53 - $56;
   $58 = $14 + 16 | 0;
   SAFE_HEAP_STORE_D($58 | 0, +$57, 4);
   $59 = $14 + 8 | 0;
   {}
   SAFE_HEAP_STORE($59 | 0, SAFE_HEAP_LOAD($clipPoint | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($59 + 4 | 0, SAFE_HEAP_LOAD($clipPoint + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $60 = $3;
   $61 = $60 + 8 | 0;
   $62 = $1;
   $63 = $62 + 16 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($11, $61, $63);
   {}
   SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $64 = $3;
   $65 = $1;
   $66 = $65 + 24 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($planePoint1, $64, $66);
   $67 = $2;
   $68 = $4;
   $69 = $1;
   $70 = $69 + ($68 << 3) | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($clipPoint2, $67, $70);
   __ZmiRK6b2Vec2S1_($12, $clipPoint2, $planePoint1);
   $71 = +__Z5b2DotRK6b2Vec2S1_($12, $14);
   $72 = $1;
   $73 = $72 + 76 | 0;
   $74 = +(+SAFE_HEAP_LOAD_D($73 | 0, 4));
   $75 = $71 - $74;
   $76 = $1;
   $77 = $76 + 80 | 0;
   $78 = +(+SAFE_HEAP_LOAD_D($77 | 0, 4));
   $79 = $75 - $78;
   $80 = $14 + 16 | 0;
   SAFE_HEAP_STORE_D($80 | 0, +$79, 4);
   $81 = $14 + 8 | 0;
   {}
   SAFE_HEAP_STORE($81 | 0, SAFE_HEAP_LOAD($clipPoint2 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($81 + 4 | 0, SAFE_HEAP_LOAD($clipPoint2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __ZNK6b2Vec2ngEv($13, $14);
   {}
   SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $D = 0.0, $I = 0.0, $area = 0.0, $center = 0, $e1 = 0;
 var $e2 = 0, $ex1 = 0.0, $ex2 = 0.0, $ey1 = 0.0, $ey2 = 0.0, $i = 0, $i1 = 0, $intx2 = 0.0, $inty2 = 0.0, $k_inv3 = 0.0, $s = 0, $triangleArea = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $center = sp + 104 | 0;
 $s = sp + 88 | 0;
 $e1 = sp + 64 | 0;
 $e2 = sp + 56 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 32 | 0;
 $5 = sp;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $6 = $0;
 $7 = $6 + 148 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = ($8 | 0) >= 3;
 if (!$9) {
  ___assert_fail(4118 | 0, 4004 | 0, 384, 4131 | 0);
 }
 __ZN6b2Vec2C2Ev($center);
 __ZN6b2Vec23SetEff($center, 0.0, 0.0);
 $area = 0.0;
 $I = 0.0;
 __ZN6b2Vec2C2Eff($s, 0.0, 0.0);
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $6 + 148 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = ($10 | 0) < ($12 | 0);
  if (!$13) {
   break;
  }
  $14 = $i;
  $15 = $6 + 20 | 0;
  $16 = $15 + ($14 << 3) | 0;
  __ZN6b2Vec2pLERKS_($s, $16);
  $17 = $i;
  $18 = $17 + 1 | 0;
  $i = $18;
 }
 $19 = $6 + 148 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = +($20 | 0);
 $22 = 1.0 / $21;
 __ZN6b2Vec2mLEf($s, $22);
 $k_inv3 = .3333333432674408;
 $i1 = 0;
 while (1) {
  $23 = $i1;
  $24 = $6 + 148 | 0;
  $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
  $26 = ($23 | 0) < ($25 | 0);
  if (!$26) {
   break;
  }
  $27 = $i1;
  $28 = $6 + 20 | 0;
  $29 = $28 + ($27 << 3) | 0;
  __ZmiRK6b2Vec2S1_($e1, $29, $s);
  $30 = $i1;
  $31 = $30 + 1 | 0;
  $32 = $6 + 148 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = ($31 | 0) < ($33 | 0);
  if ($34) {
   $35 = $i1;
   $36 = $35 + 1 | 0;
   $37 = $6 + 20 | 0;
   $38 = $37 + ($36 << 3) | 0;
   __ZmiRK6b2Vec2S1_($e2, $38, $s);
  } else {
   $39 = $6 + 20 | 0;
   __ZmiRK6b2Vec2S1_($e2, $39, $s);
  }
  $40 = +__Z7b2CrossRK6b2Vec2S1_($e1, $e2);
  $D = $40;
  $41 = $D;
  $42 = .5 * $41;
  $triangleArea = $42;
  $43 = $triangleArea;
  $44 = $area;
  $45 = $44 + $43;
  $area = $45;
  $46 = $triangleArea;
  $47 = $46 * .3333333432674408;
  __ZplRK6b2Vec2S1_($4, $e1, $e2);
  __ZmlfRK6b2Vec2($3, $47, $4);
  __ZN6b2Vec2pLERKS_($center, $3);
  $48 = +(+SAFE_HEAP_LOAD_D($e1 | 0, 4));
  $ex1 = $48;
  $49 = $e1 + 4 | 0;
  $50 = +(+SAFE_HEAP_LOAD_D($49 | 0, 4));
  $ey1 = $50;
  $51 = +(+SAFE_HEAP_LOAD_D($e2 | 0, 4));
  $ex2 = $51;
  $52 = $e2 + 4 | 0;
  $53 = +(+SAFE_HEAP_LOAD_D($52 | 0, 4));
  $ey2 = $53;
  $54 = $ex1;
  $55 = $ex1;
  $56 = $54 * $55;
  $57 = $ex2;
  $58 = $ex1;
  $59 = $57 * $58;
  $60 = $56 + $59;
  $61 = $ex2;
  $62 = $ex2;
  $63 = $61 * $62;
  $64 = $60 + $63;
  $intx2 = $64;
  $65 = $ey1;
  $66 = $ey1;
  $67 = $65 * $66;
  $68 = $ey2;
  $69 = $ey1;
  $70 = $68 * $69;
  $71 = $67 + $70;
  $72 = $ey2;
  $73 = $ey2;
  $74 = $72 * $73;
  $75 = $71 + $74;
  $inty2 = $75;
  $76 = $D;
  $77 = .0833333358168602 * $76;
  $78 = $intx2;
  $79 = $inty2;
  $80 = $78 + $79;
  $81 = $77 * $80;
  $82 = $I;
  $83 = $82 + $81;
  $I = $83;
  $84 = $i1;
  $85 = $84 + 1 | 0;
  $i1 = $85;
 }
 $86 = $2;
 $87 = $area;
 $88 = $86 * $87;
 $89 = $1;
 SAFE_HEAP_STORE_D($89 | 0, +$88, 4);
 $90 = $area;
 $91 = $90 > 1.1920928955078125e-007;
 if ($91) {
  $92 = $area;
  $93 = 1.0 / $92;
  __ZN6b2Vec2mLEf($center, $93);
  $94 = $1;
  $95 = $94 + 4 | 0;
  __ZplRK6b2Vec2S1_($5, $center, $s);
  {}
  SAFE_HEAP_STORE($95 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($95 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $96 = $2;
  $97 = $I;
  $98 = $96 * $97;
  $99 = $1;
  $100 = $99 + 12 | 0;
  SAFE_HEAP_STORE_D($100 | 0, +$98, 4);
  $101 = $1;
  $102 = +(+SAFE_HEAP_LOAD_D($101 | 0, 4));
  $103 = $1;
  $104 = $103 + 4 | 0;
  $105 = $1;
  $106 = $105 + 4 | 0;
  $107 = +__Z5b2DotRK6b2Vec2S1_($104, $106);
  $108 = +__Z5b2DotRK6b2Vec2S1_($center, $center);
  $109 = $107 - $108;
  $110 = $102 * $109;
  $111 = $1;
  $112 = $111 + 12 | 0;
  $113 = +(+SAFE_HEAP_LOAD_D($112 | 0, 4));
  $114 = $113 + $110;
  SAFE_HEAP_STORE_D($112 | 0, +$114, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(4143 | 0, 4004 | 0, 430, 4131 | 0);
 }
}

function __ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $d = 0, $denominator = 0.0, $i = 0, $index = 0, $lower = 0.0, $numerator = 0.0, $p1 = 0, $p2 = 0;
 var $upper = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 108 | 0;
 $p1 = sp + 80 | 0;
 $6 = sp + 72 | 0;
 $p2 = sp + 64 | 0;
 $7 = sp + 56 | 0;
 $d = sp + 48 | 0;
 $8 = sp + 16 | 0;
 $9 = sp;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $10 = $1;
 $11 = $4;
 $12 = $11 + 8 | 0;
 $13 = $3;
 $14 = $4;
 __ZmiRK6b2Vec2S1_($6, $13, $14);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $12, $6);
 $15 = $4;
 $16 = $15 + 8 | 0;
 $17 = $3;
 $18 = $17 + 8 | 0;
 $19 = $4;
 __ZmiRK6b2Vec2S1_($7, $18, $19);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $16, $7);
 __ZmiRK6b2Vec2S1_($d, $p2, $p1);
 $lower = 0.0;
 $20 = $3;
 $21 = $20 + 16 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $upper = $22;
 $index = -1;
 $i = 0;
 L1 : while (1) {
  $23 = $i;
  $24 = $10 + 148 | 0;
  $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
  $26 = ($23 | 0) < ($25 | 0);
  if (!$26) {
   label = 15;
   break;
  }
  $27 = $i;
  $28 = $10 + 84 | 0;
  $29 = $28 + ($27 << 3) | 0;
  $30 = $i;
  $31 = $10 + 20 | 0;
  $32 = $31 + ($30 << 3) | 0;
  __ZmiRK6b2Vec2S1_($8, $32, $p1);
  $33 = +__Z5b2DotRK6b2Vec2S1_($29, $8);
  $numerator = $33;
  $34 = $i;
  $35 = $10 + 84 | 0;
  $36 = $35 + ($34 << 3) | 0;
  $37 = +__Z5b2DotRK6b2Vec2S1_($36, $d);
  $denominator = $37;
  $38 = $denominator;
  $39 = $38 == 0.0;
  do {
   if ($39) {
    $40 = $numerator;
    $41 = $40 < 0.0;
    if ($41) {
     label = 5;
     break L1;
    }
   } else {
    $42 = $denominator;
    $43 = $42 < 0.0;
    if ($43) {
     $44 = $numerator;
     $45 = $lower;
     $46 = $denominator;
     $47 = $45 * $46;
     $48 = $44 < $47;
     if ($48) {
      $49 = $numerator;
      $50 = $denominator;
      $51 = $49 / $50;
      $lower = $51;
      $52 = $i;
      $index = $52;
      break;
     }
    }
    $53 = $denominator;
    $54 = $53 > 0.0;
    if ($54) {
     $55 = $numerator;
     $56 = $upper;
     $57 = $denominator;
     $58 = $56 * $57;
     $59 = $55 < $58;
     if ($59) {
      $60 = $numerator;
      $61 = $denominator;
      $62 = $60 / $61;
      $upper = $62;
     }
    }
   }
  } while (0);
  $63 = $upper;
  $64 = $lower;
  $65 = $63 < $64;
  if ($65) {
   label = 13;
   break;
  }
  $66 = $i;
  $67 = $66 + 1 | 0;
  $i = $67;
 }
 if ((label | 0) == 5) {
  $$expand_i1_val = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $86 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $86 | 0;
 } else if ((label | 0) == 13) {
  $$expand_i1_val2 = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $86 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $86 | 0;
 } else if ((label | 0) == 15) {
  $68 = $lower;
  $69 = 0.0 <= $68;
  if (!$69) {
   ___assert_fail(4074 | 0, 4004 | 0, 327, 3996 | 0);
  }
  $70 = $lower;
  $71 = $3;
  $72 = $71 + 16 | 0;
  $73 = +(+SAFE_HEAP_LOAD_D($72 | 0, 4));
  $74 = $70 <= $73;
  if (!$74) {
   ___assert_fail(4074 | 0, 4004 | 0, 327, 3996 | 0);
  }
  $75 = $index;
  $76 = ($75 | 0) >= 0;
  if ($76) {
   $77 = $lower;
   $78 = $2;
   $79 = $78 + 8 | 0;
   SAFE_HEAP_STORE_D($79 | 0, +$77, 4);
   $80 = $2;
   $81 = $4;
   $82 = $81 + 8 | 0;
   $83 = $index;
   $84 = $10 + 84 | 0;
   $85 = $84 + ($83 << 3) | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($9, $82, $85);
   {}
   SAFE_HEAP_STORE($80 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($80 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $$expand_i1_val4 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val4 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $86 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $86 | 0;
  } else {
   $$expand_i1_val6 = 0;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val6 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $86 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $86 | 0;
  }
 }
 return 0 | 0;
}

function __ZN16b2ContactManager7CollideEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $activeA = 0, $activeB = 0, $bodyA = 0, $bodyB = 0, $c = 0, $cNuke = 0, $cNuke1 = 0, $cNuke2 = 0, $fixtureA = 0, $fixtureB = 0, $indexA = 0, $indexB = 0, $overlap = 0;
 var $proxyIdA = 0, $proxyIdB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 60 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $c = $3;
 while (1) {
  $4 = $c;
  $5 = ($4 | 0) != (0 | 0);
  if (!$5) {
   break;
  }
  $6 = $c;
  $7 = __ZN9b2Contact11GetFixtureAEv($6) | 0;
  $fixtureA = $7;
  $8 = $c;
  $9 = __ZN9b2Contact11GetFixtureBEv($8) | 0;
  $fixtureB = $9;
  $10 = $c;
  $11 = __ZNK9b2Contact14GetChildIndexAEv($10) | 0;
  $indexA = $11;
  $12 = $c;
  $13 = __ZNK9b2Contact14GetChildIndexBEv($12) | 0;
  $indexB = $13;
  $14 = $fixtureA;
  $15 = __ZN9b2Fixture7GetBodyEv($14) | 0;
  $bodyA = $15;
  $16 = $fixtureB;
  $17 = __ZN9b2Fixture7GetBodyEv($16) | 0;
  $bodyB = $17;
  $18 = $c;
  $19 = $18 + 4 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $20 & 8;
  $22 = ($21 | 0) != 0;
  if ($22) {
   $23 = $bodyB;
   $24 = $bodyA;
   $25 = __ZNK6b2Body13ShouldCollideEPKS_($23, $24) | 0;
   $26 = $25 & 1;
   $27 = ($26 | 0) == 0;
   if ($27) {
    $28 = $c;
    $cNuke = $28;
    $29 = $cNuke;
    $30 = __ZN9b2Contact7GetNextEv($29) | 0;
    $c = $30;
    $31 = $cNuke;
    __ZN16b2ContactManager7DestroyEP9b2Contact($1, $31);
    continue;
   }
   $32 = $1 + 68 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $34 = ($33 | 0) != (0 | 0);
   if ($34) {
    $35 = $1 + 68 | 0;
    $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
    $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
    $38 = $37 + 8 | 0;
    $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
    $40 = $fixtureA;
    $41 = $fixtureB;
    $42 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($39 | 0, 255 | 0) | 0) & 255]($36, $40, $41) | 0;
    $43 = $42 & 1;
    $44 = ($43 | 0) == 0;
    if ($44) {
     $45 = $c;
     $cNuke1 = $45;
     $46 = $cNuke1;
     $47 = __ZN9b2Contact7GetNextEv($46) | 0;
     $c = $47;
     $48 = $cNuke1;
     __ZN16b2ContactManager7DestroyEP9b2Contact($1, $48);
     continue;
    }
   }
   $49 = $c;
   $50 = $49 + 4 | 0;
   $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
   $52 = $51 & -9;
   SAFE_HEAP_STORE($50 | 0, $52 | 0, 4);
  }
  $53 = $bodyA;
  $54 = __ZNK6b2Body7IsAwakeEv($53) | 0;
  if ($54) {
   $55 = $bodyA;
   $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
   $57 = ($56 | 0) != 0;
   $59 = $57;
  } else {
   $59 = 0;
  }
  $58 = $59 & 1;
  $activeA = $58;
  $60 = $bodyB;
  $61 = __ZNK6b2Body7IsAwakeEv($60) | 0;
  if ($61) {
   $62 = $bodyB;
   $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
   $64 = ($63 | 0) != 0;
   $66 = $64;
  } else {
   $66 = 0;
  }
  $65 = $66 & 1;
  $activeB = $65;
  $67 = $activeA;
  $68 = $67 & 1;
  $69 = $68 & 1;
  $70 = ($69 | 0) == 0;
  if ($70) {
   $71 = $activeB;
   $72 = $71 & 1;
   $73 = $72 & 1;
   $74 = ($73 | 0) == 0;
   if ($74) {
    $75 = $c;
    $76 = __ZN9b2Contact7GetNextEv($75) | 0;
    $c = $76;
    continue;
   }
  }
  $77 = $indexA;
  $78 = $fixtureA;
  $79 = $78 + 24 | 0;
  $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
  $81 = $80 + ($77 * 28 | 0) | 0;
  $82 = $81 + 24 | 0;
  $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
  $proxyIdA = $83;
  $84 = $indexB;
  $85 = $fixtureB;
  $86 = $85 + 24 | 0;
  $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
  $88 = $87 + ($84 * 28 | 0) | 0;
  $89 = $88 + 24 | 0;
  $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
  $proxyIdB = $90;
  $91 = $proxyIdA;
  $92 = $proxyIdB;
  $93 = __ZNK12b2BroadPhase11TestOverlapEii($1, $91, $92) | 0;
  $94 = $93 & 1;
  $overlap = $94;
  $95 = $overlap;
  $96 = $95 & 1;
  $97 = $96 & 1;
  $98 = ($97 | 0) == 0;
  $99 = $c;
  if ($98) {
   $cNuke2 = $99;
   $100 = $cNuke2;
   $101 = __ZN9b2Contact7GetNextEv($100) | 0;
   $c = $101;
   $102 = $cNuke2;
   __ZN16b2ContactManager7DestroyEP9b2Contact($1, $102);
   continue;
  } else {
   $103 = $1 + 72 | 0;
   $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
   __ZN9b2Contact6UpdateEP17b2ContactListener($99, $104);
   $105 = $c;
   $106 = __ZN9b2Contact7GetNextEv($105) | 0;
   $c = $106;
   continue;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $xf, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$expand_i1_val9 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0;
 var $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $denominator = 0.0, $e = 0, $normal = 0, $numerator = 0.0, $or$cond = 0, $p1 = 0, $p2 = 0, $q = 0, $r = 0;
 var $rr = 0.0, $s = 0.0, $t = 0.0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 180 | 0;
 $p1 = sp + 152 | 0;
 $6 = sp + 144 | 0;
 $p2 = sp + 136 | 0;
 $7 = sp + 128 | 0;
 $d = sp + 120 | 0;
 $v1 = sp + 112 | 0;
 $v2 = sp + 104 | 0;
 $e = sp + 96 | 0;
 $normal = sp + 88 | 0;
 $8 = sp + 72 | 0;
 $q = sp + 56 | 0;
 $9 = sp + 48 | 0;
 $r = sp + 40 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $xf;
 $5 = $childIndex;
 $14 = $1;
 $15 = $4;
 $16 = $15 + 8 | 0;
 $17 = $3;
 $18 = $4;
 __ZmiRK6b2Vec2S1_($6, $17, $18);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p1, $16, $6);
 $19 = $4;
 $20 = $19 + 8 | 0;
 $21 = $3;
 $22 = $21 + 8 | 0;
 $23 = $4;
 __ZmiRK6b2Vec2S1_($7, $22, $23);
 __Z6b2MulTRK5b2RotRK6b2Vec2($p2, $20, $7);
 __ZmiRK6b2Vec2S1_($d, $p2, $p1);
 $24 = $14 + 12 | 0;
 {}
 SAFE_HEAP_STORE($v1 | 0, SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v1 + 4 | 0, SAFE_HEAP_LOAD($24 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $25 = $14 + 20 | 0;
 {}
 SAFE_HEAP_STORE($v2 | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($v2 + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZmiRK6b2Vec2S1_($e, $v2, $v1);
 $26 = $e + 4 | 0;
 $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
 $28 = +(+SAFE_HEAP_LOAD_D($e | 0, 4));
 $29 = -$28;
 __ZN6b2Vec2C2Eff($normal, $27, $29);
 +__ZN6b2Vec29NormalizeEv($normal);
 __ZmiRK6b2Vec2S1_($8, $v1, $p1);
 $30 = +__Z5b2DotRK6b2Vec2S1_($normal, $8);
 $numerator = $30;
 $31 = +__Z5b2DotRK6b2Vec2S1_($normal, $d);
 $denominator = $31;
 $32 = $denominator;
 $33 = $32 == 0.0;
 if ($33) {
  $$expand_i1_val = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $63 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $63 | 0;
 }
 $34 = $numerator;
 $35 = $denominator;
 $36 = $34 / $35;
 $t = $36;
 $37 = $t;
 $38 = $37 < 0.0;
 if (!$38) {
  $39 = $3;
  $40 = $39 + 16 | 0;
  $41 = +(+SAFE_HEAP_LOAD_D($40 | 0, 4));
  $42 = $t;
  $43 = $41 < $42;
  if (!$43) {
   $44 = $t;
   __ZmlfRK6b2Vec2($9, $44, $d);
   __ZplRK6b2Vec2S1_($q, $p1, $9);
   __ZmiRK6b2Vec2S1_($r, $v2, $v1);
   $45 = +__Z5b2DotRK6b2Vec2S1_($r, $r);
   $rr = $45;
   $46 = $rr;
   $47 = $46 == 0.0;
   if ($47) {
    $$expand_i1_val5 = 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val5 | 0, 1);
    $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
    $63 = $$pre_trunc & 1;
    STACKTOP = sp;
    return $63 | 0;
   }
   __ZmiRK6b2Vec2S1_($10, $q, $v1);
   $48 = +__Z5b2DotRK6b2Vec2S1_($10, $r);
   $49 = $rr;
   $50 = $48 / $49;
   $s = $50;
   $51 = $s;
   $52 = $51 < 0.0;
   $53 = $s;
   $54 = 1.0 < $53;
   $or$cond = $52 | $54;
   if ($or$cond) {
    $$expand_i1_val7 = 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val7 | 0, 1);
    $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
    $63 = $$pre_trunc & 1;
    STACKTOP = sp;
    return $63 | 0;
   }
   $55 = $t;
   $56 = $2;
   $57 = $56 + 8 | 0;
   SAFE_HEAP_STORE_D($57 | 0, +$55, 4);
   $58 = $numerator;
   $59 = $58 > 0.0;
   $60 = $2;
   $61 = $4;
   $62 = $61 + 8 | 0;
   if ($59) {
    __Z5b2MulRK5b2RotRK6b2Vec2($12, $62, $normal);
    __ZNK6b2Vec2ngEv($11, $12);
    {}
    SAFE_HEAP_STORE($60 | 0, SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($60 + 4 | 0, SAFE_HEAP_LOAD($11 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   } else {
    __Z5b2MulRK5b2RotRK6b2Vec2($13, $62, $normal);
    {}
    SAFE_HEAP_STORE($60 | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($60 + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   }
   $$expand_i1_val9 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val9 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $63 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $63 | 0;
  }
 }
 $$expand_i1_val3 = 0;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val3 | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $63 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $63 | 0;
}

function __ZN13b2DynamicTree12AllocateNodeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $nodeId = 0, $oldNodes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == -1;
 if ($4) {
  $5 = $1 + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = $1 + 12 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = ($6 | 0) == ($8 | 0);
  if (!$9) {
   ___assert_fail(4504 | 0, 4215 | 0, 58, 4534 | 0);
  }
  $10 = $1 + 4 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $oldNodes = $11;
  $12 = $1 + 12 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13 << 1;
  SAFE_HEAP_STORE($12 | 0, $14 | 0, 4);
  $15 = $1 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 * 36 | 0;
  $18 = __Z7b2Alloci($17) | 0;
  $19 = $1 + 4 | 0;
  SAFE_HEAP_STORE($19 | 0, $18 | 0, 4);
  $20 = $1 + 4 | 0;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $22 = $oldNodes;
  $23 = $1 + 8 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $24 * 36 | 0;
  _memcpy($21 | 0, $22 | 0, $25 | 0) | 0;
  $26 = $oldNodes;
  __Z6b2FreePv($26);
  $27 = $1 + 8 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $i = $28;
  while (1) {
   $29 = $i;
   $30 = $1 + 12 | 0;
   $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
   $32 = $31 - 1 | 0;
   $33 = ($29 | 0) < ($32 | 0);
   if (!$33) {
    break;
   }
   $34 = $i;
   $35 = $34 + 1 | 0;
   $36 = $i;
   $37 = $1 + 4 | 0;
   $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
   $39 = $38 + ($36 * 36 | 0) | 0;
   $40 = $39 + 20 | 0;
   SAFE_HEAP_STORE($40 | 0, $35 | 0, 4);
   $41 = $i;
   $42 = $1 + 4 | 0;
   $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
   $44 = $43 + ($41 * 36 | 0) | 0;
   $45 = $44 + 32 | 0;
   SAFE_HEAP_STORE($45 | 0, -1 | 0, 4);
   $46 = $i;
   $47 = $46 + 1 | 0;
   $i = $47;
  }
  $48 = $1 + 12 | 0;
  $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
  $50 = $49 - 1 | 0;
  $51 = $1 + 4 | 0;
  $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
  $53 = $52 + ($50 * 36 | 0) | 0;
  $54 = $53 + 20 | 0;
  SAFE_HEAP_STORE($54 | 0, -1 | 0, 4);
  $55 = $1 + 12 | 0;
  $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
  $57 = $56 - 1 | 0;
  $58 = $1 + 4 | 0;
  $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
  $60 = $59 + ($57 * 36 | 0) | 0;
  $61 = $60 + 32 | 0;
  SAFE_HEAP_STORE($61 | 0, -1 | 0, 4);
  $62 = $1 + 8 | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = $1 + 16 | 0;
  SAFE_HEAP_STORE($64 | 0, $63 | 0, 4);
 }
 $65 = $1 + 16 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $nodeId = $66;
 $67 = $nodeId;
 $68 = $1 + 4 | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = $69 + ($67 * 36 | 0) | 0;
 $71 = $70 + 20 | 0;
 $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
 $73 = $1 + 16 | 0;
 SAFE_HEAP_STORE($73 | 0, $72 | 0, 4);
 $74 = $nodeId;
 $75 = $1 + 4 | 0;
 $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
 $77 = $76 + ($74 * 36 | 0) | 0;
 $78 = $77 + 20 | 0;
 SAFE_HEAP_STORE($78 | 0, -1 | 0, 4);
 $79 = $nodeId;
 $80 = $1 + 4 | 0;
 $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
 $82 = $81 + ($79 * 36 | 0) | 0;
 $83 = $82 + 24 | 0;
 SAFE_HEAP_STORE($83 | 0, -1 | 0, 4);
 $84 = $nodeId;
 $85 = $1 + 4 | 0;
 $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
 $87 = $86 + ($84 * 36 | 0) | 0;
 $88 = $87 + 28 | 0;
 SAFE_HEAP_STORE($88 | 0, -1 | 0, 4);
 $89 = $nodeId;
 $90 = $1 + 4 | 0;
 $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
 $92 = $91 + ($89 * 36 | 0) | 0;
 $93 = $92 + 32 | 0;
 SAFE_HEAP_STORE($93 | 0, 0 | 0, 4);
 $94 = $nodeId;
 $95 = $1 + 4 | 0;
 $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
 $97 = $96 + ($94 * 36 | 0) | 0;
 $98 = $97 + 16 | 0;
 SAFE_HEAP_STORE($98 | 0, 0 | 0, 4);
 $99 = $1 + 8 | 0;
 $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
 $101 = $100 + 1 | 0;
 SAFE_HEAP_STORE($99 | 0, $101 | 0, 4);
 $102 = $nodeId;
 STACKTOP = sp;
 return $102 | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($iovs | 0, $1 | 0, 4);
 $2 = $iovs + 4 | 0;
 $3 = $f + 20 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4;
 $6 = $5 - $1 | 0;
 SAFE_HEAP_STORE($2 | 0, $6 | 0, 4);
 $7 = $iovs + 8 | 0;
 SAFE_HEAP_STORE($7 | 0, $buf | 0, 4);
 $8 = $iovs + 12 | 0;
 SAFE_HEAP_STORE($8 | 0, $len | 0, 4);
 $9 = $6 + $len | 0;
 $10 = $f + 60 | 0;
 $11 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $9;
 while (1) {
  $12 = SAFE_HEAP_LOAD(1680 | 0, 4, 0) | 0 | 0;
  $13 = ($12 | 0) == (0 | 0);
  if ($13) {
   $17 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($vararg_buffer3 | 0, $17 | 0, 4);
   $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
   SAFE_HEAP_STORE($vararg_ptr6 | 0, $iov$0 | 0, 4);
   $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
   SAFE_HEAP_STORE($vararg_ptr7 | 0, $iovcnt$0 | 0, 4);
   $18 = ___syscall146(146, $vararg_buffer3 | 0) | 0;
   $19 = ___syscall_ret($18) | 0;
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push(251 | 0, $f | 0);
   $14 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($vararg_buffer | 0, $14 | 0, 4);
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   SAFE_HEAP_STORE($vararg_ptr1 | 0, $iov$0 | 0, 4);
   $vararg_ptr2 = $vararg_buffer + 8 | 0;
   SAFE_HEAP_STORE($vararg_ptr2 | 0, $iovcnt$0 | 0, 4);
   $15 = ___syscall146(146, $vararg_buffer | 0) | 0;
   $16 = ___syscall_ret($15) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0 | 0) == ($cnt$0 | 0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0 | 0) < 0;
  if ($27) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = $rem$0 - $cnt$0 | 0;
  $36 = $iov$0 + 4 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $cnt$0 >>> 0 > $37 >>> 0;
  if ($38) {
   $39 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($0 | 0, $39 | 0, 4);
   SAFE_HEAP_STORE($3 | 0, $39 | 0, 4);
   $40 = $cnt$0 - $37 | 0;
   $41 = $iov$0 + 8 | 0;
   $42 = $iovcnt$0 + -1 | 0;
   $$phi$trans$insert = $iov$0 + 12 | 0;
   $$pre = SAFE_HEAP_LOAD($$phi$trans$insert | 0, 4, 0) | 0 | 0;
   $50 = $$pre;
   $cnt$1 = $40;
   $iov$1 = $41;
   $iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0 | 0) == 2;
   if ($43) {
    $44 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
    $45 = $44 + $cnt$0 | 0;
    SAFE_HEAP_STORE($0 | 0, $45 | 0, 4);
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = 2;
   } else {
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = SAFE_HEAP_LOAD($iov$1 | 0, 4, 0) | 0 | 0;
  $47 = $46 + $cnt$1 | 0;
  SAFE_HEAP_STORE($iov$1 | 0, $47 | 0, 4);
  $48 = $iov$1 + 4 | 0;
  $49 = $50 - $cnt$1 | 0;
  SAFE_HEAP_STORE($48 | 0, $49 | 0, 4);
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $35;
 }
 if ((label | 0) == 6) {
  $21 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $22 = $f + 48 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = $21 + $23 | 0;
  $25 = $f + 16 | 0;
  SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
  $26 = $21;
  SAFE_HEAP_STORE($0 | 0, $26 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, $26 | 0, 4);
  $$0 = $len;
 } else if ((label | 0) == 8) {
  $28 = $f + 16 | 0;
  SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
  $29 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $30 = $29 | 32;
  SAFE_HEAP_STORE($f | 0, $30 | 0, 4);
  $31 = ($iovcnt$0$lcssa12 | 0) == 2;
  if ($31) {
   $$0 = 0;
  } else {
   $32 = $iov$0$lcssa11 + 4 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $34 = $len - $33 | 0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$03 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 40 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 $4 = $last;
 $5 = $first;
 $6 = $4 - $5 | 0;
 $7 = ($6 | 0) > 3;
 L1 : do {
  if ($7) {
   $8 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $9 = $8 << 24 >> 24 == 68;
   if ($9) {
    $10 = $first + 1 | 0;
    $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
    $12 = $11 << 24 >> 24;
    switch ($12 | 0) {
    case 84:
    case 116:
     {
      break;
     }
    default:
     {
      $$03 = $first;
      break L1;
     }
    }
    $13 = $first + 2 | 0;
    $14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13, $last, $db) | 0;
    $15 = ($14 | 0) == ($13 | 0);
    $16 = ($14 | 0) == ($last | 0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$03 = $first;
    } else {
     $17 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
     $18 = $17 << 24 >> 24 == 69;
     if ($18) {
      $19 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
      $20 = $db + 4 | 0;
      $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
      $22 = ($19 | 0) == ($21 | 0);
      if ($22) {
       $$03 = $first;
      } else {
       $23 = $21 + -24 | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3, $23);
       __THREW__ = 0;
       $24 = invoke_iiii(227, $3 | 0, 0, 10396 | 0) | 0;
       $25 = __THREW__;
       __THREW__ = 0;
       $26 = $25 & 1;
       do {
        if ($26) {
         $35 = ___cxa_find_matching_catch() | 0;
         $36 = tempRet0;
         $$1 = $36;
         $$12 = $35;
        } else {
         {}
         SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($24 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($24 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
         SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
         $27 = $24 + 4 | 0;
         SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
         $28 = $24 + 8 | 0;
         SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
         __THREW__ = 0;
         $29 = invoke_iii(228, $2 | 0, 10212 | 0) | 0;
         $30 = __THREW__;
         __THREW__ = 0;
         $31 = $30 & 1;
         if ($31) {
          $37 = ___cxa_find_matching_catch() | 0;
          $38 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $$1 = $38;
          $$12 = $37;
          break;
         } else {
          {}
          SAFE_HEAP_STORE($1 | 0, SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1 + 4 | 0, SAFE_HEAP_LOAD($29 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($1 + 8 | 0, SAFE_HEAP_LOAD($29 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
          SAFE_HEAP_STORE($29 | 0, 0 | 0, 4);
          $32 = $29 + 4 | 0;
          SAFE_HEAP_STORE($32 | 0, 0 | 0, 4);
          $33 = $29 + 8 | 0;
          SAFE_HEAP_STORE($33 | 0, 0 | 0, 4);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0, $1);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($23, $0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $34 = $14 + 1 | 0;
          $$03 = $34;
          break L1;
         }
        }
       } while (0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       ___resumeException($$12 | 0);
      }
     } else {
      $$03 = $first;
     }
    }
   } else {
    $$03 = $first;
   }
  } else {
   $$03 = $first;
  }
 } while (0);
 STACKTOP = sp;
 return $$03 | 0;
}

function __ZL18b2FindIncidentEdgeP12b2ClipVertexPK14b2PolygonShapeRK11b2TransformiS3_S6_($c, $poly1, $xf1, $edge1, $poly2, $xf2) {
 $c = $c | 0;
 $poly1 = $poly1 | 0;
 $xf1 = $xf1 | 0;
 $edge1 = $edge1 | 0;
 $poly2 = $poly2 | 0;
 $xf2 = $xf2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $count2 = 0;
 var $dot = 0.0, $i = 0, $i1 = 0, $i2 = 0, $index = 0, $minDot = 0.0, $normal1 = 0, $normals1 = 0, $normals2 = 0, $vertices2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $normal1 = sp + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $0 = $c;
 $1 = $poly1;
 $2 = $xf1;
 $3 = $edge1;
 $4 = $poly2;
 $5 = $xf2;
 $9 = $1;
 $10 = $9 + 84 | 0;
 $normals1 = $10;
 $11 = $4;
 $12 = $11 + 148 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $count2 = $13;
 $14 = $4;
 $15 = $14 + 20 | 0;
 $vertices2 = $15;
 $16 = $4;
 $17 = $16 + 84 | 0;
 $normals2 = $17;
 $18 = $3;
 $19 = 0 <= ($18 | 0);
 if (!$19) {
  ___assert_fail(8194 | 0, 8231 | 0, 74, 8292 | 0);
 }
 $20 = $3;
 $21 = $1;
 $22 = $21 + 148 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = ($20 | 0) < ($23 | 0);
 if (!$24) {
  ___assert_fail(8194 | 0, 8231 | 0, 74, 8292 | 0);
 }
 $25 = $5;
 $26 = $25 + 8 | 0;
 $27 = $2;
 $28 = $27 + 8 | 0;
 $29 = $3;
 $30 = $normals1;
 $31 = $30 + ($29 << 3) | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($6, $28, $31);
 __Z6b2MulTRK5b2RotRK6b2Vec2($normal1, $26, $6);
 $index = 0;
 $minDot = 34028234663852886.0e22;
 $i = 0;
 while (1) {
  $32 = $i;
  $33 = $count2;
  $34 = ($32 | 0) < ($33 | 0);
  if (!$34) {
   break;
  }
  $35 = $i;
  $36 = $normals2;
  $37 = $36 + ($35 << 3) | 0;
  $38 = +__Z5b2DotRK6b2Vec2S1_($normal1, $37);
  $dot = $38;
  $39 = $dot;
  $40 = $minDot;
  $41 = $39 < $40;
  if ($41) {
   $42 = $dot;
   $minDot = $42;
   $43 = $i;
   $index = $43;
  }
  $44 = $i;
  $45 = $44 + 1 | 0;
  $i = $45;
 }
 $46 = $index;
 $i1 = $46;
 $47 = $i1;
 $48 = $47 + 1 | 0;
 $49 = $count2;
 $50 = ($48 | 0) < ($49 | 0);
 $51 = $i1;
 $52 = $51 + 1 | 0;
 $53 = $50 ? $52 : 0;
 $i2 = $53;
 $54 = $0;
 $55 = $5;
 $56 = $i1;
 $57 = $vertices2;
 $58 = $57 + ($56 << 3) | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($7, $55, $58);
 {}
 SAFE_HEAP_STORE($54 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($54 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $59 = $3;
 $60 = $59 & 255;
 $61 = $0;
 $62 = $61 + 8 | 0;
 SAFE_HEAP_STORE($62 >> 0 | 0, $60 | 0, 1);
 $63 = $i1;
 $64 = $63 & 255;
 $65 = $0;
 $66 = $65 + 8 | 0;
 $67 = $66 + 1 | 0;
 SAFE_HEAP_STORE($67 >> 0 | 0, $64 | 0, 1);
 $68 = $0;
 $69 = $68 + 8 | 0;
 $70 = $69 + 2 | 0;
 SAFE_HEAP_STORE($70 >> 0 | 0, 1 | 0, 1);
 $71 = $0;
 $72 = $71 + 8 | 0;
 $73 = $72 + 3 | 0;
 SAFE_HEAP_STORE($73 >> 0 | 0, 0 | 0, 1);
 $74 = $0;
 $75 = $74 + 12 | 0;
 $76 = $5;
 $77 = $i2;
 $78 = $vertices2;
 $79 = $78 + ($77 << 3) | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($8, $76, $79);
 {}
 SAFE_HEAP_STORE($75 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($75 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $80 = $3;
 $81 = $80 & 255;
 $82 = $0;
 $83 = $82 + 12 | 0;
 $84 = $83 + 8 | 0;
 SAFE_HEAP_STORE($84 >> 0 | 0, $81 | 0, 1);
 $85 = $i2;
 $86 = $85 & 255;
 $87 = $0;
 $88 = $87 + 12 | 0;
 $89 = $88 + 8 | 0;
 $90 = $89 + 1 | 0;
 SAFE_HEAP_STORE($90 >> 0 | 0, $86 | 0, 1);
 $91 = $0;
 $92 = $91 + 12 | 0;
 $93 = $92 + 8 | 0;
 $94 = $93 + 2 | 0;
 SAFE_HEAP_STORE($94 >> 0 | 0, 1 | 0, 1);
 $95 = $0;
 $96 = $95 + 12 | 0;
 $97 = $96 + 8 | 0;
 $98 = $97 + 3 | 0;
 SAFE_HEAP_STORE($98 >> 0 | 0, 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function __ZN7b2World4StepEfii($this, $dt, $velocityIterations, $positionIterations) {
 $this = $this | 0;
 $dt = +$dt;
 $velocityIterations = $velocityIterations | 0;
 $positionIterations = $positionIterations | 0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $step = 0, $stepTimer = 0, $timer = 0, $timer1 = 0, $timer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $stepTimer = sp + 43 | 0;
 $step = sp;
 $timer = sp + 42 | 0;
 $timer1 = sp + 41 | 0;
 $timer2 = sp + 40 | 0;
 $0 = $this;
 $1 = $dt;
 $2 = $velocityIterations;
 $3 = $positionIterations;
 $4 = $0;
 __ZN7b2TimerC2Ev($stepTimer);
 $5 = $4 + 102868 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $6 & 1;
 $8 = ($7 | 0) != 0;
 if ($8) {
  $9 = $4 + 102872 | 0;
  __ZN16b2ContactManager15FindNewContactsEv($9);
  $10 = $4 + 102868 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11 & -2;
  SAFE_HEAP_STORE($10 | 0, $12 | 0, 4);
 }
 $13 = $4 + 102868 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $14 | 2;
 SAFE_HEAP_STORE($13 | 0, $15 | 0, 4);
 $16 = $1;
 SAFE_HEAP_STORE_D($step | 0, +$16, 4);
 $17 = $2;
 $18 = $step + 12 | 0;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = $3;
 $20 = $step + 16 | 0;
 SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
 $21 = $1;
 $22 = $21 > 0.0;
 if ($22) {
  $23 = $1;
  $24 = 1.0 / $23;
  $25 = $step + 4 | 0;
  SAFE_HEAP_STORE_D($25 | 0, +$24, 4);
 } else {
  $26 = $step + 4 | 0;
  SAFE_HEAP_STORE_D($26 | 0, +(0.0), 4);
 }
 $27 = $4 + 102988 | 0;
 $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
 $29 = $1;
 $30 = $28 * $29;
 $31 = $step + 8 | 0;
 SAFE_HEAP_STORE_D($31 | 0, +$30, 4);
 $32 = $4 + 102992 | 0;
 $33 = SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0;
 $34 = $33 & 1;
 $35 = $step + 20 | 0;
 $36 = $34 & 1;
 SAFE_HEAP_STORE($35 >> 0 | 0, $36 | 0, 1);
 __ZN7b2TimerC2Ev($timer);
 $37 = $4 + 102872 | 0;
 __ZN16b2ContactManager7CollideEv($37);
 $38 = +__ZNK7b2Timer15GetMillisecondsEv($timer);
 $39 = $4 + 102996 | 0;
 $40 = $39 + 4 | 0;
 SAFE_HEAP_STORE_D($40 | 0, +$38, 4);
 $41 = $4 + 102995 | 0;
 $42 = SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0;
 $43 = $42 & 1;
 if ($43) {
  $44 = +(+SAFE_HEAP_LOAD_D($step | 0, 4));
  $45 = $44 > 0.0;
  if ($45) {
   __ZN7b2TimerC2Ev($timer1);
   __ZN7b2World5SolveERK10b2TimeStep($4, $step);
   $46 = +__ZNK7b2Timer15GetMillisecondsEv($timer1);
   $47 = $4 + 102996 | 0;
   $48 = $47 + 8 | 0;
   SAFE_HEAP_STORE_D($48 | 0, +$46, 4);
  }
 }
 $49 = $4 + 102993 | 0;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 1;
 if ($51) {
  $52 = +(+SAFE_HEAP_LOAD_D($step | 0, 4));
  $53 = $52 > 0.0;
  if ($53) {
   __ZN7b2TimerC2Ev($timer2);
   __ZN7b2World8SolveTOIERK10b2TimeStep($4, $step);
   $54 = +__ZNK7b2Timer15GetMillisecondsEv($timer2);
   $55 = $4 + 102996 | 0;
   $56 = $55 + 28 | 0;
   SAFE_HEAP_STORE_D($56 | 0, +$54, 4);
  }
 }
 $57 = +(+SAFE_HEAP_LOAD_D($step | 0, 4));
 $58 = $57 > 0.0;
 if ($58) {
  $59 = $step + 4 | 0;
  $60 = +(+SAFE_HEAP_LOAD_D($59 | 0, 4));
  $61 = $4 + 102988 | 0;
  SAFE_HEAP_STORE_D($61 | 0, +$60, 4);
 }
 $62 = $4 + 102868 | 0;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 $64 = $63 & 4;
 $65 = ($64 | 0) != 0;
 if (!$65) {
  $66 = $4 + 102868 | 0;
  $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
  $68 = $67 & -3;
  SAFE_HEAP_STORE($66 | 0, $68 | 0, 4);
  $69 = +__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
  $70 = $4 + 102996 | 0;
  SAFE_HEAP_STORE_D($70 | 0, +$69, 4);
  STACKTOP = sp;
  return;
 }
 __ZN7b2World11ClearForcesEv($4);
 $66 = $4 + 102868 | 0;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = $67 & -3;
 SAFE_HEAP_STORE($66 | 0, $68 | 0, 4);
 $69 = +__ZNK7b2Timer15GetMillisecondsEv($stepTimer);
 $70 = $4 + 102996 | 0;
 SAFE_HEAP_STORE_D($70 | 0, +$69, 4);
 STACKTOP = sp;
 return;
}

function __ZNK20b2SeparationFunction8EvaluateEiif($this, $indexA, $indexB, $t) {
 $this = $this | 0;
 $indexA = $indexA | 0;
 $indexB = $indexB | 0;
 $t = +$t;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $localPointA = 0, $localPointA7 = 0, $localPointB = 0, $localPointB2 = 0, $normal = 0, $normal5 = 0, $pointA = 0, $pointA1 = 0, $pointA8 = 0, $pointB = 0, $pointB3 = 0, $pointB6 = 0, $separation = 0.0, $separation4 = 0.0, $separation9 = 0.0, $xfA = 0, $xfB = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xfA = sp + 160 | 0;
 $xfB = sp + 144 | 0;
 $localPointA = sp + 136 | 0;
 $localPointB = sp + 128 | 0;
 $pointA = sp + 120 | 0;
 $pointB = sp + 112 | 0;
 $5 = sp + 96 | 0;
 $normal = sp + 88 | 0;
 $pointA1 = sp + 80 | 0;
 $localPointB2 = sp + 72 | 0;
 $pointB3 = sp + 64 | 0;
 $6 = sp + 48 | 0;
 $normal5 = sp + 40 | 0;
 $pointB6 = sp + 32 | 0;
 $localPointA7 = sp + 24 | 0;
 $pointA8 = sp + 16 | 0;
 $7 = sp;
 $1 = $this;
 $2 = $indexA;
 $3 = $indexB;
 $4 = $t;
 $8 = $1;
 __ZN11b2TransformC2Ev($xfA);
 __ZN11b2TransformC2Ev($xfB);
 $9 = $8 + 8 | 0;
 $10 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($9, $xfA, $10);
 $11 = $8 + 44 | 0;
 $12 = $4;
 __ZNK7b2Sweep12GetTransformEP11b2Transformf($11, $xfB, $12);
 $13 = $8 + 80 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 switch ($14 | 0) {
 case 0:
  {
   $15 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $16 = $2;
   $17 = __ZNK15b2DistanceProxy9GetVertexEi($15, $16) | 0;
   {}
   SAFE_HEAP_STORE($localPointA | 0, SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointA + 4 | 0, SAFE_HEAP_LOAD($17 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $18 = $8 + 4 | 0;
   $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
   $20 = $3;
   $21 = __ZNK15b2DistanceProxy9GetVertexEi($19, $20) | 0;
   {}
   SAFE_HEAP_STORE($localPointB | 0, SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointB + 4 | 0, SAFE_HEAP_LOAD($21 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA, $xfA, $localPointA);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB, $xfB, $localPointB);
   __ZmiRK6b2Vec2S1_($5, $pointB, $pointA);
   $22 = $8 + 92 | 0;
   $23 = +__Z5b2DotRK6b2Vec2S1_($5, $22);
   $separation = $23;
   $24 = $separation;
   $0 = $24;
   $42 = $0;
   STACKTOP = sp;
   return +$42;
   break;
  }
 case 1:
  {
   $25 = $xfA + 8 | 0;
   $26 = $8 + 92 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($normal, $25, $26);
   $27 = $8 + 84 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA1, $xfA, $27);
   $28 = $8 + 4 | 0;
   $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
   $30 = $3;
   $31 = __ZNK15b2DistanceProxy9GetVertexEi($29, $30) | 0;
   {}
   SAFE_HEAP_STORE($localPointB2 | 0, SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointB2 + 4 | 0, SAFE_HEAP_LOAD($31 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB3, $xfB, $localPointB2);
   __ZmiRK6b2Vec2S1_($6, $pointB3, $pointA1);
   $32 = +__Z5b2DotRK6b2Vec2S1_($6, $normal);
   $separation4 = $32;
   $33 = $separation4;
   $0 = $33;
   $42 = $0;
   STACKTOP = sp;
   return +$42;
   break;
  }
 case 2:
  {
   $34 = $xfB + 8 | 0;
   $35 = $8 + 92 | 0;
   __Z5b2MulRK5b2RotRK6b2Vec2($normal5, $34, $35);
   $36 = $8 + 84 | 0;
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointB6, $xfB, $36);
   $37 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $38 = $2;
   $39 = __ZNK15b2DistanceProxy9GetVertexEi($37, $38) | 0;
   {}
   SAFE_HEAP_STORE($localPointA7 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($localPointA7 + 4 | 0, SAFE_HEAP_LOAD($39 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   __Z5b2MulRK11b2TransformRK6b2Vec2($pointA8, $xfA, $localPointA7);
   __ZmiRK6b2Vec2S1_($7, $pointA8, $pointB6);
   $40 = +__Z5b2DotRK6b2Vec2S1_($7, $normal5);
   $separation9 = $40;
   $41 = $separation9;
   $0 = $41;
   $42 = $0;
   STACKTOP = sp;
   return +$42;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4940 | 0, 239, 7963 | 0);
  }
 }
 return +(0.0);
}

function __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 $aabb = $aabb | 0;
 $displacement = $displacement | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0;
 var $d = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 64 | 0;
 $b = sp + 32 | 0;
 $r = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $d = sp;
 $1 = $this;
 $2 = $proxyId;
 $3 = $aabb;
 $4 = $displacement;
 $7 = $1;
 $8 = $2;
 $9 = 0 <= ($8 | 0);
 if (!$9) {
  ___assert_fail(4174 | 0, 4215 | 0, 132, 4299 | 0);
 }
 $10 = $2;
 $11 = $7 + 12 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($10 | 0) < ($12 | 0);
 if (!$13) {
  ___assert_fail(4174 | 0, 4215 | 0, 132, 4299 | 0);
 }
 $14 = $2;
 $15 = $7 + 4 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $16 + ($14 * 36 | 0) | 0;
 $18 = __ZNK10b2TreeNode6IsLeafEv($17) | 0;
 if (!$18) {
  ___assert_fail(4273 | 0, 4215 | 0, 134, 4299 | 0);
 }
 $19 = $2;
 $20 = $7 + 4 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $21 + ($19 * 36 | 0) | 0;
 $23 = $3;
 $24 = __ZNK6b2AABB8ContainsERKS_($22, $23) | 0;
 if ($24) {
  $$expand_i1_val = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $55 | 0;
 }
 $25 = $2;
 __ZN13b2DynamicTree10RemoveLeafEi($7, $25);
 $26 = $3;
 {}
 SAFE_HEAP_STORE($b | 0, SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($b + 4 | 0, SAFE_HEAP_LOAD($26 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($b + 8 | 0, SAFE_HEAP_LOAD($26 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($b + 12 | 0, SAFE_HEAP_LOAD($26 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZN6b2Vec2C2Eff($r, .10000000149011612, .10000000149011612);
 __ZmiRK6b2Vec2S1_($5, $b, $r);
 {}
 SAFE_HEAP_STORE($b | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($b + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $27 = $b + 8 | 0;
 $28 = $b + 8 | 0;
 __ZplRK6b2Vec2S1_($6, $28, $r);
 {}
 SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $29 = $4;
 __ZmlfRK6b2Vec2($d, 2.0, $29);
 $30 = +(+SAFE_HEAP_LOAD_D($d | 0, 4));
 $31 = $30 < 0.0;
 $32 = +(+SAFE_HEAP_LOAD_D($d | 0, 4));
 if ($31) {
  $33 = +(+SAFE_HEAP_LOAD_D($b | 0, 4));
  $34 = $33 + $32;
  SAFE_HEAP_STORE_D($b | 0, +$34, 4);
 } else {
  $35 = $b + 8 | 0;
  $36 = +(+SAFE_HEAP_LOAD_D($35 | 0, 4));
  $37 = $36 + $32;
  SAFE_HEAP_STORE_D($35 | 0, +$37, 4);
 }
 $38 = $d + 4 | 0;
 $39 = +(+SAFE_HEAP_LOAD_D($38 | 0, 4));
 $40 = $39 < 0.0;
 $41 = $d + 4 | 0;
 $42 = +(+SAFE_HEAP_LOAD_D($41 | 0, 4));
 if ($40) {
  $43 = $b + 4 | 0;
  $44 = +(+SAFE_HEAP_LOAD_D($43 | 0, 4));
  $45 = $44 + $42;
  SAFE_HEAP_STORE_D($43 | 0, +$45, 4);
 } else {
  $46 = $b + 8 | 0;
  $47 = $46 + 4 | 0;
  $48 = +(+SAFE_HEAP_LOAD_D($47 | 0, 4));
  $49 = $48 + $42;
  SAFE_HEAP_STORE_D($47 | 0, +$49, 4);
 }
 $50 = $2;
 $51 = $7 + 4 | 0;
 $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
 $53 = $52 + ($50 * 36 | 0) | 0;
 {}
 SAFE_HEAP_STORE($53 | 0, SAFE_HEAP_LOAD($b | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($53 + 4 | 0, SAFE_HEAP_LOAD($b + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($53 + 8 | 0, SAFE_HEAP_LOAD($b + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($53 + 12 | 0, SAFE_HEAP_LOAD($b + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $54 = $2;
 __ZN13b2DynamicTree10InsertLeafEi($7, $54);
 $$expand_i1_val2 = 1;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $55 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $55 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 L1 : do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     SAFE_HEAP_STORE($6 | 0, $path_below | 0, 4);
    }
   }
  } else {
   $9 = SAFE_HEAP_LOAD($info | 0, 4, 0) | 0 | 0;
   $10 = ($this | 0) == ($9 | 0);
   if (!$10) {
    $43 = $this + 8 | 0;
    $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
    $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
    $46 = $45 + 24 | 0;
    $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($47 | 0, 255 | 0) | 0) & 255]($44, $info, $current_ptr, $path_below, $use_strcmp);
    break;
   }
   $11 = $info + 16 | 0;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = ($12 | 0) == ($current_ptr | 0);
   if (!$13) {
    $14 = $info + 20 | 0;
    $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $16 = ($15 | 0) == ($current_ptr | 0);
    if (!$16) {
     $19 = $info + 32 | 0;
     SAFE_HEAP_STORE($19 | 0, $path_below | 0, 4);
     $20 = $info + 44 | 0;
     $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
     $22 = ($21 | 0) == 4;
     if ($22) {
      break;
     }
     $23 = $info + 52 | 0;
     SAFE_HEAP_STORE($23 >> 0 | 0, 0 | 0, 1);
     $24 = $info + 53 | 0;
     SAFE_HEAP_STORE($24 >> 0 | 0, 0 | 0, 1);
     $25 = $this + 8 | 0;
     $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
     $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
     $28 = $27 + 20 | 0;
     $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
     FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($29 | 0, 127 | 0) | 0) & 127]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     $30 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
     $31 = $30 << 24 >> 24 == 0;
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
      $not$ = $32 << 24 >> 24 == 0;
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label | 0) == 13) {
       SAFE_HEAP_STORE($14 | 0, $current_ptr | 0, 4);
       $33 = $info + 40 | 0;
       $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
       $35 = $34 + 1 | 0;
       SAFE_HEAP_STORE($33 | 0, $35 | 0, 4);
       $36 = $info + 36 | 0;
       $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
       $38 = ($37 | 0) == 1;
       if ($38) {
        $39 = $info + 24 | 0;
        $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
        $41 = ($40 | 0) == 2;
        if ($41) {
         $42 = $info + 54 | 0;
         SAFE_HEAP_STORE($42 >> 0 | 0, 1 | 0, 1);
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label | 0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       SAFE_HEAP_STORE($20 | 0, 4 | 0, 4);
       break L1;
      }
     } while (0);
     SAFE_HEAP_STORE($20 | 0, 3 | 0, 4);
     break;
    }
   }
   $17 = ($path_below | 0) == 1;
   if ($17) {
    $18 = $info + 32 | 0;
    SAFE_HEAP_STORE($18 | 0, 1 | 0, 4);
   }
  }
 } while (0);
 return;
}

function __ZN15b2DistanceProxy3SetEPK7b2Shapei($this, $shape, $index) {
 $this = $this | 0;
 $shape = $shape | 0;
 $index = $index | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $chain = 0, $circle = 0, $edge = 0, $polygon = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $shape;
 $2 = $index;
 $3 = $0;
 $4 = $1;
 $5 = __ZNK7b2Shape7GetTypeEv($4) | 0;
 switch ($5 | 0) {
 case 0:
  {
   $6 = $1;
   $circle = $6;
   $7 = $circle;
   $8 = $7 + 12 | 0;
   $9 = $3 + 16 | 0;
   SAFE_HEAP_STORE($9 | 0, $8 | 0, 4);
   $10 = $3 + 20 | 0;
   SAFE_HEAP_STORE($10 | 0, 1 | 0, 4);
   $11 = $circle;
   $12 = $11 + 8 | 0;
   $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
   $14 = $3 + 24 | 0;
   SAFE_HEAP_STORE_D($14 | 0, +$13, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $15 = $1;
   $polygon = $15;
   $16 = $polygon;
   $17 = $16 + 20 | 0;
   $18 = $3 + 16 | 0;
   SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
   $19 = $polygon;
   $20 = $19 + 148 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   $22 = $3 + 20 | 0;
   SAFE_HEAP_STORE($22 | 0, $21 | 0, 4);
   $23 = $polygon;
   $24 = $23 + 8 | 0;
   $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
   $26 = $3 + 24 | 0;
   SAFE_HEAP_STORE_D($26 | 0, +$25, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $27 = $1;
   $chain = $27;
   $28 = $2;
   $29 = 0 <= ($28 | 0);
   if (!$29) {
    ___assert_fail(4401 | 0, 4438 | 0, 53, 4070 | 0);
   }
   $30 = $2;
   $31 = $chain;
   $32 = $31 + 16 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $34 = ($30 | 0) < ($33 | 0);
   if (!$34) {
    ___assert_fail(4401 | 0, 4438 | 0, 53, 4070 | 0);
   }
   $35 = $2;
   $36 = $chain;
   $37 = $36 + 12 | 0;
   $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
   $39 = $38 + ($35 << 3) | 0;
   {}
   SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($39 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $40 = $2;
   $41 = $40 + 1 | 0;
   $42 = $chain;
   $43 = $42 + 16 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = ($41 | 0) < ($44 | 0);
   $46 = $3 + 8 | 0;
   if ($45) {
    $47 = $2;
    $48 = $47 + 1 | 0;
    $49 = $chain;
    $50 = $49 + 12 | 0;
    $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
    $52 = $51 + ($48 << 3) | 0;
    {}
    SAFE_HEAP_STORE($46 | 0, SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($46 + 4 | 0, SAFE_HEAP_LOAD($52 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   } else {
    $53 = $chain;
    $54 = $53 + 12 | 0;
    $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
    {}
    SAFE_HEAP_STORE($46 | 0, SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($46 + 4 | 0, SAFE_HEAP_LOAD($55 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   }
   $56 = $3 + 16 | 0;
   SAFE_HEAP_STORE($56 | 0, $3 | 0, 4);
   $57 = $3 + 20 | 0;
   SAFE_HEAP_STORE($57 | 0, 2 | 0, 4);
   $58 = $chain;
   $59 = $58 + 8 | 0;
   $60 = +(+SAFE_HEAP_LOAD_D($59 | 0, 4));
   $61 = $3 + 24 | 0;
   SAFE_HEAP_STORE_D($61 | 0, +$60, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $62 = $1;
   $edge = $62;
   $63 = $edge;
   $64 = $63 + 12 | 0;
   $65 = $3 + 16 | 0;
   SAFE_HEAP_STORE($65 | 0, $64 | 0, 4);
   $66 = $3 + 20 | 0;
   SAFE_HEAP_STORE($66 | 0, 2 | 0, 4);
   $67 = $edge;
   $68 = $67 + 8 | 0;
   $69 = +(+SAFE_HEAP_LOAD_D($68 | 0, 4));
   $70 = $3 + 24 | 0;
   SAFE_HEAP_STORE_D($70 | 0, +$69, 4);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 81, 4070 | 0);
  }
 }
}

function __ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei($this, $edge, $index) {
 $this = $this | 0;
 $edge = $edge | 0;
 $index = $index | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $edge;
 $2 = $index;
 $3 = $0;
 $4 = $2;
 $5 = 0 <= ($4 | 0);
 if (!$5) {
  ___assert_fail(3949 | 0, 3734 | 0, 116, 3983 | 0);
 }
 $6 = $2;
 $7 = $3 + 16 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 - 1 | 0;
 $10 = ($6 | 0) < ($9 | 0);
 if (!$10) {
  ___assert_fail(3949 | 0, 3734 | 0, 116, 3983 | 0);
 }
 $11 = $1;
 $12 = $11 + 4 | 0;
 SAFE_HEAP_STORE($12 | 0, 1 | 0, 4);
 $13 = $3 + 8 | 0;
 $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
 $15 = $1;
 $16 = $15 + 8 | 0;
 SAFE_HEAP_STORE_D($16 | 0, +$14, 4);
 $17 = $1;
 $18 = $17 + 12 | 0;
 $19 = $2;
 $20 = $19 + 0 | 0;
 $21 = $3 + 12 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $22 + ($20 << 3) | 0;
 {}
 SAFE_HEAP_STORE($18 | 0, SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($18 + 4 | 0, SAFE_HEAP_LOAD($23 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $24 = $1;
 $25 = $24 + 20 | 0;
 $26 = $2;
 $27 = $26 + 1 | 0;
 $28 = $3 + 12 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $29 + ($27 << 3) | 0;
 {}
 SAFE_HEAP_STORE($25 | 0, SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($25 + 4 | 0, SAFE_HEAP_LOAD($30 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $31 = $2;
 $32 = ($31 | 0) > 0;
 $33 = $1;
 $34 = $33 + 28 | 0;
 if ($32) {
  $35 = $2;
  $36 = $35 - 1 | 0;
  $37 = $3 + 12 | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = $38 + ($36 << 3) | 0;
  {}
  SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($34 + 4 | 0, SAFE_HEAP_LOAD($39 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $40 = $1;
  $41 = $40 + 44 | 0;
  SAFE_HEAP_STORE($41 >> 0 | 0, 1 | 0, 1);
 } else {
  $42 = $3 + 20 | 0;
  {}
  SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($34 + 4 | 0, SAFE_HEAP_LOAD($42 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $43 = $3 + 36 | 0;
  $44 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0;
  $45 = $44 & 1;
  $46 = $1;
  $47 = $46 + 44 | 0;
  $48 = $45 & 1;
  SAFE_HEAP_STORE($47 >> 0 | 0, $48 | 0, 1);
 }
 $49 = $2;
 $50 = $3 + 16 | 0;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = $51 - 2 | 0;
 $53 = ($49 | 0) < ($52 | 0);
 $54 = $1;
 $55 = $54 + 36 | 0;
 if ($53) {
  $56 = $2;
  $57 = $56 + 2 | 0;
  $58 = $3 + 12 | 0;
  $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
  $60 = $59 + ($57 << 3) | 0;
  {}
  SAFE_HEAP_STORE($55 | 0, SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($55 + 4 | 0, SAFE_HEAP_LOAD($60 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $61 = $1;
  $62 = $61 + 45 | 0;
  SAFE_HEAP_STORE($62 >> 0 | 0, 1 | 0, 1);
  STACKTOP = sp;
  return;
 } else {
  $63 = $3 + 28 | 0;
  {}
  SAFE_HEAP_STORE($55 | 0, SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($55 + 4 | 0, SAFE_HEAP_LOAD($63 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $64 = $3 + 37 | 0;
  $65 = SAFE_HEAP_LOAD($64 >> 0 | 0, 1, 0) | 0 | 0;
  $66 = $65 & 1;
  $67 = $1;
  $68 = $67 + 45 | 0;
  $69 = $66 & 1;
  SAFE_HEAP_STORE($68 >> 0 | 0, $69 | 0, 1);
  STACKTOP = sp;
  return;
 }
}

function __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($this, $callback) {
 $this = $this | 0;
 $callback = $callback | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $fatAABB = 0, $i = 0, $i1 = 0, $pair = 0, $primaryPair = 0, $userDataA = 0, $userDataB = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $callback;
 $2 = $0;
 $3 = $2 + 52 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $i = 0;
 while (1) {
  $4 = $i;
  $5 = $2 + 40 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($4 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $2 + 32 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + ($8 << 2) | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $2 + 56 | 0;
  SAFE_HEAP_STORE($13 | 0, $12 | 0, 4);
  $14 = $2 + 56 | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = ($15 | 0) == -1;
  if (!$16) {
   $17 = $2 + 56 | 0;
   $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
   $19 = __ZNK13b2DynamicTree10GetFatAABBEi($2, $18) | 0;
   $fatAABB = $19;
   $20 = $fatAABB;
   __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($2, $2, $20);
  }
  $21 = $i;
  $22 = $21 + 1 | 0;
  $i = $22;
 }
 $23 = $2 + 40 | 0;
 SAFE_HEAP_STORE($23 | 0, 0 | 0, 4);
 $24 = $2 + 44 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = $2 + 44 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = $2 + 52 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $27 + ($29 << 3) | 0;
 __ZNSt3__14sortIP6b2PairPFbRKS1_S4_EEEvT_S7_T0_($25, $30, 213);
 $i1 = 0;
 L8 : while (1) {
  $31 = $i1;
  $32 = $2 + 52 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = ($31 | 0) < ($33 | 0);
  if (!$34) {
   break;
  }
  $35 = $2 + 44 | 0;
  $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
  $37 = $i1;
  $38 = $36 + ($37 << 3) | 0;
  $primaryPair = $38;
  $39 = $primaryPair;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = __ZNK13b2DynamicTree11GetUserDataEi($2, $40) | 0;
  $userDataA = $41;
  $42 = $primaryPair;
  $43 = $42 + 4 | 0;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = __ZNK13b2DynamicTree11GetUserDataEi($2, $44) | 0;
  $userDataB = $45;
  $46 = $1;
  $47 = $userDataA;
  $48 = $userDataB;
  __ZN16b2ContactManager7AddPairEPvS0_($46, $47, $48);
  $49 = $i1;
  $50 = $49 + 1 | 0;
  $i1 = $50;
  while (1) {
   $51 = $i1;
   $52 = $2 + 52 | 0;
   $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
   $54 = ($51 | 0) < ($53 | 0);
   if (!$54) {
    continue L8;
   }
   $55 = $2 + 44 | 0;
   $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
   $57 = $i1;
   $58 = $56 + ($57 << 3) | 0;
   $pair = $58;
   $59 = $pair;
   $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
   $61 = $primaryPair;
   $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
   $63 = ($60 | 0) != ($62 | 0);
   if ($63) {
    continue L8;
   }
   $64 = $pair;
   $65 = $64 + 4 | 0;
   $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
   $67 = $primaryPair;
   $68 = $67 + 4 | 0;
   $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
   $70 = ($66 | 0) != ($69 | 0);
   if ($70) {
    continue L8;
   }
   $71 = $i1;
   $72 = $71 + 1 | 0;
   $i1 = $72;
  }
 }
 STACKTOP = sp;
 return;
}

function __Z19b2ClipSegmentToLineP12b2ClipVertexPKS_RK6b2Vec2fi($vOut, $vIn, $normal, $offset, $vertexIndexA) {
 $vOut = $vOut | 0;
 $vIn = $vIn | 0;
 $normal = $normal | 0;
 $offset = +$offset;
 $vertexIndexA = $vertexIndexA | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $distance0 = 0.0;
 var $distance1 = 0.0, $interp = 0.0, $numOut = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $0 = $vOut;
 $1 = $vIn;
 $2 = $normal;
 $3 = $offset;
 $4 = $vertexIndexA;
 $numOut = 0;
 $8 = $2;
 $9 = $1;
 $10 = +__Z5b2DotRK6b2Vec2S1_($8, $9);
 $11 = $3;
 $12 = $10 - $11;
 $distance0 = $12;
 $13 = $2;
 $14 = $1;
 $15 = $14 + 12 | 0;
 $16 = +__Z5b2DotRK6b2Vec2S1_($13, $15);
 $17 = $3;
 $18 = $16 - $17;
 $distance1 = $18;
 $19 = $distance0;
 $20 = $19 <= 0.0;
 if ($20) {
  $21 = $numOut;
  $22 = $21 + 1 | 0;
  $numOut = $22;
  $23 = $0;
  $24 = $23 + ($21 * 12 | 0) | 0;
  $25 = $1;
  {}
  SAFE_HEAP_STORE($24 | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($24 + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($24 + 8 | 0, SAFE_HEAP_LOAD($25 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 }
 $26 = $distance1;
 $27 = $26 <= 0.0;
 if ($27) {
  $28 = $numOut;
  $29 = $28 + 1 | 0;
  $numOut = $29;
  $30 = $0;
  $31 = $30 + ($28 * 12 | 0) | 0;
  $32 = $1;
  $33 = $32 + 12 | 0;
  {}
  SAFE_HEAP_STORE($31 | 0, SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($31 + 4 | 0, SAFE_HEAP_LOAD($33 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($31 + 8 | 0, SAFE_HEAP_LOAD($33 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 }
 $34 = $distance0;
 $35 = $distance1;
 $36 = $34 * $35;
 $37 = $36 < 0.0;
 if (!$37) {
  $78 = $numOut;
  STACKTOP = sp;
  return $78 | 0;
 }
 $38 = $distance0;
 $39 = $distance0;
 $40 = $distance1;
 $41 = $39 - $40;
 $42 = $38 / $41;
 $interp = $42;
 $43 = $numOut;
 $44 = $0;
 $45 = $44 + ($43 * 12 | 0) | 0;
 $46 = $1;
 $47 = $interp;
 $48 = $1;
 $49 = $48 + 12 | 0;
 $50 = $1;
 __ZmiRK6b2Vec2S1_($7, $49, $50);
 __ZmlfRK6b2Vec2($6, $47, $7);
 __ZplRK6b2Vec2S1_($5, $46, $6);
 {}
 SAFE_HEAP_STORE($45 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($45 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $51 = $4;
 $52 = $51 & 255;
 $53 = $numOut;
 $54 = $0;
 $55 = $54 + ($53 * 12 | 0) | 0;
 $56 = $55 + 8 | 0;
 SAFE_HEAP_STORE($56 >> 0 | 0, $52 | 0, 1);
 $57 = $1;
 $58 = $57 + 8 | 0;
 $59 = $58 + 1 | 0;
 $60 = SAFE_HEAP_LOAD($59 >> 0 | 0, 1, 0) | 0 | 0;
 $61 = $numOut;
 $62 = $0;
 $63 = $62 + ($61 * 12 | 0) | 0;
 $64 = $63 + 8 | 0;
 $65 = $64 + 1 | 0;
 SAFE_HEAP_STORE($65 >> 0 | 0, $60 | 0, 1);
 $66 = $numOut;
 $67 = $0;
 $68 = $67 + ($66 * 12 | 0) | 0;
 $69 = $68 + 8 | 0;
 $70 = $69 + 2 | 0;
 SAFE_HEAP_STORE($70 >> 0 | 0, 0 | 0, 1);
 $71 = $numOut;
 $72 = $0;
 $73 = $72 + ($71 * 12 | 0) | 0;
 $74 = $73 + 8 | 0;
 $75 = $74 + 3 | 0;
 SAFE_HEAP_STORE($75 >> 0 | 0, 1 | 0, 1);
 $76 = $numOut;
 $77 = $76 + 1 | 0;
 $numOut = $77;
 $78 = $numOut;
 STACKTOP = sp;
 return $78 | 0;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $info = sp;
 $0 = SAFE_HEAP_LOAD($static_ptr | 0, 4, 0) | 0 | 0;
 $1 = $0 + -8 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $2;
 $4 = $static_ptr + $3 | 0;
 $5 = $0 + -4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($info | 0, $dst_type | 0, 4);
 $7 = $info + 4 | 0;
 SAFE_HEAP_STORE($7 | 0, $static_ptr | 0, 4);
 $8 = $info + 8 | 0;
 SAFE_HEAP_STORE($8 | 0, $static_type | 0, 4);
 $9 = $info + 12 | 0;
 SAFE_HEAP_STORE($9 | 0, $src2dst_offset | 0, 4);
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $10;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 SAFE_HEAP_STORE($10 + 36 | 0, 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($10 + 38 >> 0 | 0, 0 | 0 | 0, 1);
 L1 : do {
  if ($16) {
   $17 = $info + 48 | 0;
   SAFE_HEAP_STORE($17 | 0, 1 | 0, 4);
   $18 = SAFE_HEAP_LOAD($dst_type | 0, 4, 0) | 0 | 0;
   $19 = $18 + 20 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($20 | 0, 127 | 0) | 0) & 127]($dst_type, $info, $4, $4, 1, 0);
   $21 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
   $22 = ($21 | 0) == 1;
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = $info + 36 | 0;
   $24 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $25 = $24 + 24 | 0;
   $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
   FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($26 | 0, 255 | 0) | 0) & 255]($6, $info, $4, 1, 0);
   $27 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
   switch ($27 | 0) {
   case 0:
    {
     $28 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
     $29 = ($28 | 0) == 1;
     $30 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
     $31 = ($30 | 0) == 1;
     $or$cond = $29 & $31;
     $32 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
     $33 = ($32 | 0) == 1;
     $or$cond3 = $or$cond & $33;
     $34 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
     $$8 = $or$cond3 ? $34 : 0;
     $dst_ptr$0 = $$8;
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $dst_ptr$0 = 0;
     break L1;
    }
   }
   $35 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
   $36 = ($35 | 0) == 1;
   if (!$36) {
    $37 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $38 = ($37 | 0) == 0;
    $39 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
    $40 = ($39 | 0) == 1;
    $or$cond5 = $38 & $40;
    $41 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $42 = ($41 | 0) == 1;
    $or$cond7 = $or$cond5 & $42;
    if (!$or$cond7) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $dst_ptr$0 = $43;
  }
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2 | 0) != 0;
 $4 = ($n | 0) != 0;
 $or$cond18 = $4 & $3;
 L1 : do {
  if ($or$cond18) {
   $5 = $c & 255;
   $$019 = $n;
   $s$020 = $src;
   while (1) {
    $6 = SAFE_HEAP_LOAD($s$020 >> 0 | 0, 1, 0) | 0 | 0;
    $7 = $6 << 24 >> 24 == $5 << 24 >> 24;
    if ($7) {
     $$0$lcssa44 = $$019;
     $s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = $s$020 + 1 | 0;
    $9 = $$019 + -1 | 0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11 | 0) != 0;
    $13 = ($9 | 0) != 0;
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;
     $s$020 = $8;
    } else {
     $$0$lcssa = $9;
     $$lcssa = $13;
     $s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$lcssa = $4;
   $s$0$lcssa = $src;
   label = 5;
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;
   $s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;
   $s$2 = $s$0$lcssa;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $14 = SAFE_HEAP_LOAD($s$0$lcssa43 >> 0 | 0, 1, 0) | 0 | 0;
   $15 = $c & 255;
   $16 = $14 << 24 >> 24 == $15 << 24 >> 24;
   if ($16) {
    $$3 = $$0$lcssa44;
    $s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009) | 0;
    $18 = $$0$lcssa44 >>> 0 > 3;
    L11 : do {
     if ($18) {
      $$110 = $$0$lcssa44;
      $w$011 = $s$0$lcssa43;
      while (1) {
       $19 = SAFE_HEAP_LOAD($w$011 | 0, 4, 0) | 0 | 0;
       $20 = $19 ^ $17;
       $21 = $20 + -16843009 | 0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24 | 0) == 0;
       if (!$25) {
        $$110$lcssa = $$110;
        $w$011$lcssa = $w$011;
        break;
       }
       $26 = $w$011 + 4 | 0;
       $27 = $$110 + -4 | 0;
       $28 = $27 >>> 0 > 3;
       if ($28) {
        $$110 = $27;
        $w$011 = $26;
       } else {
        $$1$lcssa = $27;
        $w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;
      $s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;
      $w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while (0);
    if ((label | 0) == 11) {
     $29 = ($$1$lcssa | 0) == 0;
     if ($29) {
      $$3 = 0;
      $s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;
      $s$15 = $w$0$lcssa;
     }
    }
    while (1) {
     $30 = SAFE_HEAP_LOAD($s$15 >> 0 | 0, 1, 0) | 0 | 0;
     $31 = $30 << 24 >> 24 == $15 << 24 >> 24;
     if ($31) {
      $$3 = $$24;
      $s$2 = $s$15;
      break L8;
     }
     $32 = $s$15 + 1 | 0;
     $33 = $$24 + -1 | 0;
     $34 = ($33 | 0) == 0;
     if ($34) {
      $$3 = 0;
      $s$2 = $32;
      break;
     } else {
      $$24 = $33;
      $s$15 = $32;
     }
    }
   }
  }
 } while (0);
 $35 = ($$3 | 0) != 0;
 $36 = $35 ? $s$2 : 0;
 return $36 | 0;
}

function __ZN16b2BlockAllocator4FreeEPvi($this, $p, $size) {
 $this = $this | 0;
 $p = $p | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $block = 0, $blockSize = 0, $chunk = 0, $found = 0, $i = 0;
 var $index = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $size;
 $3 = $0;
 $4 = $2;
 $5 = ($4 | 0) == 0;
 if ($5) {
  STACKTOP = sp;
  return;
 }
 $6 = $2;
 $7 = 0 < ($6 | 0);
 if (!$7) {
  ___assert_fail(3798 | 0, 3807 | 0, 162, 5060 | 0);
 }
 $8 = $2;
 $9 = ($8 | 0) > 640;
 if ($9) {
  $10 = $1;
  __Z6b2FreePv($10);
  STACKTOP = sp;
  return;
 }
 $11 = $2;
 $12 = 2856 + $11 | 0;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $index = $14;
 $15 = $index;
 $16 = 0 <= ($15 | 0);
 $17 = $index;
 $18 = ($17 | 0) < 14;
 $or$cond = $16 & $18;
 if (!$or$cond) {
  ___assert_fail(3874 | 0, 3807 | 0, 171, 5060 | 0);
 }
 $19 = $index;
 $20 = 856 + ($19 << 2) | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $blockSize = $21;
 $found = 0;
 $i = 0;
 while (1) {
  $22 = $i;
  $23 = $3 + 4 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = ($22 | 0) < ($24 | 0);
  if (!$25) {
   break;
  }
  $26 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $27 = $i;
  $28 = $26 + ($27 << 3) | 0;
  $chunk = $28;
  $29 = $chunk;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $blockSize;
  $32 = ($30 | 0) != ($31 | 0);
  if ($32) {
   $33 = $1;
   $34 = $blockSize;
   $35 = $33 + $34 | 0;
   $36 = $chunk;
   $37 = $36 + 4 | 0;
   $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
   $39 = $35 >>> 0 <= $38 >>> 0;
   if (!$39) {
    $40 = $chunk;
    $41 = $40 + 4 | 0;
    $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
    $43 = $42 + 16384 | 0;
    $44 = $1;
    $45 = $43 >>> 0 <= $44 >>> 0;
    if (!$45) {
     label = 13;
     break;
    }
   }
  } else {
   $46 = $chunk;
   $47 = $46 + 4 | 0;
   $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
   $49 = $1;
   $50 = $48 >>> 0 <= $49 >>> 0;
   if ($50) {
    $51 = $1;
    $52 = $blockSize;
    $53 = $51 + $52 | 0;
    $54 = $chunk;
    $55 = $54 + 4 | 0;
    $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
    $57 = $56 + 16384 | 0;
    $58 = $53 >>> 0 <= $57 >>> 0;
    if ($58) {
     $found = 1;
    }
   }
  }
  $59 = $i;
  $60 = $59 + 1 | 0;
  $i = $60;
 }
 if ((label | 0) == 13) {
  ___assert_fail(5065 | 0, 3807 | 0, 183, 5060 | 0);
 }
 $61 = $found;
 $62 = $61 & 1;
 if (!$62) {
  ___assert_fail(5161 | 0, 3807 | 0, 194, 5060 | 0);
 }
 $63 = $1;
 $64 = $blockSize;
 _memset($63 | 0, -3, $64 | 0) | 0;
 $65 = $1;
 $block = $65;
 $66 = $index;
 $67 = $3 + 12 | 0;
 $68 = $67 + ($66 << 2) | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = $block;
 SAFE_HEAP_STORE($70 | 0, $69 | 0, 4);
 $71 = $block;
 $72 = $index;
 $73 = $3 + 12 | 0;
 $74 = $73 + ($72 << 2) | 0;
 SAFE_HEAP_STORE($74 | 0, $71 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi($this, $output, $input, $transform, $childIndex) {
 $this = $this | 0;
 $output = $output | 0;
 $input = $input | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0.0, $b = 0.0, $c = 0.0, $or$cond = 0, $position = 0, $r = 0, $rr = 0.0, $s = 0, $sigma = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 92 | 0;
 $position = sp + 64 | 0;
 $6 = sp + 56 | 0;
 $s = sp + 48 | 0;
 $r = sp + 32 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $1 = $this;
 $2 = $output;
 $3 = $input;
 $4 = $transform;
 $5 = $childIndex;
 $9 = $1;
 $10 = $4;
 $11 = $4;
 $12 = $11 + 8 | 0;
 $13 = $9 + 12 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($6, $12, $13);
 __ZplRK6b2Vec2S1_($position, $10, $6);
 $14 = $3;
 __ZmiRK6b2Vec2S1_($s, $14, $position);
 $15 = +__Z5b2DotRK6b2Vec2S1_($s, $s);
 $16 = $9 + 8 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $9 + 8 | 0;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $20 = $17 * $19;
 $21 = $15 - $20;
 $b = $21;
 $22 = $3;
 $23 = $22 + 8 | 0;
 $24 = $3;
 __ZmiRK6b2Vec2S1_($r, $23, $24);
 $25 = +__Z5b2DotRK6b2Vec2S1_($s, $r);
 $c = $25;
 $26 = +__Z5b2DotRK6b2Vec2S1_($r, $r);
 $rr = $26;
 $27 = $c;
 $28 = $c;
 $29 = $27 * $28;
 $30 = $rr;
 $31 = $b;
 $32 = $30 * $31;
 $33 = $29 - $32;
 $sigma = $33;
 $34 = $sigma;
 $35 = $34 < 0.0;
 $36 = $rr;
 $37 = $36 < 1.1920928955078125e-007;
 $or$cond = $35 | $37;
 if ($or$cond) {
  $$expand_i1_val = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $61 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $61 | 0;
 }
 $38 = $c;
 $39 = $sigma;
 $40 = +Math_sqrt(+$39);
 $41 = $38 + $40;
 $42 = -$41;
 $a = $42;
 $43 = $a;
 $44 = 0.0 <= $43;
 if ($44) {
  $45 = $a;
  $46 = $3;
  $47 = $46 + 16 | 0;
  $48 = +(+SAFE_HEAP_LOAD_D($47 | 0, 4));
  $49 = $rr;
  $50 = $48 * $49;
  $51 = $45 <= $50;
  if ($51) {
   $52 = $rr;
   $53 = $a;
   $54 = $53 / $52;
   $a = $54;
   $55 = $a;
   $56 = $2;
   $57 = $56 + 8 | 0;
   SAFE_HEAP_STORE_D($57 | 0, +$55, 4);
   $58 = $2;
   $59 = $a;
   __ZmlfRK6b2Vec2($8, $59, $r);
   __ZplRK6b2Vec2S1_($7, $s, $8);
   {}
   SAFE_HEAP_STORE($58 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($58 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $60 = $2;
   +__ZN6b2Vec29NormalizeEv($60);
   $$expand_i1_val3 = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val3 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $61 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $61 | 0;
  }
 }
 $$expand_i1_val5 = 0;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val5 | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $61 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $61 | 0;
}

function __ZNK9b2Simplex16GetWitnessPointsEP6b2Vec2S1_($this, $pA, $pB) {
 $this = $this | 0;
 $pA = $pA | 0;
 $pB = $pB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 80 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 $0 = $this;
 $1 = $pA;
 $2 = $pB;
 $14 = $0;
 $15 = $14 + 108 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 switch ($16 | 0) {
 case 0:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 218, 8023 | 0);
   break;
  }
 case 1:
  {
   $17 = $1;
   {}
   SAFE_HEAP_STORE($17 | 0, SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($17 + 4 | 0, SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $18 = $2;
   $19 = $14 + 8 | 0;
   {}
   SAFE_HEAP_STORE($18 | 0, SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($18 + 4 | 0, SAFE_HEAP_LOAD($19 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $20 = $1;
   $21 = $14 + 24 | 0;
   $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
   __ZmlfRK6b2Vec2($4, $22, $14);
   $23 = $14 + 36 | 0;
   $24 = $23 + 24 | 0;
   $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
   $26 = $14 + 36 | 0;
   __ZmlfRK6b2Vec2($5, $25, $26);
   __ZplRK6b2Vec2S1_($3, $4, $5);
   {}
   SAFE_HEAP_STORE($20 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($20 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $27 = $2;
   $28 = $14 + 24 | 0;
   $29 = +(+SAFE_HEAP_LOAD_D($28 | 0, 4));
   $30 = $14 + 8 | 0;
   __ZmlfRK6b2Vec2($7, $29, $30);
   $31 = $14 + 36 | 0;
   $32 = $31 + 24 | 0;
   $33 = +(+SAFE_HEAP_LOAD_D($32 | 0, 4));
   $34 = $14 + 36 | 0;
   $35 = $34 + 8 | 0;
   __ZmlfRK6b2Vec2($8, $33, $35);
   __ZplRK6b2Vec2S1_($6, $7, $8);
   {}
   SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $36 = $1;
   $37 = $14 + 24 | 0;
   $38 = +(+SAFE_HEAP_LOAD_D($37 | 0, 4));
   __ZmlfRK6b2Vec2($11, $38, $14);
   $39 = $14 + 36 | 0;
   $40 = $39 + 24 | 0;
   $41 = +(+SAFE_HEAP_LOAD_D($40 | 0, 4));
   $42 = $14 + 36 | 0;
   __ZmlfRK6b2Vec2($12, $41, $42);
   __ZplRK6b2Vec2S1_($10, $11, $12);
   $43 = $14 + 72 | 0;
   $44 = $43 + 24 | 0;
   $45 = +(+SAFE_HEAP_LOAD_D($44 | 0, 4));
   $46 = $14 + 72 | 0;
   __ZmlfRK6b2Vec2($13, $45, $46);
   __ZplRK6b2Vec2S1_($9, $10, $13);
   {}
   SAFE_HEAP_STORE($36 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($36 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $47 = $2;
   $48 = $1;
   {}
   SAFE_HEAP_STORE($47 | 0, SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($47 + 4 | 0, SAFE_HEAP_LOAD($48 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 237, 8023 | 0);
  }
 }
}

function __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($this, $allocator, $body, $def) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 $body = $body | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $7 = 0, $8 = 0, $9 = 0, $childCount = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $body;
 $3 = $def;
 $4 = $0;
 $5 = $3;
 $6 = $5 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $4 + 40 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $3;
 $10 = $9 + 8 | 0;
 $11 = +(+SAFE_HEAP_LOAD_D($10 | 0, 4));
 $12 = $4 + 16 | 0;
 SAFE_HEAP_STORE_D($12 | 0, +$11, 4);
 $13 = $3;
 $14 = $13 + 12 | 0;
 $15 = +(+SAFE_HEAP_LOAD_D($14 | 0, 4));
 $16 = $4 + 20 | 0;
 SAFE_HEAP_STORE_D($16 | 0, +$15, 4);
 $17 = $2;
 $18 = $4 + 8 | 0;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = $4 + 4 | 0;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 $20 = $4 + 32 | 0;
 $21 = $3;
 $22 = $21 + 22 | 0;
 {}
 SAFE_HEAP_STORE($20 | 0, SAFE_HEAP_LOAD($22 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($20 + 2 | 0, SAFE_HEAP_LOAD($22 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
 SAFE_HEAP_STORE($20 + 4 | 0, SAFE_HEAP_LOAD($22 + 4 | 0, 2, 0) | 0 | 0 | 0, 2);
 $23 = $3;
 $24 = $23 + 20 | 0;
 $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
 $26 = $25 & 1;
 $27 = $4 + 38 | 0;
 $28 = $26 & 1;
 SAFE_HEAP_STORE($27 >> 0 | 0, $28 | 0, 1);
 $29 = $3;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $32 = $31 + 8 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $1;
 $35 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($33 | 0, 255 | 0) | 0) & 255]($30, $34) | 0;
 $36 = $4 + 12 | 0;
 SAFE_HEAP_STORE($36 | 0, $35 | 0, 4);
 $37 = $4 + 12 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = $39 + 12 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($41 | 0, 255 | 0) | 0) & 255]($38) | 0;
 $childCount = $42;
 $43 = $1;
 $44 = $childCount;
 $45 = $44 * 28 | 0;
 $46 = __ZN16b2BlockAllocator8AllocateEi($43, $45) | 0;
 $47 = $4 + 24 | 0;
 SAFE_HEAP_STORE($47 | 0, $46 | 0, 4);
 $i = 0;
 while (1) {
  $48 = $i;
  $49 = $childCount;
  $50 = ($48 | 0) < ($49 | 0);
  if (!$50) {
   break;
  }
  $51 = $i;
  $52 = $4 + 24 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + ($51 * 28 | 0) | 0;
  $55 = $54 + 16 | 0;
  SAFE_HEAP_STORE($55 | 0, 0 | 0, 4);
  $56 = $i;
  $57 = $4 + 24 | 0;
  $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
  $59 = $58 + ($56 * 28 | 0) | 0;
  $60 = $59 + 24 | 0;
  SAFE_HEAP_STORE($60 | 0, -1 | 0, 4);
  $61 = $i;
  $62 = $61 + 1 | 0;
  $i = $62;
 }
 $63 = $4 + 28 | 0;
 SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
 $64 = $3;
 $65 = $64 + 16 | 0;
 $66 = +(+SAFE_HEAP_LOAD_D($65 | 0, 4));
 SAFE_HEAP_STORE_D($4 | 0, +$66, 4);
 STACKTOP = sp;
 return;
}

function __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $nodeId = 0, $proceed = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $stack = sp + 20 | 0;
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $6 = $0;
 __ZN15b2GrowableStackIiLi256EEC2Ev($stack);
 __THREW__ = 0;
 invoke_vii(214, $stack | 0, $6 | 0);
 $7 = __THREW__;
 __THREW__ = 0;
 $8 = $7 & 1;
 L1 : do {
  if (!$8) {
   while (1) {
    __THREW__ = 0;
    $9 = invoke_ii(215, $stack | 0) | 0;
    $10 = __THREW__;
    __THREW__ = 0;
    $11 = $10 & 1;
    if ($11) {
     break L1;
    }
    $12 = ($9 | 0) > 0;
    if (!$12) {
     label = 16;
     break;
    }
    __THREW__ = 0;
    $13 = invoke_ii(216, $stack | 0) | 0;
    $14 = __THREW__;
    __THREW__ = 0;
    $15 = $14 & 1;
    if ($15) {
     break L1;
    }
    $nodeId = $13;
    $16 = $nodeId;
    $17 = ($16 | 0) == -1;
    if ($17) {
     continue;
    }
    $22 = $6 + 4 | 0;
    $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
    $24 = $nodeId;
    $25 = $23 + ($24 * 36 | 0) | 0;
    $node = $25;
    $26 = $node;
    $27 = $2;
    __THREW__ = 0;
    $28 = invoke_iii(217, $26 | 0, $27 | 0) | 0;
    $29 = __THREW__;
    __THREW__ = 0;
    $30 = $29 & 1;
    if ($30) {
     break L1;
    }
    if (!$28) {
     continue;
    }
    $31 = $node;
    __THREW__ = 0;
    $32 = invoke_ii(218, $31 | 0) | 0;
    $33 = __THREW__;
    __THREW__ = 0;
    $34 = $33 & 1;
    if ($34) {
     break L1;
    }
    if ($32) {
     $35 = $1;
     $36 = $nodeId;
     __THREW__ = 0;
     $37 = invoke_iii(219, $35 | 0, $36 | 0) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     $39 = $38 & 1;
     if ($39) {
      break L1;
     }
     $40 = $37 & 1;
     $proceed = $40;
     $41 = $proceed;
     $42 = $41 & 1;
     $43 = $42 & 1;
     $44 = ($43 | 0) == 0;
     if ($44) {
      label = 13;
      break;
     } else {
      continue;
     }
    } else {
     $45 = $node;
     $46 = $45 + 24 | 0;
     __THREW__ = 0;
     invoke_vii(214, $stack | 0, $46 | 0);
     $47 = __THREW__;
     __THREW__ = 0;
     $48 = $47 & 1;
     if ($48) {
      break L1;
     }
     $49 = $node;
     $50 = $49 + 28 | 0;
     __THREW__ = 0;
     invoke_vii(214, $stack | 0, $50 | 0);
     $51 = __THREW__;
     __THREW__ = 0;
     $52 = $51 & 1;
     if ($52) {
      break L1;
     } else {
      continue;
     }
    }
   }
   if ((label | 0) == 13) {
    $5 = 1;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 16) {
    $5 = 0;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $18 = ___cxa_find_matching_catch() | 0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __ZN15b2GrowableStackIiLi256EED2Ev($stack);
 $20 = $3;
 $21 = $4;
 ___resumeException($20 | 0);
}

function __ZNK13b2DynamicTree5QueryI12b2BroadPhaseEEvPT_RK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $node = 0, $nodeId = 0, $proceed = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $stack = sp + 20 | 0;
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $6 = $0;
 __ZN15b2GrowableStackIiLi256EEC2Ev($stack);
 __THREW__ = 0;
 invoke_vii(214, $stack | 0, $6 | 0);
 $7 = __THREW__;
 __THREW__ = 0;
 $8 = $7 & 1;
 L1 : do {
  if (!$8) {
   while (1) {
    __THREW__ = 0;
    $9 = invoke_ii(215, $stack | 0) | 0;
    $10 = __THREW__;
    __THREW__ = 0;
    $11 = $10 & 1;
    if ($11) {
     break L1;
    }
    $12 = ($9 | 0) > 0;
    if (!$12) {
     label = 16;
     break;
    }
    __THREW__ = 0;
    $13 = invoke_ii(216, $stack | 0) | 0;
    $14 = __THREW__;
    __THREW__ = 0;
    $15 = $14 & 1;
    if ($15) {
     break L1;
    }
    $nodeId = $13;
    $16 = $nodeId;
    $17 = ($16 | 0) == -1;
    if ($17) {
     continue;
    }
    $22 = $6 + 4 | 0;
    $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
    $24 = $nodeId;
    $25 = $23 + ($24 * 36 | 0) | 0;
    $node = $25;
    $26 = $node;
    $27 = $2;
    __THREW__ = 0;
    $28 = invoke_iii(217, $26 | 0, $27 | 0) | 0;
    $29 = __THREW__;
    __THREW__ = 0;
    $30 = $29 & 1;
    if ($30) {
     break L1;
    }
    if (!$28) {
     continue;
    }
    $31 = $node;
    __THREW__ = 0;
    $32 = invoke_ii(218, $31 | 0) | 0;
    $33 = __THREW__;
    __THREW__ = 0;
    $34 = $33 & 1;
    if ($34) {
     break L1;
    }
    if ($32) {
     $35 = $1;
     $36 = $nodeId;
     __THREW__ = 0;
     $37 = invoke_iii(220, $35 | 0, $36 | 0) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     $39 = $38 & 1;
     if ($39) {
      break L1;
     }
     $40 = $37 & 1;
     $proceed = $40;
     $41 = $proceed;
     $42 = $41 & 1;
     $43 = $42 & 1;
     $44 = ($43 | 0) == 0;
     if ($44) {
      label = 13;
      break;
     } else {
      continue;
     }
    } else {
     $45 = $node;
     $46 = $45 + 24 | 0;
     __THREW__ = 0;
     invoke_vii(214, $stack | 0, $46 | 0);
     $47 = __THREW__;
     __THREW__ = 0;
     $48 = $47 & 1;
     if ($48) {
      break L1;
     }
     $49 = $node;
     $50 = $49 + 28 | 0;
     __THREW__ = 0;
     invoke_vii(214, $stack | 0, $50 | 0);
     $51 = __THREW__;
     __THREW__ = 0;
     $52 = $51 & 1;
     if ($52) {
      break L1;
     } else {
      continue;
     }
    }
   }
   if ((label | 0) == 13) {
    $5 = 1;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;
    return;
   } else if ((label | 0) == 16) {
    $5 = 0;
    __ZN15b2GrowableStackIiLi256EED2Ev($stack);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $18 = ___cxa_find_matching_catch() | 0;
 $19 = tempRet0;
 $3 = $18;
 $4 = $19;
 __ZN15b2GrowableStackIiLi256EED2Ev($stack);
 $20 = $3;
 $21 = $4;
 ___resumeException($20 | 0);
}

function __ZN12b2EPCollider24ComputePolygonSeparationEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $n = 0, $perp = 0, $s = 0.0, $s1 = 0.0, $s2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $perp = sp + 72 | 0;
 $n = sp + 56 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $5 = $0;
 SAFE_HEAP_STORE($agg$result | 0, 0 | 0, 4);
 $6 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE($6 | 0, -1 | 0, 4);
 $7 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE_D($7 | 0, +(-34028234663852886.0e22), 4);
 $8 = $5 + 212 | 0;
 $9 = $8 + 4 | 0;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = -$10;
 $12 = $5 + 212 | 0;
 $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
 __ZN6b2Vec2C2Eff($perp, $11, $13);
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $5 + 128 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = ($14 | 0) < ($16 | 0);
  if (!$17) {
   label = 11;
   break;
  }
  $18 = $i;
  $19 = $5 + 64 | 0;
  $20 = $19 + ($18 << 3) | 0;
  __ZNK6b2Vec2ngEv($n, $20);
  $21 = $i;
  $22 = $5 + ($21 << 3) | 0;
  $23 = $5 + 164 | 0;
  __ZmiRK6b2Vec2S1_($1, $22, $23);
  $24 = +__Z5b2DotRK6b2Vec2S1_($n, $1);
  $s1 = $24;
  $25 = $i;
  $26 = $5 + ($25 << 3) | 0;
  $27 = $5 + 172 | 0;
  __ZmiRK6b2Vec2S1_($2, $26, $27);
  $28 = +__Z5b2DotRK6b2Vec2S1_($n, $2);
  $s2 = $28;
  $29 = $s1;
  $30 = $s2;
  $31 = +__Z5b2MinIfET_S0_S0_($29, $30);
  $s = $31;
  $32 = $s;
  $33 = $5 + 244 | 0;
  $34 = +(+SAFE_HEAP_LOAD_D($33 | 0, 4));
  $35 = $32 > $34;
  if ($35) {
   break;
  }
  $40 = +__Z5b2DotRK6b2Vec2S1_($n, $perp);
  $41 = $40 >= 0.0;
  if ($41) {
   $42 = $5 + 236 | 0;
   __ZmiRK6b2Vec2S1_($3, $n, $42);
   $43 = $5 + 212 | 0;
   $44 = +__Z5b2DotRK6b2Vec2S1_($3, $43);
   $45 = $44 < -.03490658849477768;
   if (!$45) {
    label = 8;
   }
  } else {
   $46 = $5 + 228 | 0;
   __ZmiRK6b2Vec2S1_($4, $n, $46);
   $47 = $5 + 212 | 0;
   $48 = +__Z5b2DotRK6b2Vec2S1_($4, $47);
   $49 = $48 < -.03490658849477768;
   if (!$49) {
    label = 8;
   }
  }
  if ((label | 0) == 8) {
   label = 0;
   $50 = $s;
   $51 = $agg$result + 8 | 0;
   $52 = +(+SAFE_HEAP_LOAD_D($51 | 0, 4));
   $53 = $50 > $52;
   if ($53) {
    SAFE_HEAP_STORE($agg$result | 0, 2 | 0, 4);
    $54 = $i;
    $55 = $agg$result + 4 | 0;
    SAFE_HEAP_STORE($55 | 0, $54 | 0, 4);
    $56 = $s;
    $57 = $agg$result + 8 | 0;
    SAFE_HEAP_STORE_D($57 | 0, +$56, 4);
   }
  }
  $58 = $i;
  $59 = $58 + 1 | 0;
  $i = $59;
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
 SAFE_HEAP_STORE($agg$result | 0, 2 | 0, 4);
 $36 = $i;
 $37 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE($37 | 0, $36 | 0, 4);
 $38 = $s;
 $39 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE_D($39 | 0, +$38, 4);
 STACKTOP = sp;
 return;
}

function __ZN7b2WorldC2ERK6b2Vec2($this, $gravity) {
 $this = $this | 0;
 $gravity = $gravity | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $gravity;
 $4 = $0;
 __ZN16b2BlockAllocatorC2Ev($4);
 $5 = $4 + 68 | 0;
 __THREW__ = 0;
 invoke_vi(163, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if ($7) {
  $32 = ___cxa_find_matching_catch() | 0;
  $33 = tempRet0;
  $2 = $32;
  $3 = $33;
  __ZN16b2BlockAllocatorD2Ev($4);
  $38 = $2;
  $39 = $3;
  ___resumeException($38 | 0);
 }
 $8 = $4 + 102872 | 0;
 __THREW__ = 0;
 invoke_vi(164, $8 | 0);
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 do {
  if ($10) {
   $34 = ___cxa_find_matching_catch() | 0;
   $35 = tempRet0;
   $2 = $34;
   $3 = $35;
  } else {
   $11 = $4 + 102968 | 0;
   __THREW__ = 0;
   invoke_vi(114, $11 | 0);
   $12 = __THREW__;
   __THREW__ = 0;
   $13 = $12 & 1;
   if ($13) {
    $36 = ___cxa_find_matching_catch() | 0;
    $37 = tempRet0;
    $2 = $36;
    $3 = $37;
    __ZN16b2ContactManagerD2Ev($8);
    break;
   } else {
    $14 = $4 + 102980 | 0;
    SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
    $15 = $4 + 102984 | 0;
    SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
    $16 = $4 + 102952 | 0;
    SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
    $17 = $4 + 102956 | 0;
    SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
    $18 = $4 + 102960 | 0;
    SAFE_HEAP_STORE($18 | 0, 0 | 0, 4);
    $19 = $4 + 102964 | 0;
    SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
    $20 = $4 + 102992 | 0;
    SAFE_HEAP_STORE($20 >> 0 | 0, 1 | 0, 1);
    $21 = $4 + 102993 | 0;
    SAFE_HEAP_STORE($21 >> 0 | 0, 1 | 0, 1);
    $22 = $4 + 102994 | 0;
    SAFE_HEAP_STORE($22 >> 0 | 0, 0 | 0, 1);
    $23 = $4 + 102995 | 0;
    SAFE_HEAP_STORE($23 >> 0 | 0, 1 | 0, 1);
    $24 = $4 + 102976 | 0;
    SAFE_HEAP_STORE($24 >> 0 | 0, 1 | 0, 1);
    $25 = $4 + 102968 | 0;
    $26 = $1;
    {}
    SAFE_HEAP_STORE($25 | 0, SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($25 + 4 | 0, SAFE_HEAP_LOAD($26 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $27 = $4 + 102868 | 0;
    SAFE_HEAP_STORE($27 | 0, 4 | 0, 4);
    $28 = $4 + 102988 | 0;
    SAFE_HEAP_STORE_D($28 | 0, +(0.0), 4);
    $29 = $4 + 102872 | 0;
    $30 = $29 + 76 | 0;
    SAFE_HEAP_STORE($30 | 0, $4 | 0, 4);
    $31 = $4 + 102996 | 0;
    {}
    SAFE_HEAP_STORE($31 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 4 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 8 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 12 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 16 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 20 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 24 | 0, 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($31 + 28 | 0, 0 | 0 | 0, 4);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 __ZN16b2StackAllocatorD2Ev($5);
 __ZN16b2BlockAllocatorD2Ev($4);
 $38 = $2;
 $39 = $3;
 ___resumeException($38 | 0);
}

function __ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f($this, $hx, $hy, $center, $angle) {
 $this = $this | 0;
 $hx = +$hx;
 $hy = +$hy;
 $center = $center | 0;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $xf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xf = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 $0 = $this;
 $1 = $hx;
 $2 = $hy;
 $3 = $center;
 $4 = $angle;
 $7 = $0;
 $8 = $7 + 148 | 0;
 SAFE_HEAP_STORE($8 | 0, 4 | 0, 4);
 $9 = $7 + 20 | 0;
 $10 = $1;
 $11 = -$10;
 $12 = $2;
 $13 = -$12;
 __ZN6b2Vec23SetEff($9, $11, $13);
 $14 = $7 + 20 | 0;
 $15 = $14 + 8 | 0;
 $16 = $1;
 $17 = $2;
 $18 = -$17;
 __ZN6b2Vec23SetEff($15, $16, $18);
 $19 = $7 + 20 | 0;
 $20 = $19 + 16 | 0;
 $21 = $1;
 $22 = $2;
 __ZN6b2Vec23SetEff($20, $21, $22);
 $23 = $7 + 20 | 0;
 $24 = $23 + 24 | 0;
 $25 = $1;
 $26 = -$25;
 $27 = $2;
 __ZN6b2Vec23SetEff($24, $26, $27);
 $28 = $7 + 84 | 0;
 __ZN6b2Vec23SetEff($28, 0.0, -1.0);
 $29 = $7 + 84 | 0;
 $30 = $29 + 8 | 0;
 __ZN6b2Vec23SetEff($30, 1.0, 0.0);
 $31 = $7 + 84 | 0;
 $32 = $31 + 16 | 0;
 __ZN6b2Vec23SetEff($32, 0.0, 1.0);
 $33 = $7 + 84 | 0;
 $34 = $33 + 24 | 0;
 __ZN6b2Vec23SetEff($34, -1.0, 0.0);
 $35 = $7 + 12 | 0;
 $36 = $3;
 {}
 SAFE_HEAP_STORE($35 | 0, SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($35 + 4 | 0, SAFE_HEAP_LOAD($36 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZN11b2TransformC2Ev($xf);
 $37 = $3;
 {}
 SAFE_HEAP_STORE($xf | 0, SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($xf + 4 | 0, SAFE_HEAP_LOAD($37 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $38 = $xf + 8 | 0;
 $39 = $4;
 __ZN5b2Rot3SetEf($38, $39);
 $i = 0;
 while (1) {
  $40 = $i;
  $41 = $7 + 148 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = ($40 | 0) < ($42 | 0);
  if (!$43) {
   break;
  }
  $44 = $i;
  $45 = $7 + 20 | 0;
  $46 = $45 + ($44 << 3) | 0;
  $47 = $i;
  $48 = $7 + 20 | 0;
  $49 = $48 + ($47 << 3) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($5, $xf, $49);
  {}
  SAFE_HEAP_STORE($46 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($46 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $50 = $i;
  $51 = $7 + 84 | 0;
  $52 = $51 + ($50 << 3) | 0;
  $53 = $xf + 8 | 0;
  $54 = $i;
  $55 = $7 + 84 | 0;
  $56 = $55 + ($54 << 3) | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($6, $53, $56);
  {}
  SAFE_HEAP_STORE($52 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($52 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $57 = $i;
  $58 = $57 + 1 | 0;
  $i = $58;
 }
 STACKTOP = sp;
 return;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = SAFE_HEAP_LOAD($ap | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($ap2 | 0, $vacopy_currentptr | 0, 4);
 $0 = _printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $1 = ($0 | 0) < 0;
 if ($1) {
  $$0 = -1;
 } else {
  $2 = $f + 76 | 0;
  $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) > -1;
  if ($4) {
   $5 = ___lockfile($f) | 0;
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $7 = $6 & 32;
  $8 = $f + 74 | 0;
  $9 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
  $10 = $9 << 24 >> 24 < 1;
  if ($10) {
   $11 = $6 & -33;
   SAFE_HEAP_STORE($f | 0, $11 | 0, 4);
  }
  $12 = $f + 48 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($13 | 0) == 0;
  if ($14) {
   $16 = $f + 44 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($16 | 0, $internal_buf | 0, 4);
   $18 = $f + 28 | 0;
   SAFE_HEAP_STORE($18 | 0, $internal_buf | 0, 4);
   $19 = $f + 20 | 0;
   SAFE_HEAP_STORE($19 | 0, $internal_buf | 0, 4);
   SAFE_HEAP_STORE($12 | 0, 80 | 0, 4);
   $20 = $internal_buf + 80 | 0;
   $21 = $f + 16 | 0;
   SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $23 = ($17 | 0) == (0 | 0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = $f + 36 | 0;
    $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_iiii[(SAFE_FT_MASK($25 | 0, 255 | 0) | 0) & 255]($f, 0, 0) | 0;
    $26 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $27 = ($26 | 0) == (0 | 0);
    $$ = $27 ? -1 : $22;
    SAFE_HEAP_STORE($16 | 0, $17 | 0, 4);
    SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($21 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($18 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
    $ret$1 = $$;
   }
  } else {
   $15 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $ret$1 = $15;
  }
  $28 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $29 = $28 & 32;
  $30 = ($29 | 0) == 0;
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  SAFE_HEAP_STORE($f | 0, $31 | 0, 4);
  $33 = ($32 | 0) == 0;
  if (!$33) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $t$0 = 0, $t$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $2 = $1 << 24 >> 24;
   switch ($2 | 0) {
   case 88:
    {
     $3 = $first + 1 | 0;
     $4 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3, $last, $db) | 0;
     $5 = ($4 | 0) == ($3 | 0);
     $6 = ($4 | 0) == ($last | 0);
     $or$cond = $5 | $6;
     if ($or$cond) {
      $$0 = $first;
      break L1;
     }
     $7 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
     $8 = $7 << 24 >> 24 == 69;
     $9 = $4 + 1 | 0;
     $$first = $8 ? $9 : $first;
     $$0 = $$first;
     break L1;
     break;
    }
   case 74:
    {
     $10 = $first + 1 | 0;
     $11 = ($10 | 0) == ($last | 0);
     if ($11) {
      $$0 = $first;
      break L1;
     } else {
      $t$0 = $10;
     }
     while (1) {
      $12 = SAFE_HEAP_LOAD($t$0 >> 0 | 0, 1, 0) | 0 | 0;
      $13 = $12 << 24 >> 24 == 69;
      if ($13) {
       $t$0$lcssa = $t$0;
       break;
      }
      $14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
      $15 = ($14 | 0) == ($t$0 | 0);
      if ($15) {
       $$0 = $first;
       break L1;
      } else {
       $t$0 = $14;
      }
     }
     $16 = $t$0$lcssa + 1 | 0;
     $$0 = $16;
     break L1;
     break;
    }
   case 76:
    {
     $17 = $first + 1 | 0;
     $18 = ($17 | 0) == ($last | 0);
     if (!$18) {
      $19 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
      $20 = $19 << 24 >> 24 == 90;
      if ($20) {
       $21 = $first + 2 | 0;
       $22 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21, $last, $db) | 0;
       $23 = ($22 | 0) == ($21 | 0);
       $24 = ($22 | 0) == ($last | 0);
       $or$cond2 = $23 | $24;
       if ($or$cond2) {
        $$0 = $first;
        break L1;
       }
       $25 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
       $26 = $25 << 24 >> 24 == 69;
       $27 = $22 + 1 | 0;
       $$first3 = $26 ? $27 : $first;
       return $$first3 | 0;
      }
     }
     $28 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $$0 = $28;
     break L1;
     break;
    }
   default:
    {
     $29 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $$0 = $29;
     break L1;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 $1 = ($0 | 0) == (0 | 0);
 if (!$1) {
  $2 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $3 = ($2 | 0) == (0 | 0);
  if (!$3) {
   $4 = $2 + 80 | 0;
   $5 = $2 + 48 | 0;
   $6 = $5;
   $7 = $6;
   $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
   $9 = $6 + 4 | 0;
   $10 = $9;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $12 = $8 & -256;
   $13 = ($12 | 0) == 1126902528;
   $14 = ($11 | 0) == 1129074247;
   $15 = $13 & $14;
   if (!$15) {
    $36 = SAFE_HEAP_LOAD(1676 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE($vararg_buffer7 | 0, $36 | 0, 4);
    _abort_message(12336, $vararg_buffer7);
   }
   $16 = ($8 | 0) == 1126902529;
   $17 = ($11 | 0) == 1129074247;
   $18 = $16 & $17;
   if ($18) {
    $19 = $2 + 44 | 0;
    $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   SAFE_HEAP_STORE($thrown_object | 0, $21 | 0, 4);
   $22 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $23 = $22 + 4 | 0;
   $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
   $25 = SAFE_HEAP_LOAD(424 | 0, 4, 0) | 0 | 0;
   $26 = $25 + 16 | 0;
   $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
   $28 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($27 | 0, 255 | 0) | 0) & 255](424, $22, $thrown_object) | 0;
   if ($28) {
    $29 = SAFE_HEAP_LOAD($thrown_object | 0, 4, 0) | 0 | 0;
    $30 = SAFE_HEAP_LOAD(1676 | 0, 4, 0) | 0 | 0;
    $31 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
    $32 = $31 + 8 | 0;
    $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
    $34 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($33 | 0, 255 | 0) | 0) & 255]($29) | 0;
    SAFE_HEAP_STORE($vararg_buffer | 0, $30 | 0, 4);
    $vararg_ptr1 = $vararg_buffer + 4 | 0;
    SAFE_HEAP_STORE($vararg_ptr1 | 0, $24 | 0, 4);
    $vararg_ptr2 = $vararg_buffer + 8 | 0;
    SAFE_HEAP_STORE($vararg_ptr2 | 0, $34 | 0, 4);
    _abort_message(12250, $vararg_buffer);
   } else {
    $35 = SAFE_HEAP_LOAD(1676 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE($vararg_buffer3 | 0, $35 | 0, 4);
    $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
    SAFE_HEAP_STORE($vararg_ptr6 | 0, $24 | 0, 4);
    _abort_message(12295, $vararg_buffer3);
   }
  }
 }
 _abort_message(12374, $vararg_buffer10);
}

function __ZN12b2BroadPhase13QueryCallbackEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = $this;
 $2 = $proxyId;
 $3 = $1;
 $4 = $2;
 $5 = $3 + 56 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) == ($6 | 0);
 if ($7) {
  $$expand_i1_val = 1;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $52 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $52 | 0;
 }
 $8 = $3 + 52 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $3 + 48 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = ($9 | 0) == ($11 | 0);
 if ($12) {
  $13 = $3 + 44 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $oldBuffer = $14;
  $15 = $3 + 48 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 << 1;
  SAFE_HEAP_STORE($15 | 0, $17 | 0, 4);
  $18 = $3 + 48 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 << 3;
  $21 = __Z7b2Alloci($20) | 0;
  $22 = $3 + 44 | 0;
  SAFE_HEAP_STORE($22 | 0, $21 | 0, 4);
  $23 = $3 + 44 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $oldBuffer;
  $26 = $3 + 52 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 << 3;
  _memcpy($24 | 0, $25 | 0, $28 | 0) | 0;
  $29 = $oldBuffer;
  __Z6b2FreePv($29);
 }
 $30 = $2;
 $31 = $3 + 56 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = __Z5b2MinIiET_S0_S0_($30, $32) | 0;
 $34 = $3 + 52 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $3 + 44 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $37 + ($35 << 3) | 0;
 SAFE_HEAP_STORE($38 | 0, $33 | 0, 4);
 $39 = $2;
 $40 = $3 + 56 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = __Z5b2MaxIiET_S0_S0_($39, $41) | 0;
 $43 = $3 + 52 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $3 + 44 | 0;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = $46 + ($44 << 3) | 0;
 $48 = $47 + 4 | 0;
 SAFE_HEAP_STORE($48 | 0, $42 | 0, 4);
 $49 = $3 + 52 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = $50 + 1 | 0;
 SAFE_HEAP_STORE($49 | 0, $51 | 0, 4);
 $$expand_i1_val2 = 1;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $52 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $52 | 0;
}

function __ZN9b2ContactC2EP9b2FixtureiS1_i($this, $fA, $indexA, $fB, $indexB) {
 $this = $this | 0;
 $fA = $fA | 0;
 $indexA = $indexA | 0;
 $fB = $fB | 0;
 $indexB = $indexB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fA;
 $2 = $indexA;
 $3 = $fB;
 $4 = $indexB;
 $5 = $0;
 $6 = 1408;
 SAFE_HEAP_STORE($5 | 0, $6 | 0, 4);
 $7 = $5 + 64 | 0;
 __ZN10b2ManifoldC2Ev($7);
 $8 = $5 + 4 | 0;
 SAFE_HEAP_STORE($8 | 0, 4 | 0, 4);
 $9 = $1;
 $10 = $5 + 48 | 0;
 SAFE_HEAP_STORE($10 | 0, $9 | 0, 4);
 $11 = $3;
 $12 = $5 + 52 | 0;
 SAFE_HEAP_STORE($12 | 0, $11 | 0, 4);
 $13 = $2;
 $14 = $5 + 56 | 0;
 SAFE_HEAP_STORE($14 | 0, $13 | 0, 4);
 $15 = $4;
 $16 = $5 + 60 | 0;
 SAFE_HEAP_STORE($16 | 0, $15 | 0, 4);
 $17 = $5 + 64 | 0;
 $18 = $17 + 60 | 0;
 SAFE_HEAP_STORE($18 | 0, 0 | 0, 4);
 $19 = $5 + 8 | 0;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 $20 = $5 + 12 | 0;
 SAFE_HEAP_STORE($20 | 0, 0 | 0, 4);
 $21 = $5 + 16 | 0;
 $22 = $21 + 4 | 0;
 SAFE_HEAP_STORE($22 | 0, 0 | 0, 4);
 $23 = $5 + 16 | 0;
 $24 = $23 + 8 | 0;
 SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
 $25 = $5 + 16 | 0;
 $26 = $25 + 12 | 0;
 SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
 $27 = $5 + 16 | 0;
 SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
 $28 = $5 + 32 | 0;
 $29 = $28 + 4 | 0;
 SAFE_HEAP_STORE($29 | 0, 0 | 0, 4);
 $30 = $5 + 32 | 0;
 $31 = $30 + 8 | 0;
 SAFE_HEAP_STORE($31 | 0, 0 | 0, 4);
 $32 = $5 + 32 | 0;
 $33 = $32 + 12 | 0;
 SAFE_HEAP_STORE($33 | 0, 0 | 0, 4);
 $34 = $5 + 32 | 0;
 SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
 $35 = $5 + 128 | 0;
 SAFE_HEAP_STORE($35 | 0, 0 | 0, 4);
 $36 = $5 + 48 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $37 + 16 | 0;
 $39 = +(+SAFE_HEAP_LOAD_D($38 | 0, 4));
 $40 = $5 + 52 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $41 + 16 | 0;
 $43 = +(+SAFE_HEAP_LOAD_D($42 | 0, 4));
 $44 = +__Z13b2MixFrictionff($39, $43);
 $45 = $5 + 136 | 0;
 SAFE_HEAP_STORE_D($45 | 0, +$44, 4);
 $46 = $5 + 48 | 0;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 $48 = $47 + 20 | 0;
 $49 = +(+SAFE_HEAP_LOAD_D($48 | 0, 4));
 $50 = $5 + 52 | 0;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = $51 + 20 | 0;
 $53 = +(+SAFE_HEAP_LOAD_D($52 | 0, 4));
 $54 = +__Z16b2MixRestitutionff($49, $53);
 $55 = $5 + 140 | 0;
 SAFE_HEAP_STORE_D($55 | 0, +$54, 4);
 $56 = $5 + 144 | 0;
 SAFE_HEAP_STORE_D($56 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$0 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp;
 $0 = ($first | 0) == ($last | 0);
 do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   $2 = ($1 | 0) == ($first | 0);
   if ($2) {
    $$0 = $first;
   } else {
    $3 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1, $last, $db) | 0;
    $4 = ($3 | 0) == ($1 | 0);
    if ($4) {
     $$0 = $1;
    } else {
     $5 = $db + 4 | 0;
     $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
     $7 = SAFE_HEAP_LOAD($db | 0, 4, 0) | 0 | 0;
     $8 = $6;
     $9 = $7;
     $10 = $8 - $9 | 0;
     $11 = ($10 | 0) / 24 & -1;
     $12 = $11 >>> 0 < 2;
     if ($12) {
      $$0 = $first;
     } else {
      $13 = $6 + -24 | 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $13);
      $14 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
      $15 = $14 + -24 | 0;
      $17 = $14;
      while (1) {
       $16 = $17 + -24 | 0;
       SAFE_HEAP_STORE($5 | 0, $16 | 0, 4);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
       $$pre$i = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
       $18 = ($$pre$i | 0) == ($15 | 0);
       if ($18) {
        break;
       } else {
        $17 = $$pre$i;
       }
      }
      $19 = $14 + -48 | 0;
      $20 = SAFE_HEAP_LOAD($args >> 0 | 0, 1, 0) | 0 | 0;
      $21 = $20 & 1;
      $22 = $21 << 24 >> 24 == 0;
      $23 = $args + 8 | 0;
      $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
      $25 = $args + 1 | 0;
      $26 = $22 ? $25 : $24;
      $27 = $args + 4 | 0;
      $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
      $29 = $20 & 255;
      $30 = $29 >>> 1;
      $31 = $22 ? $30 : $28;
      __THREW__ = 0;
      invoke_iiii(222, $19 | 0, $26 | 0, $31 | 0) | 0;
      $32 = __THREW__;
      __THREW__ = 0;
      $33 = $32 & 1;
      if ($33) {
       $34 = ___cxa_find_matching_catch() | 0;
       $35 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       ___resumeException($34 | 0);
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$0 = $3;
       break;
      }
     }
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 } else {
  $3 = $info + 52 | 0;
  $4 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
  $5 = $info + 53 | 0;
  $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
  $7 = $this + 16 | 0;
  $8 = $this + 12 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = ($this + 16 | 0) + ($9 << 3) | 0;
  SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
  SAFE_HEAP_STORE($5 >> 0 | 0, 0 | 0, 1);
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  $11 = ($9 | 0) > 1;
  L4 : do {
   if ($11) {
    $12 = $this + 24 | 0;
    $13 = $info + 24 | 0;
    $14 = $this + 8 | 0;
    $15 = $info + 54 | 0;
    $p$0 = $12;
    while (1) {
     $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
     $17 = $16 << 24 >> 24 == 0;
     if (!$17) {
      break L4;
     }
     $18 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
     $19 = $18 << 24 >> 24 == 0;
     if ($19) {
      $25 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
      $26 = $25 << 24 >> 24 == 0;
      if (!$26) {
       $27 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
       $28 = $27 & 1;
       $29 = ($28 | 0) == 0;
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
      $21 = ($20 | 0) == 1;
      if ($21) {
       break L4;
      }
      $22 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
      $23 = $22 & 2;
      $24 = ($23 | 0) == 0;
      if ($24) {
       break L4;
      }
     }
     SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
     SAFE_HEAP_STORE($5 >> 0 | 0, 0 | 0, 1);
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
     $30 = $p$0 + 8 | 0;
     $31 = $30 >>> 0 < $10 >>> 0;
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while (0);
  SAFE_HEAP_STORE($3 >> 0 | 0, $4 | 0, 1);
  SAFE_HEAP_STORE($5 >> 0 | 0, $6 | 0, 1);
 }
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$04 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 if ($3) {
  $4 = $1 & 255;
  $5 = $4 >>> 1;
  $15 = 10;
  $16 = $5;
  $41 = $1;
 } else {
  $6 = $this + 4 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $9 = $8 & -2;
  $phitmp$i = $9 + -1 | 0;
  $10 = $8 & 255;
  $15 = $phitmp$i;
  $16 = $7;
  $41 = $10;
 }
 $11 = $__last;
 $12 = $11 - $0 | 0;
 $13 = ($__last | 0) == ($__first | 0);
 do {
  if (!$13) {
   $14 = $15 - $16 | 0;
   $17 = $14 >>> 0 < $12 >>> 0;
   if ($17) {
    $18 = $16 + $12 | 0;
    $19 = $18 - $15 | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $15, $19, $16, $16, 0);
    $$pre = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
    $21 = $$pre;
   } else {
    $21 = $41;
   }
   $20 = $21 & 1;
   $22 = $20 << 24 >> 24 == 0;
   if ($22) {
    $25 = $this + 1 | 0;
    $29 = $25;
   } else {
    $23 = $this + 8 | 0;
    $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
    $29 = $24;
   }
   $26 = $16 - $0 | 0;
   $scevgep = $__last + $26 | 0;
   $scevgep1 = $scevgep;
   $27 = ($__first | 0) == ($__last | 0);
   if (!$27) {
    $28 = $29 + $16 | 0;
    $$03 = $__first;
    $__p$04 = $28;
    while (1) {
     $30 = SAFE_HEAP_LOAD($$03 >> 0 | 0, 1, 0) | 0 | 0;
     SAFE_HEAP_STORE($__p$04 >> 0 | 0, $30 | 0, 1);
     $31 = $__p$04 + 1 | 0;
     $32 = $$03 + 1 | 0;
     $33 = ($32 | 0) == ($__last | 0);
     if ($33) {
      break;
     } else {
      $$03 = $32;
      $__p$04 = $31;
     }
    }
   }
   $scevgep2 = $29 + $scevgep1 | 0;
   SAFE_HEAP_STORE($scevgep2 >> 0 | 0, 0 | 0, 1);
   $34 = $16 + $12 | 0;
   $35 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
   $36 = $35 & 1;
   $37 = $36 << 24 >> 24 == 0;
   if ($37) {
    $39 = $34 << 1;
    $40 = $39 & 255;
    SAFE_HEAP_STORE($this >> 0 | 0, $40 | 0, 1);
    break;
   } else {
    $38 = $this + 4 | 0;
    SAFE_HEAP_STORE($38 | 0, $34 | 0, 4);
    break;
   }
  }
 } while (0);
 return;
}

function __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $allocator = 0, $broadPhase = 0, $fixture = 0, $memory = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = $3 + 88 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = __ZNK7b2World8IsLockedEv($5) | 0;
 $7 = $6 & 1;
 $8 = ($7 | 0) == 0;
 if (!$8) {
  ___assert_fail(5621 | 0, 5365 | 0, 168, 5700 | 0);
 }
 $9 = $3 + 88 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = __ZNK7b2World8IsLockedEv($10) | 0;
 $12 = $11 & 1;
 $13 = ($12 | 0) == 1;
 if ($13) {
  $0 = 0;
  $53 = $0;
  STACKTOP = sp;
  return $53 | 0;
 }
 $14 = $3 + 88 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $allocator = $15;
 $16 = $allocator;
 $17 = __ZN16b2BlockAllocator8AllocateEi($16, 44) | 0;
 $memory = $17;
 $18 = $memory;
 __ZN9b2FixtureC2Ev($18);
 $fixture = $18;
 $19 = $fixture;
 $20 = $allocator;
 $21 = $2;
 __ZN9b2Fixture6CreateEP16b2BlockAllocatorP6b2BodyPK12b2FixtureDef($19, $20, $3, $21);
 $22 = $3 + 4 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 2, 0) | 0 | 0;
 $24 = $23 & 65535;
 $25 = $24 & 32;
 $26 = ($25 | 0) != 0;
 if ($26) {
  $27 = $3 + 88 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $28 + 102872 | 0;
  $broadPhase = $29;
  $30 = $fixture;
  $31 = $broadPhase;
  $32 = $3 + 12 | 0;
  __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($30, $31, $32);
 }
 $33 = $3 + 100 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $fixture;
 $36 = $35 + 4 | 0;
 SAFE_HEAP_STORE($36 | 0, $34 | 0, 4);
 $37 = $fixture;
 $38 = $3 + 100 | 0;
 SAFE_HEAP_STORE($38 | 0, $37 | 0, 4);
 $39 = $3 + 104 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = $40 + 1 | 0;
 SAFE_HEAP_STORE($39 | 0, $41 | 0, 4);
 $42 = $fixture;
 $43 = $42 + 8 | 0;
 SAFE_HEAP_STORE($43 | 0, $3 | 0, 4);
 $44 = $fixture;
 $45 = +(+SAFE_HEAP_LOAD_D($44 | 0, 4));
 $46 = $45 > 0.0;
 if ($46) {
  __ZN6b2Body13ResetMassDataEv($3);
 }
 $47 = $3 + 88 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $48 + 102868 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = $50 | 1;
 SAFE_HEAP_STORE($49 | 0, $51 | 0, 4);
 $52 = $fixture;
 $0 = $52;
 $53 = $0;
 STACKTOP = sp;
 return $53 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if ($2) {
  $5 = $0 & 255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = $this + 4 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $7 = $4;
 }
 $8 = $7 >>> 0 < $__pos >>> 0;
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 }
 if ($2) {
  $13 = 10;
  $17 = $0;
 } else {
  $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $10 = $9 & -2;
  $phitmp$i = $10 + -1 | 0;
  $11 = $9 & 255;
  $13 = $phitmp$i;
  $17 = $11;
 }
 $12 = $13 - $7 | 0;
 $14 = $12 >>> 0 < $__n >>> 0;
 if ($14) {
  $39 = $7 + $__n | 0;
  $40 = $39 - $13 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $13, $40, $7, $__pos, 0, $__n, $__s);
 } else {
  $15 = ($__n | 0) == 0;
  if (!$15) {
   $16 = $17 & 1;
   $18 = $16 << 24 >> 24 == 0;
   if ($18) {
    $21 = $this + 1 | 0;
    $23 = $21;
   } else {
    $19 = $this + 8 | 0;
    $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
    $23 = $20;
   }
   $22 = ($7 | 0) == ($__pos | 0);
   if ($22) {
    $$pre = $23 + $__pos | 0;
    $$1 = $__s;
    $$pre$phiZ2D = $$pre;
   } else {
    $24 = $7 - $__pos | 0;
    $25 = $23 + $__pos | 0;
    $26 = $25 >>> 0 <= $__s >>> 0;
    $27 = $23 + $7 | 0;
    $28 = $27 >>> 0 > $__s >>> 0;
    $or$cond = $26 & $28;
    $29 = $__s + $__n | 0;
    $$0 = $or$cond ? $29 : $__s;
    $$sum = $__n + $__pos | 0;
    $30 = $23 + $$sum | 0;
    _memmove($30 | 0, $25 | 0, $24 | 0) | 0;
    $$1 = $$0;
    $$pre$phiZ2D = $25;
   }
   _memmove($$pre$phiZ2D | 0, $$1 | 0, $__n | 0) | 0;
   $31 = $7 + $__n | 0;
   $32 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
   $33 = $32 & 1;
   $34 = $33 << 24 >> 24 == 0;
   if ($34) {
    $36 = $31 << 1;
    $37 = $36 & 255;
    SAFE_HEAP_STORE($this >> 0 | 0, $37 | 0, 1);
   } else {
    $35 = $this + 4 | 0;
    SAFE_HEAP_STORE($35 | 0, $31 | 0, 4);
   }
   $38 = $23 + $31 | 0;
   SAFE_HEAP_STORE($38 >> 0 | 0, 0 | 0, 1);
  }
 }
 return $this | 0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = __ZN10emscripten8internal6TypeIDIvE3getEv() | 0;
 __embind_register_void($1 | 0, 11860 | 0);
 $2 = __ZN10emscripten8internal6TypeIDIbE3getEv() | 0;
 __embind_register_bool($2 | 0, 11865 | 0, 1, 1, 0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(11376);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(11381);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(11393);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(11407);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(11413);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(11870);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(11874);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(11887);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(11892);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(11935);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(11941);
 $3 = __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
 __embind_register_std_string($3 | 0, 10439 | 0);
 $4 = __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
 __embind_register_std_string($4 | 0, 8311 | 0);
 $5 = __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
 __embind_register_std_wstring($5 | 0, 4, 8344 | 0);
 $6 = __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0;
 __embind_register_emval($6 | 0, 8357 | 0);
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(8373);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(8403);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(8440);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(8479);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(8510);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(8550);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(8579);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(8617);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(8647);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(8686);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(8718);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(8751);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(8784);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(8818);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(8851);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(8885);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(8916);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(8948);
 STACKTOP = sp;
 return;
}

function __ZL19b2FindMaxSeparationPiPK14b2PolygonShapeRK11b2TransformS2_S5_($edgeIndex, $poly1, $xf1, $poly2, $xf2) {
 $edgeIndex = $edgeIndex | 0;
 $poly1 = $poly1 | 0;
 $xf1 = $xf1 | 0;
 $poly2 = $poly2 | 0;
 $xf2 = $xf2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bestIndex = 0, $count1 = 0, $count2 = 0, $i = 0, $j = 0, $maxSeparation = 0.0, $n = 0;
 var $n1s = 0, $si = 0.0, $sij = 0.0, $v1 = 0, $v1s = 0, $v2s = 0, $xf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xf = sp + 56 | 0;
 $n = sp + 32 | 0;
 $v1 = sp + 24 | 0;
 $5 = sp;
 $0 = $edgeIndex;
 $1 = $poly1;
 $2 = $xf1;
 $3 = $poly2;
 $4 = $xf2;
 $6 = $1;
 $7 = $6 + 148 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $count1 = $8;
 $9 = $3;
 $10 = $9 + 148 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $count2 = $11;
 $12 = $1;
 $13 = $12 + 84 | 0;
 $n1s = $13;
 $14 = $1;
 $15 = $14 + 20 | 0;
 $v1s = $15;
 $16 = $3;
 $17 = $16 + 20 | 0;
 $v2s = $17;
 $18 = $4;
 $19 = $2;
 __Z6b2MulTRK11b2TransformS1_($xf, $18, $19);
 $bestIndex = 0;
 $maxSeparation = -34028234663852886.0e22;
 $i = 0;
 while (1) {
  $20 = $i;
  $21 = $count1;
  $22 = ($20 | 0) < ($21 | 0);
  if (!$22) {
   break;
  }
  $23 = $xf + 8 | 0;
  $24 = $i;
  $25 = $n1s;
  $26 = $25 + ($24 << 3) | 0;
  __Z5b2MulRK5b2RotRK6b2Vec2($n, $23, $26);
  $27 = $i;
  $28 = $v1s;
  $29 = $28 + ($27 << 3) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $xf, $29);
  $si = 34028234663852886.0e22;
  $j = 0;
  while (1) {
   $30 = $j;
   $31 = $count2;
   $32 = ($30 | 0) < ($31 | 0);
   if (!$32) {
    break;
   }
   $33 = $j;
   $34 = $v2s;
   $35 = $34 + ($33 << 3) | 0;
   __ZmiRK6b2Vec2S1_($5, $35, $v1);
   $36 = +__Z5b2DotRK6b2Vec2S1_($n, $5);
   $sij = $36;
   $37 = $sij;
   $38 = $si;
   $39 = $37 < $38;
   if ($39) {
    $40 = $sij;
    $si = $40;
   }
   $41 = $j;
   $42 = $41 + 1 | 0;
   $j = $42;
  }
  $43 = $si;
  $44 = $maxSeparation;
  $45 = $43 > $44;
  if ($45) {
   $46 = $si;
   $maxSeparation = $46;
   $47 = $i;
   $bestIndex = $47;
  }
  $48 = $i;
  $49 = $48 + 1 | 0;
  $i = $49;
 }
 $50 = $bestIndex;
 $51 = $0;
 SAFE_HEAP_STORE($51 | 0, $50 | 0, 4);
 $52 = $maxSeparation;
 STACKTOP = sp;
 return +$52;
}

function __ZNSt3__17__sort5IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_SA_T_($__x1, $__x2, $__x3, $__x4, $__x5, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__x5 = $__x5 | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x1;
 $1 = $__x2;
 $2 = $__x3;
 $3 = $__x4;
 $4 = $__x5;
 $5 = $__c;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $5;
 $11 = __ZNSt3__17__sort4IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_T_($6, $7, $8, $9, $10) | 0;
 $__r = $11;
 $12 = $5;
 $13 = $4;
 $14 = $3;
 $15 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($12, $13, $14) | 0;
 if (!$15) {
  $44 = $__r;
  STACKTOP = sp;
  return $44 | 0;
 }
 $16 = $3;
 $17 = $4;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($16, $17);
 $18 = $__r;
 $19 = $18 + 1 | 0;
 $__r = $19;
 $20 = $5;
 $21 = $3;
 $22 = $2;
 $23 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($20, $21, $22) | 0;
 if (!$23) {
  $44 = $__r;
  STACKTOP = sp;
  return $44 | 0;
 }
 $24 = $2;
 $25 = $3;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($24, $25);
 $26 = $__r;
 $27 = $26 + 1 | 0;
 $__r = $27;
 $28 = $5;
 $29 = $2;
 $30 = $1;
 $31 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($28, $29, $30) | 0;
 if (!$31) {
  $44 = $__r;
  STACKTOP = sp;
  return $44 | 0;
 }
 $32 = $1;
 $33 = $2;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($32, $33);
 $34 = $__r;
 $35 = $34 + 1 | 0;
 $__r = $35;
 $36 = $5;
 $37 = $1;
 $38 = $0;
 $39 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($36, $37, $38) | 0;
 if (!$39) {
  $44 = $__r;
  STACKTOP = sp;
  return $44 | 0;
 }
 $40 = $0;
 $41 = $1;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($40, $41);
 $42 = $__r;
 $43 = $42 + 1 | 0;
 $__r = $43;
 $44 = $__r;
 STACKTOP = sp;
 return $44 | 0;
}

function __ZN9b2Contact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $createFcn = 0, $or$cond = 0, $or$cond3 = 0, $type1 = 0, $type2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $5 = $allocator;
 $6 = SAFE_HEAP_LOAD(3498 >> 0 | 0, 1, 0) | 0 | 0;
 $7 = $6 & 1;
 $8 = $7 & 1;
 $9 = ($8 | 0) == 0;
 if ($9) {
  __ZN9b2Contact19InitializeRegistersEv();
  SAFE_HEAP_STORE(3498 >> 0 | 0, 1 | 0, 1);
 }
 $10 = $1;
 $11 = __ZNK9b2Fixture7GetTypeEv($10) | 0;
 $type1 = $11;
 $12 = $3;
 $13 = __ZNK9b2Fixture7GetTypeEv($12) | 0;
 $type2 = $13;
 $14 = $type1;
 $15 = 0 <= ($14 | 0);
 $16 = $type1;
 $17 = ($16 | 0) < 4;
 $or$cond = $15 & $17;
 if (!$or$cond) {
  ___assert_fail(5934 | 0, 5829 | 0, 80, 5977 | 0);
 }
 $18 = $type2;
 $19 = 0 <= ($18 | 0);
 $20 = $type2;
 $21 = ($20 | 0) < 4;
 $or$cond3 = $19 & $21;
 if (!$or$cond3) {
  ___assert_fail(5984 | 0, 5829 | 0, 81, 5977 | 0);
 }
 $22 = $type2;
 $23 = $type1;
 $24 = 1008 + ($23 * 48 | 0) | 0;
 $25 = $24 + ($22 * 12 | 0) | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $createFcn = $26;
 $27 = $createFcn;
 $28 = ($27 | 0) != (0 | 0);
 if (!$28) {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;
  return $49 | 0;
 }
 $29 = $type2;
 $30 = $type1;
 $31 = 1008 + ($30 * 48 | 0) | 0;
 $32 = $31 + ($29 * 12 | 0) | 0;
 $33 = $32 + 8 | 0;
 $34 = SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 0;
 $35 = $34 & 1;
 $36 = $createFcn;
 if ($35) {
  $37 = $1;
  $38 = $2;
  $39 = $3;
  $40 = $4;
  $41 = $5;
  $42 = FUNCTION_TABLE_iiiiii[(SAFE_FT_MASK($36 | 0, 255 | 0) | 0) & 255]($37, $38, $39, $40, $41) | 0;
  $0 = $42;
  $49 = $0;
  STACKTOP = sp;
  return $49 | 0;
 } else {
  $43 = $3;
  $44 = $4;
  $45 = $1;
  $46 = $2;
  $47 = $5;
  $48 = FUNCTION_TABLE_iiiiii[(SAFE_FT_MASK($36 | 0, 255 | 0) | 0) & 255]($43, $44, $45, $46, $47) | 0;
  $0 = $48;
  $49 = $0;
  STACKTOP = sp;
  return $49 | 0;
 }
 return 0 | 0;
}

function __ZN9b2Contact7DestroyEPS_P16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $destroyFcn = 0, $fixtureA = 0, $fixtureB = 0, $or$cond = 0, $or$cond3 = 0, $typeA = 0, $typeB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = SAFE_HEAP_LOAD(3498 >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 1;
 $4 = $3 & 1;
 $5 = ($4 | 0) == 1;
 if (!$5) {
  ___assert_fail(5807 | 0, 5829 | 0, 103, 5799 | 0);
 }
 $6 = $0;
 $7 = $6 + 48 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $fixtureA = $8;
 $9 = $0;
 $10 = $9 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $fixtureB = $11;
 $12 = $0;
 $13 = $12 + 64 | 0;
 $14 = $13 + 60 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) > 0;
 if ($16) {
  $17 = $fixtureA;
  $18 = __ZNK9b2Fixture8IsSensorEv($17) | 0;
  $19 = $18 & 1;
  $20 = ($19 | 0) == 0;
  if ($20) {
   $21 = $fixtureB;
   $22 = __ZNK9b2Fixture8IsSensorEv($21) | 0;
   $23 = $22 & 1;
   $24 = ($23 | 0) == 0;
   if ($24) {
    $25 = $fixtureA;
    $26 = __ZN9b2Fixture7GetBodyEv($25) | 0;
    __ZN6b2Body8SetAwakeEb($26, 1);
    $27 = $fixtureB;
    $28 = __ZN9b2Fixture7GetBodyEv($27) | 0;
    __ZN6b2Body8SetAwakeEb($28, 1);
   }
  }
 }
 $29 = $fixtureA;
 $30 = __ZNK9b2Fixture7GetTypeEv($29) | 0;
 $typeA = $30;
 $31 = $fixtureB;
 $32 = __ZNK9b2Fixture7GetTypeEv($31) | 0;
 $typeB = $32;
 $33 = $typeA;
 $34 = 0 <= ($33 | 0);
 $35 = $typeB;
 $36 = ($35 | 0) < 4;
 $or$cond = $34 & $36;
 if (!$or$cond) {
  ___assert_fail(5891 | 0, 5829 | 0, 119, 5799 | 0);
 }
 $37 = $typeA;
 $38 = 0 <= ($37 | 0);
 $39 = $typeB;
 $40 = ($39 | 0) < 4;
 $or$cond3 = $38 & $40;
 if ($or$cond3) {
  $41 = $typeB;
  $42 = $typeA;
  $43 = 1008 + ($42 * 48 | 0) | 0;
  $44 = $43 + ($41 * 12 | 0) | 0;
  $45 = $44 + 4 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $destroyFcn = $46;
  $47 = $destroyFcn;
  $48 = $0;
  $49 = $1;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($47 | 0, 255 | 0) | 0) & 255]($48, $49);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(5891 | 0, 5829 | 0, 120, 5799 | 0);
 }
}

function __ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collide = 0, $filterA = 0, $filterB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 21 | 0;
 $1 = $this;
 $2 = $fixtureA;
 $3 = $fixtureB;
 $4 = $2;
 $5 = __ZNK9b2Fixture13GetFilterDataEv($4) | 0;
 $filterA = $5;
 $6 = $3;
 $7 = __ZNK9b2Fixture13GetFilterDataEv($6) | 0;
 $filterB = $7;
 $8 = $filterA;
 $9 = $8 + 4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0;
 $11 = $10 << 16 >> 16;
 $12 = $filterB;
 $13 = $12 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0;
 $15 = $14 << 16 >> 16;
 $16 = ($11 | 0) == ($15 | 0);
 if ($16) {
  $17 = $filterA;
  $18 = $17 + 4 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 2, 0) | 0 | 0;
  $20 = $19 << 16 >> 16;
  $21 = ($20 | 0) != 0;
  if ($21) {
   $22 = $filterA;
   $23 = $22 + 4 | 0;
   $24 = SAFE_HEAP_LOAD($23 | 0, 2, 0) | 0 | 0;
   $25 = $24 << 16 >> 16;
   $26 = ($25 | 0) > 0;
   $$expand_i1_val = $26 & 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $49 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $49 | 0;
  }
 }
 $27 = $filterA;
 $28 = $27 + 2 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 2, 0) | 0 | 0;
 $30 = $29 & 65535;
 $31 = $filterB;
 $32 = SAFE_HEAP_LOAD($31 | 0, 2, 0) | 0 | 0;
 $33 = $32 & 65535;
 $34 = $30 & $33;
 $35 = ($34 | 0) != 0;
 if ($35) {
  $36 = $filterA;
  $37 = SAFE_HEAP_LOAD($36 | 0, 2, 0) | 0 | 0;
  $38 = $37 & 65535;
  $39 = $filterB;
  $40 = $39 + 2 | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 2, 0) | 0 | 0;
  $42 = $41 & 65535;
  $43 = $38 & $42;
  $44 = ($43 | 0) != 0;
  $46 = $44;
 } else {
  $46 = 0;
 }
 $45 = $46 & 1;
 $collide = $45;
 $47 = $collide;
 $48 = $47 & 1;
 $$expand_i1_val2 = $48 & 1;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $49 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $49 | 0;
}

function __ZNSt3__118__insertion_sort_3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0;
 var $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__t = sp + 8 | 0;
 $0 = $__first;
 $1 = $__last;
 $2 = $__comp;
 $3 = $0;
 $4 = $3 + 16 | 0;
 $__j = $4;
 $5 = $0;
 $6 = $0;
 $7 = $6 + 8 | 0;
 $8 = $__j;
 $9 = $2;
 __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($5, $7, $8, $9) | 0;
 $10 = $__j;
 $11 = $10 + 8 | 0;
 $__i = $11;
 while (1) {
  $12 = $__i;
  $13 = $1;
  $14 = ($12 | 0) != ($13 | 0);
  if (!$14) {
   break;
  }
  $15 = $2;
  $16 = $__i;
  $17 = $__j;
  $18 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($15, $16, $17) | 0;
  if ($18) {
   $19 = $__i;
   $20 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($19) | 0;
   {}
   SAFE_HEAP_STORE($__t | 0, SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($__t + 4 | 0, SAFE_HEAP_LOAD($20 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   $21 = $__j;
   $__k = $21;
   $22 = $__i;
   $__j = $22;
   while (1) {
    $23 = $__j;
    $24 = $__k;
    $25 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($24) | 0;
    {}
    SAFE_HEAP_STORE($23 | 0, SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($23 + 4 | 0, SAFE_HEAP_LOAD($25 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    $26 = $__k;
    $__j = $26;
    $27 = $__j;
    $28 = $0;
    $29 = ($27 | 0) != ($28 | 0);
    if (!$29) {
     break;
    }
    $30 = $2;
    $31 = $__k;
    $32 = $31 + -8 | 0;
    $__k = $32;
    $33 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($30, $__t, $32) | 0;
    if (!$33) {
     break;
    }
   }
   $34 = $__j;
   $35 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($__t) | 0;
   {}
   SAFE_HEAP_STORE($34 | 0, SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($34 + 4 | 0, SAFE_HEAP_LOAD($35 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  }
  $36 = $__i;
  $__j = $36;
  $37 = $__i;
  $38 = $37 + 8 | 0;
  $__i = $38;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $$first = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first$pn = 0, $isdigit = 0, $isdigit3 = 0, $isdigit5 = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp4 = 0, $isdigittmp6 = 0, $t1$016 = 0, $t1$016$lcssa = 0, $t11$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $2 = $1 << 24 >> 24 == 95;
   if (!$2) {
    $17 = $1 << 24 >> 24;
    $isdigittmp = $17 + -48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
     $first$pn = $first;
    } else {
     $$0 = $first;
     break;
    }
    while (1) {
     $t11$0 = $first$pn + 1 | 0;
     $18 = ($t11$0 | 0) == ($last | 0);
     if ($18) {
      $$0 = $last;
      break L1;
     }
     $19 = SAFE_HEAP_LOAD($t11$0 >> 0 | 0, 1, 0) | 0 | 0;
     $20 = $19 << 24 >> 24;
     $isdigittmp2 = $20 + -48 | 0;
     $isdigit3 = $isdigittmp2 >>> 0 < 10;
     if ($isdigit3) {
      $first$pn = $t11$0;
     } else {
      $$0 = $t11$0;
      break L1;
     }
    }
   }
   $3 = $first + 1 | 0;
   $4 = ($3 | 0) == ($last | 0);
   if ($4) {
    $$0 = $first;
   } else {
    $5 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
    $6 = $5 << 24 >> 24;
    $isdigittmp4 = $6 + -48 | 0;
    $isdigit5 = $isdigittmp4 >>> 0 < 10;
    if ($isdigit5) {
     $7 = $first + 2 | 0;
     $$0 = $7;
     break;
    }
    $8 = $5 << 24 >> 24 == 95;
    if ($8) {
     $9 = $first + 2 | 0;
     $10 = ($9 | 0) == ($last | 0);
     if ($10) {
      $$0 = $first;
     } else {
      $t1$016 = $9;
      while (1) {
       $11 = SAFE_HEAP_LOAD($t1$016 >> 0 | 0, 1, 0) | 0 | 0;
       $12 = $11 << 24 >> 24;
       $isdigittmp6 = $12 + -48 | 0;
       $isdigit7 = $isdigittmp6 >>> 0 < 10;
       if (!$isdigit7) {
        $$lcssa = $11;
        $t1$016$lcssa = $t1$016;
        break;
       }
       $13 = $t1$016 + 1 | 0;
       $14 = ($13 | 0) == ($last | 0);
       if ($14) {
        $$0 = $first;
        break L1;
       } else {
        $t1$016 = $13;
       }
      }
      $15 = $$lcssa << 24 >> 24 == 95;
      $16 = $t1$016$lcssa + 1 | 0;
      $$first = $15 ? $16 : $first;
      return $$first | 0;
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZN8b2IslandC2EiiiP16b2StackAllocatorP17b2ContactListener($this, $bodyCapacity, $contactCapacity, $jointCapacity, $allocator, $listener) {
 $this = $this | 0;
 $bodyCapacity = $bodyCapacity | 0;
 $contactCapacity = $contactCapacity | 0;
 $jointCapacity = $jointCapacity | 0;
 $allocator = $allocator | 0;
 $listener = $listener | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $bodyCapacity;
 $2 = $contactCapacity;
 $3 = $jointCapacity;
 $4 = $allocator;
 $5 = $listener;
 $6 = $0;
 $7 = $1;
 $8 = $6 + 40 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $2;
 $10 = $6 + 44 | 0;
 SAFE_HEAP_STORE($10 | 0, $9 | 0, 4);
 $11 = $3;
 $12 = $6 + 48 | 0;
 SAFE_HEAP_STORE($12 | 0, $11 | 0, 4);
 $13 = $6 + 28 | 0;
 SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
 $14 = $6 + 36 | 0;
 SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
 $15 = $6 + 32 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 $16 = $4;
 SAFE_HEAP_STORE($6 | 0, $16 | 0, 4);
 $17 = $5;
 $18 = $6 + 4 | 0;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $20 = $1;
 $21 = $20 << 2;
 $22 = __ZN16b2StackAllocator8AllocateEi($19, $21) | 0;
 $23 = $6 + 8 | 0;
 SAFE_HEAP_STORE($23 | 0, $22 | 0, 4);
 $24 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $25 = $2;
 $26 = $25 << 2;
 $27 = __ZN16b2StackAllocator8AllocateEi($24, $26) | 0;
 $28 = $6 + 12 | 0;
 SAFE_HEAP_STORE($28 | 0, $27 | 0, 4);
 $29 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $30 = $3;
 $31 = $30 << 2;
 $32 = __ZN16b2StackAllocator8AllocateEi($29, $31) | 0;
 $33 = $6 + 16 | 0;
 SAFE_HEAP_STORE($33 | 0, $32 | 0, 4);
 $34 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $35 = $6 + 40 | 0;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = $36 * 12 | 0;
 $38 = __ZN16b2StackAllocator8AllocateEi($34, $37) | 0;
 $39 = $6 + 24 | 0;
 SAFE_HEAP_STORE($39 | 0, $38 | 0, 4);
 $40 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $41 = $6 + 40 | 0;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 $43 = $42 * 12 | 0;
 $44 = __ZN16b2StackAllocator8AllocateEi($40, $43) | 0;
 $45 = $6 + 20 | 0;
 SAFE_HEAP_STORE($45 | 0, $44 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($this, $broadPhase, $transform1, $transform2) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $transform1 = $transform1 | 0;
 $transform2 = $transform2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabb1 = 0, $aabb2 = 0, $displacement = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $aabb1 = sp + 24 | 0;
 $aabb2 = sp + 8 | 0;
 $displacement = sp;
 $0 = $this;
 $1 = $broadPhase;
 $2 = $transform1;
 $3 = $transform2;
 $4 = $0;
 $5 = $4 + 28 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) == 0;
 if ($7) {
  STACKTOP = sp;
  return;
 }
 $i = 0;
 while (1) {
  $8 = $i;
  $9 = $4 + 28 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   break;
  }
  $12 = $4 + 24 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $i;
  $15 = $13 + ($14 * 28 | 0) | 0;
  $proxy = $15;
  __ZN6b2AABBC2Ev($aabb1);
  __ZN6b2AABBC2Ev($aabb2);
  $16 = $4 + 12 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $18 + 24 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $2;
  $22 = $proxy;
  $23 = $22 + 20 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($20 | 0, 255 | 0) | 0) & 255]($17, $aabb1, $21, $24);
  $25 = $4 + 12 | 0;
  $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 + 24 | 0;
  $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
  $30 = $3;
  $31 = $proxy;
  $32 = $31 + 20 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($29 | 0, 255 | 0) | 0) & 255]($26, $aabb2, $30, $33);
  $34 = $proxy;
  __ZN6b2AABB7CombineERKS_S1_($34, $aabb1, $aabb2);
  $35 = $3;
  $36 = $2;
  __ZmiRK6b2Vec2S1_($displacement, $35, $36);
  $37 = $1;
  $38 = $proxy;
  $39 = $38 + 24 | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = $proxy;
  __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($37, $40, $41, $displacement);
  $42 = $i;
  $43 = $42 + 1 | 0;
  $i = $43;
 }
 STACKTOP = sp;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $3 = ___towrite($f) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   $$pre = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4 : do {
  if ((label | 0) == 4) {
   $5 = $f + 20 | 0;
   $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   $8 = $7;
   $9 = $6;
   $10 = $8 - $9 | 0;
   $11 = $10 >>> 0 < $l >>> 0;
   if ($11) {
    $12 = $f + 36 | 0;
    $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
    $14 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($13 | 0, 255 | 0) | 0) & 255]($f, $s, $l) | 0;
    $$0 = $14;
    break;
   }
   $15 = $f + 75 | 0;
   $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
   $17 = $16 << 24 >> 24 > -1;
   L9 : do {
    if ($17) {
     $i$0 = $l;
     while (1) {
      $18 = ($i$0 | 0) == 0;
      if ($18) {
       $$01 = $l;
       $$02 = $s;
       $29 = $6;
       $i$1 = 0;
       break L9;
      }
      $19 = $i$0 + -1 | 0;
      $20 = $s + $19 | 0;
      $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
      $22 = $21 << 24 >> 24 == 10;
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = $f + 36 | 0;
     $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
     $25 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($24 | 0, 255 | 0) | 0) & 255]($f, $s, $i$0$lcssa10) | 0;
     $26 = $25 >>> 0 < $i$0$lcssa10 >>> 0;
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = $s + $i$0$lcssa10 | 0;
     $28 = $l - $i$0$lcssa10 | 0;
     $$pre6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
     $$01 = $28;
     $$02 = $27;
     $29 = $$pre6;
     $i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;
     $$02 = $s;
     $29 = $6;
     $i$1 = 0;
    }
   } while (0);
   _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
   $30 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   $31 = $30 + $$01 | 0;
   SAFE_HEAP_STORE($5 | 0, $31 | 0, 4);
   $32 = $i$1 + $$01 | 0;
   $$0 = $32;
  }
 } while (0);
 return $$0 | 0;
}

function __ZN8b2Island6ReportEPK27b2ContactVelocityConstraint($this, $constraints) {
 $this = $this | 0;
 $constraints = $constraints | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $impulse = 0, $j = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $impulse = sp + 4 | 0;
 $0 = $this;
 $1 = $constraints;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) == (0 | 0);
 if ($5) {
  STACKTOP = sp;
  return;
 }
 $i = 0;
 while (1) {
  $6 = $i;
  $7 = $2 + 36 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = ($6 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $i;
  $11 = $2 + 12 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $12 + ($10 << 2) | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $c = $14;
  $15 = $1;
  $16 = $i;
  $17 = $15 + ($16 * 156 | 0) | 0;
  $vc = $17;
  $18 = $vc;
  $19 = $18 + 148 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $impulse + 16 | 0;
  SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
  $j = 0;
  while (1) {
   $22 = $j;
   $23 = $vc;
   $24 = $23 + 148 | 0;
   $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
   $26 = ($22 | 0) < ($25 | 0);
   if (!$26) {
    break;
   }
   $27 = $j;
   $28 = $vc;
   $29 = $28 + ($27 * 36 | 0) | 0;
   $30 = $29 + 16 | 0;
   $31 = +(+SAFE_HEAP_LOAD_D($30 | 0, 4));
   $32 = $j;
   $33 = $impulse + ($32 << 2) | 0;
   SAFE_HEAP_STORE_D($33 | 0, +$31, 4);
   $34 = $j;
   $35 = $vc;
   $36 = $35 + ($34 * 36 | 0) | 0;
   $37 = $36 + 20 | 0;
   $38 = +(+SAFE_HEAP_LOAD_D($37 | 0, 4));
   $39 = $j;
   $40 = $impulse + 8 | 0;
   $41 = $40 + ($39 << 2) | 0;
   SAFE_HEAP_STORE_D($41 | 0, +$38, 4);
   $42 = $j;
   $43 = $42 + 1 | 0;
   $j = $43;
  }
  $44 = $2 + 4 | 0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $46 + 20 | 0;
  $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $49 = $c;
  FUNCTION_TABLE_viii[(SAFE_FT_MASK($48 | 0, 255 | 0) | 0) & 255]($45, $49, $impulse);
  $50 = $i;
  $51 = $50 + 1 | 0;
  $i = $51;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = $this + 4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $__v + 4 | 0;
 $4 = ($2 | 0) == ($0 | 0);
 if (!$4) {
  $$0$i1 = $2;
  while (1) {
   $5 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $6 = $5 + -16 | 0;
   $7 = $$0$i1 + -16 | 0;
   $8 = $$0$i1 + -4 | 0;
   SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
   $9 = $5 + -12 | 0;
   SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
   $10 = $5 + -8 | 0;
   $11 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
   $12 = $5 + -4 | 0;
   SAFE_HEAP_STORE($12 | 0, $11 | 0, 4);
   $13 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($6 | 0, $13 | 0, 4);
   $14 = $$0$i1 + -12 | 0;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($9 | 0, $15 | 0, 4);
   $16 = $$0$i1 + -8 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = $5 + -8 | 0;
   SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
   SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
   $19 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $20 = $19 + -16 | 0;
   SAFE_HEAP_STORE($3 | 0, $20 | 0, 4);
   $21 = ($7 | 0) == ($0 | 0);
   if ($21) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $22 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $23 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($this | 0, $23 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, $22 | 0, 4);
 $24 = $__v + 8 | 0;
 $25 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $26 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($1 | 0, $26 | 0, 4);
 SAFE_HEAP_STORE($24 | 0, $25 | 0, 4);
 $27 = $this + 8 | 0;
 $28 = $__v + 12 | 0;
 $29 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $30 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($27 | 0, $30 | 0, 4);
 SAFE_HEAP_STORE($28 | 0, $29 | 0, 4);
 $31 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($__v | 0, $31 | 0, 4);
 return;
}

function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = $this + 4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $__v + 4 | 0;
 $4 = ($2 | 0) == ($0 | 0);
 if (!$4) {
  $$0$i1 = $2;
  while (1) {
   $5 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $6 = $5 + -16 | 0;
   $7 = $$0$i1 + -16 | 0;
   $8 = $$0$i1 + -4 | 0;
   SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
   $9 = $5 + -12 | 0;
   SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
   $10 = $5 + -8 | 0;
   $11 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
   $12 = $5 + -4 | 0;
   SAFE_HEAP_STORE($12 | 0, $11 | 0, 4);
   $13 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($6 | 0, $13 | 0, 4);
   $14 = $$0$i1 + -12 | 0;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($9 | 0, $15 | 0, 4);
   $16 = $$0$i1 + -8 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = $5 + -8 | 0;
   SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
   SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
   $19 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $20 = $19 + -16 | 0;
   SAFE_HEAP_STORE($3 | 0, $20 | 0, 4);
   $21 = ($7 | 0) == ($0 | 0);
   if ($21) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $22 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $23 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($this | 0, $23 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, $22 | 0, 4);
 $24 = $__v + 8 | 0;
 $25 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $26 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($1 | 0, $26 | 0, 4);
 SAFE_HEAP_STORE($24 | 0, $25 | 0, 4);
 $27 = $this + 8 | 0;
 $28 = $__v + 12 | 0;
 $29 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $30 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($27 | 0, $30 | 0, 4);
 SAFE_HEAP_STORE($28 | 0, $29 | 0, 4);
 $31 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($__v | 0, $31 | 0, 4);
 return;
}

function __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($__x, $__y, $__z, $__c) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 $__z = $__z | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__x;
 $2 = $__y;
 $3 = $__z;
 $4 = $__c;
 $__r = 0;
 $5 = $4;
 $6 = $2;
 $7 = $1;
 $8 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($5, $6, $7) | 0;
 $9 = $4;
 $10 = $3;
 $11 = $2;
 $12 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($9, $10, $11) | 0;
 if ($8) {
  $23 = $1;
  if ($12) {
   $24 = $3;
   __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($23, $24);
   $__r = 1;
   $25 = $__r;
   $0 = $25;
   $34 = $0;
   STACKTOP = sp;
   return $34 | 0;
  }
  $26 = $2;
  __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($23, $26);
  $__r = 1;
  $27 = $4;
  $28 = $3;
  $29 = $2;
  $30 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($27, $28, $29) | 0;
  if ($30) {
   $31 = $2;
   $32 = $3;
   __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($31, $32);
   $__r = 2;
  }
  $33 = $__r;
  $0 = $33;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 } else {
  if (!$12) {
   $13 = $__r;
   $0 = $13;
   $34 = $0;
   STACKTOP = sp;
   return $34 | 0;
  }
  $14 = $2;
  $15 = $3;
  __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($14, $15);
  $__r = 1;
  $16 = $4;
  $17 = $2;
  $18 = $1;
  $19 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($16, $17, $18) | 0;
  if ($19) {
   $20 = $1;
   $21 = $2;
   __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($20, $21);
   $__r = 2;
  }
  $22 = $__r;
  $0 = $22;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 20 | 0;
 $0 = $this;
 $1 = $__s;
 $2 = $__sz;
 $4 = $0;
 $5 = $2;
 $6 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv($4) | 0;
 $7 = $5 >>> 0 > $6 >>> 0;
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($4);
 }
 $8 = $2;
 $9 = $8 >>> 0 < 11;
 $10 = $2;
 if ($9) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj($4, $10);
  $11 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv($4) | 0;
  $__p = $11;
  $21 = $__p;
  $22 = __ZNSt3__116__to_raw_pointerIcEEPT_S2_($21) | 0;
  $23 = $1;
  $24 = $2;
  __ZNSt3__111char_traitsIcE4copyEPcPKcj($22, $23, $24) | 0;
  $25 = $2;
  $26 = $__p;
  $27 = $26 + $25 | 0;
  SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
  __ZNSt3__111char_traitsIcE6assignERcRKc($27, $3);
  STACKTOP = sp;
  return;
 } else {
  $12 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj($10) | 0;
  $__cap = $12;
  $13 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($4) | 0;
  $14 = $__cap;
  $15 = $14 + 1 | 0;
  $16 = __ZNSt3__116allocator_traitsINS_9allocatorIcEEE8allocateERS2_j($13, $15) | 0;
  $__p = $16;
  $17 = $__p;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc($4, $17);
  $18 = $__cap;
  $19 = $18 + 1 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj($4, $19);
  $20 = $2;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj($4, $20);
  $21 = $__p;
  $22 = __ZNSt3__116__to_raw_pointerIcEEPT_S2_($21) | 0;
  $23 = $1;
  $24 = $2;
  __ZNSt3__111char_traitsIcE4copyEPcPKcj($22, $23, $24) | 0;
  $25 = $2;
  $26 = $__p;
  $27 = $26 + $25 | 0;
  SAFE_HEAP_STORE($3 >> 0 | 0, 0 | 0, 1);
  __ZNSt3__111char_traitsIcE6assignERcRKc($27, $3);
  STACKTOP = sp;
  return;
 }
}

function __ZN13b2DynamicTreeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 SAFE_HEAP_STORE($1 | 0, -1 | 0, 4);
 $2 = $1 + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 16 | 0, 4);
 $3 = $1 + 8 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 * 36 | 0;
 $7 = __Z7b2Alloci($6) | 0;
 $8 = $1 + 4 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $1 + 4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $1 + 12 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $12 * 36 | 0;
 _memset($10 | 0, 0, $13 | 0) | 0;
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $1 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 - 1 | 0;
  $18 = ($14 | 0) < ($17 | 0);
  if (!$18) {
   break;
  }
  $19 = $i;
  $20 = $19 + 1 | 0;
  $21 = $i;
  $22 = $1 + 4 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = $23 + ($21 * 36 | 0) | 0;
  $25 = $24 + 20 | 0;
  SAFE_HEAP_STORE($25 | 0, $20 | 0, 4);
  $26 = $i;
  $27 = $1 + 4 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $28 + ($26 * 36 | 0) | 0;
  $30 = $29 + 32 | 0;
  SAFE_HEAP_STORE($30 | 0, -1 | 0, 4);
  $31 = $i;
  $32 = $31 + 1 | 0;
  $i = $32;
 }
 $33 = $1 + 12 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $34 - 1 | 0;
 $36 = $1 + 4 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $37 + ($35 * 36 | 0) | 0;
 $39 = $38 + 20 | 0;
 SAFE_HEAP_STORE($39 | 0, -1 | 0, 4);
 $40 = $1 + 12 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $41 - 1 | 0;
 $43 = $1 + 4 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $44 + ($42 * 36 | 0) | 0;
 $46 = $45 + 32 | 0;
 SAFE_HEAP_STORE($46 | 0, -1 | 0, 4);
 $47 = $1 + 16 | 0;
 SAFE_HEAP_STORE($47 | 0, 0 | 0, 4);
 $48 = $1 + 20 | 0;
 SAFE_HEAP_STORE($48 | 0, 0 | 0, 4);
 $49 = $1 + 24 | 0;
 SAFE_HEAP_STORE($49 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lower = 0, $r = 0, $upper = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $lower = sp + 64 | 0;
 $upper = sp + 56 | 0;
 $v = sp + 40 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 24 | 0;
 $r = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $8 = $0;
 $9 = $2;
 $10 = $8 + 20 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($lower, $9, $10);
 {}
 SAFE_HEAP_STORE($upper | 0, SAFE_HEAP_LOAD($lower | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($upper + 4 | 0, SAFE_HEAP_LOAD($lower + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $i = 1;
 while (1) {
  $11 = $i;
  $12 = $8 + 148 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($11 | 0) < ($13 | 0);
  if (!$14) {
   break;
  }
  $15 = $2;
  $16 = $i;
  $17 = $8 + 20 | 0;
  $18 = $17 + ($16 << 3) | 0;
  __Z5b2MulRK11b2TransformRK6b2Vec2($v, $15, $18);
  __Z5b2MinRK6b2Vec2S1_($4, $lower, $v);
  {}
  SAFE_HEAP_STORE($lower | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($lower + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  __Z5b2MaxRK6b2Vec2S1_($5, $upper, $v);
  {}
  SAFE_HEAP_STORE($upper | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($upper + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $19 = $i;
  $20 = $19 + 1 | 0;
  $i = $20;
 }
 $21 = $8 + 8 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $8 + 8 | 0;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 __ZN6b2Vec2C2Eff($r, $22, $24);
 $25 = $1;
 __ZmiRK6b2Vec2S1_($6, $lower, $r);
 {}
 SAFE_HEAP_STORE($25 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($25 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $26 = $1;
 $27 = $26 + 8 | 0;
 __ZplRK6b2Vec2S1_($7, $upper, $r);
 {}
 SAFE_HEAP_STORE($27 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($27 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN16b2StackAllocator8AllocateEi($this, $size) {
 $this = $this | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $size;
 $2 = $0;
 $3 = $2 + 102796 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) < 32;
 if (!$5) {
  ___assert_fail(5274 | 0, 5180 | 0, 38, 3865 | 0);
 }
 $6 = $2 + 102412 | 0;
 $7 = $2 + 102796 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $6 + ($8 * 12 | 0) | 0;
 $entry = $9;
 $10 = $1;
 $11 = $entry;
 $12 = $11 + 4 | 0;
 SAFE_HEAP_STORE($12 | 0, $10 | 0, 4);
 $13 = $2 + 102400 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $1;
 $16 = $14 + $15 | 0;
 $17 = ($16 | 0) > 102400;
 if ($17) {
  $18 = $1;
  $19 = __Z7b2Alloci($18) | 0;
  $20 = $entry;
  SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
  $21 = $entry;
  $22 = $21 + 8 | 0;
  SAFE_HEAP_STORE($22 >> 0 | 0, 1 | 0, 1);
 } else {
  $23 = $2 + 102400 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $2 + $24 | 0;
  $26 = $entry;
  SAFE_HEAP_STORE($26 | 0, $25 | 0, 4);
  $27 = $entry;
  $28 = $27 + 8 | 0;
  SAFE_HEAP_STORE($28 >> 0 | 0, 0 | 0, 1);
  $29 = $1;
  $30 = $2 + 102400 | 0;
  $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
  $32 = $31 + $29 | 0;
  SAFE_HEAP_STORE($30 | 0, $32 | 0, 4);
 }
 $33 = $1;
 $34 = $2 + 102404 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $35 + $33 | 0;
 SAFE_HEAP_STORE($34 | 0, $36 | 0, 4);
 $37 = $2 + 102408 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = $2 + 102404 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = __Z5b2MaxIiET_S0_S0_($38, $40) | 0;
 $42 = $2 + 102408 | 0;
 SAFE_HEAP_STORE($42 | 0, $41 | 0, 4);
 $43 = $2 + 102796 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $44 + 1 | 0;
 SAFE_HEAP_STORE($43 | 0, $45 | 0, 4);
 $46 = $entry;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $47 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = $wc >>> 0 < 128;
   if ($1) {
    $2 = $wc & 255;
    SAFE_HEAP_STORE($s >> 0 | 0, $2 | 0, 1);
    $$0 = 1;
    break;
   }
   $3 = $wc >>> 0 < 2048;
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5 & 255;
    $7 = $s + 1 | 0;
    SAFE_HEAP_STORE($s >> 0 | 0, $6 | 0, 1);
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9 & 255;
    SAFE_HEAP_STORE($7 >> 0 | 0, $10 | 0, 1);
    $$0 = 2;
    break;
   }
   $11 = $wc >>> 0 < 55296;
   $12 = $wc & -8192;
   $13 = ($12 | 0) == 57344;
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15 & 255;
    $17 = $s + 1 | 0;
    SAFE_HEAP_STORE($s >> 0 | 0, $16 | 0, 1);
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20 & 255;
    $22 = $s + 2 | 0;
    SAFE_HEAP_STORE($17 >> 0 | 0, $21 | 0, 1);
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24 & 255;
    SAFE_HEAP_STORE($22 >> 0 | 0, $25 | 0, 1);
    $$0 = 3;
    break;
   }
   $26 = $wc + -65536 | 0;
   $27 = $26 >>> 0 < 1048576;
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29 & 255;
    $31 = $s + 1 | 0;
    SAFE_HEAP_STORE($s >> 0 | 0, $30 | 0, 1);
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34 & 255;
    $36 = $s + 2 | 0;
    SAFE_HEAP_STORE($31 >> 0 | 0, $35 | 0, 1);
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39 & 255;
    $41 = $s + 3 | 0;
    SAFE_HEAP_STORE($36 >> 0 | 0, $40 | 0, 1);
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43 & 255;
    SAFE_HEAP_STORE($41 >> 0 | 0, $44 | 0, 1);
    $$0 = 4;
    break;
   } else {
    $45 = ___errno_location() | 0;
    SAFE_HEAP_STORE($45 | 0, 84 | 0, 4);
    $$0 = -1;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($manifold, $circleA, $xfA, $circleB, $xfB) {
 $manifold = $manifold | 0;
 $circleA = $circleA | 0;
 $xfA = $xfA | 0;
 $circleB = $circleB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $d = 0, $distSqr = 0.0, $pA = 0, $pB = 0, $rA = 0.0, $rB = 0.0, $radius = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pA = sp + 32 | 0;
 $pB = sp + 24 | 0;
 $d = sp + 16 | 0;
 $0 = $manifold;
 $1 = $circleA;
 $2 = $xfA;
 $3 = $circleB;
 $4 = $xfB;
 $5 = $0;
 $6 = $5 + 60 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = $2;
 $8 = $1;
 $9 = $8 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($pA, $7, $9);
 $10 = $4;
 $11 = $3;
 $12 = $11 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($pB, $10, $12);
 __ZmiRK6b2Vec2S1_($d, $pB, $pA);
 $13 = +__Z5b2DotRK6b2Vec2S1_($d, $d);
 $distSqr = $13;
 $14 = $1;
 $15 = $14 + 8 | 0;
 $16 = +(+SAFE_HEAP_LOAD_D($15 | 0, 4));
 $rA = $16;
 $17 = $3;
 $18 = $17 + 8 | 0;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $rB = $19;
 $20 = $rA;
 $21 = $rB;
 $22 = $20 + $21;
 $radius = $22;
 $23 = $distSqr;
 $24 = $radius;
 $25 = $radius;
 $26 = $24 * $25;
 $27 = $23 > $26;
 if ($27) {
  STACKTOP = sp;
  return;
 }
 $28 = $0;
 $29 = $28 + 56 | 0;
 SAFE_HEAP_STORE($29 | 0, 0 | 0, 4);
 $30 = $0;
 $31 = $30 + 48 | 0;
 $32 = $1;
 $33 = $32 + 12 | 0;
 {}
 SAFE_HEAP_STORE($31 | 0, SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($31 + 4 | 0, SAFE_HEAP_LOAD($33 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $34 = $0;
 $35 = $34 + 40 | 0;
 __ZN6b2Vec27SetZeroEv($35);
 $36 = $0;
 $37 = $36 + 60 | 0;
 SAFE_HEAP_STORE($37 | 0, 1 | 0, 4);
 $38 = $0;
 $39 = $3;
 $40 = $39 + 12 | 0;
 {}
 SAFE_HEAP_STORE($38 | 0, SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($38 + 4 | 0, SAFE_HEAP_LOAD($40 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $41 = $0;
 $42 = $41 + 16 | 0;
 SAFE_HEAP_STORE($42 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = -18 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $2 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 1 | 0;
  $20 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $20 = $6;
 }
 $8 = $__old_cap >>> 0 < 2147483623;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 11;
  $14 = $12 + 16 | 0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = _malloc($17) | 0;
 $19 = ($__n_copy | 0) == 0;
 if (!$19) {
  _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 }
 $21 = ($__n_add | 0) == 0;
 if (!$21) {
  $22 = $18 + $__n_copy | 0;
  _memcpy($22 | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 }
 $23 = $__old_sz - $__n_del | 0;
 $24 = ($23 | 0) == ($__n_copy | 0);
 if (!$24) {
  $25 = $23 - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $26 = $18 + $$sum | 0;
  $$sum1 = $__n_del + $__n_copy | 0;
  $27 = $20 + $$sum1 | 0;
  _memcpy($26 | 0, $27 | 0, $25 | 0) | 0;
 }
 $28 = ($__old_cap | 0) == 10;
 if (!$28) {
  _free($20);
 }
 $29 = $this + 8 | 0;
 SAFE_HEAP_STORE($29 | 0, $18 | 0, 4);
 $30 = $17 | 1;
 SAFE_HEAP_STORE($this | 0, $30 | 0, 4);
 $31 = $23 + $__n_add | 0;
 $32 = $this + 4 | 0;
 SAFE_HEAP_STORE($32 | 0, $31 | 0, 4);
 $33 = $18 + $31 | 0;
 SAFE_HEAP_STORE($33 >> 0 | 0, 0 | 0, 1);
 return;
}

function __ZN9b2Simplex6Solve2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $d12_1 = 0.0, $d12_2 = 0.0, $e12 = 0, $inv_d12 = 0.0, $w1 = 0, $w2 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $w1 = sp + 32 | 0;
 $w2 = sp + 24 | 0;
 $e12 = sp + 16 | 0;
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 {}
 SAFE_HEAP_STORE($w1 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($w1 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $3 = $1 + 36 | 0;
 $4 = $3 + 16 | 0;
 {}
 SAFE_HEAP_STORE($w2 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($w2 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 __ZmiRK6b2Vec2S1_($e12, $w2, $w1);
 $5 = +__Z5b2DotRK6b2Vec2S1_($w1, $e12);
 $6 = -$5;
 $d12_2 = $6;
 $7 = $d12_2;
 $8 = $7 <= 0.0;
 if ($8) {
  $9 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($9 | 0, +(1.0), 4);
  $10 = $1 + 108 | 0;
  SAFE_HEAP_STORE($10 | 0, 1 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $11 = +__Z5b2DotRK6b2Vec2S1_($w2, $e12);
 $d12_1 = $11;
 $12 = $d12_1;
 $13 = $12 <= 0.0;
 if ($13) {
  $14 = $1 + 36 | 0;
  $15 = $14 + 24 | 0;
  SAFE_HEAP_STORE_D($15 | 0, +(1.0), 4);
  $16 = $1 + 108 | 0;
  SAFE_HEAP_STORE($16 | 0, 1 | 0, 4);
  $17 = $1 + 36 | 0;
  dest = $1;
  src = $17;
  stop = dest + 36 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 } else {
  $18 = $d12_1;
  $19 = $d12_2;
  $20 = $18 + $19;
  $21 = 1.0 / $20;
  $inv_d12 = $21;
  $22 = $d12_1;
  $23 = $inv_d12;
  $24 = $22 * $23;
  $25 = $1 + 24 | 0;
  SAFE_HEAP_STORE_D($25 | 0, +$24, 4);
  $26 = $d12_2;
  $27 = $inv_d12;
  $28 = $26 * $27;
  $29 = $1 + 36 | 0;
  $30 = $29 + 24 | 0;
  SAFE_HEAP_STORE_D($30 | 0, +$28, 4);
  $31 = $1 + 108 | 0;
  SAFE_HEAP_STORE($31 | 0, 2 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 do {
  if ($2) {
   $3 = $info + 4 | 0;
   $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $5 = ($4 | 0) == ($current_ptr | 0);
   if ($5) {
    $6 = $info + 28 | 0;
    $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == 1;
    if (!$8) {
     SAFE_HEAP_STORE($6 | 0, $path_below | 0, 4);
    }
   }
  } else {
   $9 = SAFE_HEAP_LOAD($info | 0, 4, 0) | 0 | 0;
   $10 = ($this | 0) == ($9 | 0);
   if ($10) {
    $11 = $info + 16 | 0;
    $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
    $13 = ($12 | 0) == ($current_ptr | 0);
    if (!$13) {
     $14 = $info + 20 | 0;
     $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
     $16 = ($15 | 0) == ($current_ptr | 0);
     if (!$16) {
      $19 = $info + 32 | 0;
      SAFE_HEAP_STORE($19 | 0, $path_below | 0, 4);
      SAFE_HEAP_STORE($14 | 0, $current_ptr | 0, 4);
      $20 = $info + 40 | 0;
      $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
      $22 = $21 + 1 | 0;
      SAFE_HEAP_STORE($20 | 0, $22 | 0, 4);
      $23 = $info + 36 | 0;
      $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
      $25 = ($24 | 0) == 1;
      if ($25) {
       $26 = $info + 24 | 0;
       $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
       $28 = ($27 | 0) == 2;
       if ($28) {
        $29 = $info + 54 | 0;
        SAFE_HEAP_STORE($29 >> 0 | 0, 1 | 0, 1);
       }
      }
      $30 = $info + 44 | 0;
      SAFE_HEAP_STORE($30 | 0, 4 | 0, 4);
      break;
     }
    }
    $17 = ($path_below | 0) == 1;
    if ($17) {
     $18 = $info + 32 | 0;
     SAFE_HEAP_STORE($18 | 0, 1 | 0, 4);
    }
   }
  }
 } while (0);
 return;
}

function __ZN9b2Fixture13CreateProxiesEP12b2BroadPhaseRK11b2Transform($this, $broadPhase, $xf) {
 $this = $this | 0;
 $broadPhase = $broadPhase | 0;
 $xf = $xf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $broadPhase;
 $2 = $xf;
 $3 = $0;
 $4 = $3 + 28 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) == 0;
 if (!$6) {
  ___assert_fail(5714 | 0, 5732 | 0, 124, 5785 | 0);
 }
 $7 = $3 + 12 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + 12 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($11 | 0, 255 | 0) | 0) & 255]($8) | 0;
 $13 = $3 + 28 | 0;
 SAFE_HEAP_STORE($13 | 0, $12 | 0, 4);
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $3 + 28 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = ($14 | 0) < ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = $3 + 24 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $i;
  $21 = $19 + ($20 * 28 | 0) | 0;
  $proxy = $21;
  $22 = $3 + 12 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $24 + 24 | 0;
  $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
  $27 = $proxy;
  $28 = $2;
  $29 = $i;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($26 | 0, 255 | 0) | 0) & 255]($23, $27, $28, $29);
  $30 = $1;
  $31 = $proxy;
  $32 = $proxy;
  $33 = __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($30, $31, $32) | 0;
  $34 = $proxy;
  $35 = $34 + 24 | 0;
  SAFE_HEAP_STORE($35 | 0, $33 | 0, 4);
  $36 = $proxy;
  $37 = $36 + 16 | 0;
  SAFE_HEAP_STORE($37 | 0, $3 | 0, 4);
  $38 = $i;
  $39 = $proxy;
  $40 = $39 + 20 | 0;
  SAFE_HEAP_STORE($40 | 0, $38 | 0, 4);
  $41 = $i;
  $42 = $41 + 1 | 0;
  $i = $42;
 }
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 53 | 0;
 SAFE_HEAP_STORE($0 >> 0 | 0, 1 | 0, 1);
 $1 = $info + 4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = ($2 | 0) == ($current_ptr | 0);
 do {
  if ($3) {
   $4 = $info + 52 | 0;
   SAFE_HEAP_STORE($4 >> 0 | 0, 1 | 0, 1);
   $5 = $info + 16 | 0;
   $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
   $7 = ($6 | 0) == (0 | 0);
   if ($7) {
    SAFE_HEAP_STORE($5 | 0, $dst_ptr | 0, 4);
    $8 = $info + 24 | 0;
    SAFE_HEAP_STORE($8 | 0, $path_below | 0, 4);
    $9 = $info + 36 | 0;
    SAFE_HEAP_STORE($9 | 0, 1 | 0, 4);
    $10 = $info + 48 | 0;
    $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
    $12 = ($11 | 0) == 1;
    $13 = ($path_below | 0) == 1;
    $or$cond = $12 & $13;
    if (!$or$cond) {
     break;
    }
    $14 = $info + 54 | 0;
    SAFE_HEAP_STORE($14 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $15 = ($6 | 0) == ($dst_ptr | 0);
   if (!$15) {
    $25 = $info + 36 | 0;
    $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
    $27 = $26 + 1 | 0;
    SAFE_HEAP_STORE($25 | 0, $27 | 0, 4);
    $28 = $info + 54 | 0;
    SAFE_HEAP_STORE($28 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $16 = $info + 24 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = ($17 | 0) == 2;
   if ($18) {
    SAFE_HEAP_STORE($16 | 0, $path_below | 0, 4);
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = $info + 48 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = ($20 | 0) == 1;
   $23 = ($22 | 0) == 1;
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = $info + 54 | 0;
    SAFE_HEAP_STORE($24 >> 0 | 0, 1 | 0, 1);
   }
  }
 } while (0);
 return;
}

function __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_($createFcn, $destoryFcn, $type1, $type2) {
 $createFcn = $createFcn | 0;
 $destoryFcn = $destoryFcn | 0;
 $type1 = $type1 | 0;
 $type2 = $type2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $createFcn;
 $1 = $destoryFcn;
 $2 = $type1;
 $3 = $type2;
 $4 = $2;
 $5 = 0 <= ($4 | 0);
 $6 = $2;
 $7 = ($6 | 0) < 4;
 $or$cond = $5 & $7;
 if (!$or$cond) {
  ___assert_fail(5934 | 0, 5829 | 0, 54, 7002 | 0);
 }
 $8 = $3;
 $9 = 0 <= ($8 | 0);
 $10 = $3;
 $11 = ($10 | 0) < 4;
 $or$cond3 = $9 & $11;
 if (!$or$cond3) {
  ___assert_fail(5984 | 0, 5829 | 0, 55, 7002 | 0);
 }
 $12 = $0;
 $13 = $3;
 $14 = $2;
 $15 = 1008 + ($14 * 48 | 0) | 0;
 $16 = $15 + ($13 * 12 | 0) | 0;
 SAFE_HEAP_STORE($16 | 0, $12 | 0, 4);
 $17 = $1;
 $18 = $3;
 $19 = $2;
 $20 = 1008 + ($19 * 48 | 0) | 0;
 $21 = $20 + ($18 * 12 | 0) | 0;
 $22 = $21 + 4 | 0;
 SAFE_HEAP_STORE($22 | 0, $17 | 0, 4);
 $23 = $3;
 $24 = $2;
 $25 = 1008 + ($24 * 48 | 0) | 0;
 $26 = $25 + ($23 * 12 | 0) | 0;
 $27 = $26 + 8 | 0;
 SAFE_HEAP_STORE($27 >> 0 | 0, 1 | 0, 1);
 $28 = $2;
 $29 = $3;
 $30 = ($28 | 0) != ($29 | 0);
 if (!$30) {
  STACKTOP = sp;
  return;
 }
 $31 = $0;
 $32 = $2;
 $33 = $3;
 $34 = 1008 + ($33 * 48 | 0) | 0;
 $35 = $34 + ($32 * 12 | 0) | 0;
 SAFE_HEAP_STORE($35 | 0, $31 | 0, 4);
 $36 = $1;
 $37 = $2;
 $38 = $3;
 $39 = 1008 + ($38 * 48 | 0) | 0;
 $40 = $39 + ($37 * 12 | 0) | 0;
 $41 = $40 + 4 | 0;
 SAFE_HEAP_STORE($41 | 0, $36 | 0, 4);
 $42 = $2;
 $43 = $3;
 $44 = 1008 + ($43 * 48 | 0) | 0;
 $45 = $44 + ($42 * 12 | 0) | 0;
 $46 = $45 + 8 | 0;
 SAFE_HEAP_STORE($46 >> 0 | 0, 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f | 0) == (0 | 0);
 do {
  if ($0) {
   $7 = SAFE_HEAP_LOAD(1732 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == (0 | 0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = SAFE_HEAP_LOAD(1732 | 0, 4, 0) | 0 | 0;
    $10 = _fflush($9) | 0;
    $27 = $10;
   }
   ___lock(1708 | 0);
   $$012 = SAFE_HEAP_LOAD(1704 | 0, 4, 0) | 0 | 0;
   $11 = ($$012 | 0) == (0 | 0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;
    $r$03 = $27;
    while (1) {
     $12 = $$014 + 76 | 0;
     $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
     $14 = ($13 | 0) > -1;
     if ($14) {
      $15 = ___lockfile($$014) | 0;
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = $$014 + 20 | 0;
     $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
     $18 = $$014 + 28 | 0;
     $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $20 = $17 >>> 0 > $19 >>> 0;
     if ($20) {
      $21 = ___fflush_unlocked($$014) | 0;
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23 | 0) == 0;
     if (!$24) {
      ___unlockfile($$014);
     }
     $25 = $$014 + 56 | 0;
     $$01 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
     $26 = ($$01 | 0) == (0 | 0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;
      $r$03 = $r$1;
     }
    }
   }
   ___unlock(1708 | 0);
   $$0 = $r$0$lcssa;
  } else {
   $1 = $f + 76 | 0;
   $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $3 = ($2 | 0) > -1;
   if (!$3) {
    $4 = ___fflush_unlocked($f) | 0;
    $$0 = $4;
    break;
   }
   $5 = ___lockfile($f) | 0;
   $phitmp = ($5 | 0) == 0;
   $6 = ___fflush_unlocked($f) | 0;
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v = sp + 8 | 0;
 $0 = $this;
 $1 = $__x;
 $4 = $0;
 $5 = __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($4) | 0;
 $__a = $5;
 $6 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4sizeEv($4) | 0;
 $7 = $6 + 1 | 0;
 $8 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE11__recommendEj($4, $7) | 0;
 $9 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4sizeEv($4) | 0;
 $10 = $__a;
 __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEEC2EjjS5_($__v, $8, $9, $10);
 $11 = $__a;
 $12 = $__v + 8 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = __ZNSt3__116__to_raw_pointerIP6b2BodyEEPT_S4_($13) | 0;
 $15 = $1;
 $16 = __ZNSt3__17forwardIRKP6b2BodyEEOT_RNS_16remove_referenceIS5_E4typeE($15) | 0;
 __THREW__ = 0;
 invoke_viii(135, $11 | 0, $14 | 0, $16 | 0);
 $17 = __THREW__;
 __THREW__ = 0;
 $18 = $17 & 1;
 if ($18) {
  $24 = ___cxa_find_matching_catch() | 0;
  $25 = tempRet0;
  $2 = $24;
  $3 = $25;
  __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEED2Ev($__v);
  $26 = $2;
  $27 = $3;
  ___resumeException($26 | 0);
 }
 $19 = $__v + 8 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $20 + 4 | 0;
 SAFE_HEAP_STORE($19 | 0, $21 | 0, 4);
 __THREW__ = 0;
 invoke_vii(136, $4 | 0, $__v | 0);
 $22 = __THREW__;
 __THREW__ = 0;
 $23 = $22 & 1;
 if ($23) {
  $24 = ___cxa_find_matching_catch() | 0;
  $25 = tempRet0;
  $2 = $24;
  $3 = $25;
  __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEED2Ev($__v);
  $26 = $2;
  $27 = $3;
  ___resumeException($26 | 0);
 } else {
  __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__v = sp + 8 | 0;
 $0 = $this;
 $1 = $__x;
 $4 = $0;
 $5 = __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($4) | 0;
 $__a = $5;
 $6 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($4) | 0;
 $7 = $6 + 1 | 0;
 $8 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE11__recommendEj($4, $7) | 0;
 $9 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($4) | 0;
 $10 = $__a;
 __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEEC2EjjS4_($__v, $8, $9, $10);
 $11 = $__a;
 $12 = $__v + 8 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($13) | 0;
 $15 = $1;
 $16 = __ZNSt3__17forwardI6SpriteEEOT_RNS_16remove_referenceIS2_E4typeE($15) | 0;
 __THREW__ = 0;
 invoke_viii(129, $11 | 0, $14 | 0, $16 | 0);
 $17 = __THREW__;
 __THREW__ = 0;
 $18 = $17 & 1;
 if ($18) {
  $24 = ___cxa_find_matching_catch() | 0;
  $25 = tempRet0;
  $2 = $24;
  $3 = $25;
  __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEED2Ev($__v);
  $26 = $2;
  $27 = $3;
  ___resumeException($26 | 0);
 }
 $19 = $__v + 8 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $20 + 12 | 0;
 SAFE_HEAP_STORE($19 | 0, $21 | 0, 4);
 __THREW__ = 0;
 invoke_vii(130, $4 | 0, $__v | 0);
 $22 = __THREW__;
 __THREW__ = 0;
 $23 = $22 & 1;
 if ($23) {
  $24 = ___cxa_find_matching_catch() | 0;
  $25 = tempRet0;
  $2 = $24;
  $3 = $25;
  __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEED2Ev($__v);
  $26 = $2;
  $27 = $3;
  ___resumeException($26 | 0);
 } else {
  __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__v;
 $2 = $0;
 __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE17__annotate_deleteEv($2);
 $3 = __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($2) | 0;
 $4 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $1;
 $8 = $7 + 4 | 0;
 __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE20__construct_backwardIS3_EENS_9enable_ifIXaaoosr7is_sameIS4_NS1_IT_EEEE5valuentsr15__has_constructIS4_PS8_S8_EE5valuesr31is_trivially_move_constructibleIS8_EE5valueEvE4typeERS4_SA_SA_RSA_($3, $4, $6, $8);
 $9 = $1;
 $10 = $9 + 4 | 0;
 __ZNSt3__14swapIPP6b2BodyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_($2, $10);
 $11 = $2 + 4 | 0;
 $12 = $1;
 $13 = $12 + 8 | 0;
 __ZNSt3__14swapIPP6b2BodyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_($11, $13);
 $14 = __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE9__end_capEv($2) | 0;
 $15 = $1;
 $16 = __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE9__end_capEv($15) | 0;
 __ZNSt3__14swapIPP6b2BodyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_($14, $16);
 $17 = $1;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = $1;
 SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
 $21 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4sizeEv($2) | 0;
 __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE14__annotate_newEj($2, $21);
 __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17__sort4IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_SA_T_($__x1, $__x2, $__x3, $__x4, $__c) {
 $__x1 = $__x1 | 0;
 $__x2 = $__x2 | 0;
 $__x3 = $__x3 | 0;
 $__x4 = $__x4 | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x1;
 $1 = $__x2;
 $2 = $__x3;
 $3 = $__x4;
 $4 = $__c;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $4;
 $9 = __ZNSt3__17__sort3IRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEjT0_SA_SA_T_($5, $6, $7, $8) | 0;
 $__r = $9;
 $10 = $4;
 $11 = $3;
 $12 = $2;
 $13 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($10, $11, $12) | 0;
 if (!$13) {
  $34 = $__r;
  STACKTOP = sp;
  return $34 | 0;
 }
 $14 = $2;
 $15 = $3;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($14, $15);
 $16 = $__r;
 $17 = $16 + 1 | 0;
 $__r = $17;
 $18 = $4;
 $19 = $2;
 $20 = $1;
 $21 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($18, $19, $20) | 0;
 if (!$21) {
  $34 = $__r;
  STACKTOP = sp;
  return $34 | 0;
 }
 $22 = $1;
 $23 = $2;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($22, $23);
 $24 = $__r;
 $25 = $24 + 1 | 0;
 $__r = $25;
 $26 = $4;
 $27 = $1;
 $28 = $0;
 $29 = __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($26, $27, $28) | 0;
 if (!$29) {
  $34 = $__r;
  STACKTOP = sp;
  return $34 | 0;
 }
 $30 = $0;
 $31 = $1;
 __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($30, $31);
 $32 = $__r;
 $33 = $32 + 1 | 0;
 $__r = $33;
 $34 = $__r;
 STACKTOP = sp;
 return $34 | 0;
}

function __ZN16b2BlockAllocatorC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 128 | 0, 4);
 $3 = $1 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 8 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 << 3;
 $7 = __Z7b2Alloci($6) | 0;
 SAFE_HEAP_STORE($1 | 0, $7 | 0, 4);
 $8 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $9 = $1 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $10 << 3;
 _memset($8 | 0, 0, $11 | 0) | 0;
 $12 = $1 + 12 | 0;
 dest = $12;
 stop = dest + 56 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $13 = SAFE_HEAP_LOAD(3497 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 1;
 $15 = $14 & 1;
 $16 = ($15 | 0) == 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $j = 0;
 $i = 1;
 while (1) {
  $17 = $i;
  $18 = ($17 | 0) <= 640;
  if (!$18) {
   break;
  }
  $19 = $j;
  $20 = ($19 | 0) < 14;
  if (!$20) {
   label = 5;
   break;
  }
  $21 = $i;
  $22 = $j;
  $23 = 856 + ($22 << 2) | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = ($21 | 0) <= ($24 | 0);
  $26 = $j;
  if ($25) {
   $27 = $26 & 255;
   $28 = $i;
   $29 = 2856 + $28 | 0;
   SAFE_HEAP_STORE($29 >> 0 | 0, $27 | 0, 1);
  } else {
   $30 = $26 + 1 | 0;
   $j = $30;
   $31 = $j;
   $32 = $31 & 255;
   $33 = $i;
   $34 = 2856 + $33 | 0;
   SAFE_HEAP_STORE($34 >> 0 | 0, $32 | 0, 1);
  }
  $35 = $i;
  $36 = $35 + 1 | 0;
  $i = $36;
 }
 if ((label | 0) == 5) {
  ___assert_fail(5025 | 0, 3807 | 0, 71, 5043 | 0);
 }
 SAFE_HEAP_STORE(3497 >> 0 | 0, 1 | 0, 1);
 STACKTOP = sp;
 return;
}

function __Z13b2TestOverlapRK6b2AABBS1_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d1 = 0, $d2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 40 | 0;
 $d1 = sp + 24 | 0;
 $d2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $1 = $a;
 $2 = $b;
 __ZN6b2Vec2C2Ev($d1);
 __ZN6b2Vec2C2Ev($d2);
 $5 = $2;
 $6 = $1;
 $7 = $6 + 8 | 0;
 __ZmiRK6b2Vec2S1_($3, $5, $7);
 {}
 SAFE_HEAP_STORE($d1 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($d1 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $8 = $1;
 $9 = $2;
 $10 = $9 + 8 | 0;
 __ZmiRK6b2Vec2S1_($4, $8, $10);
 {}
 SAFE_HEAP_STORE($d2 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($d2 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $11 = +(+SAFE_HEAP_LOAD_D($d1 | 0, 4));
 $12 = $11 > 0.0;
 if (!$12) {
  $13 = $d1 + 4 | 0;
  $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
  $15 = $14 > 0.0;
  if (!$15) {
   $16 = +(+SAFE_HEAP_LOAD_D($d2 | 0, 4));
   $17 = $16 > 0.0;
   if (!$17) {
    $18 = $d2 + 4 | 0;
    $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
    $20 = $19 > 0.0;
    if (!$20) {
     $$expand_i1_val4 = 1;
     SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val4 | 0, 1);
     $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
     $21 = $$pre_trunc & 1;
     STACKTOP = sp;
     return $21 | 0;
    }
   }
   $$expand_i1_val2 = 0;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
   $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
   $21 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $21 | 0;
  }
 }
 $$expand_i1_val = 0;
 SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $21 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $21 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($0) {
   $$0 = $first;
  } else {
   $1 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $2 = $1 << 24 >> 24;
   switch ($2 | 0) {
   case 104:
    {
     $3 = $first + 1 | 0;
     $4 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3, $last) | 0;
     $5 = ($4 | 0) == ($3 | 0);
     $6 = ($4 | 0) == ($last | 0);
     $or$cond = $5 | $6;
     if ($or$cond) {
      $$0 = $first;
      break L1;
     }
     $7 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
     $8 = $7 << 24 >> 24 == 95;
     $9 = $4 + 1 | 0;
     $$first = $8 ? $9 : $first;
     $$0 = $$first;
     break L1;
     break;
    }
   case 118:
    {
     break;
    }
   default:
    {
     $$0 = $first;
     break L1;
    }
   }
   $10 = $first + 1 | 0;
   $11 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10, $last) | 0;
   $12 = ($11 | 0) == ($10 | 0);
   $13 = ($11 | 0) == ($last | 0);
   $or$cond1 = $12 | $13;
   if ($or$cond1) {
    $$0 = $first;
   } else {
    $14 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
    $15 = $14 << 24 >> 24 == 95;
    if ($15) {
     $16 = $11 + 1 | 0;
     $17 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16, $last) | 0;
     $18 = ($17 | 0) == ($16 | 0);
     $19 = ($17 | 0) == ($last | 0);
     $or$cond2 = $18 | $19;
     if ($or$cond2) {
      $$0 = $first;
     } else {
      $20 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
      $21 = $20 << 24 >> 24 == 95;
      $22 = $17 + 1 | 0;
      $$first3 = $21 ? $22 : $first;
      return $$first3 | 0;
     }
    } else {
     $$0 = $first;
    }
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNK6b2Body13ShouldCollideEPKS_($this, $other) {
 $this = $this | 0;
 $other = $other | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $jn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 12 | 0;
 $1 = $this;
 $2 = $other;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) != 2;
 if ($5) {
  $6 = $2;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = ($7 | 0) != 2;
  if ($8) {
   $$expand_i1_val = 0;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label | 0) == 4) {
   $9 = $3 + 108 | 0;
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $jn = $10;
   while (1) {
    $11 = $jn;
    $12 = ($11 | 0) != (0 | 0);
    if (!$12) {
     label = 10;
     break;
    }
    $13 = $jn;
    $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
    $15 = $2;
    $16 = ($14 | 0) == ($15 | 0);
    if ($16) {
     $17 = $jn;
     $18 = $17 + 4 | 0;
     $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $20 = $19 + 61 | 0;
     $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
     $22 = $21 & 1;
     $23 = $22 & 1;
     $24 = ($23 | 0) == 0;
     if ($24) {
      label = 8;
      break;
     }
    }
    $25 = $jn;
    $26 = $25 + 12 | 0;
    $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
    $jn = $27;
   }
   if ((label | 0) == 8) {
    $$expand_i1_val2 = 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
    break;
   } else if ((label | 0) == 10) {
    $$expand_i1_val4 = 1;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val4 | 0, 1);
    break;
   }
  }
 } while (0);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZN15b2ContactSolver13StoreImpulsesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $manifold = 0, $vc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $1 + 48 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = ($2 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $1 + 40 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = $i;
  $9 = $7 + ($8 * 156 | 0) | 0;
  $vc = $9;
  $10 = $vc;
  $11 = $10 + 152 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $1 + 44 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14 + ($12 << 2) | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = __ZN9b2Contact11GetManifoldEv($16) | 0;
  $manifold = $17;
  $j = 0;
  while (1) {
   $18 = $j;
   $19 = $vc;
   $20 = $19 + 148 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   $22 = ($18 | 0) < ($21 | 0);
   if (!$22) {
    break;
   }
   $23 = $j;
   $24 = $vc;
   $25 = $24 + ($23 * 36 | 0) | 0;
   $26 = $25 + 16 | 0;
   $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
   $28 = $j;
   $29 = $manifold;
   $30 = $29 + ($28 * 20 | 0) | 0;
   $31 = $30 + 8 | 0;
   SAFE_HEAP_STORE_D($31 | 0, +$27, 4);
   $32 = $j;
   $33 = $vc;
   $34 = $33 + ($32 * 36 | 0) | 0;
   $35 = $34 + 20 | 0;
   $36 = +(+SAFE_HEAP_LOAD_D($35 | 0, 4));
   $37 = $j;
   $38 = $manifold;
   $39 = $38 + ($37 * 20 | 0) | 0;
   $40 = $39 + 12 | 0;
   SAFE_HEAP_STORE_D($40 | 0, +$36, 4);
   $41 = $j;
   $42 = $41 + 1 | 0;
   $j = $42;
  }
  $43 = $i;
  $44 = $43 + 1 | 0;
  $i = $44;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if ($2) {
  $14 = 10;
  $7 = $0;
 } else {
  $3 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $4 = $3 & -2;
  $phitmp$i = $4 + -1 | 0;
  $5 = $3 & 255;
  $14 = $phitmp$i;
  $7 = $5;
 }
 $6 = $7 & 1;
 $8 = $6 << 24 >> 24 == 0;
 if ($8) {
  $11 = $7 & 255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = $this + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $15 = $10;
 }
 $13 = $14 - $15 | 0;
 $16 = $13 >>> 0 < $__n >>> 0;
 if ($16) {
  $33 = $__n - $14 | 0;
  $34 = $33 + $15 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $14, $34, $15, $15, 0, $__n, $__s);
 } else {
  $17 = ($__n | 0) == 0;
  if (!$17) {
   $18 = $7 & 1;
   $19 = $18 << 24 >> 24 == 0;
   if ($19) {
    $22 = $this + 1 | 0;
    $24 = $22;
   } else {
    $20 = $this + 8 | 0;
    $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
    $24 = $21;
   }
   $23 = $24 + $15 | 0;
   _memcpy($23 | 0, $__s | 0, $__n | 0) | 0;
   $25 = $15 + $__n | 0;
   $26 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
   $27 = $26 & 1;
   $28 = $27 << 24 >> 24 == 0;
   if ($28) {
    $30 = $25 << 1;
    $31 = $30 & 255;
    SAFE_HEAP_STORE($this >> 0 | 0, $31 | 0, 1);
   } else {
    $29 = $this + 4 | 0;
    SAFE_HEAP_STORE($29 | 0, $25 | 0, 4);
   }
   $32 = $24 + $25 | 0;
   SAFE_HEAP_STORE($32 >> 0 | 0, 0 | 0, 1);
  }
 }
 return $this | 0;
}

function __Z13b2TestOverlapPK7b2ShapeiS1_iRK11b2TransformS4_($shapeA, $indexA, $shapeB, $indexB, $xfA, $xfB) {
 $shapeA = $shapeA | 0;
 $indexA = $indexA | 0;
 $shapeB = $shapeB | 0;
 $indexB = $indexB | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cache = 0, $input = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $input = sp + 36 | 0;
 $cache = sp + 24 | 0;
 $output = sp;
 $0 = $shapeA;
 $1 = $indexA;
 $2 = $shapeB;
 $3 = $indexB;
 $4 = $xfA;
 $5 = $xfB;
 __ZN15b2DistanceInputC2Ev($input);
 $6 = $0;
 $7 = $1;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($input, $6, $7);
 $8 = $input + 28 | 0;
 $9 = $2;
 $10 = $3;
 __ZN15b2DistanceProxy3SetEPK7b2Shapei($8, $9, $10);
 $11 = $input + 56 | 0;
 $12 = $4;
 {}
 SAFE_HEAP_STORE($11 | 0, SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 4 | 0, SAFE_HEAP_LOAD($12 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 8 | 0, SAFE_HEAP_LOAD($12 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($11 + 12 | 0, SAFE_HEAP_LOAD($12 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $13 = $input + 72 | 0;
 $14 = $5;
 {}
 SAFE_HEAP_STORE($13 | 0, SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($13 + 4 | 0, SAFE_HEAP_LOAD($14 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($13 + 8 | 0, SAFE_HEAP_LOAD($14 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($13 + 12 | 0, SAFE_HEAP_LOAD($14 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 $15 = $input + 88 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, 1 | 0, 1);
 $16 = $cache + 4 | 0;
 SAFE_HEAP_STORE($16 | 0, 0 | 0, 2);
 __ZN16b2DistanceOutputC2Ev($output);
 __Z10b2DistanceP16b2DistanceOutputP14b2SimplexCachePK15b2DistanceInput($output, $cache, $input);
 $17 = $output + 16 | 0;
 $18 = +(+SAFE_HEAP_LOAD_D($17 | 0, 4));
 $19 = $18 < 1.1920928955078125e-006;
 STACKTOP = sp;
 return $19 | 0;
}

function __Z12cpp_progressv() {
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $bd = 0, $position = 0, $sprite = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__begin = sp + 24 | 0;
 $__end = sp + 20 | 0;
 $position = sp + 8 | 0;
 $0 = SAFE_HEAP_LOAD(696 | 0, 4, 0) | 0 | 0;
 $1 = +(+SAFE_HEAP_LOAD_D(704 | 0, 4));
 $2 = SAFE_HEAP_LOAD(708 | 0, 4, 0) | 0 | 0;
 $3 = SAFE_HEAP_LOAD(712 | 0, 4, 0) | 0 | 0;
 __ZN7b2World4StepEfii($0, $1, $2, $3);
 $4 = SAFE_HEAP_LOAD(700 | 0, 4, 0) | 0 | 0;
 $__range = $4;
 $5 = $__range;
 $6 = __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE5beginEv($5) | 0;
 SAFE_HEAP_STORE($__begin | 0, $6 | 0, 4);
 $7 = $__range;
 $8 = __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE3endEv($7) | 0;
 SAFE_HEAP_STORE($__end | 0, $8 | 0, 4);
 while (1) {
  $9 = __ZNSt3__1neIPP6b2BodyEEbRKNS_11__wrap_iterIT_EES8_($__begin, $__end) | 0;
  if (!$9) {
   break;
  }
  $10 = __ZNKSt3__111__wrap_iterIPP6b2BodyEdeEv($__begin) | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $bd = $11;
  $12 = $bd;
  $13 = __ZNK6b2Body11GetPositionEv($12) | 0;
  {}
  SAFE_HEAP_STORE($position | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($position + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  $14 = $bd;
  $15 = __ZNK6b2Body11GetUserDataEv($14) | 0;
  $sprite = $15;
  $16 = +(+SAFE_HEAP_LOAD_D($position | 0, 4));
  $17 = $16;
  $18 = $position + 4 | 0;
  $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
  $20 = $19;
  $21 = $sprite;
  $22 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv($21) | 0;
  $23 = _emscripten_asm_const_3(0, +$17, +$20, $22 | 0) | 0;
  __ZNSt3__111__wrap_iterIPP6b2BodyEppEv($__begin) | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN13MouseCallback13ReportFixtureEP9b2Fixture($this, $fixture) {
 $this = $this | 0;
 $fixture = $fixture | 0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $d = 0.0, $ud = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 28 | 0;
 $1 = $this;
 $2 = $fixture;
 $3 = $1;
 $4 = $2;
 $5 = __ZN9b2Fixture7GetBodyEv($4) | 0;
 $b = $5;
 $6 = $b;
 $7 = __ZNK6b2Body11GetUserDataEv($6) | 0;
 $ud = $7;
 $8 = $ud;
 $9 = ($8 | 0) == (0 | 0);
 if ($9) {
  $$expand_i1_val = 1;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $20 | 0;
 }
 $10 = $b;
 $11 = __ZNK6b2Body11GetPositionEv($10) | 0;
 $12 = $3 + 8 | 0;
 $13 = +__Z10b2DistanceRK6b2Vec2S1_($11, $12);
 $d = $13;
 $14 = $d;
 $15 = $14 < .20000000298023224;
 if ($15) {
  $16 = $3 + 4 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $ud;
  $19 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv($18) | 0;
  SAFE_HEAP_STORE($vararg_buffer | 0, $17 | 0, 4);
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  SAFE_HEAP_STORE($vararg_ptr1 | 0, $19 | 0, 4);
  _printf(2752, $vararg_buffer) | 0;
  $$expand_i1_val3 = 1;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val3 | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  $$expand_i1_val5 = 1;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val5 | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $this;
 $1 = $__str;
 $3 = $0;
 $4 = $1;
 $5 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($4) | 0;
 __ZNSt3__116allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionERKS2_($2, $5);
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2ES5_($3, $$byval_copy);
 $6 = $1;
 $7 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv($6) | 0;
 if ($7) {
  $11 = $1;
  $12 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv($11) | 0;
  $13 = __ZNSt3__116__to_raw_pointerIKcEEPT_S3_($12) | 0;
  $14 = $1;
  $15 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv($14) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3, $13, $15);
  STACKTOP = sp;
  return;
 } else {
  $8 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($3) | 0;
  $9 = $1;
  $10 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($9) | 0;
  {}
  SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($10 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($10 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__v;
 $2 = $0;
 __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE17__annotate_deleteEv($2);
 $3 = __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($2) | 0;
 $4 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $1;
 $8 = $7 + 4 | 0;
 __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE20__construct_backwardIPS2_EEvRS3_T_S8_RS8_($3, $4, $6, $8);
 $9 = $1;
 $10 = $9 + 4 | 0;
 __ZNSt3__14swapIP6SpriteEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_($2, $10);
 $11 = $2 + 4 | 0;
 $12 = $1;
 $13 = $12 + 8 | 0;
 __ZNSt3__14swapIP6SpriteEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_($11, $13);
 $14 = __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE9__end_capEv($2) | 0;
 $15 = $1;
 $16 = __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE9__end_capEv($15) | 0;
 __ZNSt3__14swapIP6SpriteEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_($14, $16);
 $17 = $1;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = $1;
 SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
 $21 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($2) | 0;
 __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE14__annotate_newEj($2, $21);
 __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE26__invalidate_all_iteratorsEv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this, $__x, $__a) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this | 0, 0 | 0, 4);
 $0 = $this + 4 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $this + 8 | 0;
 $2 = SAFE_HEAP_LOAD($__a | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $3 = $this + 12 | 0;
 SAFE_HEAP_STORE($3 | 0, $2 | 0, 4);
 $4 = $2;
 $5 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($4, 24) | 0;
 SAFE_HEAP_STORE($0 | 0, $5 | 0, 4);
 SAFE_HEAP_STORE($this | 0, $5 | 0, 4);
 $6 = $5 + 24 | 0;
 $7 = $this + 8 | 0;
 SAFE_HEAP_STORE($7 | 0, $6 | 0, 4);
 __THREW__ = 0;
 invoke_vii(236, $5 | 0, $__x | 0);
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 do {
  if ($9) {
   $16 = ___cxa_find_matching_catch() | 0;
   $17 = tempRet0;
   $eh$lpad$body$index2Z2D = $17;
   $eh$lpad$body$indexZ2D = $16;
  } else {
   $10 = $5 + 12 | 0;
   $11 = $__x + 12 | 0;
   __THREW__ = 0;
   invoke_vii(236, $10 | 0, $11 | 0);
   $12 = __THREW__;
   __THREW__ = 0;
   $13 = $12 & 1;
   if ($13) {
    $14 = ___cxa_find_matching_catch() | 0;
    $15 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $eh$lpad$body$index2Z2D = $15;
    $eh$lpad$body$indexZ2D = $14;
    break;
   } else {
    $18 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
    $19 = $18 + 24 | 0;
    SAFE_HEAP_STORE($0 | 0, $19 | 0, 4);
    return;
   }
  }
 } while (0);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 ___resumeException($eh$lpad$body$indexZ2D | 0);
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 != 0;
 if ($2) {
  $5 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $6 = $5 & -2;
  $7 = $6 + -1 | 0;
  $8 = $this + 4 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $__cap$0 = $7;
  $__sz$0 = $9;
 } else {
  $3 = $0 & 255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;
  $__sz$0 = $4;
 }
 $10 = ($__sz$0 | 0) == ($__cap$0 | 0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0);
  $11 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 1;
  $13 = $12 << 24 >> 24 == 0;
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  $14 = $this + 1 | 0;
  $15 = $__sz$0 << 1;
  $16 = $15 + 2 | 0;
  $17 = $16 & 255;
  SAFE_HEAP_STORE($this >> 0 | 0, $17 | 0, 1);
  $$pre = $__sz$0 + 1 | 0;
  $$pn = $14;
  $__p$0$sum$pre$phiZZZ2D = $$pre;
 } else if ((label | 0) == 8) {
  $18 = $this + 8 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $__sz$0 + 1 | 0;
  $21 = $this + 4 | 0;
  SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = $$pn + $__sz$0 | 0;
 SAFE_HEAP_STORE($__p$0 >> 0 | 0, $__c | 0, 1);
 $22 = $$pn + $__p$0$sum$pre$phiZZZ2D | 0;
 SAFE_HEAP_STORE($22 >> 0 | 0, 0 | 0, 1);
 return;
}

function __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $userData = $userData | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $r = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $5 = $0;
 $6 = __ZN13b2DynamicTree12AllocateNodeEv($5) | 0;
 $proxyId = $6;
 __ZN6b2Vec2C2Eff($r, .10000000149011612, .10000000149011612);
 $7 = $proxyId;
 $8 = $5 + 4 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + ($7 * 36 | 0) | 0;
 $11 = $1;
 __ZmiRK6b2Vec2S1_($3, $11, $r);
 {}
 SAFE_HEAP_STORE($10 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($10 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $12 = $proxyId;
 $13 = $5 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $14 + ($12 * 36 | 0) | 0;
 $16 = $15 + 8 | 0;
 $17 = $1;
 $18 = $17 + 8 | 0;
 __ZplRK6b2Vec2S1_($4, $18, $r);
 {}
 SAFE_HEAP_STORE($16 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($16 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $19 = $2;
 $20 = $proxyId;
 $21 = $5 + 4 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $22 + ($20 * 36 | 0) | 0;
 $24 = $23 + 16 | 0;
 SAFE_HEAP_STORE($24 | 0, $19 | 0, 4);
 $25 = $proxyId;
 $26 = $5 + 4 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = $27 + ($25 * 36 | 0) | 0;
 $29 = $28 + 32 | 0;
 SAFE_HEAP_STORE($29 | 0, 0 | 0, 4);
 $30 = $proxyId;
 __ZN13b2DynamicTree10InsertLeafEi($5, $30);
 $31 = $proxyId;
 STACKTOP = sp;
 return $31 | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 76 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($1 | 0) < 0;
 if ($2) {
  label = 3;
 } else {
  $3 = ___lockfile($f) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   label = 3;
  } else {
   $18 = $f + 75 | 0;
   $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
   $20 = $19 << 24 >> 24;
   $21 = ($20 | 0) == ($c | 0);
   if ($21) {
    label = 10;
   } else {
    $22 = $f + 20 | 0;
    $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
    $24 = $f + 16 | 0;
    $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
    $26 = $23 >>> 0 < $25 >>> 0;
    if ($26) {
     $27 = $c & 255;
     $28 = $23 + 1 | 0;
     SAFE_HEAP_STORE($22 | 0, $28 | 0, 4);
     SAFE_HEAP_STORE($23 >> 0 | 0, $27 | 0, 1);
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label | 0) == 10) {
    $30 = ___overflow($f, $c) | 0;
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = $f + 75 | 0;
   $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
   $7 = $6 << 24 >> 24;
   $8 = ($7 | 0) == ($c | 0);
   if (!$8) {
    $9 = $f + 20 | 0;
    $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
    $11 = $f + 16 | 0;
    $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
    $13 = $10 >>> 0 < $12 >>> 0;
    if ($13) {
     $14 = $c & 255;
     $15 = $10 + 1 | 0;
     SAFE_HEAP_STORE($9 | 0, $15 | 0, 4);
     SAFE_HEAP_STORE($10 >> 0 | 0, $14 | 0, 1);
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = ___overflow($f, $c) | 0;
   $$0 = $17;
  }
 } while (0);
 return $$0 | 0;
}

function __ZN14b2PolygonShapeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = 1368;
 SAFE_HEAP_STORE($3 | 0, $4 | 0, 4);
 $5 = $3 + 12 | 0;
 __THREW__ = 0;
 invoke_vi(114, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 L1 : do {
  if (!$7) {
   $8 = $3 + 20 | 0;
   $9 = $8 + 64 | 0;
   $10 = $8;
   while (1) {
    __THREW__ = 0;
    invoke_vi(114, $10 | 0);
    $11 = __THREW__;
    __THREW__ = 0;
    $12 = $11 & 1;
    if ($12) {
     break L1;
    }
    $13 = $10 + 8 | 0;
    $14 = ($13 | 0) == ($9 | 0);
    if ($14) {
     break;
    } else {
     $10 = $13;
    }
   }
   $15 = $3 + 84 | 0;
   $16 = $15 + 64 | 0;
   $17 = $15;
   while (1) {
    __THREW__ = 0;
    invoke_vi(114, $17 | 0);
    $18 = __THREW__;
    __THREW__ = 0;
    $19 = $18 & 1;
    if ($19) {
     break L1;
    }
    $20 = $17 + 8 | 0;
    $21 = ($20 | 0) == ($16 | 0);
    if ($21) {
     break;
    } else {
     $17 = $20;
    }
   }
   $22 = $3 + 4 | 0;
   SAFE_HEAP_STORE($22 | 0, 2 | 0, 4);
   $23 = $3 + 8 | 0;
   SAFE_HEAP_STORE_D($23 | 0, +(.009999999776482582), 4);
   $24 = $3 + 148 | 0;
   SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
   $25 = $3 + 12 | 0;
   __THREW__ = 0;
   invoke_vi(115, $25 | 0);
   $26 = __THREW__;
   __THREW__ = 0;
   $27 = $26 & 1;
   if (!$27) {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $28 = ___cxa_find_matching_catch() | 0;
 $29 = tempRet0;
 $1 = $28;
 $2 = $29;
 __ZN7b2ShapeD2Ev($3);
 $30 = $1;
 $31 = $2;
 ___resumeException($30 | 0);
}

function __ZNK6b2AABB8ContainsERKS_($this, $aabb) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $0;
 $result = 1;
 $3 = $result;
 $4 = $3 & 1;
 if ($4) {
  $5 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
  $6 = $1;
  $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
  $8 = $5 <= $7;
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10 & 1;
 $result = $9;
 $11 = $result;
 $12 = $11 & 1;
 if ($12) {
  $13 = $2 + 4 | 0;
  $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
  $15 = $1;
  $16 = $15 + 4 | 0;
  $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
  $18 = $14 <= $17;
  $20 = $18;
 } else {
  $20 = 0;
 }
 $19 = $20 & 1;
 $result = $19;
 $21 = $result;
 $22 = $21 & 1;
 if ($22) {
  $23 = $1;
  $24 = $23 + 8 | 0;
  $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
  $26 = $2 + 8 | 0;
  $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
  $28 = $25 <= $27;
  $30 = $28;
 } else {
  $30 = 0;
 }
 $29 = $30 & 1;
 $result = $29;
 $31 = $result;
 $32 = $31 & 1;
 if (!$32) {
  $42 = 0;
  $41 = $42 & 1;
  $result = $41;
  $43 = $result;
  $44 = $43 & 1;
  STACKTOP = sp;
  return $44 | 0;
 }
 $33 = $1;
 $34 = $33 + 8 | 0;
 $35 = $34 + 4 | 0;
 $36 = +(+SAFE_HEAP_LOAD_D($35 | 0, 4));
 $37 = $2 + 8 | 0;
 $38 = $37 + 4 | 0;
 $39 = +(+SAFE_HEAP_LOAD_D($38 | 0, 4));
 $40 = $36 <= $39;
 $42 = $40;
 $41 = $42 & 1;
 $result = $41;
 $43 = $result;
 $44 = $43 & 1;
 STACKTOP = sp;
 return $44 | 0;
}

function __ZN11b2EdgeShapeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = 1288;
 SAFE_HEAP_STORE($3 | 0, $4 | 0, 4);
 $5 = $3 + 12 | 0;
 __THREW__ = 0;
 invoke_vi(114, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $3 + 20 | 0;
  __THREW__ = 0;
  invoke_vi(114, $8 | 0);
  $9 = __THREW__;
  __THREW__ = 0;
  $10 = $9 & 1;
  if (!$10) {
   $11 = $3 + 28 | 0;
   __THREW__ = 0;
   invoke_vi(114, $11 | 0);
   $12 = __THREW__;
   __THREW__ = 0;
   $13 = $12 & 1;
   if (!$13) {
    $14 = $3 + 36 | 0;
    __THREW__ = 0;
    invoke_vi(114, $14 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    $16 = $15 & 1;
    if (!$16) {
     $17 = $3 + 4 | 0;
     SAFE_HEAP_STORE($17 | 0, 1 | 0, 4);
     $18 = $3 + 8 | 0;
     SAFE_HEAP_STORE_D($18 | 0, +(.009999999776482582), 4);
     $19 = $3 + 28 | 0;
     SAFE_HEAP_STORE_D($19 | 0, +(0.0), 4);
     $20 = $3 + 28 | 0;
     $21 = $20 + 4 | 0;
     SAFE_HEAP_STORE_D($21 | 0, +(0.0), 4);
     $22 = $3 + 36 | 0;
     SAFE_HEAP_STORE_D($22 | 0, +(0.0), 4);
     $23 = $3 + 36 | 0;
     $24 = $23 + 4 | 0;
     SAFE_HEAP_STORE_D($24 | 0, +(0.0), 4);
     $25 = $3 + 44 | 0;
     SAFE_HEAP_STORE($25 >> 0 | 0, 0 | 0, 1);
     $26 = $3 + 45 | 0;
     SAFE_HEAP_STORE($26 >> 0 | 0, 0 | 0, 1);
     STACKTOP = sp;
     return;
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch() | 0;
 $28 = tempRet0;
 $1 = $27;
 $2 = $28;
 __ZN7b2ShapeD2Ev($3);
 $29 = $1;
 $30 = $2;
 ___resumeException($29 | 0);
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_add = $__n_add | 0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = -17 - $__old_cap | 0;
 $1 = $0 >>> 0 < $__delta_cap >>> 0;
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $2 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 if ($4) {
  $7 = $this + 1 | 0;
  $20 = $7;
 } else {
  $5 = $this + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $20 = $6;
 }
 $8 = $__old_cap >>> 0 < 2147483623;
 if ($8) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $11 = $9 >>> 0 < $10 >>> 0;
  $12 = $11 ? $10 : $9;
  $13 = $12 >>> 0 < 11;
  $14 = $12 + 16 | 0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = _malloc($17) | 0;
 $19 = ($__n_copy | 0) == 0;
 if (!$19) {
  _memcpy($18 | 0, $20 | 0, $__n_copy | 0) | 0;
 }
 $21 = ($__old_sz | 0) == ($__n_copy | 0);
 if (!$21) {
  $22 = $__old_sz - $__n_copy | 0;
  $$sum = $__n_add + $__n_copy | 0;
  $23 = $18 + $$sum | 0;
  $24 = $20 + $__n_copy | 0;
  _memcpy($23 | 0, $24 | 0, $22 | 0) | 0;
 }
 $25 = ($__old_cap | 0) == 10;
 if (!$25) {
  _free($20);
 }
 $26 = $this + 8 | 0;
 SAFE_HEAP_STORE($26 | 0, $18 | 0, 4);
 $27 = $17 | 1;
 SAFE_HEAP_STORE($this | 0, $27 | 0, 4);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if ($2) {
  $6 = 10;
  $9 = $0;
 } else {
  $3 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $4 = $3 & -2;
  $phitmp$i = $4 + -1 | 0;
  $5 = $3 & 255;
  $6 = $phitmp$i;
  $9 = $5;
 }
 $7 = $6 >>> 0 < $__n >>> 0;
 $8 = $9 & 1;
 $10 = $8 << 24 >> 24 == 0;
 do {
  if ($7) {
   if ($10) {
    $24 = $9 & 255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = $this + 4 | 0;
    $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
    $27 = $23;
   }
   $26 = $__n - $6 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $6, $26, $27, 0, $27, $__n, $__s);
  } else {
   if ($10) {
    $13 = $this + 1 | 0;
    $14 = $13;
   } else {
    $11 = $this + 8 | 0;
    $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
    $14 = $12;
   }
   _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
   $15 = $14 + $__n | 0;
   SAFE_HEAP_STORE($15 >> 0 | 0, 0 | 0, 1);
   $16 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
   $17 = $16 & 1;
   $18 = $17 << 24 >> 24 == 0;
   if ($18) {
    $20 = $__n << 1;
    $21 = $20 & 255;
    SAFE_HEAP_STORE($this >> 0 | 0, $21 | 0, 1);
    break;
   } else {
    $19 = $this + 4 | 0;
    SAFE_HEAP_STORE($19 | 0, $__n | 0, 4);
    break;
   }
  }
 } while (0);
 return;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 1740;
 stop = dest + 112 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $n + -1 | 0;
 $1 = $0 >>> 0 > 2147483646;
 if ($1) {
  $2 = ($n | 0) == 0;
  if ($2) {
   $$01 = $b;
   $$02 = 1;
   label = 4;
  } else {
   $3 = ___errno_location() | 0;
   SAFE_HEAP_STORE($3 | 0, 75 | 0, 4);
   $$0 = -1;
  }
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $4 = $$01;
  $5 = -2 - $4 | 0;
  $6 = $$02 >>> 0 > $5 >>> 0;
  $$$02 = $6 ? $5 : $$02;
  $7 = $f + 48 | 0;
  SAFE_HEAP_STORE($7 | 0, $$$02 | 0, 4);
  $8 = $f + 20 | 0;
  SAFE_HEAP_STORE($8 | 0, $$01 | 0, 4);
  $9 = $f + 44 | 0;
  SAFE_HEAP_STORE($9 | 0, $$01 | 0, 4);
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
  $12 = $f + 28 | 0;
  SAFE_HEAP_STORE($12 | 0, $10 | 0, 4);
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  $14 = ($$$02 | 0) == 0;
  if ($14) {
   $$0 = $13;
  } else {
   $15 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $16 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $17 = ($15 | 0) == ($16 | 0);
   $18 = $17 << 31 >> 31;
   $19 = $15 + $18 | 0;
   SAFE_HEAP_STORE($19 >> 0 | 0, 0 | 0, 1);
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dot = 0.0, $i = 0, $pLocal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 44 | 0;
 $pLocal = sp + 24 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 $1 = $this;
 $2 = $xf;
 $3 = $p;
 $6 = $1;
 $7 = $2;
 $8 = $7 + 8 | 0;
 $9 = $3;
 $10 = $2;
 __ZmiRK6b2Vec2S1_($4, $9, $10);
 __Z6b2MulTRK5b2RotRK6b2Vec2($pLocal, $8, $4);
 $i = 0;
 while (1) {
  $11 = $i;
  $12 = $6 + 148 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($11 | 0) < ($13 | 0);
  if (!$14) {
   label = 6;
   break;
  }
  $15 = $i;
  $16 = $6 + 84 | 0;
  $17 = $16 + ($15 << 3) | 0;
  $18 = $i;
  $19 = $6 + 20 | 0;
  $20 = $19 + ($18 << 3) | 0;
  __ZmiRK6b2Vec2S1_($5, $pLocal, $20);
  $21 = +__Z5b2DotRK6b2Vec2S1_($17, $5);
  $dot = $21;
  $22 = $dot;
  $23 = $22 > 0.0;
  if ($23) {
   label = 4;
   break;
  }
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 if ((label | 0) == 4) {
  $$expand_i1_val = 0;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $26 | 0;
 } else if ((label | 0) == 6) {
  $$expand_i1_val2 = 1;
  SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
  $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0 | 0;
}

function __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, $9, $10, $11);
 $12 = 976;
 SAFE_HEAP_STORE($7 | 0, $12 | 0, 4);
 $13 = $7 + 48 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $15 = invoke_ii(195, $14 | 0) | 0;
 $16 = __THREW__;
 __THREW__ = 0;
 $17 = $16 & 1;
 do {
  if (!$17) {
   $18 = ($15 | 0) == 3;
   if (!$18) {
    __THREW__ = 0;
    invoke_viiii(142, 6544 | 0, 6729 | 0, 42, 6806 | 0);
    $19 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $24 = $7 + 52 | 0;
   $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $26 = invoke_ii(195, $25 | 0) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   $28 = $27 & 1;
   if (!$28) {
    $29 = ($26 | 0) == 2;
    if ($29) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6831 | 0, 6729 | 0, 43, 6806 | 0);
     $30 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $20 = ___cxa_find_matching_catch() | 0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __ZN9b2ContactD2Ev($7);
 $22 = $5;
 $23 = $6;
 ___resumeException($22 | 0);
}

function __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($this, $fixtureA, $indexA, $fixtureB, $indexB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $indexA;
 $3 = $fixtureB;
 $4 = $indexB;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($7, $8, $9, $10, $11);
 $12 = 956;
 SAFE_HEAP_STORE($7 | 0, $12 | 0, 4);
 $13 = $7 + 48 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $15 = invoke_ii(195, $14 | 0) | 0;
 $16 = __THREW__;
 __THREW__ = 0;
 $17 = $16 & 1;
 do {
  if (!$17) {
   $18 = ($15 | 0) == 3;
   if (!$18) {
    __THREW__ = 0;
    invoke_viiii(142, 6544 | 0, 6586 | 0, 42, 6662 | 0);
    $19 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $24 = $7 + 52 | 0;
   $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $26 = invoke_ii(195, $25 | 0) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   $28 = $27 & 1;
   if (!$28) {
    $29 = ($26 | 0) == 0;
    if ($29) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6686 | 0, 6586 | 0, 43, 6662 | 0);
     $30 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $20 = ___cxa_find_matching_catch() | 0;
 $21 = tempRet0;
 $5 = $20;
 $6 = $21;
 __ZN9b2ContactD2Ev($7);
 $22 = $5;
 $23 = $6;
 ___resumeException($22 | 0);
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $info = sp;
 $0 = ($this | 0) == ($thrown_type | 0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type | 0) == (0 | 0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = ___dynamic_cast($thrown_type, 472, 488, 0) | 0;
   $3 = ($2 | 0) == (0 | 0);
   if ($3) {
    $$1 = 0;
   } else {
    dest = $info;
    stop = dest + 56 | 0;
    do {
     SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    SAFE_HEAP_STORE($info | 0, $2 | 0, 4);
    $4 = $info + 8 | 0;
    SAFE_HEAP_STORE($4 | 0, $this | 0, 4);
    $5 = $info + 12 | 0;
    SAFE_HEAP_STORE($5 | 0, -1 | 0, 4);
    $6 = $info + 48 | 0;
    SAFE_HEAP_STORE($6 | 0, 1 | 0, 4);
    $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    $8 = $7 + 28 | 0;
    $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
    $10 = SAFE_HEAP_LOAD($adjustedPtr | 0, 4, 0) | 0 | 0;
    FUNCTION_TABLE_viiii[(SAFE_FT_MASK($9 | 0, 255 | 0) | 0) & 255]($2, $info, $10, 1);
    $11 = $info + 24 | 0;
    $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
    $13 = ($12 | 0) == 1;
    if ($13) {
     $14 = $info + 16 | 0;
     $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
     SAFE_HEAP_STORE($adjustedPtr | 0, $15 | 0, 4);
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZN8b2IslandD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $1 + 20 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vii(143, $2 | 0, $4 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if (!$6) {
  $7 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
  $8 = $1 + 24 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  invoke_vii(143, $7 | 0, $9 | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  $11 = $10 & 1;
  if (!$11) {
   $12 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $13 = $1 + 16 | 0;
   $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   invoke_vii(143, $12 | 0, $14 | 0);
   $15 = __THREW__;
   __THREW__ = 0;
   $16 = $15 & 1;
   if (!$16) {
    $17 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
    $18 = $1 + 12 | 0;
    $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
    __THREW__ = 0;
    invoke_vii(143, $17 | 0, $19 | 0);
    $20 = __THREW__;
    __THREW__ = 0;
    $21 = $20 & 1;
    if (!$21) {
     $22 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $23 = $1 + 8 | 0;
     $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
     __THREW__ = 0;
     invoke_vii(143, $22 | 0, $24 | 0);
     $25 = __THREW__;
     __THREW__ = 0;
     $26 = $25 & 1;
     if (!$26) {
      STACKTOP = sp;
      return;
     }
    }
   }
  }
 }
 $27 = ___cxa_find_matching_catch(0 | 0) | 0;
 $28 = tempRet0;
 ___clang_call_terminate($27);
}

function __ZN16b2StackAllocator4FreeEPv($this, $p) {
 $this = $this | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $2 + 102796 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) > 0;
 if (!$5) {
  ___assert_fail(5308 | 0, 5180 | 0, 63, 5060 | 0);
 }
 $6 = $2 + 102412 | 0;
 $7 = $2 + 102796 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $6 + ($8 * 12 | 0) | 0;
 $10 = $9 + -12 | 0;
 $entry = $10;
 $11 = $1;
 $12 = $entry;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = ($11 | 0) == ($13 | 0);
 if (!$14) {
  ___assert_fail(5325 | 0, 5180 | 0, 65, 5060 | 0);
 }
 $15 = $entry;
 $16 = $15 + 8 | 0;
 $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
 $18 = $17 & 1;
 if ($18) {
  $19 = $1;
  __Z6b2FreePv($19);
 } else {
  $20 = $entry;
  $21 = $20 + 4 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $2 + 102400 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $24 - $22 | 0;
  SAFE_HEAP_STORE($23 | 0, $25 | 0, 4);
 }
 $26 = $entry;
 $27 = $26 + 4 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $2 + 102404 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = $30 - $28 | 0;
 SAFE_HEAP_STORE($29 | 0, $31 | 0, 4);
 $32 = $2 + 102796 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $33 + -1 | 0;
 SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
 $1 = 0;
 STACKTOP = sp;
 return;
}

function __ZN15b2GrowableStackIiLi256EE4PushERKi($this, $element) {
 $this = $this | 0;
 $element = $element | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $element;
 $2 = $0;
 $3 = $2 + 1028 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 1032 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) == ($6 | 0);
 if ($7) {
  $8 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $old = $8;
  $9 = $2 + 1032 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 << 1;
  SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
  $12 = $2 + 1032 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13 << 2;
  $15 = __Z7b2Alloci($14) | 0;
  SAFE_HEAP_STORE($2 | 0, $15 | 0, 4);
  $16 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $17 = $old;
  $18 = $2 + 1028 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 << 2;
  _memcpy($16 | 0, $17 | 0, $20 | 0) | 0;
  $21 = $old;
  $22 = $2 + 4 | 0;
  $23 = ($21 | 0) != ($22 | 0);
  if ($23) {
   $24 = $old;
   __Z6b2FreePv($24);
  }
 }
 $25 = $1;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = $2 + 1028 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $30 = $29 + ($28 << 2) | 0;
 SAFE_HEAP_STORE($30 | 0, $26 | 0, 4);
 $31 = $2 + 1028 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $32 + 1 | 0;
 SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12b2BroadPhase10BufferMoveEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $2 + 40 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 36 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) == ($6 | 0);
 if ($7) {
  $8 = $2 + 32 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $oldBuffer = $9;
  $10 = $2 + 36 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11 << 1;
  SAFE_HEAP_STORE($10 | 0, $12 | 0, 4);
  $13 = $2 + 36 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14 << 2;
  $16 = __Z7b2Alloci($15) | 0;
  $17 = $2 + 32 | 0;
  SAFE_HEAP_STORE($17 | 0, $16 | 0, 4);
  $18 = $2 + 32 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $oldBuffer;
  $21 = $2 + 40 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 << 2;
  _memcpy($19 | 0, $20 | 0, $23 | 0) | 0;
  $24 = $oldBuffer;
  __Z6b2FreePv($24);
 }
 $25 = $1;
 $26 = $2 + 40 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = $2 + 32 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $29 + ($27 << 2) | 0;
 SAFE_HEAP_STORE($30 | 0, $25 | 0, 4);
 $31 = $2 + 40 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $32 + 1 | 0;
 SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE9push_backEOS1_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__annotator = sp + 8 | 0;
 $0 = $this;
 $1 = $__x;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE9__end_capEv($2) | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $4 >>> 0 < $6 >>> 0;
 if ($7) {
  __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator, $2, 1);
  $8 = __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($2) | 0;
  $9 = $2 + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($10) | 0;
  $12 = $1;
  $13 = __ZNSt3__14moveIR6SpriteEEONS_16remove_referenceIT_E4typeEOS4_($12) | 0;
  __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_($8, $11, $13);
  __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $14 = $2 + 4 | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = $15 + 12 | 0;
  SAFE_HEAP_STORE($14 | 0, $16 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $17 = $1;
  $18 = __ZNSt3__14moveIR6SpriteEEONS_16remove_referenceIT_E4typeEOS4_($17) | 0;
  __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($2, $18);
  STACKTOP = sp;
  return;
 }
}

function _strlen($s) {
 $s = $s | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1 | 0) == 0;
 L1 : do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;
   $21 = $0;
   while (1) {
    $3 = SAFE_HEAP_LOAD($$014 >> 0 | 0, 1, 0) | 0 | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = $$014 + 1 | 0;
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7 | 0) == 0;
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;
     $21 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = SAFE_HEAP_LOAD($w$0 | 0, 4, 0) | 0 | 0;
   $10 = $9 + -16843009 | 0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13 | 0) == 0;
   $15 = $w$0 + 4 | 0;
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20 & 255;
  $17 = $16 << 24 >> 24 == 0;
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    $$pre = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
    $19 = $$pre << 24 >> 24 == 0;
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = $$pn - $0 | 0;
 return $$0 | 0;
}

function __ZNK7b2Mat2210GetInverseEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0.0;
 var $b = 0.0, $c = 0.0, $d = 0.0, $det = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $a = $2;
 $3 = $1 + 8 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $b = $4;
 $5 = $1 + 4 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $c = $6;
 $7 = $1 + 8 | 0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $d = $9;
 __ZN7b2Mat22C2Ev($agg$result);
 $10 = $a;
 $11 = $d;
 $12 = $10 * $11;
 $13 = $b;
 $14 = $c;
 $15 = $13 * $14;
 $16 = $12 - $15;
 $det = $16;
 $17 = $det;
 $18 = $17 != 0.0;
 if ($18) {
  $19 = $det;
  $20 = 1.0 / $19;
  $det = $20;
 }
 $21 = $det;
 $22 = $d;
 $23 = $21 * $22;
 SAFE_HEAP_STORE_D($agg$result | 0, +$23, 4);
 $24 = $det;
 $25 = -$24;
 $26 = $b;
 $27 = $25 * $26;
 $28 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE_D($28 | 0, +$27, 4);
 $29 = $det;
 $30 = -$29;
 $31 = $c;
 $32 = $30 * $31;
 $33 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE_D($33 | 0, +$32, 4);
 $34 = $det;
 $35 = $a;
 $36 = $34 * $35;
 $37 = $agg$result + 8 | 0;
 $38 = $37 + 4 | 0;
 SAFE_HEAP_STORE_D($38 | 0, +$36, 4);
 STACKTOP = sp;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 0 > 0;
 $3 = $0 >>> 0 > 4294967295;
 $4 = ($1 | 0) == 0;
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11 & 255;
   $13 = $$05 + -1 | 0;
   SAFE_HEAP_STORE($13 >> 0 | 0, $12 | 0, 1);
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $15 = tempRet0;
   $16 = $8 >>> 0 > 9;
   $17 = $7 >>> 0 > 4294967295;
   $18 = ($8 | 0) == 9;
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;
    $7 = $14;
    $8 = $15;
   } else {
    $$lcssa20 = $13;
    $28 = $14;
    $29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0 | 0) == 0;
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $22 = ($y$03 >>> 0) % 10 & -1;
   $23 = $22 | 48;
   $24 = $23 & 255;
   $25 = $$12 + -1 | 0;
   SAFE_HEAP_STORE($25 >> 0 | 0, $24 | 0, 1);
   $26 = ($y$03 >>> 0) / 10 & -1;
   $27 = $y$03 >>> 0 < 10;
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function __ZN7b2World10CreateBodyEPK9b2BodyDef($this, $def) {
 $this = $this | 0;
 $def = $def | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $def;
 $3 = $1;
 $4 = __ZNK7b2World8IsLockedEv($3) | 0;
 $5 = $4 & 1;
 $6 = ($5 | 0) == 0;
 if (!$6) {
  ___assert_fail(6346 | 0, 6366 | 0, 109, 6417 | 0);
 }
 $7 = __ZNK7b2World8IsLockedEv($3) | 0;
 if ($7) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $8 = __ZN16b2BlockAllocator8AllocateEi($3, 152) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 __ZN6b2BodyC2EPK9b2BodyDefP7b2World($9, $10, $3);
 $b = $9;
 $11 = $b;
 $12 = $11 + 92 | 0;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 $13 = $3 + 102952 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $b;
 $16 = $15 + 96 | 0;
 SAFE_HEAP_STORE($16 | 0, $14 | 0, 4);
 $17 = $3 + 102952 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($18 | 0) != (0 | 0);
 if ($19) {
  $20 = $b;
  $21 = $3 + 102952 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 + 92 | 0;
  SAFE_HEAP_STORE($23 | 0, $20 | 0, 4);
 }
 $24 = $b;
 $25 = $3 + 102952 | 0;
 SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
 $26 = $3 + 102960 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = $27 + 1 | 0;
 SAFE_HEAP_STORE($26 | 0, $28 | 0, 4);
 $29 = $b;
 $0 = $29;
 $30 = $0;
 STACKTOP = sp;
 return $30 | 0;
}

function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = $this + 4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $__v + 4 | 0;
 $4 = ($2 | 0) == ($0 | 0);
 if (!$4) {
  $$0$i1 = $2;
  while (1) {
   $5 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $6 = $5 + -24 | 0;
   $7 = $$0$i1 + -24 | 0;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6, $7);
   $8 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
   $9 = $8 + -24 | 0;
   SAFE_HEAP_STORE($3 | 0, $9 | 0, 4);
   $10 = ($7 | 0) == ($0 | 0);
   if ($10) {
    break;
   } else {
    $$0$i1 = $7;
   }
  }
 }
 $11 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $12 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($this | 0, $12 | 0, 4);
 SAFE_HEAP_STORE($3 | 0, $11 | 0, 4);
 $13 = $__v + 8 | 0;
 $14 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $15 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($1 | 0, $15 | 0, 4);
 SAFE_HEAP_STORE($13 | 0, $14 | 0, 4);
 $16 = $this + 8 | 0;
 $17 = $__v + 12 | 0;
 $18 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $19 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($16 | 0, $19 | 0, 4);
 SAFE_HEAP_STORE($17 | 0, $18 | 0, 4);
 $20 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($__v | 0, $20 | 0, 4);
 return;
}

function __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5, $6, 0, $7, 0);
 $8 = 1248;
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 $9 = $5 + 48 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $11 = invoke_ii(195, $10 | 0) | 0;
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 do {
  if (!$13) {
   $14 = ($11 | 0) == 2;
   if (!$14) {
    __THREW__ = 0;
    invoke_viiii(142, 7280 | 0, 7324 | 0, 40, 7402 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $20 = $5 + 52 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $22 = invoke_ii(195, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    $25 = ($22 | 0) == 0;
    if ($25) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6686 | 0, 7324 | 0, 41, 7402 | 0);
     $26 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $16 = ___cxa_find_matching_catch() | 0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __ZN9b2ContactD2Ev($5);
 $18 = $3;
 $19 = $4;
 ___resumeException($18 | 0);
}

function __ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $edge = sp + 8 | 0;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = $6 + 48 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = __ZN9b2Fixture8GetShapeEv($8) | 0;
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = $6 + 56 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_viii(196, $10 | 0, $edge | 0, $12 | 0);
 $13 = __THREW__;
 __THREW__ = 0;
 $14 = $13 & 1;
 if (!$14) {
  $15 = $1;
  $16 = $2;
  $17 = $6 + 52 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  $19 = invoke_ii(188, $18 | 0) | 0;
  $20 = __THREW__;
  __THREW__ = 0;
  $21 = $20 & 1;
  if (!$21) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(198, $15 | 0, $edge | 0, $16 | 0, $19 | 0, $22 | 0);
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;
    return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch() | 0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __ZN11b2EdgeShapeD2Ev($edge);
 $27 = $4;
 $28 = $5;
 ___resumeException($27 | 0);
}

function __ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chain = 0, $edge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $edge = sp + 8 | 0;
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $6 = $0;
 $7 = $6 + 48 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = __ZN9b2Fixture8GetShapeEv($8) | 0;
 $chain = $9;
 __ZN11b2EdgeShapeC2Ev($edge);
 $10 = $chain;
 $11 = $6 + 56 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_viii(196, $10 | 0, $edge | 0, $12 | 0);
 $13 = __THREW__;
 __THREW__ = 0;
 $14 = $13 & 1;
 if (!$14) {
  $15 = $1;
  $16 = $2;
  $17 = $6 + 52 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  $19 = invoke_ii(188, $18 | 0) | 0;
  $20 = __THREW__;
  __THREW__ = 0;
  $21 = $20 & 1;
  if (!$21) {
   $22 = $3;
   __THREW__ = 0;
   invoke_viiiii(197, $15 | 0, $edge | 0, $16 | 0, $19 | 0, $22 | 0);
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    __ZN11b2EdgeShapeD2Ev($edge);
    STACKTOP = sp;
    return;
   }
  }
 }
 $25 = ___cxa_find_matching_catch() | 0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 __ZN11b2EdgeShapeD2Ev($edge);
 $27 = $4;
 $28 = $5;
 ___resumeException($27 | 0);
}

function __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5, $6, 0, $7, 0);
 $8 = 1228;
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 $9 = $5 + 48 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $11 = invoke_ii(195, $10 | 0) | 0;
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 do {
  if (!$13) {
   $14 = ($11 | 0) == 1;
   if (!$14) {
    __THREW__ = 0;
    invoke_viiii(142, 7041 | 0, 7180 | 0, 40, 7256 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $20 = $5 + 52 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $22 = invoke_ii(195, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    $25 = ($22 | 0) == 2;
    if ($25) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6831 | 0, 7180 | 0, 41, 7256 | 0);
     $26 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $16 = ___cxa_find_matching_catch() | 0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __ZN9b2ContactD2Ev($5);
 $18 = $3;
 $19 = $4;
 ___resumeException($18 | 0);
}

function __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5, $6, 0, $7, 0);
 $8 = 1208;
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 $9 = $5 + 48 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $11 = invoke_ii(195, $10 | 0) | 0;
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 do {
  if (!$13) {
   $14 = ($11 | 0) == 1;
   if (!$14) {
    __THREW__ = 0;
    invoke_viiii(142, 7041 | 0, 7082 | 0, 40, 7157 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $20 = $5 + 52 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $22 = invoke_ii(195, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    $25 = ($22 | 0) == 0;
    if ($25) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6686 | 0, 7082 | 0, 41, 7157 | 0);
     $26 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $16 = ___cxa_find_matching_catch() | 0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __ZN9b2ContactD2Ev($5);
 $18 = $3;
 $19 = $4;
 ___resumeException($18 | 0);
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($agg$result | 0, 0 | 0, 4);
 $0 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = _strlen($__lhs) | 0;
 $3 = SAFE_HEAP_LOAD($__rhs >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 1;
 $5 = $4 << 24 >> 24 == 0;
 $6 = $__rhs + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $3 & 255;
 $9 = $8 >>> 1;
 $10 = $5 ? $9 : $7;
 $11 = $10 + $2 | 0;
 __THREW__ = 0;
 invoke_viiii(248, $agg$result | 0, $__lhs | 0, $2 | 0, $11 | 0);
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 if (!$13) {
  $14 = SAFE_HEAP_LOAD($__rhs >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 1;
  $16 = $15 << 24 >> 24 == 0;
  $17 = $__rhs + 8 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $__rhs + 1 | 0;
  $20 = $16 ? $19 : $18;
  __THREW__ = 0;
  invoke_iiii(222, $agg$result | 0, $20 | 0, $10 | 0) | 0;
  $21 = __THREW__;
  __THREW__ = 0;
  $22 = $21 & 1;
  if (!$22) {
   return;
  }
 }
 $23 = ___cxa_find_matching_catch() | 0;
 $24 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$result);
 ___resumeException($23 | 0);
}

function __ZN16b2PolygonContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5, $6, 0, $7, 0);
 $8 = 1268;
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 $9 = $5 + 48 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $11 = invoke_ii(195, $10 | 0) | 0;
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 do {
  if (!$13) {
   $14 = ($11 | 0) == 2;
   if (!$14) {
    __THREW__ = 0;
    invoke_viiii(142, 7280 | 0, 7428 | 0, 43, 7497 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $20 = $5 + 52 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $22 = invoke_ii(195, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    $25 = ($22 | 0) == 2;
    if ($25) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6831 | 0, 7428 | 0, 44, 7497 | 0);
     $26 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $16 = ___cxa_find_matching_catch() | 0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __ZN9b2ContactD2Ev($5);
 $18 = $3;
 $19 = $4;
 ___resumeException($18 | 0);
}

function __ZN15b2CircleContactC2EP9b2FixtureS1_($this, $fixtureA, $fixtureB) {
 $this = $this | 0;
 $fixtureA = $fixtureA | 0;
 $fixtureB = $fixtureB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $fixtureA;
 $2 = $fixtureB;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN9b2ContactC2EP9b2FixtureiS1_i($5, $6, 0, $7, 0);
 $8 = 996;
 SAFE_HEAP_STORE($5 | 0, $8 | 0, 4);
 $9 = $5 + 48 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $11 = invoke_ii(195, $10 | 0) | 0;
 $12 = __THREW__;
 __THREW__ = 0;
 $13 = $12 & 1;
 do {
  if (!$13) {
   $14 = ($11 | 0) == 0;
   if (!$14) {
    __THREW__ = 0;
    invoke_viiii(142, 6875 | 0, 6918 | 0, 43, 6986 | 0);
    $15 = __THREW__;
    __THREW__ = 0;
    break;
   }
   $20 = $5 + 52 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   __THREW__ = 0;
   $22 = invoke_ii(195, $21 | 0) | 0;
   $23 = __THREW__;
   __THREW__ = 0;
   $24 = $23 & 1;
   if (!$24) {
    $25 = ($22 | 0) == 0;
    if ($25) {
     STACKTOP = sp;
     return;
    } else {
     __THREW__ = 0;
     invoke_viiii(142, 6686 | 0, 6918 | 0, 44, 6986 | 0);
     $26 = __THREW__;
     __THREW__ = 0;
     break;
    }
   }
  }
 } while (0);
 $16 = ___cxa_find_matching_catch() | 0;
 $17 = tempRet0;
 $3 = $16;
 $4 = $17;
 __ZN9b2ContactD2Ev($5);
 $18 = $3;
 $19 = $4;
 ___resumeException($18 | 0);
}

function __ZN12b2BroadPhaseC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN13b2DynamicTreeC2Ev($3);
 $4 = $3 + 28 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $3 + 48 | 0;
 SAFE_HEAP_STORE($5 | 0, 16 | 0, 4);
 $6 = $3 + 52 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = $3 + 48 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 << 3;
 __THREW__ = 0;
 $10 = invoke_ii(140, $9 | 0) | 0;
 $11 = __THREW__;
 __THREW__ = 0;
 $12 = $11 & 1;
 if ($12) {
  $23 = ___cxa_find_matching_catch() | 0;
  $24 = tempRet0;
  $1 = $23;
  $2 = $24;
  __ZN13b2DynamicTreeD2Ev($3);
  $25 = $1;
  $26 = $2;
  ___resumeException($25 | 0);
 }
 $13 = $3 + 44 | 0;
 SAFE_HEAP_STORE($13 | 0, $10 | 0, 4);
 $14 = $3 + 36 | 0;
 SAFE_HEAP_STORE($14 | 0, 16 | 0, 4);
 $15 = $3 + 40 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 $16 = $3 + 36 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = $17 << 2;
 __THREW__ = 0;
 $19 = invoke_ii(140, $18 | 0) | 0;
 $20 = __THREW__;
 __THREW__ = 0;
 $21 = $20 & 1;
 if ($21) {
  $23 = ___cxa_find_matching_catch() | 0;
  $24 = tempRet0;
  $1 = $23;
  $2 = $24;
  __ZN13b2DynamicTreeD2Ev($3);
  $25 = $1;
  $26 = $2;
  ___resumeException($25 | 0);
 } else {
  $22 = $3 + 32 | 0;
  SAFE_HEAP_STORE($22 | 0, $19 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __Z5b2MulRK11b2TransformRK6b2Vec2($agg$result, $T, $v) {
 $agg$result = $agg$result | 0;
 $T = $T | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $0;
 $3 = $2 + 8 | 0;
 $4 = $3 + 4 | 0;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $1;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $5 * $7;
 $9 = $0;
 $10 = $9 + 8 | 0;
 $11 = +(+SAFE_HEAP_LOAD_D($10 | 0, 4));
 $12 = $1;
 $13 = $12 + 4 | 0;
 $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
 $15 = $11 * $14;
 $16 = $8 - $15;
 $17 = $0;
 $18 = +(+SAFE_HEAP_LOAD_D($17 | 0, 4));
 $19 = $16 + $18;
 $x = $19;
 $20 = $0;
 $21 = $20 + 8 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $1;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 $25 = $22 * $24;
 $26 = $0;
 $27 = $26 + 8 | 0;
 $28 = $27 + 4 | 0;
 $29 = +(+SAFE_HEAP_LOAD_D($28 | 0, 4));
 $30 = $1;
 $31 = $30 + 4 | 0;
 $32 = +(+SAFE_HEAP_LOAD_D($31 | 0, 4));
 $33 = $29 * $32;
 $34 = $25 + $33;
 $35 = $0;
 $36 = $35 + 4 | 0;
 $37 = +(+SAFE_HEAP_LOAD_D($36 | 0, 4));
 $38 = $34 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result, $39, $40);
 STACKTOP = sp;
 return;
}

function __ZNK9b2Simplex10WriteCacheEP14b2SimplexCache($this, $cache) {
 $this = $this | 0;
 $cache = $cache | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $cache;
 $2 = $0;
 $3 = +__ZNK9b2Simplex9GetMetricEv($2);
 $4 = $1;
 SAFE_HEAP_STORE_D($4 | 0, +$3, 4);
 $5 = $2 + 108 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $6 & 65535;
 $8 = $1;
 $9 = $8 + 4 | 0;
 SAFE_HEAP_STORE($9 | 0, $7 | 0, 2);
 $vertices = $2;
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $2 + 108 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = ($10 | 0) < ($12 | 0);
  if (!$13) {
   break;
  }
  $14 = $i;
  $15 = $vertices;
  $16 = $15 + ($14 * 36 | 0) | 0;
  $17 = $16 + 28 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $18 & 255;
  $20 = $i;
  $21 = $1;
  $22 = $21 + 6 | 0;
  $23 = $22 + $20 | 0;
  SAFE_HEAP_STORE($23 >> 0 | 0, $19 | 0, 1);
  $24 = $i;
  $25 = $vertices;
  $26 = $25 + ($24 * 36 | 0) | 0;
  $27 = $26 + 32 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $28 & 255;
  $30 = $i;
  $31 = $1;
  $32 = $31 + 9 | 0;
  $33 = $32 + $30 | 0;
  SAFE_HEAP_STORE($33 >> 0 | 0, $29 | 0, 1);
  $34 = $i;
  $35 = $34 + 1 | 0;
  $i = $35;
 }
 STACKTOP = sp;
 return;
}

function __Z6b2MulTRK11b2TransformRK6b2Vec2($agg$result, $T, $v) {
 $agg$result = $agg$result | 0;
 $T = $T | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0.0, $px = 0.0, $py = 0.0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $T;
 $1 = $v;
 $2 = $1;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $0;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 - $5;
 $px = $6;
 $7 = $1;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $0;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 - $12;
 $py = $13;
 $14 = $0;
 $15 = $14 + 8 | 0;
 $16 = $15 + 4 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $px;
 $19 = $17 * $18;
 $20 = $0;
 $21 = $20 + 8 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $py;
 $24 = $22 * $23;
 $25 = $19 + $24;
 $x = $25;
 $26 = $0;
 $27 = $26 + 8 | 0;
 $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
 $29 = -$28;
 $30 = $px;
 $31 = $29 * $30;
 $32 = $0;
 $33 = $32 + 8 | 0;
 $34 = $33 + 4 | 0;
 $35 = +(+SAFE_HEAP_LOAD_D($34 | 0, 4));
 $36 = $py;
 $37 = $35 * $36;
 $38 = $31 + $37;
 $y = $38;
 $39 = $x;
 $40 = $y;
 __ZN6b2Vec2C2Eff($agg$result, $39, $40);
 STACKTOP = sp;
 return;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 $0 = $_c & 255;
 SAFE_HEAP_STORE($c >> 0 | 0, $0 | 0, 1);
 $1 = $f + 16 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $4 = ___towrite($f) | 0;
  $5 = ($4 | 0) == 0;
  if ($5) {
   $$pre = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label | 0) == 4) {
   $6 = $f + 20 | 0;
   $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $8 = $7 >>> 0 < $9 >>> 0;
   if ($8) {
    $10 = $_c & 255;
    $11 = $f + 75 | 0;
    $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
    $13 = $12 << 24 >> 24;
    $14 = ($10 | 0) == ($13 | 0);
    if (!$14) {
     $15 = $7 + 1 | 0;
     SAFE_HEAP_STORE($6 | 0, $15 | 0, 4);
     SAFE_HEAP_STORE($7 >> 0 | 0, $0 | 0, 1);
     $$0 = $10;
     break;
    }
   }
   $16 = $f + 36 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($17 | 0, 255 | 0) | 0) & 255]($f, $c, 1) | 0;
   $19 = ($18 | 0) == 1;
   if ($19) {
    $20 = SAFE_HEAP_LOAD($c >> 0 | 0, 1, 0) | 0 | 0;
    $21 = $20 & 255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN13b2DynamicTree8FreeNodeEi($this, $nodeId) {
 $this = $this | 0;
 $nodeId = $nodeId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $nodeId;
 $2 = $0;
 $3 = $1;
 $4 = 0 <= ($3 | 0);
 if (!$4) {
  ___assert_fail(4547 | 0, 4215 | 0, 94, 4586 | 0);
 }
 $5 = $1;
 $6 = $2 + 12 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($5 | 0) < ($7 | 0);
 if (!$8) {
  ___assert_fail(4547 | 0, 4215 | 0, 94, 4586 | 0);
 }
 $9 = $2 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = 0 < ($10 | 0);
 if ($11) {
  $12 = $2 + 16 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $1;
  $15 = $2 + 4 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 + ($14 * 36 | 0) | 0;
  $18 = $17 + 20 | 0;
  SAFE_HEAP_STORE($18 | 0, $13 | 0, 4);
  $19 = $1;
  $20 = $2 + 4 | 0;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $22 = $21 + ($19 * 36 | 0) | 0;
  $23 = $22 + 32 | 0;
  SAFE_HEAP_STORE($23 | 0, -1 | 0, 4);
  $24 = $1;
  $25 = $2 + 16 | 0;
  SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
  $26 = $2 + 8 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 + -1 | 0;
  SAFE_HEAP_STORE($26 | 0, $28 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(4595 | 0, 4215 | 0, 95, 4586 | 0);
 }
}

function __ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $xf, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $xf = $xf | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lower = 0, $r = 0;
 var $upper = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $v1 = sp + 48 | 0;
 $v2 = sp + 40 | 0;
 $lower = sp + 32 | 0;
 $upper = sp + 24 | 0;
 $r = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $xf;
 $3 = $childIndex;
 $6 = $0;
 $7 = $2;
 $8 = $6 + 12 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($v1, $7, $8);
 $9 = $2;
 $10 = $6 + 20 | 0;
 __Z5b2MulRK11b2TransformRK6b2Vec2($v2, $9, $10);
 __Z5b2MinRK6b2Vec2S1_($lower, $v1, $v2);
 __Z5b2MaxRK6b2Vec2S1_($upper, $v1, $v2);
 $11 = $6 + 8 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $6 + 8 | 0;
 $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
 __ZN6b2Vec2C2Eff($r, $12, $14);
 $15 = $1;
 __ZmiRK6b2Vec2S1_($4, $lower, $r);
 {}
 SAFE_HEAP_STORE($15 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($15 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $16 = $1;
 $17 = $16 + 8 | 0;
 __ZplRK6b2Vec2S1_($5, $upper, $r);
 {}
 SAFE_HEAP_STORE($17 | 0, SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($17 + 4 | 0, SAFE_HEAP_LOAD($5 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE9push_backERKS2_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__annotator = sp + 8 | 0;
 $0 = $this;
 $1 = $__x;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE9__end_capEv($2) | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) != ($6 | 0);
 if ($7) {
  __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator, $2, 1);
  $8 = __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($2) | 0;
  $9 = $2 + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = __ZNSt3__116__to_raw_pointerIP6b2BodyEEPT_S4_($10) | 0;
  $12 = $1;
  __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_($8, $11, $12);
  __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $13 = $2 + 4 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14 + 4 | 0;
  SAFE_HEAP_STORE($13 | 0, $15 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $16 = $1;
  __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($2, $16);
  STACKTOP = sp;
  return;
 }
}

function __ZN7b2Sweep7AdvanceEf($this, $alpha) {
 $this = $this | 0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $beta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 8 | 0;
 $3 = sp;
 $0 = $this;
 $1 = $alpha;
 $4 = $0;
 $5 = $4 + 32 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $6 < 1.0;
 if ($7) {
  $8 = $1;
  $9 = $4 + 32 | 0;
  $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
  $11 = $8 - $10;
  $12 = $4 + 32 | 0;
  $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
  $14 = 1.0 - $13;
  $15 = $11 / $14;
  $beta = $15;
  $16 = $4 + 8 | 0;
  $17 = $beta;
  $18 = $4 + 16 | 0;
  $19 = $4 + 8 | 0;
  __ZmiRK6b2Vec2S1_($3, $18, $19);
  __ZmlfRK6b2Vec2($2, $17, $3);
  __ZN6b2Vec2pLERKS_($16, $2);
  $20 = $beta;
  $21 = $4 + 28 | 0;
  $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
  $23 = $4 + 24 | 0;
  $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
  $25 = $22 - $24;
  $26 = $20 * $25;
  $27 = $4 + 24 | 0;
  $28 = +(+SAFE_HEAP_LOAD_D($27 | 0, 4));
  $29 = $28 + $26;
  SAFE_HEAP_STORE_D($27 | 0, +$29, 4);
  $30 = $1;
  $31 = $4 + 32 | 0;
  SAFE_HEAP_STORE_D($31 | 0, +$30, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(6530 | 0, 7691 | 0, 709, 7735 | 0);
 }
}

function __ZNK9b2Simplex15GetClosestPointEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 8 | 0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = $3 + 108 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 switch ($5 | 0) {
 case 0:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 195, 8150 | 0);
   break;
  }
 case 1:
  {
   $6 = $3 + 16 | 0;
   {}
   SAFE_HEAP_STORE($agg$result | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($agg$result + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $7 = $3 + 24 | 0;
   $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
   $9 = $3 + 16 | 0;
   __ZmlfRK6b2Vec2($1, $8, $9);
   $10 = $3 + 36 | 0;
   $11 = $10 + 24 | 0;
   $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
   $13 = $3 + 36 | 0;
   $14 = $13 + 16 | 0;
   __ZmlfRK6b2Vec2($2, $12, $14);
   __ZplRK6b2Vec2S1_($agg$result, $1, $2);
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   {}
   SAFE_HEAP_STORE($agg$result | 0, SAFE_HEAP_LOAD(912 | 0, 4, 0) | 0 | 0 | 0, 4);
   SAFE_HEAP_STORE($agg$result + 4 | 0, SAFE_HEAP_LOAD(912 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 208, 8150 | 0);
  }
 }
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0 | 0) == 0;
 $2 = ($w | 0) > ($l | 0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = $w - $l | 0;
   $4 = $3 >>> 0 > 256;
   $5 = $4 ? 256 : $3;
   _memset($pad | 0, $c | 0, $5 | 0) | 0;
   $6 = $3 >>> 0 > 255;
   $7 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
   $8 = $7 & 32;
   $9 = ($8 | 0) == 0;
   if ($6) {
    $10 = $w - $l | 0;
    $$02 = $3;
    $17 = $7;
    $18 = $9;
    while (1) {
     if ($18) {
      ___fwritex($pad, 256, $f) | 0;
      $$pre = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = $$02 + -256 | 0;
     $12 = $11 >>> 0 > 255;
     $13 = $14 & 32;
     $15 = ($13 | 0) == 0;
     if ($12) {
      $$02 = $11;
      $17 = $14;
      $18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   ___fwritex($pad, $$0$lcssa6, $f) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body19SynchronizeFixturesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $broadPhase = 0, $f = 0, $xf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $xf1 = sp + 24 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 8 | 0;
 $0 = $this;
 $3 = $0;
 __ZN11b2TransformC2Ev($xf1);
 $4 = $xf1 + 8 | 0;
 $5 = $3 + 28 | 0;
 $6 = $5 + 24 | 0;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 __ZN5b2Rot3SetEf($4, $7);
 $8 = $3 + 28 | 0;
 $9 = $8 + 8 | 0;
 $10 = $xf1 + 8 | 0;
 $11 = $3 + 28 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($2, $10, $11);
 __ZmiRK6b2Vec2S1_($1, $9, $2);
 {}
 SAFE_HEAP_STORE($xf1 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($xf1 + 4 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $12 = $3 + 88 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $13 + 102872 | 0;
 $broadPhase = $14;
 $15 = $3 + 100 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $f = $16;
 while (1) {
  $17 = $f;
  $18 = ($17 | 0) != (0 | 0);
  if (!$18) {
   break;
  }
  $19 = $f;
  $20 = $broadPhase;
  $21 = $3 + 12 | 0;
  __ZN9b2Fixture11SynchronizeEP12b2BroadPhaseRK11b2TransformS4_($19, $20, $xf1, $21);
  $22 = $f;
  $23 = $22 + 4 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $f = $24;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 16 | 0, 1);
 $0 = $this + 1 | 0;
 $1 = $s;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 1) | 0 | (SAFE_HEAP_LOAD($2 + 1 >> 0 | 0, 1, 1) | 0) << 8 | (SAFE_HEAP_LOAD($2 + 2 >> 0 | 0, 1, 1) | 0) << 16 | (SAFE_HEAP_LOAD($2 + 3 >> 0 | 0, 1, 1) | 0) << 24;
 $4 = $1 + 4 | 0;
 $5 = $4;
 $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 1) | 0 | (SAFE_HEAP_LOAD($5 + 1 >> 0 | 0, 1, 1) | 0) << 8 | (SAFE_HEAP_LOAD($5 + 2 >> 0 | 0, 1, 1) | 0) << 16 | (SAFE_HEAP_LOAD($5 + 3 >> 0 | 0, 1, 1) | 0) << 24;
 $7 = $0;
 $8 = $7;
 SAFE_HEAP_STORE($8 >> 0 | 0, $3 & 255 | 0, 1);
 SAFE_HEAP_STORE($8 + 1 >> 0 | 0, $3 >> 8 & 255 | 0, 1);
 SAFE_HEAP_STORE($8 + 2 >> 0 | 0, $3 >> 16 & 255 | 0, 1);
 SAFE_HEAP_STORE($8 + 3 >> 0 | 0, $3 >> 24 | 0, 1);
 $9 = $7 + 4 | 0;
 $10 = $9;
 SAFE_HEAP_STORE($10 >> 0 | 0, $6 & 255 | 0, 1);
 SAFE_HEAP_STORE($10 + 1 >> 0 | 0, $6 >> 8 & 255 | 0, 1);
 SAFE_HEAP_STORE($10 + 2 >> 0 | 0, $6 >> 16 & 255 | 0, 1);
 SAFE_HEAP_STORE($10 + 3 >> 0 | 0, $6 >> 24 | 0, 1);
 $11 = $this + 9 | 0;
 SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0, 1);
 $12 = $this + 12 | 0;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 $13 = $12 + 4 | 0;
 SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
 $14 = $12 + 8 | 0;
 SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($agg$result | 0, 0 | 0, 4);
 $0 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = SAFE_HEAP_LOAD($__lhs >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 1;
 $4 = $3 << 24 >> 24 == 0;
 $5 = $__lhs + 4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $2 & 255;
 $8 = $7 >>> 1;
 $9 = $4 ? $8 : $6;
 $10 = _strlen($__rhs) | 0;
 $11 = $__lhs + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $__lhs + 1 | 0;
 $14 = $4 ? $13 : $12;
 $15 = $9 + $10 | 0;
 __THREW__ = 0;
 invoke_viiii(248, $agg$result | 0, $14 | 0, $9 | 0, $15 | 0);
 $16 = __THREW__;
 __THREW__ = 0;
 $17 = $16 & 1;
 if (!$17) {
  __THREW__ = 0;
  invoke_iiii(222, $agg$result | 0, $__rhs | 0, $10 | 0) | 0;
  $18 = __THREW__;
  __THREW__ = 0;
  $19 = $18 & 1;
  if (!$19) {
   return;
  }
 }
 $20 = ___cxa_find_matching_catch() | 0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$result);
 ___resumeException($20 | 0);
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 L1 : do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
  } else {
   $3 = $this + 16 | 0;
   $4 = $this + 12 | 0;
   $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
   $6 = ($this + 16 | 0) + ($5 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3, $info, $adjustedPtr, $path_below);
   $7 = ($5 | 0) > 1;
   if ($7) {
    $8 = $this + 24 | 0;
    $9 = $info + 54 | 0;
    $p$0 = $8;
    while (1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
     $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
     $11 = $10 << 24 >> 24 == 0;
     if (!$11) {
      break L1;
     }
     $12 = $p$0 + 8 | 0;
     $13 = $12 >>> 0 < $6 >>> 0;
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while (0);
 return;
}

function __ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi($this, $aabb, $transform, $childIndex) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $transform = $transform | 0;
 $childIndex = $childIndex | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb;
 $2 = $transform;
 $3 = $childIndex;
 $5 = $0;
 $6 = $2;
 $7 = $2;
 $8 = $7 + 8 | 0;
 $9 = $5 + 12 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($4, $8, $9);
 __ZplRK6b2Vec2S1_($p, $6, $4);
 $10 = $1;
 $11 = +(+SAFE_HEAP_LOAD_D($p | 0, 4));
 $12 = $5 + 8 | 0;
 $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
 $14 = $11 - $13;
 $15 = $p + 4 | 0;
 $16 = +(+SAFE_HEAP_LOAD_D($15 | 0, 4));
 $17 = $5 + 8 | 0;
 $18 = +(+SAFE_HEAP_LOAD_D($17 | 0, 4));
 $19 = $16 - $18;
 __ZN6b2Vec23SetEff($10, $14, $19);
 $20 = $1;
 $21 = $20 + 8 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($p | 0, 4));
 $23 = $5 + 8 | 0;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 $25 = $22 + $24;
 $26 = $p + 4 | 0;
 $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
 $28 = $5 + 8 | 0;
 $29 = +(+SAFE_HEAP_LOAD_D($28 | 0, 4));
 $30 = $27 + $29;
 __ZN6b2Vec23SetEff($21, $25, $30);
 STACKTOP = sp;
 return;
}

function __ZNK13b2CircleShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $3 = $0;
 $4 = $2;
 $5 = $4 * 3.1415927410125732;
 $6 = $3 + 8 | 0;
 $7 = +(+SAFE_HEAP_LOAD_D($6 | 0, 4));
 $8 = $5 * $7;
 $9 = $3 + 8 | 0;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = $8 * $10;
 $12 = $1;
 SAFE_HEAP_STORE_D($12 | 0, +$11, 4);
 $13 = $1;
 $14 = $13 + 4 | 0;
 $15 = $3 + 12 | 0;
 {}
 SAFE_HEAP_STORE($14 | 0, SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($14 + 4 | 0, SAFE_HEAP_LOAD($15 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $16 = $1;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $3 + 8 | 0;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $20 = .5 * $19;
 $21 = $3 + 8 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $20 * $22;
 $24 = $3 + 12 | 0;
 $25 = $3 + 12 | 0;
 $26 = +__Z5b2DotRK6b2Vec2S1_($24, $25);
 $27 = $23 + $26;
 $28 = $17 * $27;
 $29 = $1;
 $30 = $29 + 12 | 0;
 SAFE_HEAP_STORE_D($30 | 0, +$28, 4);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body7AdvanceEf($this, $alpha) {
 $this = $this | 0;
 $alpha = +$alpha;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 8 | 0;
 $3 = sp;
 $0 = $this;
 $1 = $alpha;
 $4 = $0;
 $5 = $4 + 28 | 0;
 $6 = $1;
 __ZN7b2Sweep7AdvanceEf($5, $6);
 $7 = $4 + 28 | 0;
 $8 = $7 + 16 | 0;
 $9 = $4 + 28 | 0;
 $10 = $9 + 8 | 0;
 {}
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($10 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $11 = $4 + 28 | 0;
 $12 = $11 + 24 | 0;
 $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
 $14 = $4 + 28 | 0;
 $15 = $14 + 28 | 0;
 SAFE_HEAP_STORE_D($15 | 0, +$13, 4);
 $16 = $4 + 12 | 0;
 $17 = $16 + 8 | 0;
 $18 = $4 + 28 | 0;
 $19 = $18 + 28 | 0;
 $20 = +(+SAFE_HEAP_LOAD_D($19 | 0, 4));
 __ZN5b2Rot3SetEf($17, $20);
 $21 = $4 + 12 | 0;
 $22 = $4 + 28 | 0;
 $23 = $22 + 16 | 0;
 $24 = $4 + 12 | 0;
 $25 = $24 + 8 | 0;
 $26 = $4 + 28 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($3, $25, $26);
 __ZmiRK6b2Vec2S1_($2, $23, $3);
 {}
 SAFE_HEAP_STORE($21 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __Z14b2PairLessThanRK6b2PairS1_($pair1, $pair2) {
 $pair1 = $pair1 | 0;
 $pair2 = $pair2 | 0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = $pair1;
 $2 = $pair2;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) < ($6 | 0);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val | 0, 1);
  } else {
   $8 = $1;
   $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $10 = $2;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $12 = ($9 | 0) == ($11 | 0);
   if ($12) {
    $13 = $1;
    $14 = $13 + 4 | 0;
    $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $16 = $2;
    $17 = $16 + 4 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $19 = ($15 | 0) < ($18 | 0);
    $$expand_i1_val2 = $19 & 1;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val2 | 0, 1);
    break;
   } else {
    $$expand_i1_val4 = 0;
    SAFE_HEAP_STORE($0 >> 0 | 0, $$expand_i1_val4 | 0, 1);
    break;
   }
  }
 } while (0);
 $$pre_trunc = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $20 | 0;
}

function __ZNK7b2Sweep12GetTransformEP11b2Transformf($this, $xf, $beta) {
 $this = $this | 0;
 $xf = $xf | 0;
 $beta = +$beta;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $angle = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 $0 = $this;
 $1 = $xf;
 $2 = $beta;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = 1.0 - $9;
 $11 = $7 + 8 | 0;
 __ZmlfRK6b2Vec2($4, $10, $11);
 $12 = $2;
 $13 = $7 + 16 | 0;
 __ZmlfRK6b2Vec2($5, $12, $13);
 __ZplRK6b2Vec2S1_($3, $4, $5);
 {}
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $14 = $2;
 $15 = 1.0 - $14;
 $16 = $7 + 24 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $15 * $17;
 $19 = $2;
 $20 = $7 + 28 | 0;
 $21 = +(+SAFE_HEAP_LOAD_D($20 | 0, 4));
 $22 = $19 * $21;
 $23 = $18 + $22;
 $angle = $23;
 $24 = $1;
 $25 = $24 + 8 | 0;
 $26 = $angle;
 __ZN5b2Rot3SetEf($25, $26);
 $27 = $1;
 $28 = $1;
 $29 = $28 + 8 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($6, $29, $7);
 __ZN6b2Vec2mIERKS_($27, $6);
 STACKTOP = sp;
 return;
}

function __ZN12b2EPCollider21ComputeEdgeSeparationEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 SAFE_HEAP_STORE($agg$result | 0, 1 | 0, 4);
 $3 = $2 + 248 | 0;
 $4 = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
 $5 = $4 & 1;
 $6 = $5 ? 0 : 1;
 $7 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE($7 | 0, $6 | 0, 4);
 $8 = $agg$result + 8 | 0;
 SAFE_HEAP_STORE_D($8 | 0, +(34028234663852886.0e22), 4);
 $i = 0;
 while (1) {
  $9 = $i;
  $10 = $2 + 128 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = ($9 | 0) < ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $2 + 212 | 0;
  $14 = $i;
  $15 = $2 + ($14 << 3) | 0;
  $16 = $2 + 164 | 0;
  __ZmiRK6b2Vec2S1_($1, $15, $16);
  $17 = +__Z5b2DotRK6b2Vec2S1_($13, $1);
  $s = $17;
  $18 = $s;
  $19 = $agg$result + 8 | 0;
  $20 = +(+SAFE_HEAP_LOAD_D($19 | 0, 4));
  $21 = $18 < $20;
  if ($21) {
   $22 = $s;
   $23 = $agg$result + 8 | 0;
   SAFE_HEAP_STORE_D($23 | 0, +$22, 4);
  }
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEEC2EjjS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $4 + 12 | 0;
 $6 = $3;
 __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEEC2ES2_S5_($5, 0, $6);
 $7 = $1;
 $8 = ($7 | 0) != 0;
 if ($8) {
  $9 = __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE7__allocEv($4) | 0;
  $10 = $1;
  $11 = __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE8allocateERS3_j($9, $10) | 0;
  $12 = $11;
 } else {
  $12 = 0;
 }
 SAFE_HEAP_STORE($4 | 0, $12 | 0, 4);
 $13 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $14 = $2;
 $15 = $13 + ($14 * 12 | 0) | 0;
 $16 = $4 + 8 | 0;
 SAFE_HEAP_STORE($16 | 0, $15 | 0, 4);
 $17 = $4 + 4 | 0;
 SAFE_HEAP_STORE($17 | 0, $15 | 0, 4);
 $18 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $19 = $1;
 $20 = $18 + ($19 * 12 | 0) | 0;
 $21 = __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE9__end_capEv($4) | 0;
 SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEEC2EjjS5_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__cap;
 $2 = $__start;
 $3 = $__a;
 $4 = $0;
 $5 = $4 + 12 | 0;
 $6 = $3;
 __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEEC2ES3_S6_($5, 0, $6);
 $7 = $1;
 $8 = ($7 | 0) != 0;
 if ($8) {
  $9 = __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE7__allocEv($4) | 0;
  $10 = $1;
  $11 = __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE8allocateERS4_j($9, $10) | 0;
  $12 = $11;
 } else {
  $12 = 0;
 }
 SAFE_HEAP_STORE($4 | 0, $12 | 0, 4);
 $13 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $14 = $2;
 $15 = $13 + ($14 << 2) | 0;
 $16 = $4 + 8 | 0;
 SAFE_HEAP_STORE($16 | 0, $15 | 0, 4);
 $17 = $4 + 4 | 0;
 SAFE_HEAP_STORE($17 | 0, $15 | 0, 4);
 $18 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $19 = $1;
 $20 = $18 + ($19 << 2) | 0;
 $21 = __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE9__end_capEv($4) | 0;
 SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN14b2PolygonShape8SetAsBoxEff($this, $hx, $hy) {
 $this = $this | 0;
 $hx = +$hx;
 $hy = +$hy;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $hx;
 $2 = $hy;
 $3 = $0;
 $4 = $3 + 148 | 0;
 SAFE_HEAP_STORE($4 | 0, 4 | 0, 4);
 $5 = $3 + 20 | 0;
 $6 = $1;
 $7 = -$6;
 $8 = $2;
 $9 = -$8;
 __ZN6b2Vec23SetEff($5, $7, $9);
 $10 = $3 + 20 | 0;
 $11 = $10 + 8 | 0;
 $12 = $1;
 $13 = $2;
 $14 = -$13;
 __ZN6b2Vec23SetEff($11, $12, $14);
 $15 = $3 + 20 | 0;
 $16 = $15 + 16 | 0;
 $17 = $1;
 $18 = $2;
 __ZN6b2Vec23SetEff($16, $17, $18);
 $19 = $3 + 20 | 0;
 $20 = $19 + 24 | 0;
 $21 = $1;
 $22 = -$21;
 $23 = $2;
 __ZN6b2Vec23SetEff($20, $22, $23);
 $24 = $3 + 84 | 0;
 __ZN6b2Vec23SetEff($24, 0.0, -1.0);
 $25 = $3 + 84 | 0;
 $26 = $25 + 8 | 0;
 __ZN6b2Vec23SetEff($26, 1.0, 0.0);
 $27 = $3 + 84 | 0;
 $28 = $27 + 16 | 0;
 __ZN6b2Vec23SetEff($28, 0.0, 1.0);
 $29 = $3 + 84 | 0;
 $30 = $29 + 24 | 0;
 __ZN6b2Vec23SetEff($30, -1.0, 0.0);
 $31 = $3 + 12 | 0;
 __ZN6b2Vec27SetZeroEv($31);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $$0 = 0, $$1 = 0, $$first = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $t$0$pn = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($first | 0) == ($last | 0);
 L1 : do {
  if ($0) {
   $$1 = $first;
  } else {
   $1 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
   $2 = $1 << 24 >> 24 == 110;
   $3 = $first + 1 | 0;
   $$first = $2 ? $3 : $first;
   $4 = ($$first | 0) == ($last | 0);
   if ($4) {
    $$1 = $first;
   } else {
    $5 = SAFE_HEAP_LOAD($$first >> 0 | 0, 1, 0) | 0 | 0;
    $6 = $5 << 24 >> 24 == 48;
    if ($6) {
     $7 = $$first + 1 | 0;
     $$1 = $7;
     break;
    }
    $$off = $5 + -49 << 24 >> 24;
    $8 = ($$off & 255) < 9;
    if ($8) {
     $t$0$pn = $$first;
     while (1) {
      $$0 = $t$0$pn + 1 | 0;
      $9 = ($$0 | 0) == ($last | 0);
      if ($9) {
       $$1 = $last;
       break L1;
      }
      $10 = SAFE_HEAP_LOAD($$0 >> 0 | 0, 1, 0) | 0 | 0;
      $11 = $10 << 24 >> 24;
      $isdigittmp = $11 + -48 | 0;
      $isdigit = $isdigittmp >>> 0 < 10;
      if ($isdigit) {
       $t$0$pn = $$0;
      } else {
       $$1 = $$0;
       break;
      }
     }
    } else {
     $$1 = $first;
    }
   }
  }
 } while (0);
 return $$1 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 20 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $f + 28 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1 >>> 0 > $3 >>> 0;
 if ($4) {
  $5 = $f + 36 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_iiii[(SAFE_FT_MASK($6 | 0, 255 | 0) | 0) & 255]($f, 0, 0) | 0;
  $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $8 = ($7 | 0) == (0 | 0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $f + 8 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $10 >>> 0 < $12 >>> 0;
  if ($13) {
   $14 = $f + 40 | 0;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $16 = $10;
   $17 = $12;
   $18 = $16 - $17 | 0;
   FUNCTION_TABLE_iiii[(SAFE_FT_MASK($15 | 0, 255 | 0) | 0) & 255]($f, $18, 1) | 0;
  }
  $19 = $f + 16 | 0;
  SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
  $$0 = 0;
 }
 return $$0 | 0;
}

function __Z11mouse_hoverff($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $mc = 0, $qa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $qa = sp + 24 | 0;
 $mc = sp + 8 | 0;
 $0 = $x;
 $1 = $y;
 __ZN6b2AABBC2Ev($qa);
 $4 = $0;
 $5 = $4;
 $6 = $5 - .01;
 $7 = $6;
 $8 = $1;
 $9 = $8;
 $10 = $9 - .01;
 $11 = $10;
 __ZN6b2Vec23SetEff($qa, $7, $11);
 $12 = $qa + 8 | 0;
 $13 = $0;
 $14 = $13;
 $15 = $14 - .01;
 $16 = $15;
 $17 = $1;
 $18 = $17;
 $19 = $18 - .01;
 $20 = $19;
 __ZN6b2Vec23SetEff($12, $16, $20);
 $21 = $0;
 $22 = $1;
 __ZN13MouseCallbackC2Eff($mc, $21, $22);
 $23 = SAFE_HEAP_LOAD(696 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_viii(116, $23 | 0, $mc | 0, $qa | 0);
 $24 = __THREW__;
 __THREW__ = 0;
 $25 = $24 & 1;
 if ($25) {
  $26 = ___cxa_find_matching_catch() | 0;
  $27 = tempRet0;
  $2 = $26;
  $3 = $27;
  __ZN13MouseCallbackD2Ev($mc);
  $28 = $2;
  $29 = $3;
  ___resumeException($28 | 0);
 } else {
  __ZN13MouseCallbackD2Ev($mc);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $this + 8 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == ($1 | 0);
 if (!$4) {
  $6 = $3;
  while (1) {
   $5 = $6 + -16 | 0;
   SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
   $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == ($1 | 0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $this + 16 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $this + 12 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14;
  $16 = $9;
  $17 = $15 - $16 | 0;
  $18 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18, $9, $17);
 }
 return;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE11__recommendEj($this, $__new_size) {
 $this = $this | 0;
 $__new_size = $__new_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__cap = 0, $__ms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 12 | 0;
 $3 = sp;
 $1 = $this;
 SAFE_HEAP_STORE($2 | 0, $__new_size | 0, 4);
 $4 = $1;
 $5 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8max_sizeEv($4) | 0;
 $__ms = $5;
 $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $7 = $__ms;
 $8 = $6 >>> 0 > $7 >>> 0;
 if ($8) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($4);
 }
 $9 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($4) | 0;
 $__cap = $9;
 $10 = $__cap;
 $11 = $__ms;
 $12 = ($11 >>> 0) / 2 & -1;
 $13 = $10 >>> 0 >= $12 >>> 0;
 if ($13) {
  $14 = $__ms;
  $0 = $14;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  $15 = $__cap;
  $16 = $15 << 1;
  SAFE_HEAP_STORE($3 | 0, $16 | 0, 4);
  $17 = __ZNSt3__13maxIjEERKT_S3_S3_($3, $2) | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this | 0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if ($2) {
  $7 = $0 & 255;
  $8 = $7 >>> 1;
  $9 = $this + 1 | 0;
  $10 = $8;
  $14 = $9;
 } else {
  $3 = $this + 4 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = $this + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $10 = $4;
  $14 = $6;
 }
 $not$ = ($10 | 0) != 0;
 $11 = $not$ & 1;
 $12 = ($10 | 0) == ($11 | 0);
 $$pre1 = $10 - $11 | 0;
 if ($12) {
  $16 = $0;
 } else {
  $13 = $14 + $11 | 0;
  _memmove($14 | 0, $13 | 0, $$pre1 | 0) | 0;
  $$pre = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $$pre;
 }
 $15 = $16 & 1;
 $17 = $15 << 24 >> 24 == 0;
 if ($17) {
  $19 = $$pre1 << 1;
  $20 = $19 & 255;
  SAFE_HEAP_STORE($this >> 0 | 0, $20 | 0, 1);
 } else {
  $18 = $this + 4 | 0;
  SAFE_HEAP_STORE($18 | 0, $$pre1 | 0, 4);
 }
 $21 = $14 + $$pre1 | 0;
 SAFE_HEAP_STORE($21 >> 0 | 0, 0 | 0, 1);
 return;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE11__recommendEj($this, $__new_size) {
 $this = $this | 0;
 $__new_size = $__new_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__cap = 0, $__ms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 12 | 0;
 $3 = sp;
 $1 = $this;
 SAFE_HEAP_STORE($2 | 0, $__new_size | 0, 4);
 $4 = $1;
 $5 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8max_sizeEv($4) | 0;
 $__ms = $5;
 $6 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $7 = $__ms;
 $8 = $6 >>> 0 > $7 >>> 0;
 if ($8) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($4);
 }
 $9 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($4) | 0;
 $__cap = $9;
 $10 = $__cap;
 $11 = $__ms;
 $12 = ($11 >>> 0) / 2 & -1;
 $13 = $10 >>> 0 >= $12 >>> 0;
 if ($13) {
  $14 = $__ms;
  $0 = $14;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  $15 = $__cap;
  $16 = $15 << 1;
  SAFE_HEAP_STORE($3 | 0, $16 | 0, 4);
  $17 = __ZNSt3__13maxIjEERKT_S3_S3_($3, $2) | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0 | 0;
}

function __ZN6b2Body8SetAwakeEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $2 = $flag & 1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4 & 1;
 $6 = $3 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 2, 0) | 0 | 0;
 $8 = $7 & 65535;
 if (!$5) {
  $17 = $8 & -3;
  $18 = $17 & 65535;
  SAFE_HEAP_STORE($6 | 0, $18 | 0, 2);
  $19 = $3 + 144 | 0;
  SAFE_HEAP_STORE_D($19 | 0, +(0.0), 4);
  $20 = $3 + 64 | 0;
  __ZN6b2Vec27SetZeroEv($20);
  $21 = $3 + 72 | 0;
  SAFE_HEAP_STORE_D($21 | 0, +(0.0), 4);
  $22 = $3 + 76 | 0;
  __ZN6b2Vec27SetZeroEv($22);
  $23 = $3 + 84 | 0;
  SAFE_HEAP_STORE_D($23 | 0, +(0.0), 4);
  STACKTOP = sp;
  return;
 }
 $9 = $8 & 2;
 $10 = ($9 | 0) == 0;
 if (!$10) {
  STACKTOP = sp;
  return;
 }
 $11 = $3 + 4 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 2, 0) | 0 | 0;
 $13 = $12 & 65535;
 $14 = $13 | 2;
 $15 = $14 & 65535;
 SAFE_HEAP_STORE($11 | 0, $15 | 0, 2);
 $16 = $3 + 144 | 0;
 SAFE_HEAP_STORE_D($16 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $this + 8 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == ($1 | 0);
 if (!$4) {
  $6 = $3;
  while (1) {
   $5 = $6 + -16 | 0;
   SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
   $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == ($1 | 0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $this + 16 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $this + 12 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14;
  $16 = $9;
  $17 = $15 - $16 | 0;
  $18 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18, $9, $17);
 }
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE20__construct_backwardIPS2_EEvRS3_T_S8_RS8_($__a, $__begin1, $__end1, $__end2) {
 $__a = $__a | 0;
 $__begin1 = $__begin1 | 0;
 $__end1 = $__end1 | 0;
 $__end2 = $__end2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__begin1;
 $2 = $__end1;
 $3 = $__end2;
 while (1) {
  $4 = $2;
  $5 = $1;
  $6 = ($4 | 0) != ($5 | 0);
  if (!$6) {
   break;
  }
  $7 = $0;
  $8 = $3;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $9 + -12 | 0;
  $11 = __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($10) | 0;
  $12 = $2;
  $13 = $12 + -12 | 0;
  $2 = $13;
  $14 = __ZNSt3__116move_if_noexceptI6SpriteEENS_11conditionalIXaantsr29is_nothrow_move_constructibleIT_EE5valuesr21is_copy_constructibleIS3_EE5valueERKS3_OS3_E4typeERS3_($13) | 0;
  __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_($7, $11, $14);
  $15 = $3;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 + -12 | 0;
  SAFE_HEAP_STORE($15 | 0, $17 | 0, 4);
 }
 STACKTOP = sp;
 return;
}

function __Z6b2MulTRK5b2RotS1_($agg$result, $q, $r) {
 $agg$result = $agg$result | 0;
 $q = $q | 0;
 $r = $r | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $q;
 $1 = $r;
 __ZN5b2RotC2Ev($agg$result);
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = $1;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $4 * $6;
 $8 = $0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 * $12;
 $14 = $7 - $13;
 SAFE_HEAP_STORE_D($agg$result | 0, +$14, 4);
 $15 = $0;
 $16 = $15 + 4 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $1;
 $19 = $18 + 4 | 0;
 $20 = +(+SAFE_HEAP_LOAD_D($19 | 0, 4));
 $21 = $17 * $20;
 $22 = $0;
 $23 = +(+SAFE_HEAP_LOAD_D($22 | 0, 4));
 $24 = $1;
 $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
 $26 = $23 * $25;
 $27 = $21 + $26;
 $28 = $agg$result + 4 | 0;
 SAFE_HEAP_STORE_D($28 | 0, +$27, 4);
 STACKTOP = sp;
 return;
}

function __ZNK9b2Simplex9GetMetricEv($this) {
 $this = $this | 0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 8 | 0;
 $3 = sp;
 $1 = $this;
 $4 = $1;
 $5 = $4 + 108 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 switch ($6 | 0) {
 case 0:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 247, 8013 | 0);
   break;
  }
 case 1:
  {
   $0 = 0.0;
   $18 = $0;
   STACKTOP = sp;
   return +$18;
   break;
  }
 case 2:
  {
   $7 = $4 + 16 | 0;
   $8 = $4 + 36 | 0;
   $9 = $8 + 16 | 0;
   $10 = +__Z10b2DistanceRK6b2Vec2S1_($7, $9);
   $0 = $10;
   $18 = $0;
   STACKTOP = sp;
   return +$18;
   break;
  }
 case 3:
  {
   $11 = $4 + 36 | 0;
   $12 = $11 + 16 | 0;
   $13 = $4 + 16 | 0;
   __ZmiRK6b2Vec2S1_($2, $12, $13);
   $14 = $4 + 72 | 0;
   $15 = $14 + 16 | 0;
   $16 = $4 + 16 | 0;
   __ZmiRK6b2Vec2S1_($3, $15, $16);
   $17 = +__Z7b2CrossRK6b2Vec2S1_($2, $3);
   $0 = $17;
   $18 = $0;
   STACKTOP = sp;
   return +$18;
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 260, 8013 | 0);
  }
 }
 return +(0.0);
}

function __ZN16b2BlockAllocatorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $1 + 4 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = ($2 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $i;
  $7 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
  $8 = $7 + ($6 << 3) | 0;
  $9 = $8 + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  invoke_vi(141, $10 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if ($12) {
   label = 7;
   break;
  }
  $13 = $i;
  $14 = $13 + 1 | 0;
  $i = $14;
 }
 if ((label | 0) == 7) {
  $18 = ___cxa_find_matching_catch(0 | 0) | 0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
 }
 $15 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vi(141, $15 | 0);
 $16 = __THREW__;
 __THREW__ = 0;
 $17 = $16 & 1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0 | 0) | 0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = ($0 | 0) == (0 | 0);
 if (!$1) {
  $2 = $this + 4 | 0;
  $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) == ($0 | 0);
  if (!$4) {
   $6 = $3;
   while (1) {
    $5 = $6 + -16 | 0;
    SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
    __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
    $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == ($0 | 0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $10 = $this + 8 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11;
  $13 = $9;
  $14 = $12 - $13 | 0;
  $15 = $this + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16, $9, $14);
 }
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem | 0) == (0 | 0);
 if ($0) {
  $1 = _malloc($bytes) | 0;
  $mem$0 = $1;
  return $mem$0 | 0;
 }
 $2 = $bytes >>> 0 > 4294967231;
 if ($2) {
  $3 = ___errno_location() | 0;
  SAFE_HEAP_STORE($3 | 0, 12 | 0, 4);
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $4 = $bytes >>> 0 < 11;
 $5 = $bytes + 11 | 0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = $oldmem + -8 | 0;
 $9 = _try_realloc_chunk($8, $7) | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $9 + 8 | 0;
  $mem$0 = $11;
  return $mem$0 | 0;
 }
 $12 = _malloc($bytes) | 0;
 $13 = ($12 | 0) == (0 | 0);
 if ($13) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $14 = $oldmem + -4 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17 | 0) == 0;
 $19 = $18 ? 8 : 4;
 $20 = $16 - $19 | 0;
 $21 = $20 >>> 0 < $bytes >>> 0;
 $22 = $21 ? $20 : $bytes;
 _memcpy($12 | 0, $oldmem | 0, $22 | 0) | 0;
 _free($oldmem);
 $mem$0 = $12;
 return $mem$0 | 0;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE17__destruct_at_endEPS2_NS_17integral_constantIbLb0EEE($this, $__new_last, $0) {
 $this = $this | 0;
 $__new_last = $__new_last | 0;
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__new_last;
 $3 = $1;
 while (1) {
  $4 = $2;
  $5 = $3 + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($4 | 0) != ($6 | 0);
  if (!$7) {
   label = 4;
   break;
  }
  $8 = __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE7__allocEv($3) | 0;
  $9 = $3 + 8 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + -4 | 0;
  SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
  $12 = __ZNSt3__116__to_raw_pointerIP6b2BodyEEPT_S4_($11) | 0;
  __THREW__ = 0;
  invoke_vii(139, $8 | 0, $12 | 0);
  $13 = __THREW__;
  __THREW__ = 0;
  $14 = $13 & 1;
  if ($14) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 5) {
  $15 = ___cxa_find_matching_catch(0 | 0) | 0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
 }
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while (1) {
  $1 = 12395 + $i$03 | 0;
  $2 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
  $3 = $2 & 255;
  $4 = ($3 | 0) == ($e | 0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = $i$03 + 1 | 0;
  $6 = ($5 | 0) == 87;
  if ($6) {
   $i$12 = 87;
   $s$01 = 12483;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label | 0) == 2) {
  $0 = ($i$03$lcssa | 0) == 0;
  if ($0) {
   $s$0$lcssa = 12483;
  } else {
   $i$12 = $i$03$lcssa;
   $s$01 = 12483;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0;
   $s$1 = $s$01;
   while (1) {
    $7 = SAFE_HEAP_LOAD($s$1 >> 0 | 0, 1, 0) | 0 | 0;
    $8 = $7 << 24 >> 24 == 0;
    $9 = $s$1 + 1 | 0;
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = $i$12 + -1 | 0;
   $11 = ($10 | 0) == 0;
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;
    $s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return $s$0$lcssa | 0;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE17__destruct_at_endEPS1_NS_17integral_constantIbLb0EEE($this, $__new_last, $0) {
 $this = $this | 0;
 $__new_last = $__new_last | 0;
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__new_last;
 $3 = $1;
 while (1) {
  $4 = $2;
  $5 = $3 + 8 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($4 | 0) != ($6 | 0);
  if (!$7) {
   label = 4;
   break;
  }
  $8 = __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE7__allocEv($3) | 0;
  $9 = $3 + 8 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + -12 | 0;
  SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
  $12 = __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($11) | 0;
  __THREW__ = 0;
  invoke_vii(134, $8 | 0, $12 | 0);
  $13 = __THREW__;
  __THREW__ = 0;
  $14 = $13 & 1;
  if ($14) {
   label = 5;
   break;
  }
 }
 if ((label | 0) == 4) {
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 5) {
  $15 = ___cxa_find_matching_catch(0 | 0) | 0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
 }
}

function __ZNK15b2DistanceProxy10GetSupportERK6b2Vec2($this, $d) {
 $this = $this | 0;
 $d = $d | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $bestIndex = 0, $bestValue = 0.0, $i = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $d;
 $2 = $0;
 $bestIndex = 0;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = +__Z5b2DotRK6b2Vec2S1_($4, $5);
 $bestValue = $6;
 $i = 1;
 while (1) {
  $7 = $i;
  $8 = $2 + 20 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = ($7 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $i;
  $12 = $2 + 16 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13 + ($11 << 3) | 0;
  $15 = $1;
  $16 = +__Z5b2DotRK6b2Vec2S1_($14, $15);
  $value = $16;
  $17 = $value;
  $18 = $bestValue;
  $19 = $17 > $18;
  if ($19) {
   $20 = $i;
   $bestIndex = $20;
   $21 = $value;
   $bestValue = $21;
  }
  $22 = $i;
  $23 = $22 + 1 | 0;
  $i = $23;
 }
 $24 = $bestIndex;
 STACKTOP = sp;
 return $24 | 0;
}

function __ZN9b2BodyDefC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 __ZN6b2Vec2C2Ev($2);
 $3 = $1 + 16 | 0;
 __ZN6b2Vec2C2Ev($3);
 $4 = $1 + 44 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $1 + 4 | 0;
 __ZN6b2Vec23SetEff($5, 0.0, 0.0);
 $6 = $1 + 12 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +(0.0), 4);
 $7 = $1 + 16 | 0;
 __ZN6b2Vec23SetEff($7, 0.0, 0.0);
 $8 = $1 + 24 | 0;
 SAFE_HEAP_STORE_D($8 | 0, +(0.0), 4);
 $9 = $1 + 28 | 0;
 SAFE_HEAP_STORE_D($9 | 0, +(0.0), 4);
 $10 = $1 + 32 | 0;
 SAFE_HEAP_STORE_D($10 | 0, +(0.0), 4);
 $11 = $1 + 36 | 0;
 SAFE_HEAP_STORE($11 >> 0 | 0, 1 | 0, 1);
 $12 = $1 + 37 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, 1 | 0, 1);
 $13 = $1 + 38 | 0;
 SAFE_HEAP_STORE($13 >> 0 | 0, 0 | 0, 1);
 $14 = $1 + 39 | 0;
 SAFE_HEAP_STORE($14 >> 0 | 0, 0 | 0, 1);
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $15 = $1 + 40 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, 1 | 0, 1);
 $16 = $1 + 48 | 0;
 SAFE_HEAP_STORE_D($16 | 0, +(1.0), 4);
 STACKTOP = sp;
 return;
}

function __Z5b2MulRK7b2Mat22RK6b2Vec2($agg$result, $A, $v) {
 $agg$result = $agg$result | 0;
 $A = $A | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $A;
 $1 = $v;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 * $5;
 $7 = $0;
 $8 = $7 + 8 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 * $12;
 $14 = $6 + $13;
 $15 = $0;
 $16 = $15 + 4 | 0;
 $17 = +(+SAFE_HEAP_LOAD_D($16 | 0, 4));
 $18 = $1;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $20 = $17 * $19;
 $21 = $0;
 $22 = $21 + 8 | 0;
 $23 = $22 + 4 | 0;
 $24 = +(+SAFE_HEAP_LOAD_D($23 | 0, 4));
 $25 = $1;
 $26 = $25 + 4 | 0;
 $27 = +(+SAFE_HEAP_LOAD_D($26 | 0, 4));
 $28 = $24 * $27;
 $29 = $20 + $28;
 __ZN6b2Vec2C2Eff($agg$result, $14, $29);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 16 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($1 | 0) == (0 | 0);
 do {
  if ($2) {
   SAFE_HEAP_STORE($0 | 0, $adjustedPtr | 0, 4);
   $3 = $info + 24 | 0;
   SAFE_HEAP_STORE($3 | 0, $path_below | 0, 4);
   $4 = $info + 36 | 0;
   SAFE_HEAP_STORE($4 | 0, 1 | 0, 4);
  } else {
   $5 = ($1 | 0) == ($adjustedPtr | 0);
   if (!$5) {
    $9 = $info + 36 | 0;
    $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
    $11 = $10 + 1 | 0;
    SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
    $12 = $info + 24 | 0;
    SAFE_HEAP_STORE($12 | 0, 2 | 0, 4);
    $13 = $info + 54 | 0;
    SAFE_HEAP_STORE($13 >> 0 | 0, 1 | 0, 1);
    break;
   }
   $6 = $info + 24 | 0;
   $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == 2;
   if ($8) {
    SAFE_HEAP_STORE($6 | 0, $path_below | 0, 4);
   }
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = SAFE_HEAP_LOAD($current_ptr | 0, 4, 0) | 0 | 0;
  $6 = $5 + $2 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $offset_to_base$0 = $7;
 }
 $8 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + 20 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $current_ptr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($11 | 0, 127 | 0) | 0) & 127]($8, $info, $dst_ptr, $12, $15, $use_strcmp);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $cv) {
 $first = $first | 0;
 $last = $last | 0;
 $cv = $cv | 0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($cv | 0, 0 | 0, 4);
 $0 = ($first | 0) == ($last | 0);
 if ($0) {
  $$2 = $first;
 } else {
  $1 = SAFE_HEAP_LOAD($first >> 0 | 0, 1, 0) | 0 | 0;
  $2 = $1 << 24 >> 24 == 114;
  if ($2) {
   SAFE_HEAP_STORE($cv | 0, 4 | 0, 4);
   $3 = $first + 1 | 0;
   $$pre = SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0;
   $$0 = $3;
   $4 = $$pre;
   $7 = 4;
  } else {
   $$0 = $first;
   $4 = $1;
   $7 = 0;
  }
  $5 = $4 << 24 >> 24 == 86;
  if ($5) {
   $6 = $7 | 2;
   SAFE_HEAP_STORE($cv | 0, $6 | 0, 4);
   $8 = $$0 + 1 | 0;
   $$pre1 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
   $$1 = $8;
   $12 = $6;
   $9 = $$pre1;
  } else {
   $$1 = $$0;
   $12 = $7;
   $9 = $4;
  }
  $10 = $9 << 24 >> 24 == 75;
  if ($10) {
   $11 = $12 | 1;
   SAFE_HEAP_STORE($cv | 0, $11 | 0, 4);
   $13 = $$1 + 1 | 0;
   $$2 = $13;
  } else {
   $$2 = $$1;
  }
 }
 return $$2 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE_D(tempDoublePtr | 0, +$x, 8);
 $0 = SAFE_HEAP_LOAD(tempDoublePtr | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(tempDoublePtr + 4 | 0, 4, 0) | 0 | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   $5 = $x != 0.0;
   if ($5) {
    $6 = $x * 18446744073709552.0e3;
    $7 = +_frexp($6, $e);
    $8 = SAFE_HEAP_LOAD($e | 0, 4, 0) | 0 | 0;
    $9 = $8 + -64 | 0;
    $$01 = $7;
    $storemerge = $9;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   SAFE_HEAP_STORE($e | 0, $storemerge | 0, 4);
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   $10 = $4 + -1022 | 0;
   SAFE_HEAP_STORE($e | 0, $10 | 0, 4);
   $11 = $1 & -2146435073;
   $12 = $11 | 1071644672;
   SAFE_HEAP_STORE(tempDoublePtr | 0, $0 | 0, 4);
   SAFE_HEAP_STORE(tempDoublePtr + 4 | 0, $12 | 0, 4);
   $13 = +(+SAFE_HEAP_LOAD_D(tempDoublePtr | 0, 8));
   $$0 = $13;
  }
 }
 return +$$0;
}

function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = ($0 | 0) == (0 | 0);
 if (!$1) {
  $2 = $this + 4 | 0;
  $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) == ($0 | 0);
  if (!$4) {
   $6 = $3;
   while (1) {
    $5 = $6 + -16 | 0;
    SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
    __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
    $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == ($0 | 0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $10 = $this + 8 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11;
  $13 = $9;
  $14 = $12 - $13 | 0;
  $15 = $this + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16, $9, $14);
 }
 return;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $this + 8 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == ($1 | 0);
 if (!$4) {
  $6 = $3;
  while (1) {
   $5 = $6 + -24 | 0;
   SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
   $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == ($1 | 0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $this + 16 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $this + 12 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $14;
  $16 = $9;
  $17 = $15 - $16 | 0;
  $18 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($18, $9, $17);
 }
 return;
}

function __Z6b2MulTRK5b2RotRK6b2Vec2($agg$result, $q, $v) {
 $agg$result = $agg$result | 0;
 $q = $q | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = $1;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $4 * $6;
 $8 = $0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 * $12;
 $14 = $7 + $13;
 $15 = $0;
 $16 = +(+SAFE_HEAP_LOAD_D($15 | 0, 4));
 $17 = -$16;
 $18 = $1;
 $19 = +(+SAFE_HEAP_LOAD_D($18 | 0, 4));
 $20 = $17 * $19;
 $21 = $0;
 $22 = $21 + 4 | 0;
 $23 = +(+SAFE_HEAP_LOAD_D($22 | 0, 4));
 $24 = $1;
 $25 = $24 + 4 | 0;
 $26 = +(+SAFE_HEAP_LOAD_D($25 | 0, 4));
 $27 = $23 * $26;
 $28 = $20 + $27;
 __ZN6b2Vec2C2Eff($agg$result, $14, $28);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 $1 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $2 = $1 & 1;
 $3 = $2 << 24 >> 24 == 0;
 $4 = $this + 20 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $0 + 1 | 0;
 $7 = $3 ? $6 : $5;
 $8 = $this + 16 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $1 & 255;
 $11 = $10 >>> 1;
 $12 = $3 ? $11 : $9;
 $13 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $7, $12) | 0;
 {}
 SAFE_HEAP_STORE($agg$result | 0, SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($agg$result + 4 | 0, SAFE_HEAP_LOAD($13 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($agg$result + 8 | 0, SAFE_HEAP_LOAD($13 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
 $14 = $13 + 4 | 0;
 SAFE_HEAP_STORE($14 | 0, 0 | 0, 4);
 $15 = $13 + 8 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__14swapI6b2PairEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS3_EE5valueEvE4typeERS3_S6_($__x, $__y) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__t = sp;
 $0 = $__x;
 $1 = $__y;
 $2 = $0;
 $3 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($2) | 0;
 {}
 SAFE_HEAP_STORE($__t | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($__t + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $4 = $0;
 $5 = $1;
 $6 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($5) | 0;
 {}
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $7 = $1;
 $8 = __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($__t) | 0;
 {}
 SAFE_HEAP_STORE($7 | 0, SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 4 | 0, SAFE_HEAP_LOAD($8 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __Z5b2MulRK5b2RotRK6b2Vec2($agg$result, $q, $v) {
 $agg$result = $agg$result | 0;
 $q = $q | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $q;
 $1 = $v;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = $1;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $4 * $6;
 $8 = $0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 * $12;
 $14 = $7 - $13;
 $15 = $0;
 $16 = +(+SAFE_HEAP_LOAD_D($15 | 0, 4));
 $17 = $1;
 $18 = +(+SAFE_HEAP_LOAD_D($17 | 0, 4));
 $19 = $16 * $18;
 $20 = $0;
 $21 = $20 + 4 | 0;
 $22 = +(+SAFE_HEAP_LOAD_D($21 | 0, 4));
 $23 = $1;
 $24 = $23 + 4 | 0;
 $25 = +(+SAFE_HEAP_LOAD_D($24 | 0, 4));
 $26 = $22 * $25;
 $27 = $19 + $26;
 __ZN6b2Vec2C2Eff($agg$result, $14, $27);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = SAFE_HEAP_LOAD($current_ptr | 0, 4, 0) | 0 | 0;
  $6 = $5 + $2 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $offset_to_base$0 = $7;
 }
 $8 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + 24 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $current_ptr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($11 | 0, 255 | 0) | 0) & 255]($8, $info, $12, $15, $use_strcmp);
 return;
}

function __ZN8b2Island3AddEP6b2Body($this, $body) {
 $this = $this | 0;
 $body = $body | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $body;
 $2 = $0;
 $3 = $2 + 28 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 40 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) < ($6 | 0);
 if ($7) {
  $8 = $2 + 28 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $1;
  $11 = $10 + 8 | 0;
  SAFE_HEAP_STORE($11 | 0, $9 | 0, 4);
  $12 = $1;
  $13 = $2 + 28 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $2 + 8 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 + ($14 << 2) | 0;
  SAFE_HEAP_STORE($17 | 0, $12 | 0, 4);
  $18 = $2 + 28 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 + 1 | 0;
  SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(7861 | 0, 7774 | 0, 54, 7822 | 0);
 }
}

function __ZNK9b2Simplex18GetSearchDirectionEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e12 = 0, $sgn = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $e12 = sp + 16 | 0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = $2 + 108 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 switch ($4 | 0) {
 case 1:
  {
   $5 = $2 + 16 | 0;
   __ZNK6b2Vec2ngEv($agg$result, $5);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $6 = $2 + 36 | 0;
   $7 = $6 + 16 | 0;
   $8 = $2 + 16 | 0;
   __ZmiRK6b2Vec2S1_($e12, $7, $8);
   $9 = $2 + 16 | 0;
   __ZNK6b2Vec2ngEv($1, $9);
   $10 = +__Z7b2CrossRK6b2Vec2S1_($e12, $1);
   $sgn = $10;
   $11 = $sgn;
   $12 = $11 > 0.0;
   if ($12) {
    __Z7b2CrossfRK6b2Vec2($agg$result, 1.0, $e12);
    STACKTOP = sp;
    return;
   } else {
    __Z7b2CrossRK6b2Vec2f($agg$result, $e12, 1.0);
    STACKTOP = sp;
    return;
   }
   break;
  }
 default:
  {
   ___assert_fail(11365 | 0, 4438 | 0, 185, 8131 | 0);
  }
 }
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 $0 = $f + 60 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 SAFE_HEAP_STORE($vararg_ptr1 | 0, 0 | 0, 4);
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 SAFE_HEAP_STORE($vararg_ptr2 | 0, $off | 0, 4);
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 SAFE_HEAP_STORE($vararg_ptr3 | 0, $ret | 0, 4);
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 SAFE_HEAP_STORE($vararg_ptr4 | 0, $whence | 0, 4);
 $2 = ___syscall140(140, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 $4 = ($3 | 0) < 0;
 if ($4) {
  SAFE_HEAP_STORE($ret | 0, -1 | 0, 4);
  $5 = -1;
 } else {
  $$pre = SAFE_HEAP_LOAD($ret | 0, 4, 0) | 0 | 0;
  $5 = $$pre;
 }
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE20__construct_backwardIS3_EENS_9enable_ifIXaaoosr7is_sameIS4_NS1_IT_EEEE5valuentsr15__has_constructIS4_PS8_S8_EE5valuesr31is_trivially_move_constructibleIS8_EE5valueEvE4typeERS4_SA_SA_RSA_($__a, $__begin1, $__end1, $__end2) {
 $__a = $__a | 0;
 $__begin1 = $__begin1 | 0;
 $__end1 = $__end1 | 0;
 $__end2 = $__end2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_Np = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__begin1;
 $2 = $__end1;
 $3 = $__end2;
 $4 = $2;
 $5 = $1;
 $6 = $4;
 $7 = $5;
 $8 = $6 - $7 | 0;
 $9 = ($8 | 0) / 4 & -1;
 $_Np = $9;
 $10 = $_Np;
 $11 = $3;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = 0 - $10 | 0;
 $14 = $12 + ($13 << 2) | 0;
 SAFE_HEAP_STORE($11 | 0, $14 | 0, 4);
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $1;
 $18 = $_Np;
 $19 = $18 << 2;
 _memcpy($16 | 0, $17 | 0, $19 | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEclIS1_S1_EEbRKT_RKT0_($this, $__x, $__y) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $__x;
 $2 = $__y;
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = $2;
 $7 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($4 | 0, 255 | 0) | 0) & 255]($5, $6) | 0;
 $8 = $7 & 1;
 $__r = $8;
 $9 = $__r;
 $10 = $9 & 1;
 if (!$10) {
  $15 = $__r;
  $16 = $15 & 1;
  STACKTOP = sp;
  return $16 | 0;
 }
 $11 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $12 = $2;
 $13 = $1;
 $14 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($11 | 0, 255 | 0) | 0) & 255]($12, $13) | 0;
 if ($14) {
  SAFE_HEAP_STORE($vararg_buffer | 0, 7913 | 0, 4);
  _printf(7909, $vararg_buffer) | 0;
  _abort();
 } else {
  $15 = $__r;
  $16 = $15 & 1;
  STACKTOP = sp;
  return $16 | 0;
 }
 return 0 | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = invoke_i(226) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0 | 0) | 0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
 }
 $3 = ($0 | 0) == (0 | 0);
 if (!$3) {
  $4 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $5 = ($4 | 0) == (0 | 0);
  if (!$5) {
   $6 = $4 + 48 | 0;
   $7 = $6;
   $8 = $7;
   $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
   $10 = $7 + 4 | 0;
   $11 = $10;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = $9 & -256;
   $14 = ($13 | 0) == 1126902528;
   $15 = ($12 | 0) == 1129074247;
   $16 = $14 & $15;
   if ($16) {
    $17 = $4 + 12 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    __ZSt11__terminatePFvvE($18);
   }
  }
 }
 $19 = SAFE_HEAP_LOAD(363 * 4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(363 * 4 | 0, $19 + 0 | 0 | 0, 4);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
}

function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = ($0 | 0) == (0 | 0);
 if (!$1) {
  $2 = $this + 4 | 0;
  $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) == ($0 | 0);
  if (!$4) {
   $6 = $3;
   while (1) {
    $5 = $6 + -24 | 0;
    SAFE_HEAP_STORE($2 | 0, $5 | 0, 4);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
    $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    $8 = ($7 | 0) == ($0 | 0);
    if ($8) {
     break;
    } else {
     $6 = $7;
    }
   }
  }
  $9 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $10 = $this + 8 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11;
  $13 = $9;
  $14 = $12 - $13 | 0;
  $15 = $this + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($16, $9, $14);
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = SAFE_HEAP_LOAD($adjustedPtr | 0, 4, 0) | 0 | 0;
  $6 = $5 + $2 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $offset_to_base$0 = $7;
 }
 $8 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + 28 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $adjustedPtr + $offset_to_base$0 | 0;
 $13 = $1 & 2;
 $14 = ($13 | 0) != 0;
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK($11 | 0, 255 | 0) | 0) & 255]($8, $info, $12, $15);
 return;
}

function __ZN11b2EdgeShapeaSERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN7b2ShapeaSERKS_($3, $4) | 0;
 $5 = $3 + 12 | 0;
 $6 = $2;
 $7 = $6 + 12 | 0;
 {}
 SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 8 | 0, SAFE_HEAP_LOAD($7 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 12 | 0, SAFE_HEAP_LOAD($7 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 16 | 0, SAFE_HEAP_LOAD($7 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 20 | 0, SAFE_HEAP_LOAD($7 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 24 | 0, SAFE_HEAP_LOAD($7 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 28 | 0, SAFE_HEAP_LOAD($7 + 28 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 32 | 0, SAFE_HEAP_LOAD($7 + 32 | 0, 2, 0) | 0 | 0 | 0, 2);
 STACKTOP = sp;
 return $3 | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $1 = SAFE_HEAP_LOAD($0 >> 0 | 0, 1, 0) | 0 | 0;
 $2 = $1 << 24 >> 24;
 $3 = $2 + 255 | 0;
 $4 = $3 | $2;
 $5 = $4 & 255;
 SAFE_HEAP_STORE($0 >> 0 | 0, $5 | 0, 1);
 $6 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
 $7 = $6 & 8;
 $8 = ($7 | 0) == 0;
 if ($8) {
  $10 = $f + 8 | 0;
  SAFE_HEAP_STORE($10 | 0, 0 | 0, 4);
  $11 = $f + 4 | 0;
  SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
  $12 = $f + 44 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $f + 28 | 0;
  SAFE_HEAP_STORE($14 | 0, $13 | 0, 4);
  $15 = $f + 20 | 0;
  SAFE_HEAP_STORE($15 | 0, $13 | 0, 4);
  $16 = $13;
  $17 = $f + 48 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $16 + $18 | 0;
  $20 = $f + 16 | 0;
  SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  SAFE_HEAP_STORE($f | 0, $9 | 0, 4);
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE14__annotate_newEj($this, $__current_size) {
 $this = $this | 0;
 $__current_size = $__current_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__current_size;
 $2 = $0;
 $3 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($2) | 0;
 $4 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($2) | 0;
 $5 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($2) | 0;
 $6 = $4 + ($5 * 12 | 0) | 0;
 $7 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($2) | 0;
 $8 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($2) | 0;
 $9 = $7 + ($8 * 12 | 0) | 0;
 $10 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($2) | 0;
 $11 = $1;
 $12 = $10 + ($11 * 12 | 0) | 0;
 __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($2, $3, $6, $9, $12);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE14__annotate_newEj($this, $__current_size) {
 $this = $this | 0;
 $__current_size = $__current_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__current_size;
 $2 = $0;
 $3 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($2) | 0;
 $4 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($2) | 0;
 $5 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($2) | 0;
 $6 = $4 + ($5 << 2) | 0;
 $7 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($2) | 0;
 $8 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($2) | 0;
 $9 = $7 + ($8 << 2) | 0;
 $10 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($2) | 0;
 $11 = $1;
 $12 = $10 + ($11 << 2) | 0;
 __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($2, $3, $6, $9, $12);
 STACKTOP = sp;
 return;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12 | 0;
 $0 = $f + 36 | 0;
 SAFE_HEAP_STORE($0 | 0, 93 | 0, 4);
 $1 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
 $2 = $1 & 64;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $4 = $f + 60 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($vararg_buffer | 0, $5 | 0, 4);
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  SAFE_HEAP_STORE($vararg_ptr1 | 0, 21505 | 0, 4);
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  SAFE_HEAP_STORE($vararg_ptr2 | 0, $tio | 0, 4);
  $6 = ___syscall54(54, $vararg_buffer | 0) | 0;
  $7 = ($6 | 0) == 0;
  if (!$7) {
   $8 = $f + 75 | 0;
   SAFE_HEAP_STORE($8 >> 0 | 0, -1 | 0, 1);
  }
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this, $__s, $__sz, $__reserve) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 $__reserve = $__reserve | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__reserve >>> 0 > 4294967279;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $1 = $__reserve >>> 0 < 11;
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2 & 255;
  SAFE_HEAP_STORE($this >> 0 | 0, $3 | 0, 1);
  $4 = $this + 1 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__reserve + 16 | 0;
  $6 = $5 & -16;
  $7 = _malloc($6) | 0;
  $8 = $this + 8 | 0;
  SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
  $9 = $6 | 1;
  SAFE_HEAP_STORE($this | 0, $9 | 0, 4);
  $10 = $this + 4 | 0;
  SAFE_HEAP_STORE($10 | 0, $__sz | 0, 4);
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 $11 = $__p$0 + $__sz | 0;
 SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0, 1);
 return;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($1) | 0;
 $3 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($1) | 0;
 $4 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($1) | 0;
 $5 = $3 + ($4 * 12 | 0) | 0;
 $6 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($1) | 0;
 $7 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($1) | 0;
 $8 = $6 + ($7 * 12 | 0) | 0;
 $9 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($1) | 0;
 $10 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($1) | 0;
 $11 = $9 + ($10 * 12 | 0) | 0;
 __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($1, $2, $5, $8, $11);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($1) | 0;
 $3 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($1) | 0;
 $4 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($1) | 0;
 $5 = $3 + ($4 << 2) | 0;
 $6 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($1) | 0;
 $7 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4sizeEv($1) | 0;
 $8 = $6 + ($7 << 2) | 0;
 $9 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($1) | 0;
 $10 = __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($1) | 0;
 $11 = $9 + ($10 << 2) | 0;
 __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($1, $2, $5, $8, $11);
 STACKTOP = sp;
 return;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func | 0);
 $0 = __THREW__;
 __THREW__ = 0;
 $1 = $0 & 1;
 if (!$1) {
  __THREW__ = 0;
  invoke_vii(224, 10016 | 0, $vararg_buffer | 0);
  $2 = __THREW__;
  __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0 | 0) | 0;
 $4 = tempRet0;
 ___cxa_begin_catch($3 | 0) | 0;
 __THREW__ = 0;
 invoke_vii(224, 10056 | 0, $vararg_buffer1 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0 | 0) | 0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(225);
 $8 = __THREW__;
 __THREW__ = 0;
 $9 = $8 & 1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0 | 0) | 0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
 } else {
  ___clang_call_terminate($6);
 }
}

function __Z6b2MulTRK11b2TransformS1_($agg$result, $A, $B) {
 $agg$result = $agg$result | 0;
 $A = $A | 0;
 $B = $B | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $A;
 $1 = $B;
 __ZN11b2TransformC2Ev($agg$result);
 $5 = $agg$result + 8 | 0;
 $6 = $0;
 $7 = $6 + 8 | 0;
 $8 = $1;
 $9 = $8 + 8 | 0;
 __Z6b2MulTRK5b2RotS1_($2, $7, $9);
 {}
 SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($2 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = $1;
 $13 = $0;
 __ZmiRK6b2Vec2S1_($4, $12, $13);
 __Z6b2MulTRK5b2RotRK6b2Vec2($3, $11, $4);
 {}
 SAFE_HEAP_STORE($agg$result | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($agg$result + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $this + 16 | 0;
 SAFE_HEAP_STORE($1 | 0, $__a | 0, 4);
 $2 = ($__cap | 0) == 0;
 if ($2) {
  $6 = 0;
 } else {
  $3 = SAFE_HEAP_LOAD($__a | 0, 4, 0) | 0 | 0;
  $4 = $__cap << 4;
  $5 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3, $4) | 0;
  $6 = $5;
 }
 SAFE_HEAP_STORE($this | 0, $6 | 0, 4);
 $7 = $6 + ($__start << 4) | 0;
 $8 = $this + 8 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $this + 4 | 0;
 SAFE_HEAP_STORE($9 | 0, $7 | 0, 4);
 $10 = $6 + ($__cap << 4) | 0;
 $11 = $this + 12 | 0;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 return;
}

function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $this + 16 | 0;
 SAFE_HEAP_STORE($1 | 0, $__a | 0, 4);
 $2 = ($__cap | 0) == 0;
 if ($2) {
  $6 = 0;
 } else {
  $3 = SAFE_HEAP_LOAD($__a | 0, 4, 0) | 0 | 0;
  $4 = $__cap << 4;
  $5 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3, $4) | 0;
  $6 = $5;
 }
 SAFE_HEAP_STORE($this | 0, $6 | 0, 4);
 $7 = $6 + ($__start << 4) | 0;
 $8 = $this + 8 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $this + 4 | 0;
 SAFE_HEAP_STORE($9 | 0, $7 | 0, 4);
 $10 = $6 + ($__cap << 4) | 0;
 $11 = $this + 12 | 0;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 return;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($3) | 0;
 $5 = __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE8max_sizeERKS4_($4) | 0;
 SAFE_HEAP_STORE($1 | 0, $5 | 0, 4);
 $6 = __ZNSt3__114numeric_limitsIjE3maxEv() | 0;
 $7 = ($6 >>> 0) / 2 & -1;
 SAFE_HEAP_STORE($2 | 0, $7 | 0, 4);
 __THREW__ = 0;
 $8 = invoke_iii(132, $1 | 0, $2 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  $12 = ___cxa_find_matching_catch(0 | 0) | 0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
 } else {
  $11 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 return 0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 } else {
  $3 = $this + 8 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  $6 = $5 + 20 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($7 | 0, 127 | 0) | 0) & 127]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($3) | 0;
 $5 = __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE8max_sizeERKS3_($4) | 0;
 SAFE_HEAP_STORE($1 | 0, $5 | 0, 4);
 $6 = __ZNSt3__114numeric_limitsIjE3maxEv() | 0;
 $7 = ($6 >>> 0) / 2 & -1;
 SAFE_HEAP_STORE($2 | 0, $7 | 0, 4);
 __THREW__ = 0;
 $8 = invoke_iii(132, $1 | 0, $2 | 0) | 0;
 $9 = __THREW__;
 __THREW__ = 0;
 $10 = $9 & 1;
 if ($10) {
  $12 = ___cxa_find_matching_catch(0 | 0) | 0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
 } else {
  $11 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  STACKTOP = sp;
  return $11 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__sz >>> 0 > 4294967279;
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 }
 $1 = $__sz >>> 0 < 11;
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2 & 255;
  SAFE_HEAP_STORE($this >> 0 | 0, $3 | 0, 1);
  $4 = $this + 1 | 0;
  $__p$0 = $4;
 } else {
  $5 = $__sz + 16 | 0;
  $6 = $5 & -16;
  $7 = _malloc($6) | 0;
  $8 = $this + 8 | 0;
  SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
  $9 = $6 | 1;
  SAFE_HEAP_STORE($this | 0, $9 | 0, 4);
  $10 = $this + 4 | 0;
  SAFE_HEAP_STORE($10 | 0, $__sz | 0, 4);
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 $11 = $__p$0 + $__sz | 0;
 SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0, 1);
 return;
}

function __ZNSt3__14swapIPP6b2BodyEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS5_EE5valueEvE4typeERS5_S8_($__x, $__y) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__t = sp;
 $0 = $__x;
 $1 = $__y;
 $2 = $0;
 $3 = __ZNSt3__14moveIRPP6b2BodyEEONS_16remove_referenceIT_E4typeEOS6_($2) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($__t | 0, $4 | 0, 4);
 $5 = $1;
 $6 = __ZNSt3__14moveIRPP6b2BodyEEONS_16remove_referenceIT_E4typeEOS6_($5) | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = __ZNSt3__14moveIRPP6b2BodyEEONS_16remove_referenceIT_E4typeEOS6_($__t) | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $1;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $this + 16 | 0;
 SAFE_HEAP_STORE($1 | 0, $__a | 0, 4);
 $2 = ($__cap | 0) == 0;
 if ($2) {
  $6 = 0;
 } else {
  $3 = SAFE_HEAP_LOAD($__a | 0, 4, 0) | 0 | 0;
  $4 = $__cap * 24 | 0;
  $5 = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3, $4) | 0;
  $6 = $5;
 }
 SAFE_HEAP_STORE($this | 0, $6 | 0, 4);
 $7 = $6 + ($__start * 24 | 0) | 0;
 $8 = $this + 8 | 0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = $this + 4 | 0;
 SAFE_HEAP_STORE($9 | 0, $7 | 0, 4);
 $10 = $6 + ($__cap * 24 | 0) | 0;
 $11 = $this + 12 | 0;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 {}
 SAFE_HEAP_STORE($this | 0, SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 4 | 0, SAFE_HEAP_LOAD($0 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 8 | 0, SAFE_HEAP_LOAD($0 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $this + 12 | 0;
 $4 = $0 + 12 | 0;
 {}
 SAFE_HEAP_STORE($3 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($3 + 8 | 0, SAFE_HEAP_LOAD($4 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $4 + 4 | 0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 $6 = $4 + 8 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__14swapIP6SpriteEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS4_EE5valueEvE4typeERS4_S7_($__x, $__y) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $__t = sp;
 $0 = $__x;
 $1 = $__y;
 $2 = $0;
 $3 = __ZNSt3__14moveIRP6SpriteEEONS_16remove_referenceIT_E4typeEOS5_($2) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($__t | 0, $4 | 0, 4);
 $5 = $1;
 $6 = __ZNSt3__14moveIRP6SpriteEEONS_16remove_referenceIT_E4typeEOS5_($5) | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 SAFE_HEAP_STORE($8 | 0, $7 | 0, 4);
 $9 = __ZNSt3__14moveIRP6SpriteEEONS_16remove_referenceIT_E4typeEOS5_($__t) | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $1;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 STACKTOP = sp;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract((SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0) ^ $1$0, (SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0) ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function __ZN6b2Vec29NormalizeEv($this) {
 $this = $this | 0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $invLength = 0.0, $length = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = +__ZNK6b2Vec26LengthEv($2);
 $length = $3;
 $4 = $length;
 $5 = $4 < 1.1920928955078125e-007;
 if ($5) {
  $0 = 0.0;
  $16 = $0;
  STACKTOP = sp;
  return +$16;
 } else {
  $6 = $length;
  $7 = 1.0 / $6;
  $invLength = $7;
  $8 = $invLength;
  $9 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
  $10 = $9 * $8;
  SAFE_HEAP_STORE_D($2 | 0, +$10, 4);
  $11 = $invLength;
  $12 = $2 + 4 | 0;
  $13 = +(+SAFE_HEAP_LOAD_D($12 | 0, 4));
  $14 = $13 * $11;
  SAFE_HEAP_STORE_D($12 | 0, +$14, 4);
  $15 = $length;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;
  return +$16;
 }
 return +(0.0);
}

function __ZN13b2CircleShapeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN7b2ShapeC2Ev($3);
 $4 = 1328;
 SAFE_HEAP_STORE($3 | 0, $4 | 0, 4);
 $5 = $3 + 12 | 0;
 __THREW__ = 0;
 invoke_vi(114, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $3 + 4 | 0;
  SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
  $9 = $3 + 8 | 0;
  SAFE_HEAP_STORE_D($9 | 0, +(0.0), 4);
  $10 = $3 + 12 | 0;
  __THREW__ = 0;
  invoke_vi(115, $10 | 0);
  $11 = __THREW__;
  __THREW__ = 0;
  $12 = $11 & 1;
  if (!$12) {
   STACKTOP = sp;
   return;
  }
 }
 $13 = ___cxa_find_matching_catch() | 0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 __ZN7b2ShapeD2Ev($3);
 $15 = $1;
 $16 = $2;
 ___resumeException($15 | 0);
}

function __ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2($this, $transform, $p) {
 $this = $this | 0;
 $transform = $transform | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $center = 0, $d = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $center = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $d = sp;
 $0 = $this;
 $1 = $transform;
 $2 = $p;
 $4 = $0;
 $5 = $1;
 $6 = $1;
 $7 = $6 + 8 | 0;
 $8 = $4 + 12 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($3, $7, $8);
 __ZplRK6b2Vec2S1_($center, $5, $3);
 $9 = $2;
 __ZmiRK6b2Vec2S1_($d, $9, $center);
 $10 = +__Z5b2DotRK6b2Vec2S1_($d, $d);
 $11 = $4 + 8 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $4 + 8 | 0;
 $14 = +(+SAFE_HEAP_LOAD_D($13 | 0, 4));
 $15 = $12 * $14;
 $16 = $10 <= $15;
 STACKTOP = sp;
 return $16 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 L1 : do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;
   $l$04 = $vl;
   $r$05 = $vr;
   while (1) {
    $1 = SAFE_HEAP_LOAD($l$04 >> 0 | 0, 1, 0) | 0 | 0;
    $2 = SAFE_HEAP_LOAD($r$05 >> 0 | 0, 1, 0) | 0 | 0;
    $3 = $1 << 24 >> 24 == $2 << 24 >> 24;
    if (!$3) {
     $$lcssa = $1;
     $$lcssa19 = $2;
     break;
    }
    $4 = $$03 + -1 | 0;
    $5 = $l$04 + 1 | 0;
    $6 = $r$05 + 1 | 0;
    $7 = ($4 | 0) == 0;
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;
     $l$04 = $5;
     $r$05 = $6;
    }
   }
   $8 = $$lcssa & 255;
   $9 = $$lcssa19 & 255;
   $10 = $8 - $9 | 0;
   $11 = $10;
  }
 } while (0);
 return $11 | 0;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE5clearEv($1);
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = ($2 | 0) != (0 | 0);
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 $4 = __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE7__allocEv($1) | 0;
 $5 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $6 = invoke_ii(137, $1 | 0) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 $8 = $7 & 1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0 | 0) | 0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
 }
 __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE10deallocateERS4_PS3_j($4, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE5clearEv($1);
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = ($2 | 0) != (0 | 0);
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 $4 = __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE7__allocEv($1) | 0;
 $5 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 $6 = invoke_ii(131, $1 | 0) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 $8 = $7 & 1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0 | 0) | 0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
 }
 __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE10deallocateERS3_PS2_j($4, $5, $6);
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactSolverD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 32 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1 + 40 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vii(143, $3 | 0, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $1 + 32 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $1 + 36 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  invoke_vii(143, $9 | 0, $11 | 0);
  $12 = __THREW__;
  __THREW__ = 0;
  $13 = $12 & 1;
  if (!$13) {
   STACKTOP = sp;
   return;
  }
 }
 $14 = ___cxa_find_matching_catch(0 | 0) | 0;
 $15 = tempRet0;
 ___clang_call_terminate($14);
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 10 | 0, 1);
 $0 = $this + 1 | 0;
 {}
 SAFE_HEAP_STORE($0 >> 0 | 0, SAFE_HEAP_LOAD($s >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 1 >> 0 | 0, SAFE_HEAP_LOAD($s + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 2 >> 0 | 0, SAFE_HEAP_LOAD($s + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 3 >> 0 | 0, SAFE_HEAP_LOAD($s + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 4 >> 0 | 0, SAFE_HEAP_LOAD($s + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $1 = $this + 6 | 0;
 SAFE_HEAP_STORE($1 >> 0 | 0, 0 | 0, 1);
 $2 = $this + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __ZN6b2AABB7CombineERKS_S1_($this, $aabb1, $aabb2) {
 $this = $this | 0;
 $aabb1 = $aabb1 | 0;
 $aabb2 = $aabb2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $1 = $aabb1;
 $2 = $aabb2;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __Z5b2MinRK6b2Vec2S1_($3, $6, $7);
 {}
 SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $8 = $5 + 8 | 0;
 $9 = $1;
 $10 = $9 + 8 | 0;
 $11 = $2;
 $12 = $11 + 8 | 0;
 __Z5b2MaxRK6b2Vec2S1_($4, $10, $12);
 {}
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN16b2StackAllocatorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 102400 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == 0;
 do {
  if ($4) {
   $6 = $1 + 102796 | 0;
   $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == 0;
   if ($8) {
    STACKTOP = sp;
    return;
   } else {
    __THREW__ = 0;
    invoke_viiii(142, 5256 | 0, 5180 | 0, 33, 5238 | 0);
    $9 = __THREW__;
    __THREW__ = 0;
    break;
   }
  } else {
   __THREW__ = 0;
   invoke_viiii(142, 5167 | 0, 5180 | 0, 32, 5238 | 0);
   $5 = __THREW__;
   __THREW__ = 0;
  }
 } while (0);
 $10 = ___cxa_find_matching_catch(0 | 0) | 0;
 $11 = tempRet0;
 ___clang_call_terminate($10);
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 8 | 0, 1);
 $0 = $this + 1 | 0;
 $1 = SAFE_HEAP_LOAD($s >> 0 | 0, 1, 1) | 0 | (SAFE_HEAP_LOAD($s + 1 >> 0 | 0, 1, 1) | 0) << 8 | (SAFE_HEAP_LOAD($s + 2 >> 0 | 0, 1, 1) | 0) << 16 | (SAFE_HEAP_LOAD($s + 3 >> 0 | 0, 1, 1) | 0) << 24;
 SAFE_HEAP_STORE($0 >> 0 | 0, $1 & 255 | 0, 1);
 SAFE_HEAP_STORE($0 + 1 >> 0 | 0, $1 >> 8 & 255 | 0, 1);
 SAFE_HEAP_STORE($0 + 2 >> 0 | 0, $1 >> 16 & 255 | 0, 1);
 SAFE_HEAP_STORE($0 + 3 >> 0 | 0, $1 >> 24 | 0, 1);
 $2 = $this + 5 | 0;
 SAFE_HEAP_STORE($2 >> 0 | 0, 0 | 0, 1);
 $3 = $this + 12 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $3 + 4 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $3 + 8 | 0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 return;
}

function __ZN8b2Island3AddEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $0;
 $3 = $2 + 36 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 44 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) < ($6 | 0);
 if ($7) {
  $8 = $1;
  $9 = $2 + 36 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + 1 | 0;
  SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
  $12 = $2 + 12 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13 + ($10 << 2) | 0;
  SAFE_HEAP_STORE($14 | 0, $8 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(7826 | 0, 7774 | 0, 62, 7822 | 0);
 }
}

function __ZN13MouseCallbackC2Eff($this, $qx, $qy) {
 $this = $this | 0;
 $qx = +$qx;
 $qy = +$qy;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $qx;
 $2 = $qy;
 $5 = $0;
 __ZN15b2QueryCallbackC2Ev($5);
 $6 = 764;
 SAFE_HEAP_STORE($5 | 0, $6 | 0, 4);
 $7 = $5 + 4 | 0;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $8 = $5 + 8 | 0;
 $9 = $1;
 $10 = $2;
 __THREW__ = 0;
 invoke_vidd(97, $8 | 0, +$9, +$10);
 $11 = __THREW__;
 __THREW__ = 0;
 $12 = $11 & 1;
 if ($12) {
  $13 = ___cxa_find_matching_catch() | 0;
  $14 = tempRet0;
  $3 = $13;
  $4 = $14;
  __ZN15b2QueryCallbackD2Ev($5);
  $15 = $3;
  $16 = $4;
  ___resumeException($15 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($__str >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if ($2) {
  {}
  SAFE_HEAP_STORE($this | 0, SAFE_HEAP_LOAD($__str | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($this + 4 | 0, SAFE_HEAP_LOAD($__str + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
  SAFE_HEAP_STORE($this + 8 | 0, SAFE_HEAP_LOAD($__str + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 } else {
  $3 = $__str + 8 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = $__str + 4 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $4, $6);
 }
 return;
}

function __ZN8b2Island3AddEP7b2Joint($this, $joint) {
 $this = $this | 0;
 $joint = $joint | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $joint;
 $2 = $0;
 $3 = $2 + 32 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 48 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($4 | 0) < ($6 | 0);
 if ($7) {
  $8 = $1;
  $9 = $2 + 32 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + 1 | 0;
  SAFE_HEAP_STORE($9 | 0, $11 | 0, 4);
  $12 = $2 + 16 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13 + ($10 << 2) | 0;
  SAFE_HEAP_STORE($14 | 0, $8 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(7743 | 0, 7774 | 0, 68, 7822 | 0);
 }
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 } else {
  $3 = $this + 8 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  $6 = $5 + 28 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($7 | 0, 255 | 0) | 0) & 255]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN19b2WorldQueryWrapper13QueryCallbackEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1;
 $5 = __ZNK12b2BroadPhase11GetUserDataEi($3, $4) | 0;
 $proxy = $5;
 $6 = $2 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $proxy;
 $12 = $11 + 16 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($10 | 0, 255 | 0) | 0) & 255]($7, $13) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNK13b2DynamicTree11GetUserDataEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = 0 <= ($3 | 0);
 if (!$4) {
  ___assert_fail(4174 | 0, 7545 | 0, 158, 7610 | 0);
 }
 $5 = $1;
 $6 = $2 + 12 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($5 | 0) < ($7 | 0);
 if ($8) {
  $9 = $1;
  $10 = $2 + 4 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = $11 + ($9 * 36 | 0) | 0;
  $13 = $12 + 16 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  ___assert_fail(4174 | 0, 7545 | 0, 158, 7610 | 0);
 }
 return 0 | 0;
}

function __ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf($this, $massData, $density) {
 $this = $this | 0;
 $massData = $massData | 0;
 $density = +$density;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 8 | 0;
 $4 = sp;
 $0 = $this;
 $1 = $massData;
 $2 = $density;
 $5 = $0;
 $6 = $1;
 SAFE_HEAP_STORE_D($6 | 0, +(0.0), 4);
 $7 = $1;
 $8 = $7 + 4 | 0;
 $9 = $5 + 12 | 0;
 $10 = $5 + 20 | 0;
 __ZplRK6b2Vec2S1_($4, $9, $10);
 __ZmlfRK6b2Vec2($3, .5, $4);
 {}
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($3 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $11 = $1;
 $12 = $11 + 12 | 0;
 SAFE_HEAP_STORE_D($12 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZN12b2EPColliderC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13b2TempPolygonC2Ev($1);
 $2 = $1 + 132 | 0;
 __ZN11b2TransformC2Ev($2);
 $3 = $1 + 148 | 0;
 __ZN6b2Vec2C2Ev($3);
 $4 = $1 + 156 | 0;
 __ZN6b2Vec2C2Ev($4);
 $5 = $1 + 164 | 0;
 __ZN6b2Vec2C2Ev($5);
 $6 = $1 + 172 | 0;
 __ZN6b2Vec2C2Ev($6);
 $7 = $1 + 180 | 0;
 __ZN6b2Vec2C2Ev($7);
 $8 = $1 + 188 | 0;
 __ZN6b2Vec2C2Ev($8);
 $9 = $1 + 196 | 0;
 __ZN6b2Vec2C2Ev($9);
 $10 = $1 + 204 | 0;
 __ZN6b2Vec2C2Ev($10);
 $11 = $1 + 212 | 0;
 __ZN6b2Vec2C2Ev($11);
 $12 = $1 + 228 | 0;
 __ZN6b2Vec2C2Ev($12);
 $13 = $1 + 236 | 0;
 __ZN6b2Vec2C2Ev($13);
 STACKTOP = sp;
 return;
}

function __ZN12b2BroadPhaseD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = $3 + 32 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vi(141, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if (!$7) {
  $8 = $3 + 44 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  __THREW__ = 0;
  invoke_vi(141, $9 | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  $11 = $10 & 1;
  if (!$11) {
   __ZN13b2DynamicTreeD2Ev($3);
   STACKTOP = sp;
   return;
  }
 }
 $12 = ___cxa_find_matching_catch(0 | 0) | 0;
 $13 = tempRet0;
 $1 = $12;
 $2 = $13;
 __ZN13b2DynamicTreeD2Ev($3);
 $14 = $1;
 ___clang_call_terminate($14);
}

function __ZN6b2Body20SynchronizeTransformEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 8 | 0;
 $2 = sp;
 $0 = $this;
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = $4 + 8 | 0;
 $6 = $3 + 28 | 0;
 $7 = $6 + 28 | 0;
 $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
 __ZN5b2Rot3SetEf($5, $8);
 $9 = $3 + 12 | 0;
 $10 = $3 + 28 | 0;
 $11 = $10 + 16 | 0;
 $12 = $3 + 12 | 0;
 $13 = $12 + 8 | 0;
 $14 = $3 + 28 | 0;
 __Z5b2MulRK5b2RotRK6b2Vec2($2, $13, $14);
 __ZmiRK6b2Vec2S1_($1, $11, $2);
 {}
 SAFE_HEAP_STORE($9 | 0, SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($9 + 4 | 0, SAFE_HEAP_LOAD($1 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = $4 + 48 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN9b2Fixture8GetShapeEv($7) | 0;
 $9 = $2;
 $10 = $4 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = __ZN9b2Fixture8GetShapeEv($11) | 0;
 $13 = $3;
 __Z25b2CollidePolygonAndCircleP10b2ManifoldPK14b2PolygonShapeRK11b2TransformPK13b2CircleShapeS6_($5, $8, $9, $12, $13);
 STACKTOP = sp;
 return;
}

function __ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = $4 + 48 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN9b2Fixture8GetShapeEv($7) | 0;
 $9 = $2;
 $10 = $4 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = __ZN9b2Fixture8GetShapeEv($11) | 0;
 $13 = $3;
 __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($5, $8, $9, $12, $13);
 STACKTOP = sp;
 return;
}

function __ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = $4 + 48 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN9b2Fixture8GetShapeEv($7) | 0;
 $9 = $2;
 $10 = $4 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = __ZN9b2Fixture8GetShapeEv($11) | 0;
 $13 = $3;
 __Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_($5, $8, $9, $12, $13);
 STACKTOP = sp;
 return;
}

function __ZN9b2Contact19InitializeRegistersEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(199, 200, 0, 0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(201, 202, 2, 0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(203, 204, 2, 2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(205, 206, 1, 0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(207, 208, 1, 2);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(209, 210, 3, 0);
 __ZN9b2Contact7AddTypeEPFPS_P9b2FixtureiS2_iP16b2BlockAllocatorEPFvS0_S4_EN7b2Shape4TypeESA_(211, 212, 3, 2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__14moveIRNS_17__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_($3) | 0;
 {}
 SAFE_HEAP_STORE($2 | 0, SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 4 | 0, SAFE_HEAP_LOAD($4 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($2 + 8 | 0, SAFE_HEAP_LOAD($4 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 $5 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv($5);
 STACKTOP = sp;
 return;
}

function __ZN7b2Sweep9NormalizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $twoPi = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $twoPi = 6.2831854820251465;
 $2 = $twoPi;
 $3 = $1 + 24 | 0;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = $twoPi;
 $6 = $4 / $5;
 $7 = +Math_floor(+$6);
 $8 = $2 * $7;
 $d = $8;
 $9 = $d;
 $10 = $1 + 24 | 0;
 $11 = +(+SAFE_HEAP_LOAD_D($10 | 0, 4));
 $12 = $11 - $9;
 SAFE_HEAP_STORE_D($10 | 0, +$12, 4);
 $13 = $d;
 $14 = $1 + 28 | 0;
 $15 = +(+SAFE_HEAP_LOAD_D($14 | 0, 4));
 $16 = $15 - $13;
 SAFE_HEAP_STORE_D($14 | 0, +$16, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $__s;
 $2 = $0;
 __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2Ev($2);
 $3 = $1;
 $4 = ($3 | 0) != (0 | 0);
 if ($4) {
  $5 = $1;
  $6 = $1;
  $7 = __ZNSt3__111char_traitsIcE6lengthEPKc($6) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($2, $5, $7);
  STACKTOP = sp;
  return;
 } else {
  SAFE_HEAP_STORE($vararg_buffer | 0, 2766 | 0, 4);
  _printf(7909, $vararg_buffer) | 0;
  _abort();
 }
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_($__a, $__p, $__args) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 13 | 0;
 $3 = sp + 12 | 0;
 $0 = $__a;
 $1 = $__p;
 $2 = $__args;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = __ZNSt3__17forwardIRKP6b2BodyEEOT_RNS_16remove_referenceIS5_E4typeE($6) | 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE11__constructIS3_JRKS3_EEEvNS_17integral_constantIbLb1EEERS4_PT_DpOT0_($$byval_copy, $4, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = $4 + 48 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN9b2Fixture8GetShapeEv($7) | 0;
 $9 = $2;
 $10 = $4 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = __ZN9b2Fixture8GetShapeEv($11) | 0;
 $13 = $3;
 __Z17b2CollidePolygonsP10b2ManifoldPK14b2PolygonShapeRK11b2TransformS3_S6_($5, $8, $9, $12, $13);
 STACKTOP = sp;
 return;
}

function __ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_($this, $manifold, $xfA, $xfB) {
 $this = $this | 0;
 $manifold = $manifold | 0;
 $xfA = $xfA | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $manifold;
 $2 = $xfA;
 $3 = $xfB;
 $4 = $0;
 $5 = $1;
 $6 = $4 + 48 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = __ZN9b2Fixture8GetShapeEv($7) | 0;
 $9 = $2;
 $10 = $4 + 52 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = __ZN9b2Fixture8GetShapeEv($11) | 0;
 $13 = $3;
 __Z16b2CollideCirclesP10b2ManifoldPK13b2CircleShapeRK11b2TransformS3_S6_($5, $8, $9, $12, $13);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_($__a, $__p, $__args) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 13 | 0;
 $3 = sp + 12 | 0;
 $0 = $__a;
 $1 = $__p;
 $2 = $__args;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = __ZNSt3__17forwardI6SpriteEEOT_RNS_16remove_referenceIS2_E4typeE($6) | 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE11__constructIS2_JS2_EEEvNS_17integral_constantIbLb1EEERS3_PT_DpOT0_($$byval_copy, $4, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZN15b2GrowableStackIiLi256EE3PopEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 1028 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) > 0;
 if ($4) {
  $5 = $1 + 1028 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = $6 + -1 | 0;
  SAFE_HEAP_STORE($5 | 0, $7 | 0, 4);
  $8 = $1 + 1028 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
  $11 = $10 + ($9 << 2) | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  ___assert_fail(7622 | 0, 7634 | 0, 67, 7687 | 0);
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this | 0) == ($__str | 0);
 if (!$0) {
  $1 = SAFE_HEAP_LOAD($__str >> 0 | 0, 1, 0) | 0 | 0;
  $2 = $1 & 1;
  $3 = $2 << 24 >> 24 == 0;
  $4 = $__str + 8 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  $6 = $__str + 1 | 0;
  $7 = $3 ? $6 : $5;
  $8 = $__str + 4 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $1 & 255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $7, $12);
 }
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv($1) | 0;
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($1) | 0;
 $4 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv($1) | 0;
 $5 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv($1) | 0;
 __ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateERS2_Pcj($3, $4, $5);
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
 $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function __ZNSt3__111char_traitsIcE4copyEPcPKcj($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $1;
 $4 = $0;
 $5 = $3 >>> 0 < $4 >>> 0;
 if (!$5) {
  $6 = $1;
  $7 = $0;
  $8 = $2;
  $9 = $7 + $8 | 0;
  $10 = $6 >>> 0 >= $9 >>> 0;
  if (!$10) {
   SAFE_HEAP_STORE($vararg_buffer | 0, 2683 | 0, 4);
   _printf(7909, $vararg_buffer) | 0;
   _abort();
  }
 }
 $11 = $0;
 $12 = $1;
 $13 = $2;
 _memcpy($11 | 0, $12 | 0, $13 | 0) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZN10emscripten8functionIvJffEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 12 | 0;
 $0 = $name;
 $1 = $fn;
 $invoker = 122;
 $2 = $0;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvffEE8getCountEv($args) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvffEE8getTypesEv($args) | 0;
 $5 = $invoker;
 $6 = __ZN10emscripten8internal12getSignatureIvJPFvffEffEEEPKcPFT_DpT0_E($5) | 0;
 $7 = $invoker;
 $8 = $1;
 __embind_register_function($2 | 0, $3 | 0, $4 | 0, $6 | 0, $7 | 0, $8 | 0);
 STACKTOP = sp;
 return;
}

function __ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = __ZN16b2BlockAllocator8AllocateEi($5, 148) | 0;
 $mem = $6;
 $7 = $mem;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN24b2ChainAndPolygonContactC2EP9b2FixtureiS1_i($7, $8, $9, $10, $11);
 STACKTOP = sp;
 return $7 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 SAFE_HEAP_STORE(tempDoublePtr >> 0 | 0, SAFE_HEAP_LOAD(ptr >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 1 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 1 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 2 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 2 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 3 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 3 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 4 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 4 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 5 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 5 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 6 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 6 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 7 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 7 >> 0 | 0, 1, 0) | 0 | 0, 1);
}

function __ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $indexA, $fixtureB, $indexB, $allocator) {
 $fixtureA = $fixtureA | 0;
 $indexA = $indexA | 0;
 $fixtureB = $fixtureB | 0;
 $indexB = $indexB | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $fixtureA;
 $1 = $indexA;
 $2 = $fixtureB;
 $3 = $indexB;
 $4 = $allocator;
 $5 = $4;
 $6 = __ZN16b2BlockAllocator8AllocateEi($5, 148) | 0;
 $mem = $6;
 $7 = $mem;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 __ZN23b2ChainAndCircleContactC2EP9b2FixtureiS1_i($7, $8, $9, $10, $11);
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EEC2ES3_S6_($this, $__t1, $__t2) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 $__t2 = $__t2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $__t2;
 $3 = $0;
 $4 = __ZNSt3__17forwardIPP6b2BodyEEOT_RNS_16remove_referenceIS4_E4typeE($1) | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 $6 = $3 + 4 | 0;
 $7 = $2;
 $8 = __ZNSt3__17forwardIRNS_9allocatorIP6b2BodyEEEEOT_RNS_16remove_referenceIS6_E4typeE($7) | 0;
 SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 {}
 SAFE_HEAP_STORE($this | 0, SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 4 | 0, SAFE_HEAP_LOAD($f + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($this + 8 | 0, SAFE_HEAP_LOAD($f + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($f | 0, 0 | 0, 4);
 $0 = $f + 4 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $f + 8 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $this + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EEC2ES2_S5_($this, $__t1, $__t2) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 $__t2 = $__t2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $__t2;
 $3 = $0;
 $4 = __ZNSt3__17forwardIP6SpriteEEOT_RNS_16remove_referenceIS3_E4typeE($1) | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $5 | 0, 4);
 $6 = $3 + 4 | 0;
 $7 = $2;
 $8 = __ZNSt3__17forwardIRNS_9allocatorI6SpriteEEEEOT_RNS_16remove_referenceIS5_E4typeE($7) | 0;
 SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 12 | 0;
 $0 = $name;
 $1 = $fn;
 $invoker = 121;
 $2 = $0;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($args) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($args) | 0;
 $5 = $invoker;
 $6 = __ZN10emscripten8internal12getSignatureIvJPFvvEEEEPKcPFT_DpT0_E($5) | 0;
 $7 = $invoker;
 $8 = $1;
 __embind_register_function($2 | 0, $3 | 0, $4 | 0, $6 | 0, $7 | 0, $8 | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $args = sp + 12 | 0;
 $0 = $name;
 $1 = $fn;
 $invoker = 120;
 $2 = $0;
 $3 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($args) | 0;
 $4 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($args) | 0;
 $5 = $invoker;
 $6 = __ZN10emscripten8internal12getSignatureIiJPFivEEEEPKcPFT_DpT0_E($5) | 0;
 $7 = $invoker;
 $8 = $1;
 __embind_register_function($2 | 0, $3 | 0, $4 | 0, $6 | 0, $7 | 0, $8 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12b2BroadPhase9MoveProxyEiRK6b2AABBRK6b2Vec2($this, $proxyId, $aabb, $displacement) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 $aabb = $aabb | 0;
 $displacement = $displacement | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $aabb;
 $3 = $displacement;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = __ZN13b2DynamicTree9MoveProxyEiRK6b2AABBRK6b2Vec2($4, $5, $6, $7) | 0;
 $9 = $8 & 1;
 $buffer = $9;
 $10 = $buffer;
 $11 = $10 & 1;
 if (!$11) {
  STACKTOP = sp;
  return;
 }
 $12 = $1;
 __ZN12b2BroadPhase10BufferMoveEi($4, $12);
 STACKTOP = sp;
 return;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $temp = sp;
 $0 = SAFE_HEAP_LOAD($thrown | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($temp | 0, $0 | 0, 4);
 $1 = SAFE_HEAP_LOAD($catchType | 0, 4, 0) | 0 | 0;
 $2 = $1 + 16 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($3 | 0, 255 | 0) | 0) & 255]($catchType, $excpType, $temp) | 0;
 $5 = $4 & 1;
 if ($4) {
  $6 = SAFE_HEAP_LOAD($temp | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($thrown | 0, $6 | 0, 4);
 }
 STACKTOP = sp;
 return $5 | 0;
}

function __Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_($manifold, $edgeA, $xfA, $polygonB, $xfB) {
 $manifold = $manifold | 0;
 $edgeA = $edgeA | 0;
 $xfA = $xfA | 0;
 $polygonB = $polygonB | 0;
 $xfB = $xfB | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $collider = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $collider = sp;
 $0 = $manifold;
 $1 = $edgeA;
 $2 = $xfA;
 $3 = $polygonB;
 $4 = $xfB;
 __ZN12b2EPColliderC2Ev($collider);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN12b2EPCollider7CollideEP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS7_($collider, $5, $6, $7, $8, $9);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEEC2ES3_S6_($this, $__t1, $__t2) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 $__t2 = $__t2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $__t2;
 $3 = $0;
 $4 = __ZNSt3__17forwardIPP6b2BodyEEOT_RNS_16remove_referenceIS4_E4typeE($1) | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2;
 $7 = __ZNSt3__17forwardIRNS_9allocatorIP6b2BodyEEEEOT_RNS_16remove_referenceIS6_E4typeE($6) | 0;
 __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EEC2ES3_S6_($3, $5, $7);
 STACKTOP = sp;
 return;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size | 0) == 0;
 $$size = $0 ? 1 : $size;
 $1 = _malloc($$size) | 0;
 $2 = ($1 | 0) == (0 | 0);
 L1 : do {
  if ($2) {
   while (1) {
    $3 = __ZSt15get_new_handlerv() | 0;
    $4 = ($3 | 0) == (0 | 0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[(SAFE_FT_MASK($3 | 0, 255 | 0) | 0) & 255]();
    $5 = _malloc($$size) | 0;
    $6 = ($5 | 0) == (0 | 0);
    if (!$6) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = ___cxa_allocate_exception(4) | 0;
   SAFE_HEAP_STORE($7 | 0, 1464 | 0, 4);
   ___cxa_throw($7 | 0, 408 | 0, 66 | 0);
  } else {
   $$lcssa = $1;
  }
 } while (0);
 return $$lcssa | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEEC2ES2_S5_($this, $__t1, $__t2) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 $__t2 = $__t2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 4 | 0;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $__t2;
 $3 = $0;
 $4 = __ZNSt3__17forwardIP6SpriteEEOT_RNS_16remove_referenceIS3_E4typeE($1) | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2;
 $7 = __ZNSt3__17forwardIRNS_9allocatorI6SpriteEEEEOT_RNS_16remove_referenceIS5_E4typeE($6) | 0;
 __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EEC2ES2_S5_($3, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(123, $1 | 0);
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
  $4 = $1 + 4 | 0;
  SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
  $5 = $1 + 8 | 0;
  __THREW__ = 0;
  invoke_vii(124, $5 | 0, 0 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  $7 = $6 & 1;
  if (!$7) {
   STACKTOP = sp;
   return;
  }
 }
 $8 = ___cxa_find_matching_catch(0 | 0) | 0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
}

function __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __THREW__ = 0;
 invoke_vi(123, $1 | 0);
 $2 = __THREW__;
 __THREW__ = 0;
 $3 = $2 & 1;
 if (!$3) {
  SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
  $4 = $1 + 4 | 0;
  SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
  $5 = $1 + 8 | 0;
  __THREW__ = 0;
  invoke_vii(125, $5 | 0, 0 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  $7 = $6 & 1;
  if (!$7) {
   STACKTOP = sp;
   return;
  }
 }
 $8 = ___cxa_find_matching_catch(0 | 0) | 0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
}

function __ZN12b2BroadPhase11CreateProxyERK6b2AABBPv($this, $aabb, $userData) {
 $this = $this | 0;
 $aabb = $aabb | 0;
 $userData = $userData | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $proxyId = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $aabb;
 $2 = $userData;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = __ZN13b2DynamicTree11CreateProxyERK6b2AABBPv($3, $4, $5) | 0;
 $proxyId = $6;
 $7 = $3 + 28 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + 1 | 0;
 SAFE_HEAP_STORE($7 | 0, $9 | 0, 4);
 $10 = $proxyId;
 __ZN12b2BroadPhase10BufferMoveEi($3, $10);
 $11 = $proxyId;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 6 | 0, 1);
 $0 = $this + 1 | 0;
 {}
 SAFE_HEAP_STORE($0 >> 0 | 0, SAFE_HEAP_LOAD($s >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 1 >> 0 | 0, SAFE_HEAP_LOAD($s + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($0 + 2 >> 0 | 0, SAFE_HEAP_LOAD($s + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $1 = $this + 4 | 0;
 SAFE_HEAP_STORE($1 >> 0 | 0, 0 | 0, 1);
 $2 = $this + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __Z5b2MinRK6b2Vec2S1_($agg$result, $a, $b) {
 $agg$result = $agg$result | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = +__Z5b2MinIfET_S0_S0_($3, $5);
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = +__Z5b2MinIfET_S0_S0_($9, $12);
 __ZN6b2Vec2C2Eff($agg$result, $6, $13);
 STACKTOP = sp;
 return;
}

function __Z5b2MaxRK6b2Vec2S1_($agg$result, $a, $b) {
 $agg$result = $agg$result | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = +__Z5b2MaxIfET_S0_S0_($3, $5);
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = +__Z5b2MaxIfET_S0_S0_($9, $12);
 __ZN6b2Vec2C2Eff($agg$result, $6, $13);
 STACKTOP = sp;
 return;
}

function __ZNK6b2AABB12GetPerimeterEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $wx = 0.0, $wy = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $5 = $3 - $4;
 $wx = $5;
 $6 = $1 + 8 | 0;
 $7 = $6 + 4 | 0;
 $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
 $9 = $1 + 4 | 0;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = $8 - $10;
 $wy = $11;
 $12 = $wx;
 $13 = $wy;
 $14 = $12 + $13;
 $15 = 2.0 * $14;
 STACKTOP = sp;
 return +$15;
}

function __ZNK13b2DynamicTree10GetFatAABBEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = 0 <= ($3 | 0);
 if ($4) {
  $5 = $1;
  $6 = $2 + 12 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = ($5 | 0) < ($7 | 0);
  if ($8) {
   $9 = $1;
   $10 = $2 + 4 | 0;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $12 = $11 + ($9 * 36 | 0) | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
 }
 ___assert_fail(4174 | 0, 7545 | 0, 164, 7599 | 0);
 return 0 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE8max_sizeERKS4_($__a) {
 $__a = $__a | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 5 | 0;
 $1 = sp + 4 | 0;
 $0 = $__a;
 $2 = $0;
 __THREW__ = 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $3 = invoke_iii(138, $$byval_copy | 0, $2 | 0) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0 | 0) | 0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
 } else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE8max_sizeERKS3_($__a) {
 $__a = $__a | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 5 | 0;
 $1 = sp + 4 | 0;
 $0 = $__a;
 $2 = $0;
 __THREW__ = 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $3 = invoke_iii(133, $$byval_copy | 0, $2 | 0) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0 | 0) | 0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
 } else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2ES5_($this, $__t2) {
 $this = $this | 0;
 $__t2 = $__t2 | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 5 | 0;
 $1 = sp + 4 | 0;
 $0 = $this;
 $2 = $0;
 __ZNSt3__17forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE($__t2) | 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EEC2ES5_($2, $$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEEixEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $this;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 $4 = __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($2) | 0;
 $5 = $3 >>> 0 < $4 >>> 0;
 if ($5) {
  $6 = $1;
  $7 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $8 = $7 + ($6 * 12 | 0) | 0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  SAFE_HEAP_STORE($vararg_buffer | 0, 2816 | 0, 4);
  _printf(7909, $vararg_buffer) | 0;
  _abort();
 }
 return 0 | 0;
}

function __ZNK15b2DistanceProxy9GetVertexEi($this, $index) {
 $this = $this | 0;
 $index = $index | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = 0 <= ($3 | 0);
 if ($4) {
  $5 = $1;
  $6 = $2 + 20 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = ($5 | 0) < ($7 | 0);
  if ($8) {
   $9 = $1;
   $10 = $2 + 16 | 0;
   $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   $12 = $11 + ($9 << 3) | 0;
   STACKTOP = sp;
   return $12 | 0;
  }
 }
 ___assert_fail(8040 | 0, 8070 | 0, 103, 8121 | 0);
 return 0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 20 | 0, 1);
 $0 = $this + 1 | 0;
 dest = $0;
 src = $s;
 stop = dest + 10 | 0;
 do {
  SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $1 = $this + 11 | 0;
 SAFE_HEAP_STORE($1 >> 0 | 0, 0 | 0, 1);
 $2 = $this + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_($__a) {
 $__a = $__a | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 5 | 0;
 $1 = sp + 4 | 0;
 $0 = $__a;
 $2 = $0;
 __THREW__ = 0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $3 = invoke_iii(127, $$byval_copy | 0, $2 | 0) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0 | 0) | 0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
 } else {
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this >> 0 | 0, 18 | 0, 1);
 $0 = $this + 1 | 0;
 dest = $0;
 src = $s;
 stop = dest + 9 | 0;
 do {
  SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $1 = $this + 10 | 0;
 SAFE_HEAP_STORE($1 >> 0 | 0, 0 | 0, 1);
 $2 = $this + 12 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv($1) | 0;
 if ($2) {
  $3 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv($1) | 0;
  $5 = $3;
  STACKTOP = sp;
  return $5 | 0;
 } else {
  $4 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv($1) | 0;
  $5 = $4;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__zeroEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $__a = $2;
 $__i = 0;
 while (1) {
  $3 = $__i;
  $4 = $3 >>> 0 < 3;
  if (!$4) {
   break;
  }
  $5 = $__i;
  $6 = $__a;
  $7 = $6 + ($5 << 2) | 0;
  SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
  $8 = $__i;
  $9 = $8 + 1 | 0;
  $__i = $9;
 }
 STACKTOP = sp;
 return;
}

function __ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = __ZN16b2BlockAllocator8AllocateEi($7, 148) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN25b2PolygonAndCircleContactC2EP9b2FixtureS1_($9, $10, $11);
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = __ZN16b2BlockAllocator8AllocateEi($7, 148) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN23b2EdgeAndPolygonContactC2EP9b2FixtureS1_($9, $10, $11);
 STACKTOP = sp;
 return $9 | 0;
}

function __ZN15b2GrowableStackIiLi256EED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $1 + 4 | 0;
 $4 = ($2 | 0) != ($3 | 0);
 if (!$4) {
  STACKTOP = sp;
  return;
 }
 $5 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vi(141, $5 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 $7 = $6 & 1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(0 | 0) | 0;
  $9 = tempRet0;
  ___clang_call_terminate($8);
 }
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = __ZN16b2BlockAllocator8AllocateEi($7, 148) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN22b2EdgeAndCircleContactC2EP9b2FixtureS1_($9, $10, $11);
 STACKTOP = sp;
 return $9 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4);
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZN7b2World11ClearForcesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $body = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 102952 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $body = $3;
 while (1) {
  $4 = $body;
  $5 = ($4 | 0) != (0 | 0);
  if (!$5) {
   break;
  }
  $6 = $body;
  $7 = $6 + 76 | 0;
  __ZN6b2Vec27SetZeroEv($7);
  $8 = $body;
  $9 = $8 + 84 | 0;
  SAFE_HEAP_STORE_D($9 | 0, +(0.0), 4);
  $10 = $body;
  $11 = __ZN6b2Body7GetNextEv($10) | 0;
  $body = $11;
 }
 STACKTOP = sp;
 return;
}

function __ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = __ZN16b2BlockAllocator8AllocateEi($7, 148) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN16b2PolygonContactC2EP9b2FixtureS1_($9, $10, $11);
 STACKTOP = sp;
 return $9 | 0;
}

function __ZplRK6b2Vec2S1_($agg$result, $a, $b) {
 $agg$result = $agg$result | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 + $5;
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 + $12;
 __ZN6b2Vec2C2Eff($agg$result, $6, $13);
 STACKTOP = sp;
 return;
}

function __ZmiRK6b2Vec2S1_($agg$result, $a, $b) {
 $agg$result = $agg$result | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 - $5;
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 - $12;
 __ZN6b2Vec2C2Eff($agg$result, $6, $13);
 STACKTOP = sp;
 return;
}

function __ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator($fixtureA, $0, $fixtureB, $1, $allocator) {
 $fixtureA = $fixtureA | 0;
 $0 = $0 | 0;
 $fixtureB = $fixtureB | 0;
 $1 = $1 | 0;
 $allocator = $allocator | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = $fixtureA;
 $3 = $0;
 $4 = $fixtureB;
 $5 = $1;
 $6 = $allocator;
 $7 = $6;
 $8 = __ZN16b2BlockAllocator8AllocateEi($7, 148) | 0;
 $mem = $8;
 $9 = $mem;
 $10 = $2;
 $11 = $4;
 __ZN15b2CircleContactC2EP9b2FixtureS1_($9, $10, $11);
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNK12b2BroadPhase11TestOverlapEii($this, $proxyIdA, $proxyIdB) {
 $this = $this | 0;
 $proxyIdA = $proxyIdA | 0;
 $proxyIdB = $proxyIdB | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aabbA = 0, $aabbB = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyIdA;
 $2 = $proxyIdB;
 $3 = $0;
 $4 = $1;
 $5 = __ZNK13b2DynamicTree10GetFatAABBEi($3, $4) | 0;
 $aabbA = $5;
 $6 = $2;
 $7 = __ZNK13b2DynamicTree10GetFatAABBEi($3, $6) | 0;
 $aabbB = $7;
 $8 = $aabbA;
 $9 = $aabbB;
 $10 = __Z13b2TestOverlapRK6b2AABBS1_($8, $9) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $wrapper = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $wrapper = sp;
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $3 = $0;
 $4 = $3 + 102872 | 0;
 SAFE_HEAP_STORE($wrapper | 0, $4 | 0, 4);
 $5 = $1;
 $6 = $wrapper + 4 | 0;
 SAFE_HEAP_STORE($6 | 0, $5 | 0, 4);
 $7 = $3 + 102872 | 0;
 $8 = $2;
 __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($7, $wrapper, $8);
 STACKTOP = sp;
 return;
}

function __ZN9b2FixtureC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 32 | 0;
 __ZN8b2FilterC2Ev($2);
 $3 = $1 + 40 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $1 + 4 | 0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 $6 = $1 + 24 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = $1 + 28 | 0;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $8 = $1 + 12 | 0;
 SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE_D($1 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE17__destruct_at_endEPS2_($this, $__new_last) {
 $this = $this | 0;
 $__new_last = $__new_last | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $this;
 $1 = $__new_last;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE17__destruct_at_endEPS2_NS_17integral_constantIbLb0EEE($3, $4, $$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE17__destruct_at_endEPS1_($this, $__new_last) {
 $this = $this | 0;
 $__new_last = $__new_last | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $this;
 $1 = $__new_last;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE17__destruct_at_endEPS1_NS_17integral_constantIbLb0EEE($3, $4, $$byval_copy);
 STACKTOP = sp;
 return;
}

function __ZN6b2Vec2pLERKS_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $6 = $5 + $4;
 SAFE_HEAP_STORE_D($2 | 0, +$6, 4);
 $7 = $1;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $2 + 4 | 0;
 $11 = +(+SAFE_HEAP_LOAD_D($10 | 0, 4));
 $12 = $11 + $9;
 SAFE_HEAP_STORE_D($10 | 0, +$12, 4);
 STACKTOP = sp;
 return;
}

function __ZN6b2Vec2mIERKS_($this, $v) {
 $this = $this | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $6 = $5 - $4;
 SAFE_HEAP_STORE_D($2 | 0, +$6, 4);
 $7 = $1;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $2 + 4 | 0;
 $11 = +(+SAFE_HEAP_LOAD_D($10 | 0, 4));
 $12 = $11 - $9;
 SAFE_HEAP_STORE_D($10 | 0, +$12, 4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(126, $3 | 0, 11114 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch() | 0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  ___cxa_free_exception($3 | 0);
  $8 = $1;
  $9 = $2;
  ___resumeException($8 | 0);
 } else {
  ___cxa_throw($3 | 0, 448 | 0, 69 | 0);
 }
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $3 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(126, $3 | 0, 2809 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch() | 0;
  $7 = tempRet0;
  $1 = $6;
  $2 = $7;
  ___cxa_free_exception($3 | 0);
  $8 = $1;
  $9 = $2;
  ___resumeException($8 | 0);
 } else {
  ___cxa_throw($3 | 0, 448 | 0, 69 | 0);
 }
}

function __ZNK9b2Fixture11GetMassDataEP10b2MassData($this, $massData) {
 $this = $this | 0;
 $massData = $massData | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $massData;
 $2 = $0;
 $3 = $2 + 12 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 + 28 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $1;
 $9 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 FUNCTION_TABLE_viid[(SAFE_FT_MASK($7 | 0, 63 | 0) | 0) & 63]($4, $8, $9);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionERKS2_($agg$result, $__a) {
 $agg$result = $agg$result | 0;
 $__a = $__a | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 5 | 0;
 $1 = sp + 4 | 0;
 $0 = $__a;
 $2 = $0;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__116allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_($agg$result, $$byval_copy, $2);
 STACKTOP = sp;
 return;
}

function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 688;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ___muldi3($2 | 0, $5 | 0, 1284865837, 1481765933) | 0;
 $7 = tempRet0;
 $8 = _i64Add($6 | 0, $7 | 0, 1, 0) | 0;
 $9 = tempRet0;
 $10 = 688;
 $11 = $10;
 SAFE_HEAP_STORE($11 | 0, $8 | 0, 4);
 $12 = $10 + 4 | 0;
 $13 = $12;
 SAFE_HEAP_STORE($13 | 0, $9 | 0, 4);
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 $15 = tempRet0;
 return $14 | 0;
}

function __ZN12b2FixtureDefC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 22 | 0;
 __ZN8b2FilterC2Ev($2);
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $3 = $1 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 8 | 0;
 SAFE_HEAP_STORE_D($4 | 0, +(.20000000298023224), 4);
 $5 = $1 + 12 | 0;
 SAFE_HEAP_STORE_D($5 | 0, +(0.0), 4);
 $6 = $1 + 16 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +(0.0), 4);
 $7 = $1 + 20 | 0;
 SAFE_HEAP_STORE($7 >> 0 | 0, 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function __ZN13b2TempPolygonC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 64 | 0;
 $3 = $1;
 while (1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = $3 + 8 | 0;
  $5 = ($4 | 0) == ($2 | 0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = $1 + 64 | 0;
 $7 = $6 + 64 | 0;
 $8 = $6;
 while (1) {
  __ZN6b2Vec2C2Ev($8);
  $9 = $8 + 8 | 0;
  $10 = ($9 | 0) == ($7 | 0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE11__constructIS3_JRKS3_EEEvNS_17integral_constantIbLb1EEERS4_PT_DpOT0_($0, $__a, $__p, $__args) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $__p;
 $3 = $__args;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = __ZNSt3__17forwardIRKP6b2BodyEEOT_RNS_16remove_referenceIS5_E4typeE($6) | 0;
 __ZNSt3__19allocatorIP6b2BodyE9constructIS2_JRKS2_EEEvPT_DpOT0_($4, $5, $7);
 STACKTOP = sp;
 return;
}

function __Z7b2CrossRK6b2Vec2S1_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = $4 + 4 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $3 * $6;
 $8 = $0;
 $9 = $8 + 4 | 0;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = $1;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $10 * $12;
 $14 = $7 - $13;
 STACKTOP = sp;
 return +$14;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 }
 return;
}

function __Z5b2DotRK6b2Vec2S1_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $4 = $1;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $3 * $5;
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $1;
 $11 = $10 + 4 | 0;
 $12 = +(+SAFE_HEAP_LOAD_D($11 | 0, 4));
 $13 = $9 * $12;
 $14 = $6 + $13;
 STACKTOP = sp;
 return +$14;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE7destroyIS3_EEvRS4_PT_($__a, $__p) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $__a;
 $1 = $__p;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE9__destroyIS3_EEvNS_17integral_constantIbLb1EEERS4_PT_($$byval_copy, $3, $4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE11__constructIS2_JS2_EEEvNS_17integral_constantIbLb1EEERS3_PT_DpOT0_($0, $__a, $__p, $__args) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $__p;
 $3 = $__args;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = __ZNSt3__17forwardI6SpriteEEOT_RNS_16remove_referenceIS2_E4typeE($6) | 0;
 __ZNSt3__19allocatorI6SpriteE9constructIS1_JS1_EEEvPT_DpOT0_($4, $5, $7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE7destroyIS2_EEvRS3_PT_($__a, $__p) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $__a;
 $1 = $__p;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9__destroyIS2_EEvNS_17integral_constantIbLb1EEERS3_PT_($$byval_copy, $3, $4);
 STACKTOP = sp;
 return;
}

function __ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN6b2Body13CreateFixtureEPK7b2Shapef($this, $shape, $density) {
 $this = $this | 0;
 $shape = $shape | 0;
 $density = +$density;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $def = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $def = sp;
 $0 = $this;
 $1 = $shape;
 $2 = $density;
 $3 = $0;
 __ZN12b2FixtureDefC2Ev($def);
 $4 = $1;
 SAFE_HEAP_STORE($def | 0, $4 | 0, 4);
 $5 = $2;
 $6 = $def + 16 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +$5, 4);
 $7 = __ZN6b2Body13CreateFixtureEPK12b2FixtureDef($3, $def) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator($contact, $allocator) {
 $contact = $contact | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $contact;
 $1 = $allocator;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($2);
 $6 = $1;
 $7 = $0;
 __ZN16b2BlockAllocator4FreeEPvi($6, $7, 148);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIvJffEE6invokeEPFvffEff($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = +$args;
 $args1 = +$args1;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $0;
 $4 = $1;
 $5 = +__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($4);
 $6 = $2;
 $7 = +__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($6);
 FUNCTION_TABLE_vdd[(SAFE_FT_MASK($3 | 0, 127 | 0) | 0) & 127]($5, $7);
 STACKTOP = sp;
 return;
}

function __ZN15b2DistanceProxyC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = $1;
 while (1) {
  __ZN6b2Vec2C2Ev($3);
  $4 = $3 + 8 | 0;
  $5 = ($4 | 0) == ($2 | 0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = $1 + 16 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = $1 + 20 | 0;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $8 = $1 + 24 | 0;
 SAFE_HEAP_STORE_D($8 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__14sortIP6b2PairPFbRKS1_S4_EEEvT_S7_T0_($__first, $__last, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $2 = sp + 4 | 0;
 $__c = sp;
 $0 = $__first;
 $1 = $__last;
 SAFE_HEAP_STORE($2 | 0, $__comp | 0, 4);
 __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEC2ERS5_($__c, $2);
 $3 = $0;
 $4 = $1;
 __ZNSt3__16__sortIRNS_12__debug_lessIPFbRK6b2PairS4_EEEPS2_EEvT0_SA_T_($3, $4, $__c);
 STACKTOP = sp;
 return;
}

function __ZN9b2Contact10SetEnabledEb($this, $flag) {
 $this = $this | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $2 = $flag & 1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4 & 1;
 $6 = $3 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 if ($5) {
  $8 = $7 | 4;
  SAFE_HEAP_STORE($6 | 0, $8 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $9 = $7 & -5;
  SAFE_HEAP_STORE($6 | 0, $9 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this >>> 0 <= $p >>> 0;
 $1 = $this + 4096 | 0;
 $2 = $1 >>> 0 >= $p >>> 0;
 $3 = $0 & $2;
 if ($3) {
  $4 = $n + 15 | 0;
  $5 = $4 & -16;
  $6 = $p + $5 | 0;
  $7 = $this + 4096 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = ($6 | 0) == ($8 | 0);
  if ($9) {
   SAFE_HEAP_STORE($7 | 0, $p | 0, 4);
  }
 } else {
  _free($p);
 }
 return;
}

function __Z7b2CrossfRK6b2Vec2($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = +$s;
 $a = $a | 0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = -$2;
 $4 = $1;
 $5 = $4 + 4 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $3 * $6;
 $8 = $0;
 $9 = $1;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result, $7, $11);
 STACKTOP = sp;
 return;
}

function __Z7b2CrossRK6b2Vec2f($agg$result, $a, $s) {
 $agg$result = $agg$result | 0;
 $a = $a | 0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $s;
 $2 = $1;
 $3 = $0;
 $4 = $3 + 4 | 0;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = $2 * $5;
 $7 = $1;
 $8 = -$7;
 $9 = $0;
 $10 = +(+SAFE_HEAP_LOAD_D($9 | 0, 4));
 $11 = $8 * $10;
 __ZN6b2Vec2C2Eff($agg$result, $6, $11);
 STACKTOP = sp;
 return;
}

function __ZNK6b2Vec26LengthEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $3 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $4 = $2 * $3;
 $5 = $1 + 4 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $1 + 4 | 0;
 $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = +Math_sqrt(+$10);
 STACKTOP = sp;
 return +$11;
}

function __ZNK14b2PolygonShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = __ZN16b2BlockAllocator8AllocateEi($3, 152) | 0;
 $mem = $4;
 $5 = $mem;
 __ZN14b2PolygonShapeC2Ev($5);
 $clone = $5;
 $6 = $clone;
 __ZN14b2PolygonShapeaSERKS_($6, $2) | 0;
 $7 = $clone;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EEC2ES3_($this, $__t1) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $0;
 __ZNSt3__19allocatorIP6b2BodyEC2Ev($2);
 $3 = __ZNSt3__17forwardIPP6b2BodyEEOT_RNS_16remove_referenceIS4_E4typeE($1) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEEC2ES3_($this, $__t1) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $0;
 $3 = __ZNSt3__17forwardIPP6b2BodyEEOT_RNS_16remove_referenceIS4_E4typeE($1) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EEC2ES3_($2, $4);
 STACKTOP = sp;
 return;
}

function __ZNK13b2CircleShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = __ZN16b2BlockAllocator8AllocateEi($3, 20) | 0;
 $mem = $4;
 $5 = $mem;
 __ZN13b2CircleShapeC2Ev($5);
 $clone = $5;
 $6 = $clone;
 __ZN13b2CircleShapeaSERKS_($6, $2) | 0;
 $7 = $clone;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EEC2ES2_($this, $__t1) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $0;
 __ZNSt3__19allocatorI6SpriteEC2Ev($2);
 $3 = __ZNSt3__17forwardIP6SpriteEEOT_RNS_16remove_referenceIS3_E4typeE($1) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEEC2ES2_($this, $__t1) {
 $this = $this | 0;
 $__t1 = $__t1 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $this;
 SAFE_HEAP_STORE($1 | 0, $__t1 | 0, 4);
 $2 = $0;
 $3 = __ZNSt3__17forwardIP6SpriteEEOT_RNS_16remove_referenceIS3_E4typeE($1) | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EEC2ES2_($2, $4);
 STACKTOP = sp;
 return;
}

function __ZNK11b2EdgeShape5CloneEP16b2BlockAllocator($this, $allocator) {
 $this = $this | 0;
 $allocator = $allocator | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $clone = 0, $mem = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $allocator;
 $2 = $0;
 $3 = $1;
 $4 = __ZN16b2BlockAllocator8AllocateEi($3, 48) | 0;
 $mem = $4;
 $5 = $mem;
 __ZN11b2EdgeShapeC2Ev($5);
 $clone = $5;
 $6 = $clone;
 __ZN11b2EdgeShapeaSERKS_($6, $2) | 0;
 $7 = $clone;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 32 | 0;
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0);
 $1 = $this + 16 | 0;
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($1);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 return;
}

function __ZN16b2ContactManagerC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12b2BroadPhaseC2Ev($1);
 $2 = $1 + 60 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $1 + 64 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 68 | 0;
 SAFE_HEAP_STORE($4 | 0, 940 | 0, 4);
 $5 = $1 + 72 | 0;
 SAFE_HEAP_STORE($5 | 0, 944 | 0, 4);
 $6 = $1 + 76 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n + 15 | 0;
 $1 = $0 & -16;
 $2 = $this + 4096 | 0;
 $3 = $this + 4096 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $7 >>> 0 < $1 >>> 0;
 if ($8) {
  $10 = _malloc($1) | 0;
  $$0 = $10;
 } else {
  $9 = $4 + $1 | 0;
  SAFE_HEAP_STORE($3 | 0, $9 | 0, 4);
  $$0 = $4;
 }
 return $$0 | 0;
}

function __ZNSt3__19allocatorIP6b2BodyE10deallocateEPS2_j($this, $__p, $0) {
 $this = $this | 0;
 $__p = $__p | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__p;
 $3 = $0;
 $4 = $2;
 __THREW__ = 0;
 invoke_vi(128, $4 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(0 | 0) | 0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE9__end_capEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 4 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__19allocatorI6SpriteE10deallocateEPS1_j($this, $__p, $0) {
 $this = $this | 0;
 $__p = $__p | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__p;
 $3 = $0;
 $4 = $2;
 __THREW__ = 0;
 invoke_vi(128, $4 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(0 | 0) | 0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE9__end_capEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 12 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE16__set_short_sizeEj($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $0;
 $3 = $1;
 $4 = $3 << 1;
 $5 = $4 & 255;
 $6 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($2) | 0;
 SAFE_HEAP_STORE($6 >> 0 | 0, $5 | 0, 1);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE9__end_capEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 4 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE9__end_capEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 12 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNSt3__19allocatorIP6b2BodyE9constructIS2_JRKS2_EEEvPT_DpOT0_($this, $__p, $__args) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__p;
 $2 = $__args;
 $3 = $1;
 $4 = $2;
 $5 = __ZNSt3__17forwardIRKP6b2BodyEEOT_RNS_16remove_referenceIS5_E4typeE($4) | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($3 | 0, $6 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19allocatorIcE10deallocateEPcj($this, $__p, $0) {
 $this = $this | 0;
 $__p = $__p | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__p;
 $3 = $0;
 $4 = $2;
 __THREW__ = 0;
 invoke_vi(128, $4 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 $6 = $5 & 1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(0 | 0) | 0;
  $8 = tempRet0;
  ___clang_call_terminate($7);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNK6b2Vec213LengthSquaredEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $3 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $4 = $2 * $3;
 $5 = $1 + 4 | 0;
 $6 = +(+SAFE_HEAP_LOAD_D($5 | 0, 4));
 $7 = $1 + 4 | 0;
 $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
 $9 = $6 * $8;
 $10 = $4 + $9;
 STACKTOP = sp;
 return +$10;
}

function __ZmlfRK6b2Vec2($agg$result, $s, $a) {
 $agg$result = $agg$result | 0;
 $s = +$s;
 $a = $a | 0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $s;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +(+SAFE_HEAP_LOAD_D($3 | 0, 4));
 $5 = $2 * $4;
 $6 = $0;
 $7 = $1;
 $8 = $7 + 4 | 0;
 $9 = +(+SAFE_HEAP_LOAD_D($8 | 0, 4));
 $10 = $6 * $9;
 __ZN6b2Vec2C2Eff($agg$result, $5, $10);
 STACKTOP = sp;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $f + 20 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >>> 0 > $l >>> 0;
 $l$ = $7 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 $8 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $9 = $8 + $l$ | 0;
 SAFE_HEAP_STORE($2 | 0, $9 | 0, 4);
 return $l | 0;
}

function __ZNSt3__13minIjEERKT_S3_S3_($__a, $__b) {
 $__a = $__a | 0;
 $__b = $__b | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $__a;
 $1 = $__b;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $5 = __ZNSt3__13minIjNS_6__lessIjjEEEERKT_S5_S5_T0_($3, $4, $$byval_copy) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__13maxIjEERKT_S3_S3_($__a, $__b) {
 $__a = $__a | 0;
 $__b = $__b | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy = sp + 9 | 0;
 $2 = sp + 8 | 0;
 $0 = $__a;
 $1 = $__b;
 $3 = $0;
 $4 = $1;
 {}
 SAFE_HEAP_STORE($$byval_copy >> 0 | 0, SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $5 = __ZNSt3__13maxIjNS_6__lessIjjEEEERKT_S5_S5_T0_($3, $4, $$byval_copy) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEj($__s) {
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = $1 >>> 0 < 11;
 if ($2) {
  $7 = 11;
 } else {
  $3 = $0;
  $4 = $3 + 1 | 0;
  $5 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itILj16EEEjj($4) | 0;
  $7 = $5;
 }
 $6 = $7 - 1 | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $5 = $4 & 1;
 $6 = ($5 | 0) != 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $info + 8 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($this | 0) == ($1 | 0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN13b2CircleShapeaSERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN7b2ShapeaSERKS_($3, $4) | 0;
 $5 = $3 + 12 | 0;
 $6 = $2;
 $7 = $6 + 12 | 0;
 {}
 SAFE_HEAP_STORE($5 | 0, SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($5 + 4 | 0, SAFE_HEAP_LOAD($7 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIsE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIsE3minEv() | 0;
 $4 = $3 << 16 >> 16;
 $5 = __ZNSt3__114numeric_limitsIsE3maxEv() | 0;
 $6 = $5 << 16 >> 16;
 __embind_register_integer($1 | 0, $2 | 0, 2, $4 | 0, $6 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIcE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIcE3minEv() | 0;
 $4 = $3 << 24 >> 24;
 $5 = __ZNSt3__114numeric_limitsIcE3maxEv() | 0;
 $6 = $5 << 24 >> 24;
 __embind_register_integer($1 | 0, $2 | 0, 1, $4 | 0, $6 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIaE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIaE3minEv() | 0;
 $4 = $3 << 24 >> 24;
 $5 = __ZNSt3__114numeric_limitsIaE3maxEv() | 0;
 $6 = $5 << 24 >> 24;
 __embind_register_integer($1 | 0, $2 | 0, 1, $4 | 0, $6 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE3endEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = $this;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE11__make_iterEPS2_($2, $4) | 0;
 SAFE_HEAP_STORE($0 | 0, $5 | 0, 4);
 $6 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__set_long_pointerEPc($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__p;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($2) | 0;
 $5 = $4 + 8 | 0;
 SAFE_HEAP_STORE($5 | 0, $3 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN13b2DynamicTreeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 __THREW__ = 0;
 invoke_vi(141, $3 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 $5 = $4 & 1;
 if ($5) {
  $6 = ___cxa_find_matching_catch(0 | 0) | 0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__set_long_sizeEj($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($2) | 0;
 $5 = $4 + 4 | 0;
 SAFE_HEAP_STORE($5 | 0, $3 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($1) | 0;
 $3 = __ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_($2) | 0;
 $__m = $3;
 $4 = $__m;
 $5 = $4 - 16 | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDItE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsItE3minEv() | 0;
 $4 = $3 & 65535;
 $5 = __ZNSt3__114numeric_limitsItE3maxEv() | 0;
 $6 = $5 & 65535;
 __embind_register_integer($1 | 0, $2 | 0, 2, $4 | 0, $6 | 0);
 STACKTOP = sp;
 return;
}

function __ZN6b2Vec2mLEf($this, $a) {
 $this = $this | 0;
 $a = +$a;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $0;
 $3 = $1;
 $4 = +(+SAFE_HEAP_LOAD_D($2 | 0, 4));
 $5 = $4 * $3;
 SAFE_HEAP_STORE_D($2 | 0, +$5, 4);
 $6 = $1;
 $7 = $2 + 4 | 0;
 $8 = +(+SAFE_HEAP_LOAD_D($7 | 0, 4));
 $9 = $8 * $6;
 SAFE_HEAP_STORE_D($7 | 0, +$9, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__set_long_capEj($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $0;
 $3 = $1;
 $4 = 1 | $3;
 $5 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($2) | 0;
 SAFE_HEAP_STORE($5 | 0, $4 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIhE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIhE3minEv() | 0;
 $4 = $3 & 255;
 $5 = __ZNSt3__114numeric_limitsIhE3maxEv() | 0;
 $6 = $5 & 255;
 __embind_register_integer($1 | 0, $2 | 0, 1, $4 | 0, $6 | 0);
 STACKTOP = sp;
 return;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

function __ZN10b2ManifoldC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 40 | 0;
 $3 = $1;
 while (1) {
  __ZN15b2ManifoldPointC2Ev($3);
  $4 = $3 + 20 | 0;
  $5 = ($4 | 0) == ($2 | 0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 $6 = $1 + 40 | 0;
 __ZN6b2Vec2C2Ev($6);
 $7 = $1 + 48 | 0;
 __ZN6b2Vec2C2Ev($7);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = $2 + 1 | 0;
 $4 = __ZNSt3__114pointer_traitsIPKcE10pointer_toERS1_($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE5beginEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 $1 = $this;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE11__make_iterEPS2_($2, $3) | 0;
 SAFE_HEAP_STORE($0 | 0, $4 | 0, 4);
 $5 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = $2 + 1 | 0;
 $4 = __ZNSt3__114pointer_traitsIPcE10pointer_toERc($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this, $__beg, $__end, $__old_mid, $__new_mid) {
 $this = $this | 0;
 $__beg = $__beg | 0;
 $__end = $__end | 0;
 $__old_mid = $__old_mid | 0;
 $__new_mid = $__new_mid | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this, $__beg, $__end, $__old_mid, $__new_mid) {
 $this = $this | 0;
 $__beg = $__beg | 0;
 $__end = $__end | 0;
 $__old_mid = $__old_mid | 0;
 $__new_mid = $__new_mid | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;
 return;
}

function __ZNSt3__118__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($msg) | 0;
 $1 = $0 + 13 | 0;
 $2 = __Znwj($1) | 0;
 SAFE_HEAP_STORE($2 | 0, $0 | 0, 4);
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, $0 | 0, 4);
 $4 = $2 + 8 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $2 + 12 | 0;
 $6 = $0 + 1 | 0;
 _memcpy($5 | 0, $msg | 0, $6 | 0) | 0;
 SAFE_HEAP_STORE($this | 0, $5 | 0, 4);
 return;
}

function __ZNK6b2Vec27IsValidEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $3 = __Z9b2IsValidf($2) | 0;
 if (!$3) {
  $7 = 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 $4 = $1 + 4 | 0;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = __Z9b2IsValidf($5) | 0;
 $7 = $6;
 STACKTOP = sp;
 return $7 | 0;
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned) {
 dest = dest | 0;
 bytes = bytes | 0;
 unsigned = unsigned | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  return HEAP32[dest >> 2] | 0;
 } else if ((bytes | 0) == 1) {
  if (unsigned) {
   return HEAPU8[dest >> 0] | 0;
  } else {
   return HEAP8[dest >> 0] | 0;
  }
 }
 if (dest & 1) alignfault();
 if (unsigned) return HEAPU16[dest >> 1] | 0;
 return HEAP16[dest >> 1] | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = $2 + 8 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = $2 + 8 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE15__get_long_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK6b2Vec2ngEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($agg$result);
 $2 = +(+SAFE_HEAP_LOAD_D($1 | 0, 4));
 $3 = -$2;
 $4 = $1 + 4 | 0;
 $5 = +(+SAFE_HEAP_LOAD_D($4 | 0, 4));
 $6 = -$5;
 __ZN6b2Vec23SetEff($agg$result, $3, $6);
 STACKTOP = sp;
 return;
}

function __ZNSt3__1eqIPP6b2BodyS3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE($__x, $__y) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x;
 $1 = $__y;
 $2 = $0;
 $3 = __ZNKSt3__111__wrap_iterIPP6b2BodyE4baseEv($2) | 0;
 $4 = $1;
 $5 = __ZNKSt3__111__wrap_iterIPP6b2BodyE4baseEv($4) | 0;
 $6 = ($3 | 0) == ($5 | 0);
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE14__get_long_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($1) | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 & -2;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__19allocatorI6SpriteE9constructIS1_JS1_EEEvPT_DpOT0_($this, $__p, $__args) {
 $this = $this | 0;
 $__p = $__p | 0;
 $__args = $__args | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__p;
 $2 = $__args;
 $3 = $1;
 $4 = $2;
 $5 = __ZNSt3__17forwardI6SpriteEEOT_RNS_16remove_referenceIS2_E4typeE($4) | 0;
 __ZN6SpriteC2EOS_($3, $5);
 STACKTOP = sp;
 return;
}

function __ZN16b2StackAllocatorC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 102400 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $1 + 102404 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 102408 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $1 + 102796 | 0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK12b2BroadPhase5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($this, $callback, $aabb) {
 $this = $this | 0;
 $callback = $callback | 0;
 $aabb = $aabb | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $callback;
 $2 = $aabb;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNK13b2DynamicTree5QueryI19b2WorldQueryWrapperEEvPT_RK6b2AABB($3, $4, $5);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 4 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $5 = $3;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = ($7 | 0) / 12 & -1;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZN7b2ShapeaSERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $3 + 4 | 0;
 $5 = $2;
 $6 = $5 + 4 | 0;
 {}
 SAFE_HEAP_STORE($4 | 0, SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($4 + 4 | 0, SAFE_HEAP_LOAD($6 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDImE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsImE3minEv() | 0;
 $4 = __ZNSt3__114numeric_limitsImE3maxEv() | 0;
 __embind_register_integer($1 | 0, $2 | 0, 4, $3 | 0, $4 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIlE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIlE3minEv() | 0;
 $4 = __ZNSt3__114numeric_limitsIlE3maxEv() | 0;
 __embind_register_integer($1 | 0, $2 | 0, 4, $3 | 0, $4 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIjE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIjE3minEv() | 0;
 $4 = __ZNSt3__114numeric_limitsIjE3maxEv() | 0;
 __embind_register_integer($1 | 0, $2 | 0, 4, $3 | 0, $4 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIiE3getEv() | 0;
 $2 = $0;
 $3 = __ZNSt3__114numeric_limitsIiE3minEv() | 0;
 $4 = __ZNSt3__114numeric_limitsIiE3maxEv() | 0;
 __embind_register_integer($1 | 0, $2 | 0, 4, $3 | 0, $4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16__lessIjjEclERKjS3_($this, $__x, $__y) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__x;
 $2 = $__y;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $4 >>> 0 < $6 >>> 0;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN7b2Mat227SetZeroEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 SAFE_HEAP_STORE_D($1 | 0, +(0.0), 4);
 $2 = $1 + 8 | 0;
 SAFE_HEAP_STORE_D($2 | 0, +(0.0), 4);
 $3 = $1 + 4 | 0;
 SAFE_HEAP_STORE_D($3 | 0, +(0.0), 4);
 $4 = $1 + 8 | 0;
 $5 = $4 + 4 | 0;
 SAFE_HEAP_STORE_D($5 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__13minIjNS_6__lessIjjEEEERKT_S5_S5_T0_($__a, $__b, $__comp) {
 $__a = $__a | 0;
 $__b = $__b | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__b;
 $2 = $1;
 $3 = $0;
 $4 = __ZNKSt3__16__lessIjjEclERKjS3_($__comp, $2, $3) | 0;
 $5 = $1;
 $6 = $0;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__13maxIjNS_6__lessIjjEEEERKT_S5_S5_T0_($__a, $__b, $__comp) {
 $__a = $__a | 0;
 $__b = $__b | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__b;
 $2 = $0;
 $3 = $1;
 $4 = __ZNKSt3__16__lessIjjEclERKjS3_($__comp, $2, $3) | 0;
 $5 = $1;
 $6 = $0;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return $7 | 0;
}

function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _pthread_once(1672 | 0, 223 | 0) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  $2 = SAFE_HEAP_LOAD(1668 | 0, 4, 0) | 0 | 0;
  $3 = _pthread_getspecific($2 | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else {
  _abort_message(9952, $vararg_buffer);
 }
 return 0 | 0;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0;
 $2 = __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() | 0;
 $3 = $0;
 __embind_register_memory_view($1 | 0, $2 | 0, $3 | 0);
 STACKTOP = sp;
 return;
}

function __ZN15b2WorldManifoldC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 $3 = $2 + 16 | 0;
 $4 = $2;
 while (1) {
  __ZN6b2Vec2C2Ev($4);
  $5 = $4 + 8 | 0;
  $6 = ($5 | 0) == ($3 | 0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN5b2Rot3SetEf($this, $angle) {
 $this = $this | 0;
 $angle = +$angle;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $angle;
 $2 = $0;
 $3 = $1;
 $4 = +Math_sin(+$3);
 SAFE_HEAP_STORE_D($2 | 0, +$4, 4);
 $5 = $1;
 $6 = +Math_cos(+$5);
 $7 = $2 + 4 | 0;
 SAFE_HEAP_STORE_D($7 | 0, +$6, 4);
 STACKTOP = sp;
 return;
}

function __ZN15b2ReferenceFaceC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 $3 = $1 + 16 | 0;
 __ZN6b2Vec2C2Ev($3);
 $4 = $1 + 24 | 0;
 __ZN6b2Vec2C2Ev($4);
 $5 = $1 + 32 | 0;
 __ZN6b2Vec2C2Ev($5);
 $6 = $1 + 44 | 0;
 __ZN6b2Vec2C2Ev($6);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn) {
 $fn = $fn | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $fn;
 $2 = $0;
 $3 = FUNCTION_TABLE_i[(SAFE_FT_MASK($2 | 0, 255 | 0) | 0) & 255]() | 0;
 SAFE_HEAP_STORE($1 | 0, $3 | 0, 4);
 $4 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE10deallocateERS4_PS3_j($__a, $__p, $__n) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__p;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__19allocatorIP6b2BodyE10deallocateEPS2_j($3, $4, $5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE10deallocateERS3_PS2_j($__a, $__p, $__n) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__p;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__19allocatorI6SpriteE10deallocateEPS1_j($3, $4, $5);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 17);
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 14);
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 13);
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 12);
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this, $s, 11);
 $0 = $this + 12 | 0;
 SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
 $1 = $0 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0 + 8 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = SAFE_HEAP_LOAD(1668 | 0, 4, 0) | 0 | 0;
 $1 = _pthread_setspecific($0 | 0, 0 | 0) | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(10156, $vararg_buffer);
 }
}

function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
 $1 = $0 + -4 | 0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($1 | 0, $2 + -1 | 0 | 0, 4);
 $3 = $2 + -1 | 0;
 $4 = ($3 | 0) < 0;
 if ($4) {
  $5 = SAFE_HEAP_LOAD($this | 0, 4, 0) | 0 | 0;
  $6 = $5 + -12 | 0;
  __ZdlPv($6);
 }
 return;
}

function __Z16b2MixRestitutionff($restitution1, $restitution2) {
 $restitution1 = +$restitution1;
 $restitution2 = +$restitution2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $restitution1;
 $1 = $restitution2;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return +$7;
}

function __ZNSt3__116move_if_noexceptI6SpriteEENS_11conditionalIXaantsr29is_nothrow_move_constructibleIT_EE5valuesr21is_copy_constructibleIS3_EE5valueERKS3_OS3_E4typeERS3_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x;
 $1 = $0;
 $2 = __ZNSt3__14moveIR6SpriteEEONS_16remove_referenceIT_E4typeEOS4_($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv($1) | 0;
 $3 = __ZNSt3__116__to_raw_pointerIKcEEPT_S3_($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE11__make_iterEPS2_($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 8 | 0;
 $1 = $this;
 $2 = $__p;
 $3 = $2;
 __ZNSt3__111__wrap_iterIPP6b2BodyEC2ES3_($0, $3);
 $4 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __Z7b2ClampIfET_S0_S0_S0_($a, $low, $high) {
 $a = +$a;
 $low = +$low;
 $high = +$high;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $low;
 $2 = $high;
 $3 = $1;
 $4 = $0;
 $5 = $2;
 $6 = +__Z5b2MinIfET_S0_S0_($4, $5);
 $7 = +__Z5b2MaxIfET_S0_S0_($3, $6);
 STACKTOP = sp;
 return +$7;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE10deallocateERS2_Pcj($__a, $__p, $__n) {
 $__a = $__a | 0;
 $__p = $__p | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__p;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZNSt3__19allocatorIcE10deallocateEPcj($3, $4, $5);
 STACKTOP = sp;
 return;
}

function __ZN6b2Vec2C2Eff($this, $xIn, $yIn) {
 $this = $this | 0;
 $xIn = +$xIn;
 $yIn = +$yIn;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $xIn;
 $2 = $yIn;
 $3 = $0;
 $4 = $1;
 SAFE_HEAP_STORE_D($3 | 0, +$4, 4);
 $5 = $3 + 4 | 0;
 $6 = $2;
 SAFE_HEAP_STORE_D($5 | 0, +$6, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE9__destroyIS3_EEvNS_17integral_constantIbLb1EEERS4_PT_($0, $__a, $__p) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 $__p = $__p | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $__p;
 $3 = $1;
 $4 = $2;
 __ZNSt3__19allocatorIP6b2BodyE7destroyEPS2_($3, $4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9__destroyIS2_EEvNS_17integral_constantIbLb1EEERS3_PT_($0, $__a, $__p) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 $__p = $__p | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $__p;
 $3 = $1;
 $4 = $2;
 __ZNSt3__19allocatorI6SpriteE7destroyEPS1_($3, $4);
 STACKTOP = sp;
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $f + 60 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
 $2 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN6b2Vec23SetEff($this, $x_, $y_) {
 $this = $this | 0;
 $x_ = +$x_;
 $y_ = +$y_;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $x_;
 $2 = $y_;
 $3 = $0;
 $4 = $1;
 SAFE_HEAP_STORE_D($3 | 0, +$4, 4);
 $5 = $2;
 $6 = $3 + 4 | 0;
 SAFE_HEAP_STORE_D($6 | 0, +$5, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE5clearEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE17__destruct_at_endEPS2_($1, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE5clearEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE17__destruct_at_endEPS1_($1, $3);
 STACKTOP = sp;
 return;
}

function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(2639, 117);
 __ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_(2649, 118);
 __ZN10emscripten8functionIvJffEJEEEvPKcPFT_DpT0_EDpT1_(2662, 119);
 STACKTOP = sp;
 return;
}

function __ZNSt3__1neIPP6b2BodyEEbRKNS_11__wrap_iterIT_EES8_($__x, $__y) {
 $__x = $__x | 0;
 $__y = $__y | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x;
 $1 = $__y;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__1eqIPP6b2BodyS3_EEbRKNS_11__wrap_iterIT_EERKNS4_IT0_EE($2, $3) | 0;
 $5 = $4 ^ 1;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this | 0, 1488 | 0, 4);
 $0 = $this + 4 | 0;
 __THREW__ = 0;
 invoke_vii(252, $0 | 0, $msg | 0);
 $1 = __THREW__;
 __THREW__ = 0;
 $2 = $1 & 1;
 if ($2) {
  $3 = ___cxa_find_matching_catch() | 0;
  $4 = tempRet0;
  ___resumeException($3 | 0);
 } else {
  return;
 }
}

function __ZN15b2GrowableStackIiLi256EEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, $2 | 0, 4);
 $3 = $1 + 1028 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 1032 | 0;
 SAFE_HEAP_STORE($4 | 0, 256 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN14b2PolygonShapeaSERKS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN7b2ShapeaSERKS_($3, $4) | 0;
 $5 = $3 + 12 | 0;
 $6 = $2;
 $7 = $6 + 12 | 0;
 _memcpy($5 | 0, $7 | 0, 140) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN20b2SeparationFunctionC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 __ZN7b2SweepC2Ev($2);
 $3 = $1 + 44 | 0;
 __ZN7b2SweepC2Ev($3);
 $4 = $1 + 84 | 0;
 __ZN6b2Vec2C2Ev($4);
 $5 = $1 + 92 | 0;
 __ZN6b2Vec2C2Ev($5);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EEC2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN15b2DistanceInputC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = $1 + 28 | 0;
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = $1 + 56 | 0;
 __ZN11b2TransformC2Ev($3);
 $4 = $1 + 72 | 0;
 __ZN11b2TransformC2Ev($4);
 STACKTOP = sp;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function __ZN6SpriteC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($2, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EEC2ES5_($this, $__t2) {
 $this = $this | 0;
 $__t2 = $__t2 | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 __ZNSt3__17forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE($__t2) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($__s) | 0;
 $1 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, $0) | 0;
 return $1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN10b2TOIInputC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2DistanceProxyC2Ev($1);
 $2 = $1 + 28 | 0;
 __ZN15b2DistanceProxyC2Ev($2);
 $3 = $1 + 56 | 0;
 __ZN7b2SweepC2Ev($3);
 $4 = $1 + 92 | 0;
 __ZN7b2SweepC2Ev($4);
 STACKTOP = sp;
 return;
}

function __ZN8b2Island5ClearEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 28 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $1 + 36 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1 + 32 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE8allocateERS4_j($__a, $__n) {
 $__a = $__a | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__19allocatorIP6b2BodyE8allocateEjPKv($2, $3, 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE8allocateERS3_j($__a, $__n) {
 $__a = $__a | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__19allocatorI6SpriteE8allocateEjPKv($2, $3, 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 8 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 16 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (SAFE_HEAP_LOAD(cttz_i8 + (x >>> 24) | 0, 1, 0) | 0) + 24 | 0;
}

function __ZNSt3__19allocatorI6SpriteE8allocateEjPKv($this, $__n, $0) {
 $this = $this | 0;
 $__n = $__n | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $0;
 $4 = $2;
 $5 = $4 * 12 | 0;
 $6 = __ZNSt3__110__allocateEj($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $0;
 SAFE_HEAP_STORE($4 >> 0 | 0, $3 | 0, 1);
 STACKTOP = sp;
 return;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 SAFE_HEAP_STORE(tempDoublePtr >> 0 | 0, SAFE_HEAP_LOAD(ptr >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 1 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 1 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 2 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 2 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 3 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 3 >> 0 | 0, 1, 0) | 0 | 0, 1);
}

function __ZNSt3__19allocatorIP6b2BodyE8allocateEjPKv($this, $__n, $0) {
 $this = $this | 0;
 $__n = $__n | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $0;
 $4 = $2;
 $5 = $4 << 2;
 $6 = __ZNSt3__110__allocateEj($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0 | 0) | 0;
}

function __ZNSt3__112__debug_lessIPFbRK6b2PairS3_EEC2ERS5_($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__c;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNKSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE8allocateERS2_j($__a, $__n) {
 $__a = $__a | 0;
 $__n = $__n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__a;
 $1 = $__n;
 $2 = $0;
 $3 = $1;
 $4 = __ZNSt3__19allocatorIcE8allocateEjPKv($2, $3, 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNKSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNKSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __Z9b2IsValidf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = sp + 4 | 0;
 SAFE_HEAP_STORE_D($0 | 0, +$x, 4);
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $ix = $1;
 $2 = $ix;
 $3 = $2 & 2139095040;
 $4 = ($3 | 0) != 2139095040;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNKSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__19allocatorIcE8allocateEjPKv($this, $__n, $0) {
 $this = $this | 0;
 $__n = $__n | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $0;
 $4 = $2;
 $5 = $4;
 $6 = __ZNSt3__110__allocateEj($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNKSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __Z13b2MixFrictionff($friction1, $friction2) {
 $friction1 = +$friction1;
 $friction2 = +$friction2;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $friction1;
 $1 = $friction2;
 $2 = $0;
 $3 = $1;
 $4 = $2 * $3;
 $5 = +Math_sqrt(+$4);
 STACKTOP = sp;
 return +$5;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE10__max_sizeENS_17integral_constantIbLb1EEERKS4_($0, $__a) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $1;
 $3 = __ZNKSt3__19allocatorIP6b2BodyE8max_sizeEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD($this >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 1;
 $2 = $1 << 24 >> 24 == 0;
 if (!$2) {
  $3 = $this + 8 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  _free($4);
 }
 return;
}

function __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNKSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE9__end_capEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE5firstEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function SAFE_HEAP_STORE(dest, value, bytes) {
 dest = dest | 0;
 value = value | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  HEAP32[dest >> 2] = value;
 } else if ((bytes | 0) == 1) {
  HEAP8[dest >> 0] = value;
 } else {
  if (dest & 1) alignfault();
  HEAP16[dest >> 1] = value;
 }
}

function __ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE10__max_sizeENS_17integral_constantIbLb1EEERKS3_($0, $__a) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $1;
 $3 = __ZNKSt3__19allocatorI6SpriteE8max_sizeEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE7__allocEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = __ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE6secondEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK6b2Body8IsActiveEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 & 65535;
 $5 = $4 & 32;
 $6 = ($5 | 0) == 32;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNK6b2Body8IsBulletEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 & 65535;
 $5 = $4 & 8;
 $6 = ($5 | 0) == 8;
 STACKTOP = sp;
 return $6 | 0;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $list = sp;
 SAFE_HEAP_STORE($list | 0, $varargs | 0, 4);
 $0 = SAFE_HEAP_LOAD(1724 | 0, 4, 0) | 0 | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK6b2Body7IsAwakeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 & 65535;
 $5 = $4 & 2;
 $6 = ($5 | 0) == 2;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__117__compressed_pairIPP6b2BodyRNS_9allocatorIS2_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE4dataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = __ZNSt3__116__to_raw_pointerIP6b2BodyEEPT_S4_($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK12b2BroadPhase11GetUserDataEi($this, $proxyId) {
 $this = $this | 0;
 $proxyId = $proxyId | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $proxyId;
 $2 = $0;
 $3 = $1;
 $4 = __ZNK13b2DynamicTree11GetUserDataEi($2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt12length_errorC2EPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $0;
 $3 = $1;
 __ZNSt11logic_errorC2EPKc($2, $3);
 $4 = 1508;
 SAFE_HEAP_STORE($2 | 0, $4 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairIP6SpriteRNS_9allocatorIS1_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE6secondEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE4dataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE5firstEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN8b2FilterC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 SAFE_HEAP_STORE($1 | 0, 1 | 0, 2);
 $2 = $1 + 2 | 0;
 SAFE_HEAP_STORE($2 | 0, -1 | 0, 2);
 $3 = $1 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 2);
 STACKTOP = sp;
 return;
}

function __Z17b2DistanceSquaredRK6b2Vec2S1_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c, $2, $3);
 $4 = +__Z5b2DotRK6b2Vec2S1_($c, $c);
 STACKTOP = sp;
 return +$4;
}

function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold($this, $contact, $oldManifold) {
 $this = $this | 0;
 $contact = $contact | 0;
 $oldManifold = $oldManifold | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $oldManifold;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = _pthread_key_create(1668 | 0, 229 | 0) | 0;
 $1 = ($0 | 0) == 0;
 if ($1) {
  STACKTOP = sp;
  return;
 } else {
  _abort_message(10106, $vararg_buffer);
 }
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_($0, $__a) {
 $0 = $0 | 0;
 $__a = $__a | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 $2 = $1;
 $3 = __ZNKSt3__19allocatorIcE8max_sizeEv($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($__s) | 0;
 $1 = __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, $0) | 0;
 return $1 | 0;
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 SAFE_HEAP_STORE($ap | 0, $varargs | 0, 4);
 $0 = SAFE_HEAP_LOAD(1728 | 0, 4, 0) | 0 | 0;
 $1 = _vfprintf($0, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN9b2SimplexC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2SimplexVertexC2Ev($1);
 $2 = $1 + 36 | 0;
 __ZN15b2SimplexVertexC2Ev($2);
 $3 = $1 + 72 | 0;
 __ZN15b2SimplexVertexC2Ev($3);
 STACKTOP = sp;
 return;
}

function __Z5b2MinIiET_S0_S0_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2 | 0) < ($3 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return $7 | 0;
}

function __Z5b2MaxIiET_S0_S0_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2 | 0) > ($3 | 0);
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse($this, $contact, $impulse) {
 $this = $this | 0;
 $contact = $contact | 0;
 $impulse = $impulse | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $contact;
 $2 = $impulse;
 STACKTOP = sp;
 return;
}

function __Z10b2DistanceRK6b2Vec2S1_($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZmiRK6b2Vec2S1_($c, $2, $3);
 $4 = +__ZNK6b2Vec26LengthEv($c);
 STACKTOP = sp;
 return +$4;
}

function __ZNK9b2Contact10IsTouchingEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 & 2;
 $5 = ($4 | 0) == 2;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNK7b2World8IsLockedEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 102868 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 & 2;
 $5 = ($4 | 0) == 2;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__116allocator_traitsINS_9allocatorIcEEE37select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_($agg$result, $0, $__a) {
 $agg$result = $agg$result | 0;
 $0 = $0 | 0;
 $__a = $__a | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $__a;
 STACKTOP = sp;
 return;
}

function __ZNK9b2Contact9IsEnabledEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 & 4;
 $5 = ($4 | 0) == 4;
 STACKTOP = sp;
 return $5 | 0;
}

function __Z5b2MinIfET_S0_S0_($a, $b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return +$7;
}

function __Z5b2MaxIfET_S0_S0_($a, $b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 > $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;
 return +$7;
}

function __ZNSt3__111__wrap_iterIPP6b2BodyEppEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($1 | 0, $3 | 0, 4);
 STACKTOP = sp;
 return $1 | 0;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ap = sp;
 SAFE_HEAP_STORE($ap | 0, $varargs | 0, 4);
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNK9b2Fixture7GetTypeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = __ZNK7b2Shape7GetTypeEv($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvffEE8getTypesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvffEEEE3getEv() | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEE8capacityEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN5SceneC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEEC2Ev($1);
 $2 = $1 + 12 | 0;
 __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEEC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__16vectorI6SpriteNS_9allocatorIS1_EEE8capacityEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = __ZNKSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEE8capacityEv($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN6SpriteC2EOS_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EOS5_($3, $4);
 STACKTOP = sp;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv() | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__19allocatorIcEC2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIfE3getEv() | 0;
 $2 = $0;
 __embind_register_float($1 | 0, $2 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $name;
 $1 = __ZN10emscripten8internal6TypeIDIdE3getEv() | 0;
 $2 = $0;
 __embind_register_float($1 | 0, $2 | 0, 8);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 12 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this);
 return;
}

function __ZNSt3__14moveIRNS_17__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES6_EEEEONS_16remove_referenceIT_E4typeEOSC_($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN15b2SimplexVertexC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 $3 = $1 + 16 | 0;
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this, $0, $__n) {
 $this = $this | 0;
 $0 = $0 | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this, $0, $__n) {
 $this = $this | 0;
 $0 = $0 | 0;
 $__n = $__n | 0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;
 return;
}

function __ZNK10b2TreeNode6IsLeafEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 24 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) == -1;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE10__align_itILj16EEEjj($__s) {
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = $1 + 15 | 0;
 $3 = $2 & -16;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__111__wrap_iterIPP6b2BodyEC2ES3_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__x;
 $2 = $0;
 $3 = $1;
 SAFE_HEAP_STORE($2 | 0, $3 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNK9b2Fixture8IsSensorEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 38 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 1;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZN7b2SweepC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 $3 = $1 + 16 | 0;
 __ZN6b2Vec2C2Ev($3);
 STACKTOP = sp;
 return;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = $c + -48 | 0;
 $isdigit = $isdigittmp >>> 0 < 10;
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = $0 + -97 | 0;
  $2 = $1 >>> 0 < 6;
  $4 = $2;
 }
 $3 = $4 & 1;
 return $3 | 0;
}

function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(1680 | 0, 4, 0) | 0 | 0;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  $$0 = 1736;
 } else {
  $2 = _pthread_self() | 0;
  $3 = $2 + 60 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $$0 = $4;
 }
 return $$0 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN10emscripten8internal12getSignatureIvJPFvffEffEEEPKcPFT_DpT0_E($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $0;
 $2 = __ZN10emscripten8internal20getSpecificSignatureIJvPFvffEffEEEPKcv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN15b2GrowableStackIiLi256EE8GetCountEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 1028 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function SAFE_HEAP_STORE_D(dest, value, bytes) {
 dest = dest | 0;
 value = +value;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  HEAPF64[dest >> 3] = value;
 } else {
  if (dest & 3) alignfault();
  HEAPF32[dest >> 2] = value;
 }
}

function __ZNSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN6b2Vec27SetZeroEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 SAFE_HEAP_STORE_D($1 | 0, +(0.0), 4);
 $2 = $1 + 4 | 0;
 SAFE_HEAP_STORE_D($2 | 0, +(0.0), 4);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal12getSignatureIvJPFvvEEEEPKcPFT_DpT0_E($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $0;
 $2 = __ZN10emscripten8internal20getSpecificSignatureIJvPFvvEEEEPKcv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN10emscripten8internal12getSignatureIiJPFivEEEEPKcPFT_DpT0_E($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $0;
 $2 = __ZN10emscripten8internal20getSpecificSignatureIJiPFivEEEEPKcv() | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK9b2Contact14GetChildIndexBEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 60 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNK9b2Contact14GetChildIndexAEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 56 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN6b2Body14GetContactListEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 112 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIP6b2BodyNS_9allocatorIS2_EEEC2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN9b2Contact11GetFixtureBEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 52 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN9b2Contact11GetFixtureAEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 48 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type | 0) == (0 | 0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = ___dynamic_cast($type, 472, 520, 0) | 0;
  $phitmp = ($1 | 0) != (0 | 0);
  $3 = $phitmp;
 }
 $2 = $3 & 1;
 return $2 | 0;
}

function __ZNK6b2Body11GetUserDataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 148 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6SpriteNS_9allocatorIS1_EEEC2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2($this, $xf, $p) {
 $this = $this | 0;
 $xf = $xf | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $xf;
 $2 = $p;
 STACKTOP = sp;
 return 0;
}

function __ZN9b2Fixture8GetShapeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN9b2Contact7GetNextEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt9type_info4nameEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN9b2Fixture7GetBodyEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__19allocatorI6SpriteE7destroyEPS1_($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__p;
 $2 = $1;
 __ZN6SpriteD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK7b2Shape7GetTypeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN16b2ContactManager15FindNewContactsEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12b2BroadPhase11UpdatePairsI16b2ContactManagerEEvPT_($1, $1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__114pointer_traitsIPKcE10pointer_toERS1_($__r) {
 $__r = $__r | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__r;
 $1 = $0;
 $2 = __ZNSt3__19addressofIKcEEPT_RS2_($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN6b2Body7GetNextEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 96 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE($fn) {
 $fn = $fn | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $fn;
 $1 = $0;
 FUNCTION_TABLE_v[(SAFE_FT_MASK($1 | 0, 255 | 0) | 0) & 255]();
 STACKTOP = sp;
 return;
}

function __Z5b2AbsIfET_S0_($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 > 0.0;
 $3 = $0;
 $4 = -$3;
 $5 = $2 ? $3 : $4;
 STACKTOP = sp;
 return +$5;
}

function __ZN24b2PositionSolverManifoldC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__114pointer_traitsIPcE10pointer_toERc($__r) {
 $__r = $__r | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__r;
 $1 = $0;
 $2 = __ZNSt3__19addressofIcEEPT_RS1_($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__111__wrap_iterIPP6b2BodyE4baseEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNKSt3__111__wrap_iterIPP6b2BodyEdeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN16b2DistanceOutputC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ti;
 $1 = $0;
 $2 = __ZNKSt9type_info4nameEv($1) | 0;
 $3 = ___strdup($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function SAFE_HEAP_LOAD_D(dest, bytes) {
 dest = dest | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  return +HEAPF64[dest >> 3];
 }
 if (dest & 3) alignfault();
 return +HEAPF32[dest >> 2];
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = _strlen($s) | 0;
 $1 = $0 + 1 | 0;
 $2 = _malloc($1) | 0;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
  $$0 = $2;
 }
 return $$0 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN25b2PolygonAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN25b2PolygonAndCircleContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN17b2ContactListener12BeginContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;
 return;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyRNS_9allocatorIS2_EELj0EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN6SpriteD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN11b2TransformC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN5b2RotC2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__128__libcpp_compressed_pair_impIPP6b2BodyNS_9allocatorIS2_EELj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteRNS_9allocatorIS1_EELj0EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE6secondEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN24b2ChainAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN24b2ChainAndPolygonContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN17b2ContactListener10EndContactEP9b2Contact($this, $contact) {
 $this = $this | 0;
 $contact = $contact | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $contact;
 STACKTOP = sp;
 return;
}

function __ZNSt3__128__libcpp_compressed_pair_impIP6SpriteNS_9allocatorIS1_EELj2EE5firstEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN23b2EdgeAndPolygonContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN23b2EdgeAndPolygonContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN23b2ChainAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN23b2ChainAndCircleContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN7b2Mat22C2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardIRNS_9allocatorIP6b2BodyEEEEOT_RNS_16remove_referenceIS6_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN6b2AABBC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 $2 = $1 + 8 | 0;
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN22b2EdgeAndCircleContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN22b2EdgeAndCircleContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardIRNS_9allocatorI6SpriteEEEEOT_RNS_16remove_referenceIS5_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
 return $0 | 0;
}

function __ZNK6b2Body7GetTypeEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN15b2QueryCallbackC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 784;
 SAFE_HEAP_STORE($1 | 0, $2 | 0, 4);
 STACKTOP = sp;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r >>> 0 > 4294963200;
 if ($0) {
  $1 = 0 - $r | 0;
  $2 = ___errno_location() | 0;
  SAFE_HEAP_STORE($2 | 0, $1 | 0, 4);
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return $$0 | 0;
}

function __ZNSt3__17forwardINS_9allocatorIcEEEEOT_RNS_16remove_referenceIS3_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZN17b2ContactListenerD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN17b2ContactListenerD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN16b2PolygonContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN16b2PolygonContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN7b2ShapeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 724;
 SAFE_HEAP_STORE($1 | 0, $2 | 0, 4);
 STACKTOP = sp;
 return;
}

function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = _strlen($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN15b2QueryCallbackD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2QueryCallbackD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactFilterD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2ContactFilterD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN15b2CircleContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2CircleContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardIRKP6b2BodyEEOT_RNS_16remove_referenceIS5_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__19allocatorIP6b2BodyE7destroyEPS2_($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $__p;
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardIPP6b2BodyEEOT_RNS_16remove_referenceIS4_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__110__allocateEj($__size) {
 $__size = $__size | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__size;
 $1 = $0;
 $2 = __Znwj($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN14b2PolygonShapeD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN14b2PolygonShapeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardIP6SpriteEEOT_RNS_16remove_referenceIS3_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN10b2MassDataC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 4 | 0;
 __ZN6b2Vec2C2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__17forwardI6SpriteEEOT_RNS_16remove_referenceIS2_E4typeE($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__14moveIRPP6b2BodyEEONS_16remove_referenceIT_E4typeEOS6_($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this | 0) == ($thrown_type | 0);
 return $1 | 0;
}

function __ZN13b2CircleShapeD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13b2CircleShapeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN13MouseCallbackD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13MouseCallbackD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__14moveIRP6SpriteEEONS_16remove_referenceIT_E4typeEOS5_($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNK9b2Fixture13GetFilterDataEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 32 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__14moveIR6b2PairEEONS_16remove_referenceIT_E4typeEOS4_($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__14moveIR6SpriteEEONS_16remove_referenceIT_E4typeEOS4_($__t) {
 $__t = $__t | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__t;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN9b2Contact11GetManifoldEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 64 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN11b2EdgeShapeD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN11b2EdgeShapeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNK6b2Body12GetTransformEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNK6b2Body11GetPositionEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = $1 + 12 | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZN25b2PolygonAndCircleContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvffEE8getCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 3;
}

function __ZN24b2ChainAndPolygonContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE26__invalidate_all_iteratorsEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN23b2EdgeAndPolygonContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN23b2ChainAndCircleContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE26__invalidate_all_iteratorsEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1;
}

function __ZN9b2ContactD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN22b2EdgeAndCircleContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN16b2ContactManagerD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN12b2BroadPhaseD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN13MouseCallbackD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN15b2QueryCallbackD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN7b2ShapeD0Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN16b2PolygonContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN15b2CircleContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9b2ContactD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;
 return +$1;
}

function __Z7b2Alloci($size) {
 $size = $size | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = _malloc($1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__116__to_raw_pointerIP6b2BodyEEPT_S4_($__p) {
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__p;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__116__to_raw_pointerI6SpriteEEPT_S3_($__p) {
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__p;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZN15b2ManifoldPointC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN14b2PolygonShapeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN13b2CircleShapeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112__deallocateEPv($__ptr) {
 $__ptr = $__ptr | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__ptr;
 $1 = $0;
 __ZdlPv($1);
 STACKTOP = sp;
 return;
}

function __ZN12b2ClipVertexC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN6b2Vec2C2Ev($1);
 STACKTOP = sp;
 return;
}

function __ZN11b2EdgeShapeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7b2ShapeD2Ev($1);
 STACKTOP = sp;
 return;
}

function _srand($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s + -1 | 0;
 $1 = 688;
 $2 = $1;
 SAFE_HEAP_STORE($2 | 0, $0 | 0, 4);
 $3 = $1 + 4 | 0;
 $4 = $3;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 return;
}

function __ZNSt3__116__to_raw_pointerIKcEEPT_S3_($__p) {
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__p;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNSt3__116__to_raw_pointerIcEEPT_S2_($__p) {
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__p;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__19addressofIKcEEPT_RS2_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__19allocatorIP6b2BodyE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1073741823;
}

function __ZNSt3__19addressofIcEEPT_RS1_($__x) {
 $__x = $__x | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $__x;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__19allocatorI6SpriteE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 357913941;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = _wcrtomb($s, $wc, 0) | 0;
  $$0 = $1;
 }
 return $$0 | 0;
}

function __ZNSt3__120__vector_base_commonILb1EEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNK14b2PolygonShape13GetChildCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function __ZNK13b2CircleShape13GetChildCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1;
}

function __ZNKSt3__19allocatorIcE8max_sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return -1;
}

function __Z6b2FreePv($mem) {
 $mem = $mem | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mem;
 $1 = $0;
 _free($1);
 STACKTOP = sp;
 return;
}

function __ZNK11b2EdgeShape13GetChildCountEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 1;
}

function __ZNK7b2Timer15GetMillisecondsEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return 0.0;
}

function __ZNSt3__19allocatorIP6b2BodyEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19allocatorI6SpriteEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function dynCall_viddid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 a4 = a4 | 0;
 a5 = +a5;
 FUNCTION_TABLE_viddid[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, +a2, +a3, a4 | 0, +a5);
}

function _cleanup526($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + 68 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  ___unlockfile($p);
 }
 return;
}

function __ZNSt3__19allocatorIcEC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN17b2ContactListenerD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN15b2QueryCallbackD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN15b2ContactFilterD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 SAFE_HEAP_STORE($this | 0, 1488 | 0, 4);
 $0 = $this + 4 | 0;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZN7b2Timer5ResetEv($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN9b2ContactD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN7b2TimerC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN7b2ShapeD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN6b2Vec2C2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN5b2RotC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $this;
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal20getSpecificSignatureIJvPFvffEffEEEPKcv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal19getGenericSignatureIJviffEEEPKcv() | 0;
 return $0 | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(1476 | 0, $0 + 0 | 0 | 0, 4);
 $1 = $0;
 return $1 | 0;
}

function __ZN10emscripten8internal20getSpecificSignatureIJvPFvvEEEEPKcv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal20getSpecificSignatureIJiPFivEEEEPKcv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0;
 return $0 | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $this + 4 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 return $1 | 0;
}

function dynCall_iiid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 return FUNCTION_TABLE_iiid[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, +a3) | 0;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail(11745 | 0, 11774 | 0, 1175, 11839 | 0);
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0);
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
 return $0 | 0;
}

function dynCall_vidi(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 FUNCTION_TABLE_vidi[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, +a2, a3 | 0);
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[(SAFE_FT_MASK(index | 0, 63 | 0) | 0) & 63](a1 | 0, a2 | 0, +a3);
}

function dynCall_vidd(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 FUNCTION_TABLE_vidd[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, +a2, +a3);
}

function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 328 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 360 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 384 | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0) | 0;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
 return $0 | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
 return $0 | 0;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0);
}

function __GLOBAL__sub_I_unity_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init39();
 ___cxx_global_var_init100();
 ___cxx_global_var_init101();
 return;
}

function __ZNSt3__114numeric_limitsItE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsItLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsItE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsItLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIsE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIsLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIsE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIsLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsImE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsImLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsImE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsImLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIlE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIlLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIlE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIlLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIjE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIjLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIjE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIjLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIiE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIiLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIiE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIiLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIhE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIhLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIhE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIhLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIcE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIcLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIcE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIcLb1EE3maxEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIaE3minEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIaLb1EE3minEv() | 0;
 return $0 | 0;
}

function __ZNSt3__114numeric_limitsIaE3maxEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = __ZNSt3__123__libcpp_numeric_limitsIaLb1EE3maxEv() | 0;
 return $0 | 0;
}

function _isupper($c) {
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c + -65 | 0;
 $1 = $0 >>> 0 < 26;
 $2 = $1 & 1;
 return $2 | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0);
}

function SAFE_FT_MASK(value, mask) {
 value = value | 0;
 mask = mask | 0;
 var ret = 0;
 ret = value & mask;
 if ((ret | 0) != (value | 0)) ftfault();
 return ret | 0;
}

function dynCall_ddd(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = +a2;
 return +FUNCTION_TABLE_ddd[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](+a1, +a2);
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, +a2);
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function ___cxx_global_var_init135() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(9603);
 return;
}

function dynCall_vdd(index, a1, a2) {
 index = index | 0;
 a1 = +a1;
 a2 = +a2;
 FUNCTION_TABLE_vdd[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](+a1, +a2);
}

function ___assert_fail__wrapper(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 ___assert_fail(p0 | 0, p1 | 0, p2 | 0, p3 | 0);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0) | 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function b10(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(10);
}

function ___cxx_global_var_init101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxa_atexit(59 | 0, 944 | 0, ___dso_handle | 0) | 0;
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function dynCall_dd(index, a1) {
 index = index | 0;
 a1 = +a1;
 return +FUNCTION_TABLE_dd[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](+a1);
}

function ___cxx_global_var_init100() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxa_atexit(9 | 0, 940 | 0, ___dso_handle | 0) | 0;
 return;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(2638);
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0);
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvffEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 804 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 800 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 796 | 0;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +_frexp($x, $e);
 return +$0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 280 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 288 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 248 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 256 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 264 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 272 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 296 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 240 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 224 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 232 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 312 | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 304 | 0;
}

function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6);
 return 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZN10emscripten8internal19getGenericSignatureIJviffEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2851 | 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2848 | 0;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2845 | 0;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255]() | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function b0(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0);
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 320 | 0;
}

function __ZNSt3__123__libcpp_numeric_limitsIlLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -2147483648;
}

function __ZNSt3__123__libcpp_numeric_limitsIiLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -2147483648;
}

function __ZNSt3__123__libcpp_numeric_limitsIlLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}

function __ZNSt3__123__libcpp_numeric_limitsIiLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 10001 | 0;
}

function ___cxx_global_var_init39() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6b2Vec2C2Eff(912, 0.0, 0.0);
 return;
}

function b18(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(18);
 return 0;
}

function __ZNSt3__123__libcpp_numeric_limitsIsLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -32768;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 552 | 0;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 600 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 592 | 0;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 632 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 624 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 616 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 608 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 576 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 640 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 648 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 568 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 560 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 584 | 0;
}

function __ZNSt3__123__libcpp_numeric_limitsIsLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 32767;
}

function __GLOBAL__sub_I_js_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}

function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init135();
 return;
}

function b5(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 p3 = p3 | 0;
 p4 = +p4;
 nullFunc_viddid(5);
}

function __ZNSt3__123__libcpp_numeric_limitsIcLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -128;
}

function __ZNSt3__123__libcpp_numeric_limitsIaLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -128;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255]();
}

function __ZNSt3__123__libcpp_numeric_limitsIcLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}

function __ZNSt3__123__libcpp_numeric_limitsIaLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}

function __ZNSt3__123__libcpp_numeric_limitsItLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}

function __ZNSt3__123__libcpp_numeric_limitsImLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}

function __ZNSt3__123__libcpp_numeric_limitsIjLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}

function __ZNSt3__123__libcpp_numeric_limitsIhLb1EE3maxEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}

function __ZNSt3__123__libcpp_numeric_limitsItLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZNSt3__123__libcpp_numeric_limitsImLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZNSt3__123__libcpp_numeric_limitsIjLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function __ZNSt3__123__libcpp_numeric_limitsIhLb1EE3minEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function b23(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(23);
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(9);
 return 0;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_iiid(11);
 return 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(19);
}

function b21(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_viid(21);
}

function b7(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 nullFunc_vidi(7);
}

function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(16);
 return 0.0;
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 nullFunc_vidd(8);
}

function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15);
 return 0;
}

function b22(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 nullFunc_ddd(22);
 return 0.0;
}

function setDynamicTop(value) {
 value = value | 0;
 DYNAMICTOP = value;
}

function ___cxa_pure_virtual__wrapper() {
 {}
 ___cxa_pure_virtual();
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3);
}

function b1(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_vid(1);
}

function b13(p0) {
 p0 = p0 | 0;
 nullFunc_di(13);
 return 0.0;
}

function b12(p0, p1) {
 p0 = +p0;
 p1 = +p1;
 nullFunc_vdd(12);
}

function ___cxa_end_catch__wrapper() {
 {}
 ___cxa_end_catch();
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b14(p0) {
 p0 = +p0;
 nullFunc_dd(14);
 return 0.0;
}

function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(4);
 return 0;
}

function b2(p0) {
 p0 = p0 | 0;
 nullFunc_vi(2);
}

function b17() {
 {}
 nullFunc_i(17);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b20() {
 {}
 nullFunc_v(20);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN8b2Island5SolveEP9b2ProfileRK10b2TimeStepRK6b2Vec2b,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__Z22b2CollideEdgeAndCircleP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK13b2CircleShapeS6_,__Z23b2CollideEdgeAndPolygonP10b2ManifoldPK11b2EdgeShapeRK11b2TransformPK14b2PolygonShapeS6_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,__ZN6b2Vec2mLEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,__ZN7b2Sweep7AdvanceEf,b1,b1,b1,b1,b1,b1,__ZN6b2Body7AdvanceEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN7b2ShapeD2Ev,__ZN7b2ShapeD0Ev,b2,__ZN13MouseCallbackD2Ev,__ZN13MouseCallbackD0Ev,b2,__ZN15b2QueryCallbackD2Ev,__ZN15b2QueryCallbackD0Ev,__ZN15b2ContactFilterD2Ev,__ZN15b2ContactFilterD0Ev,b2,b2,__ZN23b2ChainAndCircleContactD2Ev,__ZN23b2ChainAndCircleContactD0Ev,b2,__ZN24b2ChainAndPolygonContactD2Ev,__ZN24b2ChainAndPolygonContactD0Ev,b2,__ZN15b2CircleContactD2Ev,__ZN15b2CircleContactD0Ev,b2,__ZN22b2EdgeAndCircleContactD2Ev,__ZN22b2EdgeAndCircleContactD0Ev,b2,__ZN23b2EdgeAndPolygonContactD2Ev,__ZN23b2EdgeAndPolygonContactD0Ev,b2,__ZN25b2PolygonAndCircleContactD2Ev
,__ZN25b2PolygonAndCircleContactD0Ev,b2,__ZN16b2PolygonContactD2Ev,__ZN16b2PolygonContactD0Ev,__ZN11b2EdgeShapeD2Ev,__ZN11b2EdgeShapeD0Ev,b2,b2,b2,b2,b2,b2,__ZN13b2CircleShapeD2Ev,__ZN13b2CircleShapeD0Ev,b2,b2,b2,b2,b2,b2,__ZN14b2PolygonShapeD2Ev,__ZN14b2PolygonShapeD0Ev,b2,b2,b2,b2,b2,b2,__ZN9b2ContactD2Ev,__ZN9b2ContactD0Ev
,__ZN17b2ContactListenerD2Ev,__ZN17b2ContactListenerD0Ev,b2,b2,b2,b2,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b2,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,__ZN10__cxxabiv117__class_type_infoD0Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN14b2PolygonShapeC2Ev,b2,b2,b2,b2,__ZN9b2BodyDefC2Ev,b2,b2,b2,b2,b2,__ZN13b2CircleShapeC2Ev,__ZN12b2FixtureDefC2Ev,b2,__ZN6b2Vec2C2Ev,__ZN6b2Vec27SetZeroEv,b2,b2,b2
,b2,b2,__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE,b2,__ZNSt3__120__vector_base_commonILb1EEC2Ev,b2,b2,b2,b2,__ZNSt3__112__deallocateEPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__Z6b2FreePv,b2,b2,__ZN15b2ContactSolver29InitializeVelocityConstraintsEv,__ZN15b2ContactSolver9WarmStartEv,b2,__ZN7b2Timer5ResetEv,__ZN15b2ContactSolver24SolveVelocityConstraintsEv
,__ZN15b2ContactSolver13StoreImpulsesEv,b2,b2,b2,b2,b2,b2,b2,__ZN6b2Body20SynchronizeTransformEv,b2,b2,b2,b2,b2,__ZN16b2StackAllocatorC2Ev,__ZN16b2ContactManagerC2Ev,b2,b2,b2,__ZN8b2Island5ClearEv,b2,b2,b2,b2,b2,b2,__ZN7b2TimerC2Ev,__ZN6b2Body19SynchronizeFixturesEv,b2,__ZN16b2ContactManager15FindNewContactsEv
,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10b2TOIInputC2Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,_cleanup526,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZN17b2ContactListener12BeginContactEP9b2Contact,__ZN17b2ContactListener10EndContactEP9b2Contact,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZN7b2WorldC2ERK6b2Vec2,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2EPKc,__ZN6SpriteC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE9push_backEOS1_,b3,b3,b3,b3,b3,__ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE9push_backERKS2_,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNSt3__117__compressed_pairIPP6b2BodyNS_9allocatorIS2_EEEC2ES3_,__ZNSt3__117__compressed_pairIP6SpriteNS_9allocatorIS1_EEEC2ES2_,__ZNSt12length_errorC2EPKc,b3,b3,b3,__ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b3,b3,b3,__ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE7destroyIS2_EEvRS3_PT_,b3,__ZNSt3__16vectorIP6b2BodyNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b3,b3,__ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE7destroyIS3_EEvRS4_PT_,b3,b3,b3,__ZN16b2StackAllocator4FreeEPv,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN6b2Vec2pLERKS_,b3,b3,__ZN8b2Island6ReportEPK27b2ContactVelocityConstraint,b3,b3,__ZN6b2Body8SetAwakeEb,b3,b3,b3,b3,b3,b3,b3,__ZN8b2Island3AddEP6b2Body,b3,b3,__ZN8b2Island3AddEP9b2Contact,__ZN8b2Island3AddEP7b2Joint,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__Z14b2TimeOfImpactP11b2TOIOutputPK10b2TOIInput,b3,__ZN9b2Contact6UpdateEP17b2ContactListener,__ZN9b2Contact10SetEnabledEb,b3,b3,b3,b3,b3,b3,__ZN15b2CircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN25b2PolygonAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN16b2PolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN22b2EdgeAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN23b2EdgeAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator
,b3,__ZN23b2ChainAndCircleContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN24b2ChainAndPolygonContact7DestroyEP9b2ContactP16b2BlockAllocator,b3,__ZN15b2GrowableStackIiLi256EE4PushERKi,b3,b3,b3,b3,b3,b3,b3,b3,b3,_abort_message,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__118__libcpp_refstringC2EPKc,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZNK11b2EdgeShape13GetChildCountEv,b4,b4,b4,b4,b4,b4,b4,__ZNK13b2CircleShape13GetChildCountEv,b4,b4,b4,b4,b4,b4,b4,__ZNK14b2PolygonShape13GetChildCountEv,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4,b4,__ZNKSt11logic_error4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,___stdio_close,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__114__split_bufferI6SpriteRNS_9allocatorIS1_EEE8capacityEv,b4,b4,b4,b4,b4,__ZNKSt3__114__split_bufferIP6b2BodyRNS_9allocatorIS2_EEE8capacityEv,b4,b4,__Z7b2Alloci,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN15b2ContactSolver24SolvePositionConstraintsEv,b4,b4,__ZNK6b2Body7GetTypeEv,b4,b4,b4,b4,b4,b4,__ZNK6b2Body7IsAwakeEv,__ZNK6b2Body8IsActiveEv,b4,b4,__ZNK9b2Contact9IsEnabledEv,__ZNK9b2Contact10IsTouchingEv,b4,b4,b4,b4,b4,__ZN6b2Body7GetNextEv,b4
,__ZN9b2Contact11GetFixtureAEv,__ZN9b2Contact11GetFixtureBEv,__ZNK9b2Fixture8IsSensorEv,__ZN9b2Fixture7GetBodyEv,__ZNK6b2Body8IsBulletEv,b4,__ZNK9b2Contact14GetChildIndexAEv,__ZNK9b2Contact14GetChildIndexBEv,b4,__ZN9b2Fixture8GetShapeEv,b4,b4,b4,b4,b4,b4,__ZNK9b2Fixture7GetTypeEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZN15b2GrowableStackIiLi256EE8GetCountEv,__ZN15b2GrowableStackIiLi256EE3PopEv,b4,__ZNK10b2TreeNode6IsLeafEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viddid = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN14b2PolygonShape8SetAsBoxEffRK6b2Vec2f,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK11b2EdgeShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b6,b6,b6,b6,b6,b6,b6,__ZNK13b2CircleShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b6,b6,b6,b6,b6,b6,b6,__ZNK14b2PolygonShape7RayCastEP15b2RayCastOutputRK14b2RayCastInputRK11b2Transformi,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN15b2CircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,__ZN25b2PolygonAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,__ZN16b2PolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,__ZN22b2EdgeAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,__ZN23b2EdgeAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6
,__ZN23b2ChainAndCircleContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,__ZN24b2ChainAndPolygonContact6CreateEP9b2FixtureiS1_iP16b2BlockAllocator,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vidi = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZmlfRK6b2Vec2,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_vidd = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZN6b2Vec2C2Eff,b8,b8,b8,__ZN14b2PolygonShape8SetAsBoxEff,b8,b8,b8,b8,__ZN6b2Vec23SetEff,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,__ZN10emscripten8internal7InvokerIvJffEE6invokeEPFvffEff,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN15b2ContactFilter13ShouldCollideEP9b2FixtureS1_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK11b2EdgeShape9TestPointERK11b2TransformRK6b2Vec2,b9,b9,b9,b9,b9,b9,b9,__ZNK13b2CircleShape9TestPointERK11b2TransformRK6b2Vec2,b9,b9,b9,b9,b9,b9,b9,__ZNK14b2PolygonShape9TestPointERK11b2TransformRK6b2Vec2,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,_sn_write,b9,___stdio_write,___stdio_seek,___stdout_write,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN15b2ContactSolver27SolveTOIPositionConstraintsEii,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_,b9,__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_,b9,b9,b9,b9,b9
,b9,__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_,b9,__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_,b9,b9,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN6b2Body13CreateFixtureEPK7b2Shapef,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_vdd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,__Z11mouse_hoverff,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_di = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK7b2Timer15GetMillisecondsEv,b13,b13
,b13,b13,b13,__ZNK6b2Vec26LengthEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_dd = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,__Z5b2AbsIfET_S0_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,__ZN13MouseCallback13ReportFixtureEP9b2Fixture,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZNK11b2EdgeShape5CloneEP16b2BlockAllocator,b15,b15,b15,b15,b15,b15,b15,__ZNK13b2CircleShape5CloneEP16b2BlockAllocator,b15,b15,b15,b15,b15,b15,b15,__ZNK14b2PolygonShape5CloneEP16b2BlockAllocator,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__16vectorI6SpriteNS_9allocatorIS1_EEEixEj,__ZN7b2World10CreateBodyEPK9b2BodyDef,b15,b15,b15,__ZN6b2Body13CreateFixtureEPK12b2FixtureDef,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__116allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_,b15,b15,b15,b15,__ZNSt3__13minIjEERKT_S3_S3_,__ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE10__max_sizeENS_17integral_constantIbLb1EEERKS3_,b15,b15,b15,b15,__ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE10__max_sizeENS_17integral_constantIbLb1EEERKS4_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN16b2StackAllocator8AllocateEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,__Z14b2PairLessThanRK6b2PairS1_,b15,b15,b15,__Z13b2TestOverlapRK6b2AABBS1_,b15,__ZN19b2WorldQueryWrapper13QueryCallbackEi,__ZN12b2BroadPhase13QueryCallbackEi,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_dii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,__Z5b2DotRK6b2Vec2S1_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_i = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,_rand,b17,b17,b17,b17,b17,b17,b17,b17,b17,__Z9initStartv,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,___cxa_get_globals_fast,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj,b18,b18,b18
,b18,b18,b18,b18,b18,__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b18,b18,b18,__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b18,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_viii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,__ZN17b2ContactListener8PreSolveEP9b2ContactPK10b2Manifold,__ZN17b2ContactListener9PostSolveEP9b2ContactPK16b2ContactImpulse,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNK7b2World9QueryAABBEP15b2QueryCallbackRK6b2AABB,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__116allocator_traitsINS_9allocatorI6SpriteEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_,b19,b19,b19,b19,b19,__ZNSt3__116allocator_traitsINS_9allocatorIP6b2BodyEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN15b2DistanceProxy3SetEPK7b2Shapei,b19,b19,b19,b19,b19,b19,__ZNK12b2ChainShape12GetChildEdgeEP11b2EdgeShapei,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj,b19
,__ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_,b19,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_,b19,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj,b19,b19,b19,b19,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_v = [b20,b20,b20,___cxa_pure_virtual__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,__ZL25default_terminate_handlerv,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__Z12cpp_progressv
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b20,___cxa_end_catch__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_viid = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNK11b2EdgeShape11ComputeMassEP10b2MassDataf,b21,b21,b21,b21,b21,b21,b21,__ZNK13b2CircleShape11ComputeMassEP10b2MassDataf,b21,b21,b21,b21,b21,b21,b21,__ZNK14b2PolygonShape11ComputeMassEP10b2MassDataf,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_ddd = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__Z5b2MinIfET_S0_S0_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viiii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN23b2ChainAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,__ZN24b2ChainAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,__ZN15b2CircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,__ZN22b2EdgeAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,__ZN23b2EdgeAndPolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,__ZN25b2PolygonAndCircleContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23
,b23,__ZN16b2PolygonContact8EvaluateEP10b2ManifoldRK11b2TransformS4_,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK11b2EdgeShape11ComputeAABBEP6b2AABBRK11b2Transformi,b23,b23,b23,b23,b23,b23,b23,__ZNK13b2CircleShape11ComputeAABBEP6b2AABBRK11b2Transformi,b23,b23,b23,b23,b23,b23,b23,__ZNK14b2PolygonShape11ComputeAABBEP6b2AABBRK11b2Transformi,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23
,b23,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,___assert_fail__wrapper,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN8b2Island8SolveTOIERK10b2TimeStepii,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj,b23,b23,b23,b23,b23,b23,b23];

  return { _malloc: _malloc, ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, ___getTypeName: ___getTypeName, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_js_main_cpp: __GLOBAL__sub_I_js_main_cpp, __GLOBAL__sub_I_unity_cpp: __GLOBAL__sub_I_unity_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setDynamicTop: setDynamicTop, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viddid: dynCall_viddid, dynCall_iiiiii: dynCall_iiiiii, dynCall_vidi: dynCall_vidi, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_vdd: dynCall_vdd, dynCall_di: dynCall_di, dynCall_dd: dynCall_dd, dynCall_iii: dynCall_iii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_ddd: dynCall_ddd, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real___GLOBAL__sub_I_js_main_cpp = asm["__GLOBAL__sub_I_js_main_cpp"]; asm["__GLOBAL__sub_I_js_main_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_js_main_cpp.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_unity_cpp = asm["__GLOBAL__sub_I_unity_cpp"]; asm["__GLOBAL__sub_I_unity_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_unity_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var __GLOBAL__sub_I_js_main_cpp = Module["__GLOBAL__sub_I_js_main_cpp"] = asm["__GLOBAL__sub_I_js_main_cpp"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__sub_I_unity_cpp = Module["__GLOBAL__sub_I_unity_cpp"] = asm["__GLOBAL__sub_I_unity_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddid = Module["dynCall_viddid"] = asm["dynCall_viddid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_ddd = Module["dynCall_ddd"] = asm["dynCall_ddd"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setDynamicTop = asm['setDynamicTop'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}







